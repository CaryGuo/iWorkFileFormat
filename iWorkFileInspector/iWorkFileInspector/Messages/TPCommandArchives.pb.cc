// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TPCommandArchives.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TPCommandArchives.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace TP {

namespace {

const ::google::protobuf::Descriptor* InsertDrawablesCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InsertDrawablesCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* PasteDrawablesCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PasteDrawablesCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* PasteDrawablesCommandArchive_DrawableAndPage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PasteDrawablesCommandArchive_DrawableAndPage_reflection_ = NULL;
const ::google::protobuf::Descriptor* PasteAnchoredDrawablesCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PasteAnchoredDrawablesCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveDrawablesPageIndexCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveDrawablesPageIndexCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveDrawablesPageIndexCommandArchive_Drawable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveDrawablesPageIndexCommandArchive_Drawable_reflection_ = NULL;
const ::google::protobuf::Descriptor* InsertSectionBreakCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InsertSectionBreakCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteSectionCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteSectionCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplaceSectionCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplaceSectionCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeSectionPropertyCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeSectionPropertyCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* SwapDrawableZOrderCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SwapDrawableZOrderCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* SwapDrawableZOrderCommandArchive_SwapPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SwapDrawableZOrderCommandArchive_SwapPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveDrawablesCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveDrawablesCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveDrawablesCommandArchive_DrawableInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveDrawablesCommandArchive_DrawableInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NudgeDrawablesCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NudgeDrawablesCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeHeaderFooterVisibilityCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeHeaderFooterVisibilityCommandArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ChangeHeaderFooterVisibilityCommandArchive_TPHeaderFooterType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ChangeHeaderFooterVisibilityCommandArchive_TPHeaderFragmentIndex_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ChangeSectionMarginsCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeSectionMarginsCommandArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ChangeSectionMarginsCommandArchive_SectionMargin_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ChangeDocumentPrinterOptionsCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeDocumentPrinterOptionsCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* InsertMasterDrawablesCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InsertMasterDrawablesCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveMasterDrawableZOrderCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveMasterDrawableZOrderCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveMasterDrawablesCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveMasterDrawablesCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveMasterDrawablesCommandArchive_MasterDrawable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveMasterDrawablesCommandArchive_MasterDrawable_reflection_ = NULL;
const ::google::protobuf::Descriptor* PasteMasterDrawablesCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PasteMasterDrawablesCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveDrawablesAttachedCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveDrawablesAttachedCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveDrawablesAttachedCommandArchive_FloatingUndo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveDrawablesAttachedCommandArchive_FloatingUndo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveDrawablesFloatingCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveDrawablesFloatingCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveDrawablesFloatingCommandArchive_AttachedUndo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveDrawablesFloatingCommandArchive_AttachedUndo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveAnchoredDrawableCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveAnchoredDrawableCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeFootnoteFormatCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeFootnoteFormatCommandArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ChangeFootnoteFormatCommandArchive_FootnoteFormat_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ChangeFootnoteKindCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeFootnoteKindCommandArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ChangeFootnoteKindCommandArchive_FootnoteKind_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ChangeFootnoteNumberingCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeFootnoteNumberingCommandArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ChangeFootnoteNumberingCommandArchive_FootnoteNumbering_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ChangeFootnoteSpacingCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeFootnoteSpacingCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveInlineDrawableAnchoredCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveInlineDrawableAnchoredCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveAnchoredDrawableInlineCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveAnchoredDrawableInlineCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* InsertFootnoteCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InsertFootnoteCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToggleBodyLayoutDirectionCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToggleBodyLayoutDirectionCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeCTVisibilityCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeCTVisibilityCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrackChangesCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrackChangesCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* DocumentHyphenationCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DocumentHyphenationCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* DocumentLigaturesCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DocumentLigaturesCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* DocumentHasBodyCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DocumentHasBodyCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* PauseChangeTrackingCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PauseChangeTrackingCommandArchive_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TPCommandArchives_2eproto() {
  protobuf_AddDesc_TPCommandArchives_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TPCommandArchives.proto");
  GOOGLE_CHECK(file != NULL);
  InsertDrawablesCommandArchive_descriptor_ = file->message_type(0);
  static const int InsertDrawablesCommandArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertDrawablesCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertDrawablesCommandArchive, page_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertDrawablesCommandArchive, z_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertDrawablesCommandArchive, drawables_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertDrawablesCommandArchive, forpaste_),
  };
  InsertDrawablesCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InsertDrawablesCommandArchive_descriptor_,
      InsertDrawablesCommandArchive::default_instance_,
      InsertDrawablesCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertDrawablesCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertDrawablesCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InsertDrawablesCommandArchive));
  PasteDrawablesCommandArchive_descriptor_ = file->message_type(1);
  static const int PasteDrawablesCommandArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasteDrawablesCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasteDrawablesCommandArchive, drawables_),
  };
  PasteDrawablesCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PasteDrawablesCommandArchive_descriptor_,
      PasteDrawablesCommandArchive::default_instance_,
      PasteDrawablesCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasteDrawablesCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasteDrawablesCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PasteDrawablesCommandArchive));
  PasteDrawablesCommandArchive_DrawableAndPage_descriptor_ = PasteDrawablesCommandArchive_descriptor_->nested_type(0);
  static const int PasteDrawablesCommandArchive_DrawableAndPage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasteDrawablesCommandArchive_DrawableAndPage, drawable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasteDrawablesCommandArchive_DrawableAndPage, page_index_),
  };
  PasteDrawablesCommandArchive_DrawableAndPage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PasteDrawablesCommandArchive_DrawableAndPage_descriptor_,
      PasteDrawablesCommandArchive_DrawableAndPage::default_instance_,
      PasteDrawablesCommandArchive_DrawableAndPage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasteDrawablesCommandArchive_DrawableAndPage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasteDrawablesCommandArchive_DrawableAndPage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PasteDrawablesCommandArchive_DrawableAndPage));
  PasteAnchoredDrawablesCommandArchive_descriptor_ = file->message_type(2);
  static const int PasteAnchoredDrawablesCommandArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasteAnchoredDrawablesCommandArchive, deprecated_super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasteAnchoredDrawablesCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasteAnchoredDrawablesCommandArchive, select_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasteAnchoredDrawablesCommandArchive, deprecated_undo_selection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasteAnchoredDrawablesCommandArchive, canvas_selection_),
  };
  PasteAnchoredDrawablesCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PasteAnchoredDrawablesCommandArchive_descriptor_,
      PasteAnchoredDrawablesCommandArchive::default_instance_,
      PasteAnchoredDrawablesCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasteAnchoredDrawablesCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasteAnchoredDrawablesCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PasteAnchoredDrawablesCommandArchive));
  MoveDrawablesPageIndexCommandArchive_descriptor_ = file->message_type(3);
  static const int MoveDrawablesPageIndexCommandArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDrawablesPageIndexCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDrawablesPageIndexCommandArchive, page_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDrawablesPageIndexCommandArchive, drawables_),
  };
  MoveDrawablesPageIndexCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoveDrawablesPageIndexCommandArchive_descriptor_,
      MoveDrawablesPageIndexCommandArchive::default_instance_,
      MoveDrawablesPageIndexCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDrawablesPageIndexCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDrawablesPageIndexCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoveDrawablesPageIndexCommandArchive));
  MoveDrawablesPageIndexCommandArchive_Drawable_descriptor_ = MoveDrawablesPageIndexCommandArchive_descriptor_->nested_type(0);
  static const int MoveDrawablesPageIndexCommandArchive_Drawable_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDrawablesPageIndexCommandArchive_Drawable, drawable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDrawablesPageIndexCommandArchive_Drawable, z_order_),
  };
  MoveDrawablesPageIndexCommandArchive_Drawable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoveDrawablesPageIndexCommandArchive_Drawable_descriptor_,
      MoveDrawablesPageIndexCommandArchive_Drawable::default_instance_,
      MoveDrawablesPageIndexCommandArchive_Drawable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDrawablesPageIndexCommandArchive_Drawable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDrawablesPageIndexCommandArchive_Drawable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoveDrawablesPageIndexCommandArchive_Drawable));
  InsertSectionBreakCommandArchive_descriptor_ = file->message_type(4);
  static const int InsertSectionBreakCommandArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertSectionBreakCommandArchive, super_),
  };
  InsertSectionBreakCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InsertSectionBreakCommandArchive_descriptor_,
      InsertSectionBreakCommandArchive::default_instance_,
      InsertSectionBreakCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertSectionBreakCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertSectionBreakCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InsertSectionBreakCommandArchive));
  DeleteSectionCommandArchive_descriptor_ = file->message_type(5);
  static const int DeleteSectionCommandArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteSectionCommandArchive, super_),
  };
  DeleteSectionCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteSectionCommandArchive_descriptor_,
      DeleteSectionCommandArchive::default_instance_,
      DeleteSectionCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteSectionCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteSectionCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteSectionCommandArchive));
  ReplaceSectionCommandArchive_descriptor_ = file->message_type(6);
  static const int ReplaceSectionCommandArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplaceSectionCommandArchive, super_),
  };
  ReplaceSectionCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplaceSectionCommandArchive_descriptor_,
      ReplaceSectionCommandArchive::default_instance_,
      ReplaceSectionCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplaceSectionCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplaceSectionCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplaceSectionCommandArchive));
  ChangeSectionPropertyCommandArchive_descriptor_ = file->message_type(7);
  static const int ChangeSectionPropertyCommandArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSectionPropertyCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSectionPropertyCommandArchive, section_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSectionPropertyCommandArchive, section_property_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSectionPropertyCommandArchive, section_value_bool_),
  };
  ChangeSectionPropertyCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeSectionPropertyCommandArchive_descriptor_,
      ChangeSectionPropertyCommandArchive::default_instance_,
      ChangeSectionPropertyCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSectionPropertyCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSectionPropertyCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeSectionPropertyCommandArchive));
  SwapDrawableZOrderCommandArchive_descriptor_ = file->message_type(8);
  static const int SwapDrawableZOrderCommandArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapDrawableZOrderCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapDrawableZOrderCommandArchive, swap_pairs_),
  };
  SwapDrawableZOrderCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SwapDrawableZOrderCommandArchive_descriptor_,
      SwapDrawableZOrderCommandArchive::default_instance_,
      SwapDrawableZOrderCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapDrawableZOrderCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapDrawableZOrderCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SwapDrawableZOrderCommandArchive));
  SwapDrawableZOrderCommandArchive_SwapPair_descriptor_ = SwapDrawableZOrderCommandArchive_descriptor_->nested_type(0);
  static const int SwapDrawableZOrderCommandArchive_SwapPair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapDrawableZOrderCommandArchive_SwapPair, z_order_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapDrawableZOrderCommandArchive_SwapPair, z_order_2_),
  };
  SwapDrawableZOrderCommandArchive_SwapPair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SwapDrawableZOrderCommandArchive_SwapPair_descriptor_,
      SwapDrawableZOrderCommandArchive_SwapPair::default_instance_,
      SwapDrawableZOrderCommandArchive_SwapPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapDrawableZOrderCommandArchive_SwapPair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapDrawableZOrderCommandArchive_SwapPair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SwapDrawableZOrderCommandArchive_SwapPair));
  RemoveDrawablesCommandArchive_descriptor_ = file->message_type(9);
  static const int RemoveDrawablesCommandArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveDrawablesCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveDrawablesCommandArchive, drawables_),
  };
  RemoveDrawablesCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveDrawablesCommandArchive_descriptor_,
      RemoveDrawablesCommandArchive::default_instance_,
      RemoveDrawablesCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveDrawablesCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveDrawablesCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveDrawablesCommandArchive));
  RemoveDrawablesCommandArchive_DrawableInfo_descriptor_ = RemoveDrawablesCommandArchive_descriptor_->nested_type(0);
  static const int RemoveDrawablesCommandArchive_DrawableInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveDrawablesCommandArchive_DrawableInfo, page_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveDrawablesCommandArchive_DrawableInfo, z_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveDrawablesCommandArchive_DrawableInfo, drawable_object_),
  };
  RemoveDrawablesCommandArchive_DrawableInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveDrawablesCommandArchive_DrawableInfo_descriptor_,
      RemoveDrawablesCommandArchive_DrawableInfo::default_instance_,
      RemoveDrawablesCommandArchive_DrawableInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveDrawablesCommandArchive_DrawableInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveDrawablesCommandArchive_DrawableInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveDrawablesCommandArchive_DrawableInfo));
  NudgeDrawablesCommandArchive_descriptor_ = file->message_type(10);
  static const int NudgeDrawablesCommandArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NudgeDrawablesCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NudgeDrawablesCommandArchive, child_commands_),
  };
  NudgeDrawablesCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NudgeDrawablesCommandArchive_descriptor_,
      NudgeDrawablesCommandArchive::default_instance_,
      NudgeDrawablesCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NudgeDrawablesCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NudgeDrawablesCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NudgeDrawablesCommandArchive));
  ChangeHeaderFooterVisibilityCommandArchive_descriptor_ = file->message_type(11);
  static const int ChangeHeaderFooterVisibilityCommandArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeHeaderFooterVisibilityCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeHeaderFooterVisibilityCommandArchive, visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeHeaderFooterVisibilityCommandArchive, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeHeaderFooterVisibilityCommandArchive, index_to_select_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeHeaderFooterVisibilityCommandArchive, storages_),
  };
  ChangeHeaderFooterVisibilityCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeHeaderFooterVisibilityCommandArchive_descriptor_,
      ChangeHeaderFooterVisibilityCommandArchive::default_instance_,
      ChangeHeaderFooterVisibilityCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeHeaderFooterVisibilityCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeHeaderFooterVisibilityCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeHeaderFooterVisibilityCommandArchive));
  ChangeHeaderFooterVisibilityCommandArchive_TPHeaderFooterType_descriptor_ = ChangeHeaderFooterVisibilityCommandArchive_descriptor_->enum_type(0);
  ChangeHeaderFooterVisibilityCommandArchive_TPHeaderFragmentIndex_descriptor_ = ChangeHeaderFooterVisibilityCommandArchive_descriptor_->enum_type(1);
  ChangeSectionMarginsCommandArchive_descriptor_ = file->message_type(12);
  static const int ChangeSectionMarginsCommandArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSectionMarginsCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSectionMarginsCommandArchive, section_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSectionMarginsCommandArchive, margin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSectionMarginsCommandArchive, margin_value_),
  };
  ChangeSectionMarginsCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeSectionMarginsCommandArchive_descriptor_,
      ChangeSectionMarginsCommandArchive::default_instance_,
      ChangeSectionMarginsCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSectionMarginsCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSectionMarginsCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeSectionMarginsCommandArchive));
  ChangeSectionMarginsCommandArchive_SectionMargin_descriptor_ = ChangeSectionMarginsCommandArchive_descriptor_->enum_type(0);
  ChangeDocumentPrinterOptionsCommandArchive_descriptor_ = file->message_type(13);
  static const int ChangeDocumentPrinterOptionsCommandArchive_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeDocumentPrinterOptionsCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeDocumentPrinterOptionsCommandArchive, obsolete_section_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeDocumentPrinterOptionsCommandArchive, paper_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeDocumentPrinterOptionsCommandArchive, paper_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeDocumentPrinterOptionsCommandArchive, page_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeDocumentPrinterOptionsCommandArchive, orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeDocumentPrinterOptionsCommandArchive, printer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeDocumentPrinterOptionsCommandArchive, paper_id_),
  };
  ChangeDocumentPrinterOptionsCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeDocumentPrinterOptionsCommandArchive_descriptor_,
      ChangeDocumentPrinterOptionsCommandArchive::default_instance_,
      ChangeDocumentPrinterOptionsCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeDocumentPrinterOptionsCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeDocumentPrinterOptionsCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeDocumentPrinterOptionsCommandArchive));
  InsertMasterDrawablesCommandArchive_descriptor_ = file->message_type(14);
  static const int InsertMasterDrawablesCommandArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertMasterDrawablesCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertMasterDrawablesCommandArchive, obsolete_section_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertMasterDrawablesCommandArchive, master_drawables_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertMasterDrawablesCommandArchive, drawable_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertMasterDrawablesCommandArchive, master_drawable_provider_),
  };
  InsertMasterDrawablesCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InsertMasterDrawablesCommandArchive_descriptor_,
      InsertMasterDrawablesCommandArchive::default_instance_,
      InsertMasterDrawablesCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertMasterDrawablesCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertMasterDrawablesCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InsertMasterDrawablesCommandArchive));
  MoveMasterDrawableZOrderCommandArchive_descriptor_ = file->message_type(15);
  static const int MoveMasterDrawableZOrderCommandArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveMasterDrawableZOrderCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveMasterDrawableZOrderCommandArchive, obsolete_section_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveMasterDrawableZOrderCommandArchive, master_drawables_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveMasterDrawableZOrderCommandArchive, indexes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveMasterDrawableZOrderCommandArchive, master_drawable_provider_),
  };
  MoveMasterDrawableZOrderCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoveMasterDrawableZOrderCommandArchive_descriptor_,
      MoveMasterDrawableZOrderCommandArchive::default_instance_,
      MoveMasterDrawableZOrderCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveMasterDrawableZOrderCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveMasterDrawableZOrderCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoveMasterDrawableZOrderCommandArchive));
  RemoveMasterDrawablesCommandArchive_descriptor_ = file->message_type(16);
  static const int RemoveMasterDrawablesCommandArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveMasterDrawablesCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveMasterDrawablesCommandArchive, obsolete_section_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveMasterDrawablesCommandArchive, master_drawables_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveMasterDrawablesCommandArchive, master_drawable_provider_),
  };
  RemoveMasterDrawablesCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveMasterDrawablesCommandArchive_descriptor_,
      RemoveMasterDrawablesCommandArchive::default_instance_,
      RemoveMasterDrawablesCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveMasterDrawablesCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveMasterDrawablesCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveMasterDrawablesCommandArchive));
  RemoveMasterDrawablesCommandArchive_MasterDrawable_descriptor_ = RemoveMasterDrawablesCommandArchive_descriptor_->nested_type(0);
  static const int RemoveMasterDrawablesCommandArchive_MasterDrawable_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveMasterDrawablesCommandArchive_MasterDrawable, drawable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveMasterDrawablesCommandArchive_MasterDrawable, drawable_index_),
  };
  RemoveMasterDrawablesCommandArchive_MasterDrawable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveMasterDrawablesCommandArchive_MasterDrawable_descriptor_,
      RemoveMasterDrawablesCommandArchive_MasterDrawable::default_instance_,
      RemoveMasterDrawablesCommandArchive_MasterDrawable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveMasterDrawablesCommandArchive_MasterDrawable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveMasterDrawablesCommandArchive_MasterDrawable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveMasterDrawablesCommandArchive_MasterDrawable));
  PasteMasterDrawablesCommandArchive_descriptor_ = file->message_type(17);
  static const int PasteMasterDrawablesCommandArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasteMasterDrawablesCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasteMasterDrawablesCommandArchive, section_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasteMasterDrawablesCommandArchive, master_drawables_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasteMasterDrawablesCommandArchive, drawable_index_),
  };
  PasteMasterDrawablesCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PasteMasterDrawablesCommandArchive_descriptor_,
      PasteMasterDrawablesCommandArchive::default_instance_,
      PasteMasterDrawablesCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasteMasterDrawablesCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasteMasterDrawablesCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PasteMasterDrawablesCommandArchive));
  MoveDrawablesAttachedCommandArchive_descriptor_ = file->message_type(18);
  static const int MoveDrawablesAttachedCommandArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDrawablesAttachedCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDrawablesAttachedCommandArchive, undo_transaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDrawablesAttachedCommandArchive, floating_undo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDrawablesAttachedCommandArchive, select_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDrawablesAttachedCommandArchive, make_inline_),
  };
  MoveDrawablesAttachedCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoveDrawablesAttachedCommandArchive_descriptor_,
      MoveDrawablesAttachedCommandArchive::default_instance_,
      MoveDrawablesAttachedCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDrawablesAttachedCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDrawablesAttachedCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoveDrawablesAttachedCommandArchive));
  MoveDrawablesAttachedCommandArchive_FloatingUndo_descriptor_ = MoveDrawablesAttachedCommandArchive_descriptor_->nested_type(0);
  static const int MoveDrawablesAttachedCommandArchive_FloatingUndo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDrawablesAttachedCommandArchive_FloatingUndo, drawable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDrawablesAttachedCommandArchive_FloatingUndo, geometry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDrawablesAttachedCommandArchive_FloatingUndo, attachment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDrawablesAttachedCommandArchive_FloatingUndo, wrap_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDrawablesAttachedCommandArchive_FloatingUndo, page_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDrawablesAttachedCommandArchive_FloatingUndo, z_order_),
  };
  MoveDrawablesAttachedCommandArchive_FloatingUndo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoveDrawablesAttachedCommandArchive_FloatingUndo_descriptor_,
      MoveDrawablesAttachedCommandArchive_FloatingUndo::default_instance_,
      MoveDrawablesAttachedCommandArchive_FloatingUndo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDrawablesAttachedCommandArchive_FloatingUndo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDrawablesAttachedCommandArchive_FloatingUndo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoveDrawablesAttachedCommandArchive_FloatingUndo));
  MoveDrawablesFloatingCommandArchive_descriptor_ = file->message_type(19);
  static const int MoveDrawablesFloatingCommandArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDrawablesFloatingCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDrawablesFloatingCommandArchive, deprecated_undo_transaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDrawablesFloatingCommandArchive, attached_undo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDrawablesFloatingCommandArchive, select_),
  };
  MoveDrawablesFloatingCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoveDrawablesFloatingCommandArchive_descriptor_,
      MoveDrawablesFloatingCommandArchive::default_instance_,
      MoveDrawablesFloatingCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDrawablesFloatingCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDrawablesFloatingCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoveDrawablesFloatingCommandArchive));
  MoveDrawablesFloatingCommandArchive_AttachedUndo_descriptor_ = MoveDrawablesFloatingCommandArchive_descriptor_->nested_type(0);
  static const int MoveDrawablesFloatingCommandArchive_AttachedUndo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDrawablesFloatingCommandArchive_AttachedUndo, drawable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDrawablesFloatingCommandArchive_AttachedUndo, geometry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDrawablesFloatingCommandArchive_AttachedUndo, attachment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDrawablesFloatingCommandArchive_AttachedUndo, page_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDrawablesFloatingCommandArchive_AttachedUndo, is_html_wrap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDrawablesFloatingCommandArchive_AttachedUndo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDrawablesFloatingCommandArchive_AttachedUndo, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDrawablesFloatingCommandArchive_AttachedUndo, fit_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDrawablesFloatingCommandArchive_AttachedUndo, margin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDrawablesFloatingCommandArchive_AttachedUndo, alpha_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDrawablesFloatingCommandArchive_AttachedUndo, storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDrawablesFloatingCommandArchive_AttachedUndo, undo_transaction_),
  };
  MoveDrawablesFloatingCommandArchive_AttachedUndo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoveDrawablesFloatingCommandArchive_AttachedUndo_descriptor_,
      MoveDrawablesFloatingCommandArchive_AttachedUndo::default_instance_,
      MoveDrawablesFloatingCommandArchive_AttachedUndo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDrawablesFloatingCommandArchive_AttachedUndo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDrawablesFloatingCommandArchive_AttachedUndo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoveDrawablesFloatingCommandArchive_AttachedUndo));
  RemoveAnchoredDrawableCommandArchive_descriptor_ = file->message_type(20);
  static const int RemoveAnchoredDrawableCommandArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveAnchoredDrawableCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveAnchoredDrawableCommandArchive, char_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveAnchoredDrawableCommandArchive, z_order_),
  };
  RemoveAnchoredDrawableCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveAnchoredDrawableCommandArchive_descriptor_,
      RemoveAnchoredDrawableCommandArchive::default_instance_,
      RemoveAnchoredDrawableCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveAnchoredDrawableCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveAnchoredDrawableCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveAnchoredDrawableCommandArchive));
  ChangeFootnoteFormatCommandArchive_descriptor_ = file->message_type(21);
  static const int ChangeFootnoteFormatCommandArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFootnoteFormatCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFootnoteFormatCommandArchive, format_),
  };
  ChangeFootnoteFormatCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeFootnoteFormatCommandArchive_descriptor_,
      ChangeFootnoteFormatCommandArchive::default_instance_,
      ChangeFootnoteFormatCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFootnoteFormatCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFootnoteFormatCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeFootnoteFormatCommandArchive));
  ChangeFootnoteFormatCommandArchive_FootnoteFormat_descriptor_ = ChangeFootnoteFormatCommandArchive_descriptor_->enum_type(0);
  ChangeFootnoteKindCommandArchive_descriptor_ = file->message_type(22);
  static const int ChangeFootnoteKindCommandArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFootnoteKindCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFootnoteKindCommandArchive, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFootnoteKindCommandArchive, undo_transaction_),
  };
  ChangeFootnoteKindCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeFootnoteKindCommandArchive_descriptor_,
      ChangeFootnoteKindCommandArchive::default_instance_,
      ChangeFootnoteKindCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFootnoteKindCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFootnoteKindCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeFootnoteKindCommandArchive));
  ChangeFootnoteKindCommandArchive_FootnoteKind_descriptor_ = ChangeFootnoteKindCommandArchive_descriptor_->enum_type(0);
  ChangeFootnoteNumberingCommandArchive_descriptor_ = file->message_type(23);
  static const int ChangeFootnoteNumberingCommandArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFootnoteNumberingCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFootnoteNumberingCommandArchive, numbering_),
  };
  ChangeFootnoteNumberingCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeFootnoteNumberingCommandArchive_descriptor_,
      ChangeFootnoteNumberingCommandArchive::default_instance_,
      ChangeFootnoteNumberingCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFootnoteNumberingCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFootnoteNumberingCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeFootnoteNumberingCommandArchive));
  ChangeFootnoteNumberingCommandArchive_FootnoteNumbering_descriptor_ = ChangeFootnoteNumberingCommandArchive_descriptor_->enum_type(0);
  ChangeFootnoteSpacingCommandArchive_descriptor_ = file->message_type(24);
  static const int ChangeFootnoteSpacingCommandArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFootnoteSpacingCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFootnoteSpacingCommandArchive, footnote_spacing_),
  };
  ChangeFootnoteSpacingCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeFootnoteSpacingCommandArchive_descriptor_,
      ChangeFootnoteSpacingCommandArchive::default_instance_,
      ChangeFootnoteSpacingCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFootnoteSpacingCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFootnoteSpacingCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeFootnoteSpacingCommandArchive));
  MoveInlineDrawableAnchoredCommandArchive_descriptor_ = file->message_type(25);
  static const int MoveInlineDrawableAnchoredCommandArchive_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveInlineDrawableAnchoredCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveInlineDrawableAnchoredCommandArchive, drawable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveInlineDrawableAnchoredCommandArchive, is_html_wrap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveInlineDrawableAnchoredCommandArchive, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveInlineDrawableAnchoredCommandArchive, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveInlineDrawableAnchoredCommandArchive, fit_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveInlineDrawableAnchoredCommandArchive, margin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveInlineDrawableAnchoredCommandArchive, alpha_threshold_),
  };
  MoveInlineDrawableAnchoredCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoveInlineDrawableAnchoredCommandArchive_descriptor_,
      MoveInlineDrawableAnchoredCommandArchive::default_instance_,
      MoveInlineDrawableAnchoredCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveInlineDrawableAnchoredCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveInlineDrawableAnchoredCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoveInlineDrawableAnchoredCommandArchive));
  MoveAnchoredDrawableInlineCommandArchive_descriptor_ = file->message_type(26);
  static const int MoveAnchoredDrawableInlineCommandArchive_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveAnchoredDrawableInlineCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveAnchoredDrawableInlineCommandArchive, drawable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveAnchoredDrawableInlineCommandArchive, is_html_wrap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveAnchoredDrawableInlineCommandArchive, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveAnchoredDrawableInlineCommandArchive, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveAnchoredDrawableInlineCommandArchive, fit_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveAnchoredDrawableInlineCommandArchive, margin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveAnchoredDrawableInlineCommandArchive, alpha_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveAnchoredDrawableInlineCommandArchive, z_order_),
  };
  MoveAnchoredDrawableInlineCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoveAnchoredDrawableInlineCommandArchive_descriptor_,
      MoveAnchoredDrawableInlineCommandArchive::default_instance_,
      MoveAnchoredDrawableInlineCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveAnchoredDrawableInlineCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveAnchoredDrawableInlineCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoveAnchoredDrawableInlineCommandArchive));
  InsertFootnoteCommandArchive_descriptor_ = file->message_type(27);
  static const int InsertFootnoteCommandArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertFootnoteCommandArchive, super_),
  };
  InsertFootnoteCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InsertFootnoteCommandArchive_descriptor_,
      InsertFootnoteCommandArchive::default_instance_,
      InsertFootnoteCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertFootnoteCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertFootnoteCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InsertFootnoteCommandArchive));
  ToggleBodyLayoutDirectionCommandArchive_descriptor_ = file->message_type(28);
  static const int ToggleBodyLayoutDirectionCommandArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToggleBodyLayoutDirectionCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToggleBodyLayoutDirectionCommandArchive, new_direction_is_vertical_),
  };
  ToggleBodyLayoutDirectionCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToggleBodyLayoutDirectionCommandArchive_descriptor_,
      ToggleBodyLayoutDirectionCommandArchive::default_instance_,
      ToggleBodyLayoutDirectionCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToggleBodyLayoutDirectionCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToggleBodyLayoutDirectionCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToggleBodyLayoutDirectionCommandArchive));
  ChangeCTVisibilityCommandArchive_descriptor_ = file->message_type(29);
  static const int ChangeCTVisibilityCommandArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeCTVisibilityCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeCTVisibilityCommandArchive, markup_visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeCTVisibilityCommandArchive, deletions_visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeCTVisibilityCommandArchive, selection_range_location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeCTVisibilityCommandArchive, selection_range_length_),
  };
  ChangeCTVisibilityCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeCTVisibilityCommandArchive_descriptor_,
      ChangeCTVisibilityCommandArchive::default_instance_,
      ChangeCTVisibilityCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeCTVisibilityCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeCTVisibilityCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeCTVisibilityCommandArchive));
  TrackChangesCommandArchive_descriptor_ = file->message_type(30);
  static const int TrackChangesCommandArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackChangesCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackChangesCommandArchive, track_changes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackChangesCommandArchive, change_session_history_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackChangesCommandArchive, paused_),
  };
  TrackChangesCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrackChangesCommandArchive_descriptor_,
      TrackChangesCommandArchive::default_instance_,
      TrackChangesCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackChangesCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackChangesCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrackChangesCommandArchive));
  DocumentHyphenationCommandArchive_descriptor_ = file->message_type(31);
  static const int DocumentHyphenationCommandArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentHyphenationCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentHyphenationCommandArchive, hyphenate_document_),
  };
  DocumentHyphenationCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DocumentHyphenationCommandArchive_descriptor_,
      DocumentHyphenationCommandArchive::default_instance_,
      DocumentHyphenationCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentHyphenationCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentHyphenationCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DocumentHyphenationCommandArchive));
  DocumentLigaturesCommandArchive_descriptor_ = file->message_type(32);
  static const int DocumentLigaturesCommandArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentLigaturesCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentLigaturesCommandArchive, use_ligatures_),
  };
  DocumentLigaturesCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DocumentLigaturesCommandArchive_descriptor_,
      DocumentLigaturesCommandArchive::default_instance_,
      DocumentLigaturesCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentLigaturesCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentLigaturesCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DocumentLigaturesCommandArchive));
  DocumentHasBodyCommandArchive_descriptor_ = file->message_type(33);
  static const int DocumentHasBodyCommandArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentHasBodyCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentHasBodyCommandArchive, has_body_),
  };
  DocumentHasBodyCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DocumentHasBodyCommandArchive_descriptor_,
      DocumentHasBodyCommandArchive::default_instance_,
      DocumentHasBodyCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentHasBodyCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentHasBodyCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DocumentHasBodyCommandArchive));
  PauseChangeTrackingCommandArchive_descriptor_ = file->message_type(34);
  static const int PauseChangeTrackingCommandArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PauseChangeTrackingCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PauseChangeTrackingCommandArchive, paused_),
  };
  PauseChangeTrackingCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PauseChangeTrackingCommandArchive_descriptor_,
      PauseChangeTrackingCommandArchive::default_instance_,
      PauseChangeTrackingCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PauseChangeTrackingCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PauseChangeTrackingCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PauseChangeTrackingCommandArchive));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TPCommandArchives_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InsertDrawablesCommandArchive_descriptor_, &InsertDrawablesCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PasteDrawablesCommandArchive_descriptor_, &PasteDrawablesCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PasteDrawablesCommandArchive_DrawableAndPage_descriptor_, &PasteDrawablesCommandArchive_DrawableAndPage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PasteAnchoredDrawablesCommandArchive_descriptor_, &PasteAnchoredDrawablesCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoveDrawablesPageIndexCommandArchive_descriptor_, &MoveDrawablesPageIndexCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoveDrawablesPageIndexCommandArchive_Drawable_descriptor_, &MoveDrawablesPageIndexCommandArchive_Drawable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InsertSectionBreakCommandArchive_descriptor_, &InsertSectionBreakCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteSectionCommandArchive_descriptor_, &DeleteSectionCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplaceSectionCommandArchive_descriptor_, &ReplaceSectionCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeSectionPropertyCommandArchive_descriptor_, &ChangeSectionPropertyCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SwapDrawableZOrderCommandArchive_descriptor_, &SwapDrawableZOrderCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SwapDrawableZOrderCommandArchive_SwapPair_descriptor_, &SwapDrawableZOrderCommandArchive_SwapPair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveDrawablesCommandArchive_descriptor_, &RemoveDrawablesCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveDrawablesCommandArchive_DrawableInfo_descriptor_, &RemoveDrawablesCommandArchive_DrawableInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NudgeDrawablesCommandArchive_descriptor_, &NudgeDrawablesCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeHeaderFooterVisibilityCommandArchive_descriptor_, &ChangeHeaderFooterVisibilityCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeSectionMarginsCommandArchive_descriptor_, &ChangeSectionMarginsCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeDocumentPrinterOptionsCommandArchive_descriptor_, &ChangeDocumentPrinterOptionsCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InsertMasterDrawablesCommandArchive_descriptor_, &InsertMasterDrawablesCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoveMasterDrawableZOrderCommandArchive_descriptor_, &MoveMasterDrawableZOrderCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveMasterDrawablesCommandArchive_descriptor_, &RemoveMasterDrawablesCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveMasterDrawablesCommandArchive_MasterDrawable_descriptor_, &RemoveMasterDrawablesCommandArchive_MasterDrawable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PasteMasterDrawablesCommandArchive_descriptor_, &PasteMasterDrawablesCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoveDrawablesAttachedCommandArchive_descriptor_, &MoveDrawablesAttachedCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoveDrawablesAttachedCommandArchive_FloatingUndo_descriptor_, &MoveDrawablesAttachedCommandArchive_FloatingUndo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoveDrawablesFloatingCommandArchive_descriptor_, &MoveDrawablesFloatingCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoveDrawablesFloatingCommandArchive_AttachedUndo_descriptor_, &MoveDrawablesFloatingCommandArchive_AttachedUndo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveAnchoredDrawableCommandArchive_descriptor_, &RemoveAnchoredDrawableCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeFootnoteFormatCommandArchive_descriptor_, &ChangeFootnoteFormatCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeFootnoteKindCommandArchive_descriptor_, &ChangeFootnoteKindCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeFootnoteNumberingCommandArchive_descriptor_, &ChangeFootnoteNumberingCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeFootnoteSpacingCommandArchive_descriptor_, &ChangeFootnoteSpacingCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoveInlineDrawableAnchoredCommandArchive_descriptor_, &MoveInlineDrawableAnchoredCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoveAnchoredDrawableInlineCommandArchive_descriptor_, &MoveAnchoredDrawableInlineCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InsertFootnoteCommandArchive_descriptor_, &InsertFootnoteCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToggleBodyLayoutDirectionCommandArchive_descriptor_, &ToggleBodyLayoutDirectionCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeCTVisibilityCommandArchive_descriptor_, &ChangeCTVisibilityCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrackChangesCommandArchive_descriptor_, &TrackChangesCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DocumentHyphenationCommandArchive_descriptor_, &DocumentHyphenationCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DocumentLigaturesCommandArchive_descriptor_, &DocumentLigaturesCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DocumentHasBodyCommandArchive_descriptor_, &DocumentHasBodyCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PauseChangeTrackingCommandArchive_descriptor_, &PauseChangeTrackingCommandArchive::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TPCommandArchives_2eproto() {
  delete InsertDrawablesCommandArchive::default_instance_;
  delete InsertDrawablesCommandArchive_reflection_;
  delete PasteDrawablesCommandArchive::default_instance_;
  delete PasteDrawablesCommandArchive_reflection_;
  delete PasteDrawablesCommandArchive_DrawableAndPage::default_instance_;
  delete PasteDrawablesCommandArchive_DrawableAndPage_reflection_;
  delete PasteAnchoredDrawablesCommandArchive::default_instance_;
  delete PasteAnchoredDrawablesCommandArchive_reflection_;
  delete MoveDrawablesPageIndexCommandArchive::default_instance_;
  delete MoveDrawablesPageIndexCommandArchive_reflection_;
  delete MoveDrawablesPageIndexCommandArchive_Drawable::default_instance_;
  delete MoveDrawablesPageIndexCommandArchive_Drawable_reflection_;
  delete InsertSectionBreakCommandArchive::default_instance_;
  delete InsertSectionBreakCommandArchive_reflection_;
  delete DeleteSectionCommandArchive::default_instance_;
  delete DeleteSectionCommandArchive_reflection_;
  delete ReplaceSectionCommandArchive::default_instance_;
  delete ReplaceSectionCommandArchive_reflection_;
  delete ChangeSectionPropertyCommandArchive::default_instance_;
  delete ChangeSectionPropertyCommandArchive_reflection_;
  delete SwapDrawableZOrderCommandArchive::default_instance_;
  delete SwapDrawableZOrderCommandArchive_reflection_;
  delete SwapDrawableZOrderCommandArchive_SwapPair::default_instance_;
  delete SwapDrawableZOrderCommandArchive_SwapPair_reflection_;
  delete RemoveDrawablesCommandArchive::default_instance_;
  delete RemoveDrawablesCommandArchive_reflection_;
  delete RemoveDrawablesCommandArchive_DrawableInfo::default_instance_;
  delete RemoveDrawablesCommandArchive_DrawableInfo_reflection_;
  delete NudgeDrawablesCommandArchive::default_instance_;
  delete NudgeDrawablesCommandArchive_reflection_;
  delete ChangeHeaderFooterVisibilityCommandArchive::default_instance_;
  delete ChangeHeaderFooterVisibilityCommandArchive_reflection_;
  delete ChangeSectionMarginsCommandArchive::default_instance_;
  delete ChangeSectionMarginsCommandArchive_reflection_;
  delete ChangeDocumentPrinterOptionsCommandArchive::default_instance_;
  delete ChangeDocumentPrinterOptionsCommandArchive_reflection_;
  delete InsertMasterDrawablesCommandArchive::default_instance_;
  delete InsertMasterDrawablesCommandArchive_reflection_;
  delete MoveMasterDrawableZOrderCommandArchive::default_instance_;
  delete MoveMasterDrawableZOrderCommandArchive_reflection_;
  delete RemoveMasterDrawablesCommandArchive::default_instance_;
  delete RemoveMasterDrawablesCommandArchive_reflection_;
  delete RemoveMasterDrawablesCommandArchive_MasterDrawable::default_instance_;
  delete RemoveMasterDrawablesCommandArchive_MasterDrawable_reflection_;
  delete PasteMasterDrawablesCommandArchive::default_instance_;
  delete PasteMasterDrawablesCommandArchive_reflection_;
  delete MoveDrawablesAttachedCommandArchive::default_instance_;
  delete MoveDrawablesAttachedCommandArchive_reflection_;
  delete MoveDrawablesAttachedCommandArchive_FloatingUndo::default_instance_;
  delete MoveDrawablesAttachedCommandArchive_FloatingUndo_reflection_;
  delete MoveDrawablesFloatingCommandArchive::default_instance_;
  delete MoveDrawablesFloatingCommandArchive_reflection_;
  delete MoveDrawablesFloatingCommandArchive_AttachedUndo::default_instance_;
  delete MoveDrawablesFloatingCommandArchive_AttachedUndo_reflection_;
  delete RemoveAnchoredDrawableCommandArchive::default_instance_;
  delete RemoveAnchoredDrawableCommandArchive_reflection_;
  delete ChangeFootnoteFormatCommandArchive::default_instance_;
  delete ChangeFootnoteFormatCommandArchive_reflection_;
  delete ChangeFootnoteKindCommandArchive::default_instance_;
  delete ChangeFootnoteKindCommandArchive_reflection_;
  delete ChangeFootnoteNumberingCommandArchive::default_instance_;
  delete ChangeFootnoteNumberingCommandArchive_reflection_;
  delete ChangeFootnoteSpacingCommandArchive::default_instance_;
  delete ChangeFootnoteSpacingCommandArchive_reflection_;
  delete MoveInlineDrawableAnchoredCommandArchive::default_instance_;
  delete MoveInlineDrawableAnchoredCommandArchive_reflection_;
  delete MoveAnchoredDrawableInlineCommandArchive::default_instance_;
  delete MoveAnchoredDrawableInlineCommandArchive_reflection_;
  delete InsertFootnoteCommandArchive::default_instance_;
  delete InsertFootnoteCommandArchive_reflection_;
  delete ToggleBodyLayoutDirectionCommandArchive::default_instance_;
  delete ToggleBodyLayoutDirectionCommandArchive_reflection_;
  delete ChangeCTVisibilityCommandArchive::default_instance_;
  delete ChangeCTVisibilityCommandArchive_reflection_;
  delete TrackChangesCommandArchive::default_instance_;
  delete TrackChangesCommandArchive_reflection_;
  delete DocumentHyphenationCommandArchive::default_instance_;
  delete DocumentHyphenationCommandArchive_reflection_;
  delete DocumentLigaturesCommandArchive::default_instance_;
  delete DocumentLigaturesCommandArchive_reflection_;
  delete DocumentHasBodyCommandArchive::default_instance_;
  delete DocumentHasBodyCommandArchive_reflection_;
  delete PauseChangeTrackingCommandArchive::default_instance_;
  delete PauseChangeTrackingCommandArchive_reflection_;
}

void protobuf_AddDesc_TPCommandArchives_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::TSD::protobuf_AddDesc_TSDArchives_2eproto();
  ::TSK::protobuf_AddDesc_TSKArchives_2eproto();
  ::TSP::protobuf_AddDesc_TSPMessages_2eproto();
  ::TSWP::protobuf_AddDesc_TSWPArchives_2eproto();
  ::TSS::protobuf_AddDesc_TSSArchives_2eproto();
  ::TSA::protobuf_AddDesc_TSAArchives_2eproto();
  ::TP::protobuf_AddDesc_TPArchives_2eproto();
  ::TSWP::protobuf_AddDesc_TSWPCommandArchives_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027TPCommandArchives.proto\022\002TP\032\021TSDArchiv"
    "es.proto\032\021TSKArchives.proto\032\021TSPMessages"
    ".proto\032\022TSWPArchives.proto\032\021TSSArchives."
    "proto\032\021TSAArchives.proto\032\020TPArchives.pro"
    "to\032\031TSWPCommandArchives.proto\"\235\001\n\035Insert"
    "DrawablesCommandArchive\022\"\n\005super\030\001 \002(\0132\023"
    ".TSK.CommandArchive\022\022\n\npage_index\030\002 \001(\r\022"
    "\017\n\007z_order\030\003 \001(\r\022!\n\tdrawables\030\004 \003(\0132\016.TS"
    "P.Reference\022\020\n\010forPaste\030\005 \001(\010\"\320\001\n\034PasteD"
    "rawablesCommandArchive\022\"\n\005super\030\001 \002(\0132\023."
    "TSK.CommandArchive\022C\n\tdrawables\030\002 \003(\01320."
    "TP.PasteDrawablesCommandArchive.Drawable"
    "AndPage\032G\n\017DrawableAndPage\022 \n\010drawable\030\001"
    " \001(\0132\016.TSP.Reference\022\022\n\npage_index\030\002 \001(\r"
    "\"\353\001\n$PasteAnchoredDrawablesCommandArchiv"
    "e\0222\n\020deprecated_super\030\001 \002(\0132\030.TSK.Comman"
    "dGroupArchive\022\"\n\005super\030\004 \001(\0132\023.TSK.Comma"
    "ndArchive\022\016\n\006select\030\002 \001(\010\0221\n\031deprecated_"
    "undo_selection\030\003 \001(\0132\016.TSP.Reference\022(\n\020"
    "canvas_selection\030\005 \001(\0132\016.TSP.Reference\"\343"
    "\001\n$MoveDrawablesPageIndexCommandArchive\022"
    "\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022\022\n\np"
    "age_index\030\002 \001(\r\022D\n\tdrawables\030\003 \003(\01321.TP."
    "MoveDrawablesPageIndexCommandArchive.Dra"
    "wable\032=\n\010Drawable\022 \n\010drawable\030\001 \001(\0132\016.TS"
    "P.Reference\022\017\n\007z_order\030\002 \001(\r\"K\n InsertSe"
    "ctionBreakCommandArchive\022\'\n\005super\030\001 \002(\0132"
    "\030.TSWP.TextCommandArchive\"A\n\033DeleteSecti"
    "onCommandArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Co"
    "mmandArchive\"G\n\034ReplaceSectionCommandArc"
    "hive\022\'\n\005super\030\001 \002(\0132\030.TSWP.TextCommandAr"
    "chive\"\226\001\n#ChangeSectionPropertyCommandAr"
    "chive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchiv"
    "e\022\025\n\rsection_index\030\002 \001(\r\022\030\n\020section_prop"
    "erty\030\003 \001(\t\022\032\n\022section_value_bool\030\004 \001(\010\"\273"
    "\001\n SwapDrawableZOrderCommandArchive\022\"\n\005s"
    "uper\030\001 \002(\0132\023.TSK.CommandArchive\022A\n\nswap_"
    "pairs\030\002 \003(\0132-.TP.SwapDrawableZOrderComma"
    "ndArchive.SwapPair\0320\n\010SwapPair\022\021\n\tz_orde"
    "r_1\030\001 \002(\r\022\021\n\tz_order_2\030\002 \002(\r\"\344\001\n\035RemoveD"
    "rawablesCommandArchive\022\"\n\005super\030\001 \002(\0132\023."
    "TSK.CommandArchive\022A\n\tdrawables\030\002 \003(\0132.."
    "TP.RemoveDrawablesCommandArchive.Drawabl"
    "eInfo\032\\\n\014DrawableInfo\022\022\n\npage_index\030\001 \001("
    "\r\022\017\n\007z_order\030\002 \001(\005\022\'\n\017drawable_object\030\003 "
    "\001(\0132\016.TSP.Reference\"j\n\034NudgeDrawablesCom"
    "mandArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Command"
    "Archive\022&\n\016child_commands\030\002 \003(\0132\016.TSP.Re"
    "ference\"\304\003\n*ChangeHeaderFooterVisibility"
    "CommandArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Comm"
    "andArchive\022\017\n\007visible\030\002 \001(\010\022O\n\004type\030\003 \001("
    "\0162A.TP.ChangeHeaderFooterVisibilityComma"
    "ndArchive.TPHeaderFooterType\022]\n\017index_to"
    "_select\030\004 \001(\0162D.TP.ChangeHeaderFooterVis"
    "ibilityCommandArchive.TPHeaderFragmentIn"
    "dex\022 \n\010storages\030\005 \003(\0132\016.TSP.Reference\":\n"
    "\022TPHeaderFooterType\022\021\n\rkTPHeaderType\020\000\022\021"
    "\n\rkTPFooterType\020\001\"S\n\025TPHeaderFragmentInd"
    "ex\022\021\n\rkTPHeaderLeft\020\000\022\023\n\017kTPHeaderCenter"
    "\020\001\022\022\n\016kTPHeaderRight\020\002\"\355\002\n\"ChangeSection"
    "MarginsCommandArchive\022\"\n\005super\030\001 \002(\0132\023.T"
    "SK.CommandArchive\022\037\n\007section\030\002 \001(\0132\016.TSP"
    ".Reference\022D\n\006margin\030\003 \001(\01624.TP.ChangeSe"
    "ctionMarginsCommandArchive.SectionMargin"
    "\022\024\n\014margin_value\030\004 \001(\002\"\245\001\n\rSectionMargin"
    "\022\026\n\022kSectionMarginLeft\020\000\022\027\n\023kSectionMarg"
    "inRight\020\001\022\025\n\021kSectionMarginTop\020\002\022\030\n\024kSec"
    "tionMarginBottom\020\003\022\030\n\024kSectionMarginHead"
    "er\020\004\022\030\n\024kSectionMarginFooter\020\005\"\364\001\n*Chang"
    "eDocumentPrinterOptionsCommandArchive\022\"\n"
    "\005super\030\001 \002(\0132\023.TSK.CommandArchive\022(\n\020OBS"
    "OLETE_section\030\002 \001(\0132\016.TSP.Reference\022\023\n\013p"
    "aper_width\030\003 \001(\002\022\024\n\014paper_height\030\004 \001(\002\022\022"
    "\n\npage_scale\030\005 \001(\002\022\023\n\013orientation\030\006 \001(\r\022"
    "\022\n\nprinter_id\030\007 \001(\t\022\020\n\010paper_id\030\010 \001(\t\"\347\001"
    "\n#InsertMasterDrawablesCommandArchive\022\"\n"
    "\005super\030\001 \002(\0132\023.TSK.CommandArchive\022(\n\020OBS"
    "OLETE_section\030\002 \001(\0132\016.TSP.Reference\022(\n\020m"
    "aster_drawables\030\003 \003(\0132\016.TSP.Reference\022\026\n"
    "\016drawable_index\030\004 \001(\r\0220\n\030master_drawable"
    "_provider\030\005 \001(\0132\016.TSP.Reference\"\343\001\n&Move"
    "MasterDrawableZOrderCommandArchive\022\"\n\005su"
    "per\030\001 \002(\0132\023.TSK.CommandArchive\022(\n\020OBSOLE"
    "TE_section\030\002 \001(\0132\016.TSP.Reference\022(\n\020mast"
    "er_drawables\030\003 \003(\0132\016.TSP.Reference\022\017\n\007in"
    "dexes\030\004 \003(\r\0220\n\030master_drawable_provider\030"
    "\005 \001(\0132\016.TSP.Reference\"\303\002\n#RemoveMasterDr"
    "awablesCommandArchive\022\"\n\005super\030\001 \002(\0132\023.T"
    "SK.CommandArchive\022(\n\020OBSOLETE_section\030\002 "
    "\001(\0132\016.TSP.Reference\022P\n\020master_drawables\030"
    "\003 \003(\01326.TP.RemoveMasterDrawablesCommandA"
    "rchive.MasterDrawable\0220\n\030master_drawable"
    "_provider\030\004 \001(\0132\016.TSP.Reference\032J\n\016Maste"
    "rDrawable\022 \n\010drawable\030\001 \001(\0132\016.TSP.Refere"
    "nce\022\026\n\016drawable_index\030\002 \001(\r\"\253\001\n\"PasteMas"
    "terDrawablesCommandArchive\022\"\n\005super\030\001 \002("
    "\0132\023.TSK.CommandArchive\022\037\n\007section\030\002 \001(\0132"
    "\016.TSP.Reference\022(\n\020master_drawables\030\003 \003("
    "\0132\016.TSP.Reference\022\026\n\016drawable_index\030\004 \001("
    "\r\"\243\003\n#MoveDrawablesAttachedCommandArchiv"
    "e\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022/\n"
    "\020undo_transaction\030\002 \001(\0132\025.TSWP.UndoTrans"
    "action\022K\n\rfloating_undo\030\003 \003(\01324.TP.MoveD"
    "rawablesAttachedCommandArchive.FloatingU"
    "ndo\022\016\n\006select\030\004 \001(\010\022\023\n\013make_inline\030\005 \001(\010"
    "\032\264\001\n\014FloatingUndo\022 \n\010drawable\030\001 \001(\0132\016.TS"
    "P.Reference\022&\n\010geometry\030\002 \001(\0132\024.TSD.Geom"
    "etryArchive\022\"\n\nattachment\030\003 \001(\0132\016.TSP.Re"
    "ference\022\021\n\twrap_type\030\004 \001(\r\022\022\n\npage_index"
    "\030\005 \001(\r\022\017\n\007z_order\030\006 \001(\005\"\271\004\n#MoveDrawable"
    "sFloatingCommandArchive\022\"\n\005super\030\001 \002(\0132\023"
    ".TSK.CommandArchive\022:\n\033deprecated_undo_t"
    "ransaction\030\002 \001(\0132\025.TSWP.UndoTransaction\022"
    "K\n\rattached_undo\030\003 \003(\01324.TP.MoveDrawable"
    "sFloatingCommandArchive.AttachedUndo\022\016\n\006"
    "select\030\004 \001(\010\032\324\002\n\014AttachedUndo\022 \n\010drawabl"
    "e\030\001 \001(\0132\016.TSP.Reference\022&\n\010geometry\030\002 \001("
    "\0132\024.TSD.GeometryArchive\022\"\n\nattachment\030\003 "
    "\001(\0132\016.TSP.Reference\022\022\n\npage_index\030\004 \001(\r\022"
    "\024\n\014is_html_wrap\030\005 \001(\010\022\014\n\004type\030\006 \001(\r\022\021\n\td"
    "irection\030\007 \001(\r\022\020\n\010fit_type\030\010 \001(\r\022\016\n\006marg"
    "in\030\t \001(\002\022\027\n\017alpha_threshold\030\n \001(\002\022\037\n\007sto"
    "rage\030\013 \001(\0132\016.TSP.Reference\022/\n\020undo_trans"
    "action\030\014 \001(\0132\025.TSWP.UndoTransaction\"t\n$R"
    "emoveAnchoredDrawableCommandArchive\022\'\n\005s"
    "uper\030\001 \002(\0132\030.TSWP.TextCommandArchive\022\022\n\n"
    "char_index\030\002 \001(\r\022\017\n\007z_order\030\003 \001(\r\"\301\002\n\"Ch"
    "angeFootnoteFormatCommandArchive\022\"\n\005supe"
    "r\030\001 \002(\0132\023.TSK.CommandArchive\022E\n\006format\030\002"
    " \001(\01625.TP.ChangeFootnoteFormatCommandArc"
    "hive.FootnoteFormat\"\257\001\n\016FootnoteFormat\022\032"
    "\n\026kFootnoteFormatNumeric\020\000\022\030\n\024kFootnoteF"
    "ormatRoman\020\001\022\033\n\027kFootnoteFormatSymbolic\020"
    "\002\022\"\n\036kFootnoteFormatJapaneseNumeric\020\003\022&\n"
    "\"kFootnoteFormatJapaneseIdeographic\020\004\"\251\002"
    "\n ChangeFootnoteKindCommandArchive\022\"\n\005su"
    "per\030\001 \002(\0132\023.TSK.CommandArchive\022\?\n\004kind\030\002"
    " \001(\01621.TP.ChangeFootnoteKindCommandArchi"
    "ve.FootnoteKind\022/\n\020undo_transaction\030\003 \001("
    "\0132\025.TSWP.UndoTransaction\"o\n\014FootnoteKind"
    "\022\032\n\026kFootnoteKindFootnotes\020\000\022!\n\035kFootnot"
    "eKindDocumentEndnotes\020\001\022 \n\034kFootnoteKind"
    "SectionEndnotes\020\002\"\244\002\n%ChangeFootnoteNumb"
    "eringCommandArchive\022\"\n\005super\030\001 \002(\0132\023.TSK"
    ".CommandArchive\022N\n\tnumbering\030\002 \001(\0162;.TP."
    "ChangeFootnoteNumberingCommandArchive.Fo"
    "otnoteNumbering\"\206\001\n\021FootnoteNumbering\022 \n"
    "\034kFootnoteNumberingContinuous\020\000\022%\n!kFoot"
    "noteNumberingRestartEachPage\020\001\022(\n$kFootn"
    "oteNumberingRestartEachSection\020\002\"c\n#Chan"
    "geFootnoteSpacingCommandArchive\022\"\n\005super"
    "\030\001 \002(\0132\023.TSK.CommandArchive\022\030\n\020footnote_"
    "spacing\030\002 \001(\005\"\342\001\n(MoveInlineDrawableAnch"
    "oredCommandArchive\022\"\n\005super\030\001 \002(\0132\023.TSK."
    "CommandArchive\022 \n\010drawable\030\002 \001(\0132\016.TSP.R"
    "eference\022\024\n\014is_html_wrap\030\003 \001(\010\022\014\n\004type\030\004"
    " \001(\r\022\021\n\tdirection\030\005 \001(\r\022\020\n\010fit_type\030\006 \001("
    "\r\022\016\n\006margin\030\007 \001(\002\022\027\n\017alpha_threshold\030\010 \001"
    "(\002\"\363\001\n(MoveAnchoredDrawableInlineCommand"
    "Archive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArch"
    "ive\022 \n\010drawable\030\002 \001(\0132\016.TSP.Reference\022\024\n"
    "\014is_html_wrap\030\003 \001(\010\022\014\n\004type\030\004 \001(\r\022\021\n\tdir"
    "ection\030\005 \001(\r\022\020\n\010fit_type\030\006 \001(\r\022\016\n\006margin"
    "\030\007 \001(\002\022\027\n\017alpha_threshold\030\010 \001(\002\022\017\n\007z_ord"
    "er\030\t \001(\r\"G\n\034InsertFootnoteCommandArchive"
    "\022\'\n\005super\030\001 \002(\0132\030.TSWP.TextCommandArchiv"
    "e\"p\n\'ToggleBodyLayoutDirectionCommandArc"
    "hive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive"
    "\022!\n\031new_direction_is_vertical\030\002 \001(\010\"\273\001\n "
    "ChangeCTVisibilityCommandArchive\022\"\n\005supe"
    "r\030\001 \002(\0132\023.TSK.CommandArchive\022\026\n\016markup_v"
    "isible\030\002 \001(\010\022\031\n\021deletions_visible\030\003 \001(\010\022"
    " \n\030selection_range_location\030\004 \001(\r\022\036\n\026sel"
    "ection_range_length\030\005 \001(\r\"\227\001\n\032TrackChang"
    "esCommandArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Co"
    "mmandArchive\022\025\n\rtrack_changes\030\002 \001(\010\022.\n\026c"
    "hange_session_history\030\003 \003(\0132\016.TSP.Refere"
    "nce\022\016\n\006paused\030\004 \001(\010\"c\n!DocumentHyphenati"
    "onCommandArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Co"
    "mmandArchive\022\032\n\022hyphenate_document\030\002 \001(\010"
    "\"\\\n\037DocumentLigaturesCommandArchive\022\"\n\005s"
    "uper\030\001 \002(\0132\023.TSK.CommandArchive\022\025\n\ruse_l"
    "igatures\030\002 \001(\010\"U\n\035DocumentHasBodyCommand"
    "Archive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArch"
    "ive\022\020\n\010has_body\030\002 \001(\010\"W\n!PauseChangeTrac"
    "kingCommandArchive\022\"\n\005super\030\001 \002(\0132\023.TSK."
    "CommandArchive\022\016\n\006paused\030\002 \001(\010", 7470);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TPCommandArchives.proto", &protobuf_RegisterTypes);
  InsertDrawablesCommandArchive::default_instance_ = new InsertDrawablesCommandArchive();
  PasteDrawablesCommandArchive::default_instance_ = new PasteDrawablesCommandArchive();
  PasteDrawablesCommandArchive_DrawableAndPage::default_instance_ = new PasteDrawablesCommandArchive_DrawableAndPage();
  PasteAnchoredDrawablesCommandArchive::default_instance_ = new PasteAnchoredDrawablesCommandArchive();
  MoveDrawablesPageIndexCommandArchive::default_instance_ = new MoveDrawablesPageIndexCommandArchive();
  MoveDrawablesPageIndexCommandArchive_Drawable::default_instance_ = new MoveDrawablesPageIndexCommandArchive_Drawable();
  InsertSectionBreakCommandArchive::default_instance_ = new InsertSectionBreakCommandArchive();
  DeleteSectionCommandArchive::default_instance_ = new DeleteSectionCommandArchive();
  ReplaceSectionCommandArchive::default_instance_ = new ReplaceSectionCommandArchive();
  ChangeSectionPropertyCommandArchive::default_instance_ = new ChangeSectionPropertyCommandArchive();
  SwapDrawableZOrderCommandArchive::default_instance_ = new SwapDrawableZOrderCommandArchive();
  SwapDrawableZOrderCommandArchive_SwapPair::default_instance_ = new SwapDrawableZOrderCommandArchive_SwapPair();
  RemoveDrawablesCommandArchive::default_instance_ = new RemoveDrawablesCommandArchive();
  RemoveDrawablesCommandArchive_DrawableInfo::default_instance_ = new RemoveDrawablesCommandArchive_DrawableInfo();
  NudgeDrawablesCommandArchive::default_instance_ = new NudgeDrawablesCommandArchive();
  ChangeHeaderFooterVisibilityCommandArchive::default_instance_ = new ChangeHeaderFooterVisibilityCommandArchive();
  ChangeSectionMarginsCommandArchive::default_instance_ = new ChangeSectionMarginsCommandArchive();
  ChangeDocumentPrinterOptionsCommandArchive::default_instance_ = new ChangeDocumentPrinterOptionsCommandArchive();
  InsertMasterDrawablesCommandArchive::default_instance_ = new InsertMasterDrawablesCommandArchive();
  MoveMasterDrawableZOrderCommandArchive::default_instance_ = new MoveMasterDrawableZOrderCommandArchive();
  RemoveMasterDrawablesCommandArchive::default_instance_ = new RemoveMasterDrawablesCommandArchive();
  RemoveMasterDrawablesCommandArchive_MasterDrawable::default_instance_ = new RemoveMasterDrawablesCommandArchive_MasterDrawable();
  PasteMasterDrawablesCommandArchive::default_instance_ = new PasteMasterDrawablesCommandArchive();
  MoveDrawablesAttachedCommandArchive::default_instance_ = new MoveDrawablesAttachedCommandArchive();
  MoveDrawablesAttachedCommandArchive_FloatingUndo::default_instance_ = new MoveDrawablesAttachedCommandArchive_FloatingUndo();
  MoveDrawablesFloatingCommandArchive::default_instance_ = new MoveDrawablesFloatingCommandArchive();
  MoveDrawablesFloatingCommandArchive_AttachedUndo::default_instance_ = new MoveDrawablesFloatingCommandArchive_AttachedUndo();
  RemoveAnchoredDrawableCommandArchive::default_instance_ = new RemoveAnchoredDrawableCommandArchive();
  ChangeFootnoteFormatCommandArchive::default_instance_ = new ChangeFootnoteFormatCommandArchive();
  ChangeFootnoteKindCommandArchive::default_instance_ = new ChangeFootnoteKindCommandArchive();
  ChangeFootnoteNumberingCommandArchive::default_instance_ = new ChangeFootnoteNumberingCommandArchive();
  ChangeFootnoteSpacingCommandArchive::default_instance_ = new ChangeFootnoteSpacingCommandArchive();
  MoveInlineDrawableAnchoredCommandArchive::default_instance_ = new MoveInlineDrawableAnchoredCommandArchive();
  MoveAnchoredDrawableInlineCommandArchive::default_instance_ = new MoveAnchoredDrawableInlineCommandArchive();
  InsertFootnoteCommandArchive::default_instance_ = new InsertFootnoteCommandArchive();
  ToggleBodyLayoutDirectionCommandArchive::default_instance_ = new ToggleBodyLayoutDirectionCommandArchive();
  ChangeCTVisibilityCommandArchive::default_instance_ = new ChangeCTVisibilityCommandArchive();
  TrackChangesCommandArchive::default_instance_ = new TrackChangesCommandArchive();
  DocumentHyphenationCommandArchive::default_instance_ = new DocumentHyphenationCommandArchive();
  DocumentLigaturesCommandArchive::default_instance_ = new DocumentLigaturesCommandArchive();
  DocumentHasBodyCommandArchive::default_instance_ = new DocumentHasBodyCommandArchive();
  PauseChangeTrackingCommandArchive::default_instance_ = new PauseChangeTrackingCommandArchive();
  InsertDrawablesCommandArchive::default_instance_->InitAsDefaultInstance();
  PasteDrawablesCommandArchive::default_instance_->InitAsDefaultInstance();
  PasteDrawablesCommandArchive_DrawableAndPage::default_instance_->InitAsDefaultInstance();
  PasteAnchoredDrawablesCommandArchive::default_instance_->InitAsDefaultInstance();
  MoveDrawablesPageIndexCommandArchive::default_instance_->InitAsDefaultInstance();
  MoveDrawablesPageIndexCommandArchive_Drawable::default_instance_->InitAsDefaultInstance();
  InsertSectionBreakCommandArchive::default_instance_->InitAsDefaultInstance();
  DeleteSectionCommandArchive::default_instance_->InitAsDefaultInstance();
  ReplaceSectionCommandArchive::default_instance_->InitAsDefaultInstance();
  ChangeSectionPropertyCommandArchive::default_instance_->InitAsDefaultInstance();
  SwapDrawableZOrderCommandArchive::default_instance_->InitAsDefaultInstance();
  SwapDrawableZOrderCommandArchive_SwapPair::default_instance_->InitAsDefaultInstance();
  RemoveDrawablesCommandArchive::default_instance_->InitAsDefaultInstance();
  RemoveDrawablesCommandArchive_DrawableInfo::default_instance_->InitAsDefaultInstance();
  NudgeDrawablesCommandArchive::default_instance_->InitAsDefaultInstance();
  ChangeHeaderFooterVisibilityCommandArchive::default_instance_->InitAsDefaultInstance();
  ChangeSectionMarginsCommandArchive::default_instance_->InitAsDefaultInstance();
  ChangeDocumentPrinterOptionsCommandArchive::default_instance_->InitAsDefaultInstance();
  InsertMasterDrawablesCommandArchive::default_instance_->InitAsDefaultInstance();
  MoveMasterDrawableZOrderCommandArchive::default_instance_->InitAsDefaultInstance();
  RemoveMasterDrawablesCommandArchive::default_instance_->InitAsDefaultInstance();
  RemoveMasterDrawablesCommandArchive_MasterDrawable::default_instance_->InitAsDefaultInstance();
  PasteMasterDrawablesCommandArchive::default_instance_->InitAsDefaultInstance();
  MoveDrawablesAttachedCommandArchive::default_instance_->InitAsDefaultInstance();
  MoveDrawablesAttachedCommandArchive_FloatingUndo::default_instance_->InitAsDefaultInstance();
  MoveDrawablesFloatingCommandArchive::default_instance_->InitAsDefaultInstance();
  MoveDrawablesFloatingCommandArchive_AttachedUndo::default_instance_->InitAsDefaultInstance();
  RemoveAnchoredDrawableCommandArchive::default_instance_->InitAsDefaultInstance();
  ChangeFootnoteFormatCommandArchive::default_instance_->InitAsDefaultInstance();
  ChangeFootnoteKindCommandArchive::default_instance_->InitAsDefaultInstance();
  ChangeFootnoteNumberingCommandArchive::default_instance_->InitAsDefaultInstance();
  ChangeFootnoteSpacingCommandArchive::default_instance_->InitAsDefaultInstance();
  MoveInlineDrawableAnchoredCommandArchive::default_instance_->InitAsDefaultInstance();
  MoveAnchoredDrawableInlineCommandArchive::default_instance_->InitAsDefaultInstance();
  InsertFootnoteCommandArchive::default_instance_->InitAsDefaultInstance();
  ToggleBodyLayoutDirectionCommandArchive::default_instance_->InitAsDefaultInstance();
  ChangeCTVisibilityCommandArchive::default_instance_->InitAsDefaultInstance();
  TrackChangesCommandArchive::default_instance_->InitAsDefaultInstance();
  DocumentHyphenationCommandArchive::default_instance_->InitAsDefaultInstance();
  DocumentLigaturesCommandArchive::default_instance_->InitAsDefaultInstance();
  DocumentHasBodyCommandArchive::default_instance_->InitAsDefaultInstance();
  PauseChangeTrackingCommandArchive::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TPCommandArchives_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TPCommandArchives_2eproto {
  StaticDescriptorInitializer_TPCommandArchives_2eproto() {
    protobuf_AddDesc_TPCommandArchives_2eproto();
  }
} static_descriptor_initializer_TPCommandArchives_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int InsertDrawablesCommandArchive::kSuperFieldNumber;
const int InsertDrawablesCommandArchive::kPageIndexFieldNumber;
const int InsertDrawablesCommandArchive::kZOrderFieldNumber;
const int InsertDrawablesCommandArchive::kDrawablesFieldNumber;
const int InsertDrawablesCommandArchive::kForPasteFieldNumber;
#endif  // !_MSC_VER

InsertDrawablesCommandArchive::InsertDrawablesCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InsertDrawablesCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
}

InsertDrawablesCommandArchive::InsertDrawablesCommandArchive(const InsertDrawablesCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InsertDrawablesCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  page_index_ = 0u;
  z_order_ = 0u;
  forpaste_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InsertDrawablesCommandArchive::~InsertDrawablesCommandArchive() {
  SharedDtor();
}

void InsertDrawablesCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void InsertDrawablesCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InsertDrawablesCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InsertDrawablesCommandArchive_descriptor_;
}

const InsertDrawablesCommandArchive& InsertDrawablesCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPCommandArchives_2eproto();
  return *default_instance_;
}

InsertDrawablesCommandArchive* InsertDrawablesCommandArchive::default_instance_ = NULL;

InsertDrawablesCommandArchive* InsertDrawablesCommandArchive::New() const {
  return new InsertDrawablesCommandArchive;
}

void InsertDrawablesCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    page_index_ = 0u;
    z_order_ = 0u;
    forpaste_ = false;
  }
  drawables_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InsertDrawablesCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_page_index;
        break;
      }

      // optional uint32 page_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_index_)));
          set_has_page_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_z_order;
        break;
      }

      // optional uint32 z_order = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_z_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &z_order_)));
          set_has_z_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_drawables;
        break;
      }

      // repeated .TSP.Reference drawables = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drawables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_drawables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_drawables;
        if (input->ExpectTag(40)) goto parse_forPaste;
        break;
      }

      // optional bool forPaste = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forPaste:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forpaste_)));
          set_has_forpaste();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InsertDrawablesCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional uint32 page_index = 2;
  if (has_page_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->page_index(), output);
  }

  // optional uint32 z_order = 3;
  if (has_z_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->z_order(), output);
  }

  // repeated .TSP.Reference drawables = 4;
  for (int i = 0; i < this->drawables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->drawables(i), output);
  }

  // optional bool forPaste = 5;
  if (has_forpaste()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->forpaste(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InsertDrawablesCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional uint32 page_index = 2;
  if (has_page_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->page_index(), target);
  }

  // optional uint32 z_order = 3;
  if (has_z_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->z_order(), target);
  }

  // repeated .TSP.Reference drawables = 4;
  for (int i = 0; i < this->drawables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->drawables(i), target);
  }

  // optional bool forPaste = 5;
  if (has_forpaste()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->forpaste(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InsertDrawablesCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional uint32 page_index = 2;
    if (has_page_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page_index());
    }

    // optional uint32 z_order = 3;
    if (has_z_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->z_order());
    }

    // optional bool forPaste = 5;
    if (has_forpaste()) {
      total_size += 1 + 1;
    }

  }
  // repeated .TSP.Reference drawables = 4;
  total_size += 1 * this->drawables_size();
  for (int i = 0; i < this->drawables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->drawables(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InsertDrawablesCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InsertDrawablesCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InsertDrawablesCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InsertDrawablesCommandArchive::MergeFrom(const InsertDrawablesCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  drawables_.MergeFrom(from.drawables_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_page_index()) {
      set_page_index(from.page_index());
    }
    if (from.has_z_order()) {
      set_z_order(from.z_order());
    }
    if (from.has_forpaste()) {
      set_forpaste(from.forpaste());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InsertDrawablesCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertDrawablesCommandArchive::CopyFrom(const InsertDrawablesCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertDrawablesCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  for (int i = 0; i < drawables_size(); i++) {
    if (!this->drawables(i).IsInitialized()) return false;
  }
  return true;
}

void InsertDrawablesCommandArchive::Swap(InsertDrawablesCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(page_index_, other->page_index_);
    std::swap(z_order_, other->z_order_);
    drawables_.Swap(&other->drawables_);
    std::swap(forpaste_, other->forpaste_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InsertDrawablesCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InsertDrawablesCommandArchive_descriptor_;
  metadata.reflection = InsertDrawablesCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PasteDrawablesCommandArchive_DrawableAndPage::kDrawableFieldNumber;
const int PasteDrawablesCommandArchive_DrawableAndPage::kPageIndexFieldNumber;
#endif  // !_MSC_VER

PasteDrawablesCommandArchive_DrawableAndPage::PasteDrawablesCommandArchive_DrawableAndPage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PasteDrawablesCommandArchive_DrawableAndPage::InitAsDefaultInstance() {
  drawable_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

PasteDrawablesCommandArchive_DrawableAndPage::PasteDrawablesCommandArchive_DrawableAndPage(const PasteDrawablesCommandArchive_DrawableAndPage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PasteDrawablesCommandArchive_DrawableAndPage::SharedCtor() {
  _cached_size_ = 0;
  drawable_ = NULL;
  page_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PasteDrawablesCommandArchive_DrawableAndPage::~PasteDrawablesCommandArchive_DrawableAndPage() {
  SharedDtor();
}

void PasteDrawablesCommandArchive_DrawableAndPage::SharedDtor() {
  if (this != default_instance_) {
    delete drawable_;
  }
}

void PasteDrawablesCommandArchive_DrawableAndPage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PasteDrawablesCommandArchive_DrawableAndPage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PasteDrawablesCommandArchive_DrawableAndPage_descriptor_;
}

const PasteDrawablesCommandArchive_DrawableAndPage& PasteDrawablesCommandArchive_DrawableAndPage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPCommandArchives_2eproto();
  return *default_instance_;
}

PasteDrawablesCommandArchive_DrawableAndPage* PasteDrawablesCommandArchive_DrawableAndPage::default_instance_ = NULL;

PasteDrawablesCommandArchive_DrawableAndPage* PasteDrawablesCommandArchive_DrawableAndPage::New() const {
  return new PasteDrawablesCommandArchive_DrawableAndPage;
}

void PasteDrawablesCommandArchive_DrawableAndPage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_drawable()) {
      if (drawable_ != NULL) drawable_->::TSP::Reference::Clear();
    }
    page_index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PasteDrawablesCommandArchive_DrawableAndPage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Reference drawable = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_drawable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_page_index;
        break;
      }

      // optional uint32 page_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_index_)));
          set_has_page_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PasteDrawablesCommandArchive_DrawableAndPage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Reference drawable = 1;
  if (has_drawable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->drawable(), output);
  }

  // optional uint32 page_index = 2;
  if (has_page_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->page_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PasteDrawablesCommandArchive_DrawableAndPage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Reference drawable = 1;
  if (has_drawable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->drawable(), target);
  }

  // optional uint32 page_index = 2;
  if (has_page_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->page_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PasteDrawablesCommandArchive_DrawableAndPage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.Reference drawable = 1;
    if (has_drawable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->drawable());
    }

    // optional uint32 page_index = 2;
    if (has_page_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PasteDrawablesCommandArchive_DrawableAndPage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PasteDrawablesCommandArchive_DrawableAndPage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PasteDrawablesCommandArchive_DrawableAndPage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PasteDrawablesCommandArchive_DrawableAndPage::MergeFrom(const PasteDrawablesCommandArchive_DrawableAndPage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_drawable()) {
      mutable_drawable()->::TSP::Reference::MergeFrom(from.drawable());
    }
    if (from.has_page_index()) {
      set_page_index(from.page_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PasteDrawablesCommandArchive_DrawableAndPage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PasteDrawablesCommandArchive_DrawableAndPage::CopyFrom(const PasteDrawablesCommandArchive_DrawableAndPage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PasteDrawablesCommandArchive_DrawableAndPage::IsInitialized() const {

  if (has_drawable()) {
    if (!this->drawable().IsInitialized()) return false;
  }
  return true;
}

void PasteDrawablesCommandArchive_DrawableAndPage::Swap(PasteDrawablesCommandArchive_DrawableAndPage* other) {
  if (other != this) {
    std::swap(drawable_, other->drawable_);
    std::swap(page_index_, other->page_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PasteDrawablesCommandArchive_DrawableAndPage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PasteDrawablesCommandArchive_DrawableAndPage_descriptor_;
  metadata.reflection = PasteDrawablesCommandArchive_DrawableAndPage_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PasteDrawablesCommandArchive::kSuperFieldNumber;
const int PasteDrawablesCommandArchive::kDrawablesFieldNumber;
#endif  // !_MSC_VER

PasteDrawablesCommandArchive::PasteDrawablesCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PasteDrawablesCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
}

PasteDrawablesCommandArchive::PasteDrawablesCommandArchive(const PasteDrawablesCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PasteDrawablesCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PasteDrawablesCommandArchive::~PasteDrawablesCommandArchive() {
  SharedDtor();
}

void PasteDrawablesCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void PasteDrawablesCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PasteDrawablesCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PasteDrawablesCommandArchive_descriptor_;
}

const PasteDrawablesCommandArchive& PasteDrawablesCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPCommandArchives_2eproto();
  return *default_instance_;
}

PasteDrawablesCommandArchive* PasteDrawablesCommandArchive::default_instance_ = NULL;

PasteDrawablesCommandArchive* PasteDrawablesCommandArchive::New() const {
  return new PasteDrawablesCommandArchive;
}

void PasteDrawablesCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
  }
  drawables_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PasteDrawablesCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_drawables;
        break;
      }

      // repeated .TP.PasteDrawablesCommandArchive.DrawableAndPage drawables = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drawables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_drawables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_drawables;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PasteDrawablesCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // repeated .TP.PasteDrawablesCommandArchive.DrawableAndPage drawables = 2;
  for (int i = 0; i < this->drawables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->drawables(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PasteDrawablesCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // repeated .TP.PasteDrawablesCommandArchive.DrawableAndPage drawables = 2;
  for (int i = 0; i < this->drawables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->drawables(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PasteDrawablesCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  // repeated .TP.PasteDrawablesCommandArchive.DrawableAndPage drawables = 2;
  total_size += 1 * this->drawables_size();
  for (int i = 0; i < this->drawables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->drawables(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PasteDrawablesCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PasteDrawablesCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PasteDrawablesCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PasteDrawablesCommandArchive::MergeFrom(const PasteDrawablesCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  drawables_.MergeFrom(from.drawables_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PasteDrawablesCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PasteDrawablesCommandArchive::CopyFrom(const PasteDrawablesCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PasteDrawablesCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  for (int i = 0; i < drawables_size(); i++) {
    if (!this->drawables(i).IsInitialized()) return false;
  }
  return true;
}

void PasteDrawablesCommandArchive::Swap(PasteDrawablesCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    drawables_.Swap(&other->drawables_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PasteDrawablesCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PasteDrawablesCommandArchive_descriptor_;
  metadata.reflection = PasteDrawablesCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PasteAnchoredDrawablesCommandArchive::kDeprecatedSuperFieldNumber;
const int PasteAnchoredDrawablesCommandArchive::kSuperFieldNumber;
const int PasteAnchoredDrawablesCommandArchive::kSelectFieldNumber;
const int PasteAnchoredDrawablesCommandArchive::kDeprecatedUndoSelectionFieldNumber;
const int PasteAnchoredDrawablesCommandArchive::kCanvasSelectionFieldNumber;
#endif  // !_MSC_VER

PasteAnchoredDrawablesCommandArchive::PasteAnchoredDrawablesCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PasteAnchoredDrawablesCommandArchive::InitAsDefaultInstance() {
  deprecated_super_ = const_cast< ::TSK::CommandGroupArchive*>(&::TSK::CommandGroupArchive::default_instance());
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  deprecated_undo_selection_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  canvas_selection_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

PasteAnchoredDrawablesCommandArchive::PasteAnchoredDrawablesCommandArchive(const PasteAnchoredDrawablesCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PasteAnchoredDrawablesCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  deprecated_super_ = NULL;
  super_ = NULL;
  select_ = false;
  deprecated_undo_selection_ = NULL;
  canvas_selection_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PasteAnchoredDrawablesCommandArchive::~PasteAnchoredDrawablesCommandArchive() {
  SharedDtor();
}

void PasteAnchoredDrawablesCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete deprecated_super_;
    delete super_;
    delete deprecated_undo_selection_;
    delete canvas_selection_;
  }
}

void PasteAnchoredDrawablesCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PasteAnchoredDrawablesCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PasteAnchoredDrawablesCommandArchive_descriptor_;
}

const PasteAnchoredDrawablesCommandArchive& PasteAnchoredDrawablesCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPCommandArchives_2eproto();
  return *default_instance_;
}

PasteAnchoredDrawablesCommandArchive* PasteAnchoredDrawablesCommandArchive::default_instance_ = NULL;

PasteAnchoredDrawablesCommandArchive* PasteAnchoredDrawablesCommandArchive::New() const {
  return new PasteAnchoredDrawablesCommandArchive;
}

void PasteAnchoredDrawablesCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_deprecated_super()) {
      if (deprecated_super_ != NULL) deprecated_super_->::TSK::CommandGroupArchive::Clear();
    }
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    select_ = false;
    if (has_deprecated_undo_selection()) {
      if (deprecated_undo_selection_ != NULL) deprecated_undo_selection_->::TSP::Reference::Clear();
    }
    if (has_canvas_selection()) {
      if (canvas_selection_ != NULL) canvas_selection_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PasteAnchoredDrawablesCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandGroupArchive deprecated_super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deprecated_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_select;
        break;
      }

      // optional bool select = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_select:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &select_)));
          set_has_select();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_deprecated_undo_selection;
        break;
      }

      // optional .TSP.Reference deprecated_undo_selection = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deprecated_undo_selection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deprecated_undo_selection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_super;
        break;
      }

      // optional .TSK.CommandArchive super = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_canvas_selection;
        break;
      }

      // optional .TSP.Reference canvas_selection = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_canvas_selection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_canvas_selection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PasteAnchoredDrawablesCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandGroupArchive deprecated_super = 1;
  if (has_deprecated_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->deprecated_super(), output);
  }

  // optional bool select = 2;
  if (has_select()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->select(), output);
  }

  // optional .TSP.Reference deprecated_undo_selection = 3;
  if (has_deprecated_undo_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->deprecated_undo_selection(), output);
  }

  // optional .TSK.CommandArchive super = 4;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->super(), output);
  }

  // optional .TSP.Reference canvas_selection = 5;
  if (has_canvas_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->canvas_selection(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PasteAnchoredDrawablesCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandGroupArchive deprecated_super = 1;
  if (has_deprecated_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->deprecated_super(), target);
  }

  // optional bool select = 2;
  if (has_select()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->select(), target);
  }

  // optional .TSP.Reference deprecated_undo_selection = 3;
  if (has_deprecated_undo_selection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->deprecated_undo_selection(), target);
  }

  // optional .TSK.CommandArchive super = 4;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->super(), target);
  }

  // optional .TSP.Reference canvas_selection = 5;
  if (has_canvas_selection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->canvas_selection(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PasteAnchoredDrawablesCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandGroupArchive deprecated_super = 1;
    if (has_deprecated_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deprecated_super());
    }

    // optional .TSK.CommandArchive super = 4;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional bool select = 2;
    if (has_select()) {
      total_size += 1 + 1;
    }

    // optional .TSP.Reference deprecated_undo_selection = 3;
    if (has_deprecated_undo_selection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deprecated_undo_selection());
    }

    // optional .TSP.Reference canvas_selection = 5;
    if (has_canvas_selection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->canvas_selection());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PasteAnchoredDrawablesCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PasteAnchoredDrawablesCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PasteAnchoredDrawablesCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PasteAnchoredDrawablesCommandArchive::MergeFrom(const PasteAnchoredDrawablesCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deprecated_super()) {
      mutable_deprecated_super()->::TSK::CommandGroupArchive::MergeFrom(from.deprecated_super());
    }
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_select()) {
      set_select(from.select());
    }
    if (from.has_deprecated_undo_selection()) {
      mutable_deprecated_undo_selection()->::TSP::Reference::MergeFrom(from.deprecated_undo_selection());
    }
    if (from.has_canvas_selection()) {
      mutable_canvas_selection()->::TSP::Reference::MergeFrom(from.canvas_selection());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PasteAnchoredDrawablesCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PasteAnchoredDrawablesCommandArchive::CopyFrom(const PasteAnchoredDrawablesCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PasteAnchoredDrawablesCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_deprecated_super()) {
    if (!this->deprecated_super().IsInitialized()) return false;
  }
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_deprecated_undo_selection()) {
    if (!this->deprecated_undo_selection().IsInitialized()) return false;
  }
  if (has_canvas_selection()) {
    if (!this->canvas_selection().IsInitialized()) return false;
  }
  return true;
}

void PasteAnchoredDrawablesCommandArchive::Swap(PasteAnchoredDrawablesCommandArchive* other) {
  if (other != this) {
    std::swap(deprecated_super_, other->deprecated_super_);
    std::swap(super_, other->super_);
    std::swap(select_, other->select_);
    std::swap(deprecated_undo_selection_, other->deprecated_undo_selection_);
    std::swap(canvas_selection_, other->canvas_selection_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PasteAnchoredDrawablesCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PasteAnchoredDrawablesCommandArchive_descriptor_;
  metadata.reflection = PasteAnchoredDrawablesCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoveDrawablesPageIndexCommandArchive_Drawable::kDrawableFieldNumber;
const int MoveDrawablesPageIndexCommandArchive_Drawable::kZOrderFieldNumber;
#endif  // !_MSC_VER

MoveDrawablesPageIndexCommandArchive_Drawable::MoveDrawablesPageIndexCommandArchive_Drawable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoveDrawablesPageIndexCommandArchive_Drawable::InitAsDefaultInstance() {
  drawable_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

MoveDrawablesPageIndexCommandArchive_Drawable::MoveDrawablesPageIndexCommandArchive_Drawable(const MoveDrawablesPageIndexCommandArchive_Drawable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoveDrawablesPageIndexCommandArchive_Drawable::SharedCtor() {
  _cached_size_ = 0;
  drawable_ = NULL;
  z_order_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveDrawablesPageIndexCommandArchive_Drawable::~MoveDrawablesPageIndexCommandArchive_Drawable() {
  SharedDtor();
}

void MoveDrawablesPageIndexCommandArchive_Drawable::SharedDtor() {
  if (this != default_instance_) {
    delete drawable_;
  }
}

void MoveDrawablesPageIndexCommandArchive_Drawable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveDrawablesPageIndexCommandArchive_Drawable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveDrawablesPageIndexCommandArchive_Drawable_descriptor_;
}

const MoveDrawablesPageIndexCommandArchive_Drawable& MoveDrawablesPageIndexCommandArchive_Drawable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPCommandArchives_2eproto();
  return *default_instance_;
}

MoveDrawablesPageIndexCommandArchive_Drawable* MoveDrawablesPageIndexCommandArchive_Drawable::default_instance_ = NULL;

MoveDrawablesPageIndexCommandArchive_Drawable* MoveDrawablesPageIndexCommandArchive_Drawable::New() const {
  return new MoveDrawablesPageIndexCommandArchive_Drawable;
}

void MoveDrawablesPageIndexCommandArchive_Drawable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_drawable()) {
      if (drawable_ != NULL) drawable_->::TSP::Reference::Clear();
    }
    z_order_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoveDrawablesPageIndexCommandArchive_Drawable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Reference drawable = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_drawable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_z_order;
        break;
      }

      // optional uint32 z_order = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_z_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &z_order_)));
          set_has_z_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoveDrawablesPageIndexCommandArchive_Drawable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Reference drawable = 1;
  if (has_drawable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->drawable(), output);
  }

  // optional uint32 z_order = 2;
  if (has_z_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->z_order(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoveDrawablesPageIndexCommandArchive_Drawable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Reference drawable = 1;
  if (has_drawable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->drawable(), target);
  }

  // optional uint32 z_order = 2;
  if (has_z_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->z_order(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoveDrawablesPageIndexCommandArchive_Drawable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.Reference drawable = 1;
    if (has_drawable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->drawable());
    }

    // optional uint32 z_order = 2;
    if (has_z_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->z_order());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveDrawablesPageIndexCommandArchive_Drawable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoveDrawablesPageIndexCommandArchive_Drawable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoveDrawablesPageIndexCommandArchive_Drawable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoveDrawablesPageIndexCommandArchive_Drawable::MergeFrom(const MoveDrawablesPageIndexCommandArchive_Drawable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_drawable()) {
      mutable_drawable()->::TSP::Reference::MergeFrom(from.drawable());
    }
    if (from.has_z_order()) {
      set_z_order(from.z_order());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoveDrawablesPageIndexCommandArchive_Drawable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveDrawablesPageIndexCommandArchive_Drawable::CopyFrom(const MoveDrawablesPageIndexCommandArchive_Drawable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveDrawablesPageIndexCommandArchive_Drawable::IsInitialized() const {

  if (has_drawable()) {
    if (!this->drawable().IsInitialized()) return false;
  }
  return true;
}

void MoveDrawablesPageIndexCommandArchive_Drawable::Swap(MoveDrawablesPageIndexCommandArchive_Drawable* other) {
  if (other != this) {
    std::swap(drawable_, other->drawable_);
    std::swap(z_order_, other->z_order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoveDrawablesPageIndexCommandArchive_Drawable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveDrawablesPageIndexCommandArchive_Drawable_descriptor_;
  metadata.reflection = MoveDrawablesPageIndexCommandArchive_Drawable_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MoveDrawablesPageIndexCommandArchive::kSuperFieldNumber;
const int MoveDrawablesPageIndexCommandArchive::kPageIndexFieldNumber;
const int MoveDrawablesPageIndexCommandArchive::kDrawablesFieldNumber;
#endif  // !_MSC_VER

MoveDrawablesPageIndexCommandArchive::MoveDrawablesPageIndexCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoveDrawablesPageIndexCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
}

MoveDrawablesPageIndexCommandArchive::MoveDrawablesPageIndexCommandArchive(const MoveDrawablesPageIndexCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoveDrawablesPageIndexCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  page_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveDrawablesPageIndexCommandArchive::~MoveDrawablesPageIndexCommandArchive() {
  SharedDtor();
}

void MoveDrawablesPageIndexCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void MoveDrawablesPageIndexCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveDrawablesPageIndexCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveDrawablesPageIndexCommandArchive_descriptor_;
}

const MoveDrawablesPageIndexCommandArchive& MoveDrawablesPageIndexCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPCommandArchives_2eproto();
  return *default_instance_;
}

MoveDrawablesPageIndexCommandArchive* MoveDrawablesPageIndexCommandArchive::default_instance_ = NULL;

MoveDrawablesPageIndexCommandArchive* MoveDrawablesPageIndexCommandArchive::New() const {
  return new MoveDrawablesPageIndexCommandArchive;
}

void MoveDrawablesPageIndexCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    page_index_ = 0u;
  }
  drawables_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoveDrawablesPageIndexCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_page_index;
        break;
      }

      // optional uint32 page_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_index_)));
          set_has_page_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_drawables;
        break;
      }

      // repeated .TP.MoveDrawablesPageIndexCommandArchive.Drawable drawables = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drawables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_drawables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_drawables;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoveDrawablesPageIndexCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional uint32 page_index = 2;
  if (has_page_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->page_index(), output);
  }

  // repeated .TP.MoveDrawablesPageIndexCommandArchive.Drawable drawables = 3;
  for (int i = 0; i < this->drawables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->drawables(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoveDrawablesPageIndexCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional uint32 page_index = 2;
  if (has_page_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->page_index(), target);
  }

  // repeated .TP.MoveDrawablesPageIndexCommandArchive.Drawable drawables = 3;
  for (int i = 0; i < this->drawables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->drawables(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoveDrawablesPageIndexCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional uint32 page_index = 2;
    if (has_page_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page_index());
    }

  }
  // repeated .TP.MoveDrawablesPageIndexCommandArchive.Drawable drawables = 3;
  total_size += 1 * this->drawables_size();
  for (int i = 0; i < this->drawables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->drawables(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveDrawablesPageIndexCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoveDrawablesPageIndexCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoveDrawablesPageIndexCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoveDrawablesPageIndexCommandArchive::MergeFrom(const MoveDrawablesPageIndexCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  drawables_.MergeFrom(from.drawables_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_page_index()) {
      set_page_index(from.page_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoveDrawablesPageIndexCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveDrawablesPageIndexCommandArchive::CopyFrom(const MoveDrawablesPageIndexCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveDrawablesPageIndexCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  for (int i = 0; i < drawables_size(); i++) {
    if (!this->drawables(i).IsInitialized()) return false;
  }
  return true;
}

void MoveDrawablesPageIndexCommandArchive::Swap(MoveDrawablesPageIndexCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(page_index_, other->page_index_);
    drawables_.Swap(&other->drawables_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoveDrawablesPageIndexCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveDrawablesPageIndexCommandArchive_descriptor_;
  metadata.reflection = MoveDrawablesPageIndexCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InsertSectionBreakCommandArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

InsertSectionBreakCommandArchive::InsertSectionBreakCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InsertSectionBreakCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSWP::TextCommandArchive*>(&::TSWP::TextCommandArchive::default_instance());
}

InsertSectionBreakCommandArchive::InsertSectionBreakCommandArchive(const InsertSectionBreakCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InsertSectionBreakCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InsertSectionBreakCommandArchive::~InsertSectionBreakCommandArchive() {
  SharedDtor();
}

void InsertSectionBreakCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void InsertSectionBreakCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InsertSectionBreakCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InsertSectionBreakCommandArchive_descriptor_;
}

const InsertSectionBreakCommandArchive& InsertSectionBreakCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPCommandArchives_2eproto();
  return *default_instance_;
}

InsertSectionBreakCommandArchive* InsertSectionBreakCommandArchive::default_instance_ = NULL;

InsertSectionBreakCommandArchive* InsertSectionBreakCommandArchive::New() const {
  return new InsertSectionBreakCommandArchive;
}

void InsertSectionBreakCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSWP::TextCommandArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InsertSectionBreakCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSWP.TextCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InsertSectionBreakCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSWP.TextCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InsertSectionBreakCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSWP.TextCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InsertSectionBreakCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSWP.TextCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InsertSectionBreakCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InsertSectionBreakCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InsertSectionBreakCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InsertSectionBreakCommandArchive::MergeFrom(const InsertSectionBreakCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSWP::TextCommandArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InsertSectionBreakCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertSectionBreakCommandArchive::CopyFrom(const InsertSectionBreakCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertSectionBreakCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void InsertSectionBreakCommandArchive::Swap(InsertSectionBreakCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InsertSectionBreakCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InsertSectionBreakCommandArchive_descriptor_;
  metadata.reflection = InsertSectionBreakCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteSectionCommandArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

DeleteSectionCommandArchive::DeleteSectionCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteSectionCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
}

DeleteSectionCommandArchive::DeleteSectionCommandArchive(const DeleteSectionCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteSectionCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteSectionCommandArchive::~DeleteSectionCommandArchive() {
  SharedDtor();
}

void DeleteSectionCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void DeleteSectionCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteSectionCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteSectionCommandArchive_descriptor_;
}

const DeleteSectionCommandArchive& DeleteSectionCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPCommandArchives_2eproto();
  return *default_instance_;
}

DeleteSectionCommandArchive* DeleteSectionCommandArchive::default_instance_ = NULL;

DeleteSectionCommandArchive* DeleteSectionCommandArchive::New() const {
  return new DeleteSectionCommandArchive;
}

void DeleteSectionCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteSectionCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteSectionCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteSectionCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteSectionCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteSectionCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteSectionCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteSectionCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteSectionCommandArchive::MergeFrom(const DeleteSectionCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteSectionCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteSectionCommandArchive::CopyFrom(const DeleteSectionCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteSectionCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void DeleteSectionCommandArchive::Swap(DeleteSectionCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteSectionCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteSectionCommandArchive_descriptor_;
  metadata.reflection = DeleteSectionCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplaceSectionCommandArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

ReplaceSectionCommandArchive::ReplaceSectionCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReplaceSectionCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSWP::TextCommandArchive*>(&::TSWP::TextCommandArchive::default_instance());
}

ReplaceSectionCommandArchive::ReplaceSectionCommandArchive(const ReplaceSectionCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReplaceSectionCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplaceSectionCommandArchive::~ReplaceSectionCommandArchive() {
  SharedDtor();
}

void ReplaceSectionCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void ReplaceSectionCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplaceSectionCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplaceSectionCommandArchive_descriptor_;
}

const ReplaceSectionCommandArchive& ReplaceSectionCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPCommandArchives_2eproto();
  return *default_instance_;
}

ReplaceSectionCommandArchive* ReplaceSectionCommandArchive::default_instance_ = NULL;

ReplaceSectionCommandArchive* ReplaceSectionCommandArchive::New() const {
  return new ReplaceSectionCommandArchive;
}

void ReplaceSectionCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSWP::TextCommandArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplaceSectionCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSWP.TextCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReplaceSectionCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSWP.TextCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReplaceSectionCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSWP.TextCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReplaceSectionCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSWP.TextCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplaceSectionCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplaceSectionCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplaceSectionCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplaceSectionCommandArchive::MergeFrom(const ReplaceSectionCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSWP::TextCommandArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplaceSectionCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplaceSectionCommandArchive::CopyFrom(const ReplaceSectionCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplaceSectionCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void ReplaceSectionCommandArchive::Swap(ReplaceSectionCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplaceSectionCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplaceSectionCommandArchive_descriptor_;
  metadata.reflection = ReplaceSectionCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeSectionPropertyCommandArchive::kSuperFieldNumber;
const int ChangeSectionPropertyCommandArchive::kSectionIndexFieldNumber;
const int ChangeSectionPropertyCommandArchive::kSectionPropertyFieldNumber;
const int ChangeSectionPropertyCommandArchive::kSectionValueBoolFieldNumber;
#endif  // !_MSC_VER

ChangeSectionPropertyCommandArchive::ChangeSectionPropertyCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeSectionPropertyCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
}

ChangeSectionPropertyCommandArchive::ChangeSectionPropertyCommandArchive(const ChangeSectionPropertyCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeSectionPropertyCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  section_index_ = 0u;
  section_property_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  section_value_bool_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeSectionPropertyCommandArchive::~ChangeSectionPropertyCommandArchive() {
  SharedDtor();
}

void ChangeSectionPropertyCommandArchive::SharedDtor() {
  if (section_property_ != &::google::protobuf::internal::kEmptyString) {
    delete section_property_;
  }
  if (this != default_instance_) {
    delete super_;
  }
}

void ChangeSectionPropertyCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeSectionPropertyCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeSectionPropertyCommandArchive_descriptor_;
}

const ChangeSectionPropertyCommandArchive& ChangeSectionPropertyCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPCommandArchives_2eproto();
  return *default_instance_;
}

ChangeSectionPropertyCommandArchive* ChangeSectionPropertyCommandArchive::default_instance_ = NULL;

ChangeSectionPropertyCommandArchive* ChangeSectionPropertyCommandArchive::New() const {
  return new ChangeSectionPropertyCommandArchive;
}

void ChangeSectionPropertyCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    section_index_ = 0u;
    if (has_section_property()) {
      if (section_property_ != &::google::protobuf::internal::kEmptyString) {
        section_property_->clear();
      }
    }
    section_value_bool_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeSectionPropertyCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_section_index;
        break;
      }

      // optional uint32 section_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_section_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &section_index_)));
          set_has_section_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_section_property;
        break;
      }

      // optional string section_property = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_section_property:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_section_property()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->section_property().data(), this->section_property().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_section_value_bool;
        break;
      }

      // optional bool section_value_bool = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_section_value_bool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &section_value_bool_)));
          set_has_section_value_bool();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeSectionPropertyCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional uint32 section_index = 2;
  if (has_section_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->section_index(), output);
  }

  // optional string section_property = 3;
  if (has_section_property()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->section_property().data(), this->section_property().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->section_property(), output);
  }

  // optional bool section_value_bool = 4;
  if (has_section_value_bool()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->section_value_bool(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeSectionPropertyCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional uint32 section_index = 2;
  if (has_section_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->section_index(), target);
  }

  // optional string section_property = 3;
  if (has_section_property()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->section_property().data(), this->section_property().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->section_property(), target);
  }

  // optional bool section_value_bool = 4;
  if (has_section_value_bool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->section_value_bool(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeSectionPropertyCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional uint32 section_index = 2;
    if (has_section_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->section_index());
    }

    // optional string section_property = 3;
    if (has_section_property()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->section_property());
    }

    // optional bool section_value_bool = 4;
    if (has_section_value_bool()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeSectionPropertyCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeSectionPropertyCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeSectionPropertyCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeSectionPropertyCommandArchive::MergeFrom(const ChangeSectionPropertyCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_section_index()) {
      set_section_index(from.section_index());
    }
    if (from.has_section_property()) {
      set_section_property(from.section_property());
    }
    if (from.has_section_value_bool()) {
      set_section_value_bool(from.section_value_bool());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeSectionPropertyCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeSectionPropertyCommandArchive::CopyFrom(const ChangeSectionPropertyCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeSectionPropertyCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void ChangeSectionPropertyCommandArchive::Swap(ChangeSectionPropertyCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(section_index_, other->section_index_);
    std::swap(section_property_, other->section_property_);
    std::swap(section_value_bool_, other->section_value_bool_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeSectionPropertyCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeSectionPropertyCommandArchive_descriptor_;
  metadata.reflection = ChangeSectionPropertyCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SwapDrawableZOrderCommandArchive_SwapPair::kZOrder1FieldNumber;
const int SwapDrawableZOrderCommandArchive_SwapPair::kZOrder2FieldNumber;
#endif  // !_MSC_VER

SwapDrawableZOrderCommandArchive_SwapPair::SwapDrawableZOrderCommandArchive_SwapPair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SwapDrawableZOrderCommandArchive_SwapPair::InitAsDefaultInstance() {
}

SwapDrawableZOrderCommandArchive_SwapPair::SwapDrawableZOrderCommandArchive_SwapPair(const SwapDrawableZOrderCommandArchive_SwapPair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SwapDrawableZOrderCommandArchive_SwapPair::SharedCtor() {
  _cached_size_ = 0;
  z_order_1_ = 0u;
  z_order_2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SwapDrawableZOrderCommandArchive_SwapPair::~SwapDrawableZOrderCommandArchive_SwapPair() {
  SharedDtor();
}

void SwapDrawableZOrderCommandArchive_SwapPair::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SwapDrawableZOrderCommandArchive_SwapPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SwapDrawableZOrderCommandArchive_SwapPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SwapDrawableZOrderCommandArchive_SwapPair_descriptor_;
}

const SwapDrawableZOrderCommandArchive_SwapPair& SwapDrawableZOrderCommandArchive_SwapPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPCommandArchives_2eproto();
  return *default_instance_;
}

SwapDrawableZOrderCommandArchive_SwapPair* SwapDrawableZOrderCommandArchive_SwapPair::default_instance_ = NULL;

SwapDrawableZOrderCommandArchive_SwapPair* SwapDrawableZOrderCommandArchive_SwapPair::New() const {
  return new SwapDrawableZOrderCommandArchive_SwapPair;
}

void SwapDrawableZOrderCommandArchive_SwapPair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    z_order_1_ = 0u;
    z_order_2_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SwapDrawableZOrderCommandArchive_SwapPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 z_order_1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &z_order_1_)));
          set_has_z_order_1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_z_order_2;
        break;
      }

      // required uint32 z_order_2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_z_order_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &z_order_2_)));
          set_has_z_order_2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SwapDrawableZOrderCommandArchive_SwapPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 z_order_1 = 1;
  if (has_z_order_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->z_order_1(), output);
  }

  // required uint32 z_order_2 = 2;
  if (has_z_order_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->z_order_2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SwapDrawableZOrderCommandArchive_SwapPair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 z_order_1 = 1;
  if (has_z_order_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->z_order_1(), target);
  }

  // required uint32 z_order_2 = 2;
  if (has_z_order_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->z_order_2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SwapDrawableZOrderCommandArchive_SwapPair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 z_order_1 = 1;
    if (has_z_order_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->z_order_1());
    }

    // required uint32 z_order_2 = 2;
    if (has_z_order_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->z_order_2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SwapDrawableZOrderCommandArchive_SwapPair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SwapDrawableZOrderCommandArchive_SwapPair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SwapDrawableZOrderCommandArchive_SwapPair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SwapDrawableZOrderCommandArchive_SwapPair::MergeFrom(const SwapDrawableZOrderCommandArchive_SwapPair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_z_order_1()) {
      set_z_order_1(from.z_order_1());
    }
    if (from.has_z_order_2()) {
      set_z_order_2(from.z_order_2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SwapDrawableZOrderCommandArchive_SwapPair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwapDrawableZOrderCommandArchive_SwapPair::CopyFrom(const SwapDrawableZOrderCommandArchive_SwapPair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwapDrawableZOrderCommandArchive_SwapPair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SwapDrawableZOrderCommandArchive_SwapPair::Swap(SwapDrawableZOrderCommandArchive_SwapPair* other) {
  if (other != this) {
    std::swap(z_order_1_, other->z_order_1_);
    std::swap(z_order_2_, other->z_order_2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SwapDrawableZOrderCommandArchive_SwapPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SwapDrawableZOrderCommandArchive_SwapPair_descriptor_;
  metadata.reflection = SwapDrawableZOrderCommandArchive_SwapPair_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SwapDrawableZOrderCommandArchive::kSuperFieldNumber;
const int SwapDrawableZOrderCommandArchive::kSwapPairsFieldNumber;
#endif  // !_MSC_VER

SwapDrawableZOrderCommandArchive::SwapDrawableZOrderCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SwapDrawableZOrderCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
}

SwapDrawableZOrderCommandArchive::SwapDrawableZOrderCommandArchive(const SwapDrawableZOrderCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SwapDrawableZOrderCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SwapDrawableZOrderCommandArchive::~SwapDrawableZOrderCommandArchive() {
  SharedDtor();
}

void SwapDrawableZOrderCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void SwapDrawableZOrderCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SwapDrawableZOrderCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SwapDrawableZOrderCommandArchive_descriptor_;
}

const SwapDrawableZOrderCommandArchive& SwapDrawableZOrderCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPCommandArchives_2eproto();
  return *default_instance_;
}

SwapDrawableZOrderCommandArchive* SwapDrawableZOrderCommandArchive::default_instance_ = NULL;

SwapDrawableZOrderCommandArchive* SwapDrawableZOrderCommandArchive::New() const {
  return new SwapDrawableZOrderCommandArchive;
}

void SwapDrawableZOrderCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
  }
  swap_pairs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SwapDrawableZOrderCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_swap_pairs;
        break;
      }

      // repeated .TP.SwapDrawableZOrderCommandArchive.SwapPair swap_pairs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_swap_pairs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_swap_pairs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_swap_pairs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SwapDrawableZOrderCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // repeated .TP.SwapDrawableZOrderCommandArchive.SwapPair swap_pairs = 2;
  for (int i = 0; i < this->swap_pairs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->swap_pairs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SwapDrawableZOrderCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // repeated .TP.SwapDrawableZOrderCommandArchive.SwapPair swap_pairs = 2;
  for (int i = 0; i < this->swap_pairs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->swap_pairs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SwapDrawableZOrderCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  // repeated .TP.SwapDrawableZOrderCommandArchive.SwapPair swap_pairs = 2;
  total_size += 1 * this->swap_pairs_size();
  for (int i = 0; i < this->swap_pairs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->swap_pairs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SwapDrawableZOrderCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SwapDrawableZOrderCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SwapDrawableZOrderCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SwapDrawableZOrderCommandArchive::MergeFrom(const SwapDrawableZOrderCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  swap_pairs_.MergeFrom(from.swap_pairs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SwapDrawableZOrderCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwapDrawableZOrderCommandArchive::CopyFrom(const SwapDrawableZOrderCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwapDrawableZOrderCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  for (int i = 0; i < swap_pairs_size(); i++) {
    if (!this->swap_pairs(i).IsInitialized()) return false;
  }
  return true;
}

void SwapDrawableZOrderCommandArchive::Swap(SwapDrawableZOrderCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    swap_pairs_.Swap(&other->swap_pairs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SwapDrawableZOrderCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SwapDrawableZOrderCommandArchive_descriptor_;
  metadata.reflection = SwapDrawableZOrderCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveDrawablesCommandArchive_DrawableInfo::kPageIndexFieldNumber;
const int RemoveDrawablesCommandArchive_DrawableInfo::kZOrderFieldNumber;
const int RemoveDrawablesCommandArchive_DrawableInfo::kDrawableObjectFieldNumber;
#endif  // !_MSC_VER

RemoveDrawablesCommandArchive_DrawableInfo::RemoveDrawablesCommandArchive_DrawableInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveDrawablesCommandArchive_DrawableInfo::InitAsDefaultInstance() {
  drawable_object_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

RemoveDrawablesCommandArchive_DrawableInfo::RemoveDrawablesCommandArchive_DrawableInfo(const RemoveDrawablesCommandArchive_DrawableInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveDrawablesCommandArchive_DrawableInfo::SharedCtor() {
  _cached_size_ = 0;
  page_index_ = 0u;
  z_order_ = 0;
  drawable_object_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveDrawablesCommandArchive_DrawableInfo::~RemoveDrawablesCommandArchive_DrawableInfo() {
  SharedDtor();
}

void RemoveDrawablesCommandArchive_DrawableInfo::SharedDtor() {
  if (this != default_instance_) {
    delete drawable_object_;
  }
}

void RemoveDrawablesCommandArchive_DrawableInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveDrawablesCommandArchive_DrawableInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveDrawablesCommandArchive_DrawableInfo_descriptor_;
}

const RemoveDrawablesCommandArchive_DrawableInfo& RemoveDrawablesCommandArchive_DrawableInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPCommandArchives_2eproto();
  return *default_instance_;
}

RemoveDrawablesCommandArchive_DrawableInfo* RemoveDrawablesCommandArchive_DrawableInfo::default_instance_ = NULL;

RemoveDrawablesCommandArchive_DrawableInfo* RemoveDrawablesCommandArchive_DrawableInfo::New() const {
  return new RemoveDrawablesCommandArchive_DrawableInfo;
}

void RemoveDrawablesCommandArchive_DrawableInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    page_index_ = 0u;
    z_order_ = 0;
    if (has_drawable_object()) {
      if (drawable_object_ != NULL) drawable_object_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveDrawablesCommandArchive_DrawableInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 page_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_index_)));
          set_has_page_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_z_order;
        break;
      }

      // optional int32 z_order = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_z_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_order_)));
          set_has_z_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_drawable_object;
        break;
      }

      // optional .TSP.Reference drawable_object = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drawable_object:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_drawable_object()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveDrawablesCommandArchive_DrawableInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 page_index = 1;
  if (has_page_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->page_index(), output);
  }

  // optional int32 z_order = 2;
  if (has_z_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->z_order(), output);
  }

  // optional .TSP.Reference drawable_object = 3;
  if (has_drawable_object()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->drawable_object(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveDrawablesCommandArchive_DrawableInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 page_index = 1;
  if (has_page_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->page_index(), target);
  }

  // optional int32 z_order = 2;
  if (has_z_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->z_order(), target);
  }

  // optional .TSP.Reference drawable_object = 3;
  if (has_drawable_object()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->drawable_object(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveDrawablesCommandArchive_DrawableInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 page_index = 1;
    if (has_page_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page_index());
    }

    // optional int32 z_order = 2;
    if (has_z_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->z_order());
    }

    // optional .TSP.Reference drawable_object = 3;
    if (has_drawable_object()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->drawable_object());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveDrawablesCommandArchive_DrawableInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveDrawablesCommandArchive_DrawableInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveDrawablesCommandArchive_DrawableInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveDrawablesCommandArchive_DrawableInfo::MergeFrom(const RemoveDrawablesCommandArchive_DrawableInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_page_index()) {
      set_page_index(from.page_index());
    }
    if (from.has_z_order()) {
      set_z_order(from.z_order());
    }
    if (from.has_drawable_object()) {
      mutable_drawable_object()->::TSP::Reference::MergeFrom(from.drawable_object());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveDrawablesCommandArchive_DrawableInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveDrawablesCommandArchive_DrawableInfo::CopyFrom(const RemoveDrawablesCommandArchive_DrawableInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveDrawablesCommandArchive_DrawableInfo::IsInitialized() const {

  if (has_drawable_object()) {
    if (!this->drawable_object().IsInitialized()) return false;
  }
  return true;
}

void RemoveDrawablesCommandArchive_DrawableInfo::Swap(RemoveDrawablesCommandArchive_DrawableInfo* other) {
  if (other != this) {
    std::swap(page_index_, other->page_index_);
    std::swap(z_order_, other->z_order_);
    std::swap(drawable_object_, other->drawable_object_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveDrawablesCommandArchive_DrawableInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveDrawablesCommandArchive_DrawableInfo_descriptor_;
  metadata.reflection = RemoveDrawablesCommandArchive_DrawableInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RemoveDrawablesCommandArchive::kSuperFieldNumber;
const int RemoveDrawablesCommandArchive::kDrawablesFieldNumber;
#endif  // !_MSC_VER

RemoveDrawablesCommandArchive::RemoveDrawablesCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveDrawablesCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
}

RemoveDrawablesCommandArchive::RemoveDrawablesCommandArchive(const RemoveDrawablesCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveDrawablesCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveDrawablesCommandArchive::~RemoveDrawablesCommandArchive() {
  SharedDtor();
}

void RemoveDrawablesCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void RemoveDrawablesCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveDrawablesCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveDrawablesCommandArchive_descriptor_;
}

const RemoveDrawablesCommandArchive& RemoveDrawablesCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPCommandArchives_2eproto();
  return *default_instance_;
}

RemoveDrawablesCommandArchive* RemoveDrawablesCommandArchive::default_instance_ = NULL;

RemoveDrawablesCommandArchive* RemoveDrawablesCommandArchive::New() const {
  return new RemoveDrawablesCommandArchive;
}

void RemoveDrawablesCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
  }
  drawables_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveDrawablesCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_drawables;
        break;
      }

      // repeated .TP.RemoveDrawablesCommandArchive.DrawableInfo drawables = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drawables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_drawables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_drawables;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveDrawablesCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // repeated .TP.RemoveDrawablesCommandArchive.DrawableInfo drawables = 2;
  for (int i = 0; i < this->drawables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->drawables(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveDrawablesCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // repeated .TP.RemoveDrawablesCommandArchive.DrawableInfo drawables = 2;
  for (int i = 0; i < this->drawables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->drawables(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveDrawablesCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  // repeated .TP.RemoveDrawablesCommandArchive.DrawableInfo drawables = 2;
  total_size += 1 * this->drawables_size();
  for (int i = 0; i < this->drawables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->drawables(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveDrawablesCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveDrawablesCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveDrawablesCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveDrawablesCommandArchive::MergeFrom(const RemoveDrawablesCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  drawables_.MergeFrom(from.drawables_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveDrawablesCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveDrawablesCommandArchive::CopyFrom(const RemoveDrawablesCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveDrawablesCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  for (int i = 0; i < drawables_size(); i++) {
    if (!this->drawables(i).IsInitialized()) return false;
  }
  return true;
}

void RemoveDrawablesCommandArchive::Swap(RemoveDrawablesCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    drawables_.Swap(&other->drawables_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveDrawablesCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveDrawablesCommandArchive_descriptor_;
  metadata.reflection = RemoveDrawablesCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NudgeDrawablesCommandArchive::kSuperFieldNumber;
const int NudgeDrawablesCommandArchive::kChildCommandsFieldNumber;
#endif  // !_MSC_VER

NudgeDrawablesCommandArchive::NudgeDrawablesCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NudgeDrawablesCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
}

NudgeDrawablesCommandArchive::NudgeDrawablesCommandArchive(const NudgeDrawablesCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NudgeDrawablesCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NudgeDrawablesCommandArchive::~NudgeDrawablesCommandArchive() {
  SharedDtor();
}

void NudgeDrawablesCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void NudgeDrawablesCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NudgeDrawablesCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NudgeDrawablesCommandArchive_descriptor_;
}

const NudgeDrawablesCommandArchive& NudgeDrawablesCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPCommandArchives_2eproto();
  return *default_instance_;
}

NudgeDrawablesCommandArchive* NudgeDrawablesCommandArchive::default_instance_ = NULL;

NudgeDrawablesCommandArchive* NudgeDrawablesCommandArchive::New() const {
  return new NudgeDrawablesCommandArchive;
}

void NudgeDrawablesCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
  }
  child_commands_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NudgeDrawablesCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_child_commands;
        break;
      }

      // repeated .TSP.Reference child_commands = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_child_commands:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_child_commands()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_child_commands;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NudgeDrawablesCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // repeated .TSP.Reference child_commands = 2;
  for (int i = 0; i < this->child_commands_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->child_commands(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NudgeDrawablesCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // repeated .TSP.Reference child_commands = 2;
  for (int i = 0; i < this->child_commands_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->child_commands(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NudgeDrawablesCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  // repeated .TSP.Reference child_commands = 2;
  total_size += 1 * this->child_commands_size();
  for (int i = 0; i < this->child_commands_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->child_commands(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NudgeDrawablesCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NudgeDrawablesCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NudgeDrawablesCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NudgeDrawablesCommandArchive::MergeFrom(const NudgeDrawablesCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  child_commands_.MergeFrom(from.child_commands_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NudgeDrawablesCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NudgeDrawablesCommandArchive::CopyFrom(const NudgeDrawablesCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NudgeDrawablesCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  for (int i = 0; i < child_commands_size(); i++) {
    if (!this->child_commands(i).IsInitialized()) return false;
  }
  return true;
}

void NudgeDrawablesCommandArchive::Swap(NudgeDrawablesCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    child_commands_.Swap(&other->child_commands_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NudgeDrawablesCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NudgeDrawablesCommandArchive_descriptor_;
  metadata.reflection = NudgeDrawablesCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ChangeHeaderFooterVisibilityCommandArchive_TPHeaderFooterType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeHeaderFooterVisibilityCommandArchive_TPHeaderFooterType_descriptor_;
}
bool ChangeHeaderFooterVisibilityCommandArchive_TPHeaderFooterType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ChangeHeaderFooterVisibilityCommandArchive_TPHeaderFooterType ChangeHeaderFooterVisibilityCommandArchive::kTPHeaderType;
const ChangeHeaderFooterVisibilityCommandArchive_TPHeaderFooterType ChangeHeaderFooterVisibilityCommandArchive::kTPFooterType;
const ChangeHeaderFooterVisibilityCommandArchive_TPHeaderFooterType ChangeHeaderFooterVisibilityCommandArchive::TPHeaderFooterType_MIN;
const ChangeHeaderFooterVisibilityCommandArchive_TPHeaderFooterType ChangeHeaderFooterVisibilityCommandArchive::TPHeaderFooterType_MAX;
const int ChangeHeaderFooterVisibilityCommandArchive::TPHeaderFooterType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ChangeHeaderFooterVisibilityCommandArchive_TPHeaderFragmentIndex_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeHeaderFooterVisibilityCommandArchive_TPHeaderFragmentIndex_descriptor_;
}
bool ChangeHeaderFooterVisibilityCommandArchive_TPHeaderFragmentIndex_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ChangeHeaderFooterVisibilityCommandArchive_TPHeaderFragmentIndex ChangeHeaderFooterVisibilityCommandArchive::kTPHeaderLeft;
const ChangeHeaderFooterVisibilityCommandArchive_TPHeaderFragmentIndex ChangeHeaderFooterVisibilityCommandArchive::kTPHeaderCenter;
const ChangeHeaderFooterVisibilityCommandArchive_TPHeaderFragmentIndex ChangeHeaderFooterVisibilityCommandArchive::kTPHeaderRight;
const ChangeHeaderFooterVisibilityCommandArchive_TPHeaderFragmentIndex ChangeHeaderFooterVisibilityCommandArchive::TPHeaderFragmentIndex_MIN;
const ChangeHeaderFooterVisibilityCommandArchive_TPHeaderFragmentIndex ChangeHeaderFooterVisibilityCommandArchive::TPHeaderFragmentIndex_MAX;
const int ChangeHeaderFooterVisibilityCommandArchive::TPHeaderFragmentIndex_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ChangeHeaderFooterVisibilityCommandArchive::kSuperFieldNumber;
const int ChangeHeaderFooterVisibilityCommandArchive::kVisibleFieldNumber;
const int ChangeHeaderFooterVisibilityCommandArchive::kTypeFieldNumber;
const int ChangeHeaderFooterVisibilityCommandArchive::kIndexToSelectFieldNumber;
const int ChangeHeaderFooterVisibilityCommandArchive::kStoragesFieldNumber;
#endif  // !_MSC_VER

ChangeHeaderFooterVisibilityCommandArchive::ChangeHeaderFooterVisibilityCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeHeaderFooterVisibilityCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
}

ChangeHeaderFooterVisibilityCommandArchive::ChangeHeaderFooterVisibilityCommandArchive(const ChangeHeaderFooterVisibilityCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeHeaderFooterVisibilityCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  visible_ = false;
  type_ = 0;
  index_to_select_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeHeaderFooterVisibilityCommandArchive::~ChangeHeaderFooterVisibilityCommandArchive() {
  SharedDtor();
}

void ChangeHeaderFooterVisibilityCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void ChangeHeaderFooterVisibilityCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeHeaderFooterVisibilityCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeHeaderFooterVisibilityCommandArchive_descriptor_;
}

const ChangeHeaderFooterVisibilityCommandArchive& ChangeHeaderFooterVisibilityCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPCommandArchives_2eproto();
  return *default_instance_;
}

ChangeHeaderFooterVisibilityCommandArchive* ChangeHeaderFooterVisibilityCommandArchive::default_instance_ = NULL;

ChangeHeaderFooterVisibilityCommandArchive* ChangeHeaderFooterVisibilityCommandArchive::New() const {
  return new ChangeHeaderFooterVisibilityCommandArchive;
}

void ChangeHeaderFooterVisibilityCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    visible_ = false;
    type_ = 0;
    index_to_select_ = 0;
  }
  storages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeHeaderFooterVisibilityCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_visible;
        break;
      }

      // optional bool visible = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
          set_has_visible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .TP.ChangeHeaderFooterVisibilityCommandArchive.TPHeaderFooterType type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TP::ChangeHeaderFooterVisibilityCommandArchive_TPHeaderFooterType_IsValid(value)) {
            set_type(static_cast< ::TP::ChangeHeaderFooterVisibilityCommandArchive_TPHeaderFooterType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_index_to_select;
        break;
      }

      // optional .TP.ChangeHeaderFooterVisibilityCommandArchive.TPHeaderFragmentIndex index_to_select = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index_to_select:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TP::ChangeHeaderFooterVisibilityCommandArchive_TPHeaderFragmentIndex_IsValid(value)) {
            set_index_to_select(static_cast< ::TP::ChangeHeaderFooterVisibilityCommandArchive_TPHeaderFragmentIndex >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_storages;
        break;
      }

      // repeated .TSP.Reference storages = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_storages()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_storages;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeHeaderFooterVisibilityCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional bool visible = 2;
  if (has_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->visible(), output);
  }

  // optional .TP.ChangeHeaderFooterVisibilityCommandArchive.TPHeaderFooterType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional .TP.ChangeHeaderFooterVisibilityCommandArchive.TPHeaderFragmentIndex index_to_select = 4;
  if (has_index_to_select()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->index_to_select(), output);
  }

  // repeated .TSP.Reference storages = 5;
  for (int i = 0; i < this->storages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->storages(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeHeaderFooterVisibilityCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional bool visible = 2;
  if (has_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->visible(), target);
  }

  // optional .TP.ChangeHeaderFooterVisibilityCommandArchive.TPHeaderFooterType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional .TP.ChangeHeaderFooterVisibilityCommandArchive.TPHeaderFragmentIndex index_to_select = 4;
  if (has_index_to_select()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->index_to_select(), target);
  }

  // repeated .TSP.Reference storages = 5;
  for (int i = 0; i < this->storages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->storages(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeHeaderFooterVisibilityCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional bool visible = 2;
    if (has_visible()) {
      total_size += 1 + 1;
    }

    // optional .TP.ChangeHeaderFooterVisibilityCommandArchive.TPHeaderFooterType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .TP.ChangeHeaderFooterVisibilityCommandArchive.TPHeaderFragmentIndex index_to_select = 4;
    if (has_index_to_select()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->index_to_select());
    }

  }
  // repeated .TSP.Reference storages = 5;
  total_size += 1 * this->storages_size();
  for (int i = 0; i < this->storages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->storages(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeHeaderFooterVisibilityCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeHeaderFooterVisibilityCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeHeaderFooterVisibilityCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeHeaderFooterVisibilityCommandArchive::MergeFrom(const ChangeHeaderFooterVisibilityCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  storages_.MergeFrom(from.storages_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_visible()) {
      set_visible(from.visible());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_index_to_select()) {
      set_index_to_select(from.index_to_select());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeHeaderFooterVisibilityCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeHeaderFooterVisibilityCommandArchive::CopyFrom(const ChangeHeaderFooterVisibilityCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeHeaderFooterVisibilityCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  for (int i = 0; i < storages_size(); i++) {
    if (!this->storages(i).IsInitialized()) return false;
  }
  return true;
}

void ChangeHeaderFooterVisibilityCommandArchive::Swap(ChangeHeaderFooterVisibilityCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(visible_, other->visible_);
    std::swap(type_, other->type_);
    std::swap(index_to_select_, other->index_to_select_);
    storages_.Swap(&other->storages_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeHeaderFooterVisibilityCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeHeaderFooterVisibilityCommandArchive_descriptor_;
  metadata.reflection = ChangeHeaderFooterVisibilityCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ChangeSectionMarginsCommandArchive_SectionMargin_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeSectionMarginsCommandArchive_SectionMargin_descriptor_;
}
bool ChangeSectionMarginsCommandArchive_SectionMargin_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ChangeSectionMarginsCommandArchive_SectionMargin ChangeSectionMarginsCommandArchive::kSectionMarginLeft;
const ChangeSectionMarginsCommandArchive_SectionMargin ChangeSectionMarginsCommandArchive::kSectionMarginRight;
const ChangeSectionMarginsCommandArchive_SectionMargin ChangeSectionMarginsCommandArchive::kSectionMarginTop;
const ChangeSectionMarginsCommandArchive_SectionMargin ChangeSectionMarginsCommandArchive::kSectionMarginBottom;
const ChangeSectionMarginsCommandArchive_SectionMargin ChangeSectionMarginsCommandArchive::kSectionMarginHeader;
const ChangeSectionMarginsCommandArchive_SectionMargin ChangeSectionMarginsCommandArchive::kSectionMarginFooter;
const ChangeSectionMarginsCommandArchive_SectionMargin ChangeSectionMarginsCommandArchive::SectionMargin_MIN;
const ChangeSectionMarginsCommandArchive_SectionMargin ChangeSectionMarginsCommandArchive::SectionMargin_MAX;
const int ChangeSectionMarginsCommandArchive::SectionMargin_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ChangeSectionMarginsCommandArchive::kSuperFieldNumber;
const int ChangeSectionMarginsCommandArchive::kSectionFieldNumber;
const int ChangeSectionMarginsCommandArchive::kMarginFieldNumber;
const int ChangeSectionMarginsCommandArchive::kMarginValueFieldNumber;
#endif  // !_MSC_VER

ChangeSectionMarginsCommandArchive::ChangeSectionMarginsCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeSectionMarginsCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  section_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

ChangeSectionMarginsCommandArchive::ChangeSectionMarginsCommandArchive(const ChangeSectionMarginsCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeSectionMarginsCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  section_ = NULL;
  margin_ = 0;
  margin_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeSectionMarginsCommandArchive::~ChangeSectionMarginsCommandArchive() {
  SharedDtor();
}

void ChangeSectionMarginsCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete section_;
  }
}

void ChangeSectionMarginsCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeSectionMarginsCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeSectionMarginsCommandArchive_descriptor_;
}

const ChangeSectionMarginsCommandArchive& ChangeSectionMarginsCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPCommandArchives_2eproto();
  return *default_instance_;
}

ChangeSectionMarginsCommandArchive* ChangeSectionMarginsCommandArchive::default_instance_ = NULL;

ChangeSectionMarginsCommandArchive* ChangeSectionMarginsCommandArchive::New() const {
  return new ChangeSectionMarginsCommandArchive;
}

void ChangeSectionMarginsCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_section()) {
      if (section_ != NULL) section_->::TSP::Reference::Clear();
    }
    margin_ = 0;
    margin_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeSectionMarginsCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_section;
        break;
      }

      // optional .TSP.Reference section = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_section:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_section()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_margin;
        break;
      }

      // optional .TP.ChangeSectionMarginsCommandArchive.SectionMargin margin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_margin:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TP::ChangeSectionMarginsCommandArchive_SectionMargin_IsValid(value)) {
            set_margin(static_cast< ::TP::ChangeSectionMarginsCommandArchive_SectionMargin >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_margin_value;
        break;
      }

      // optional float margin_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_margin_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &margin_value_)));
          set_has_margin_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeSectionMarginsCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference section = 2;
  if (has_section()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->section(), output);
  }

  // optional .TP.ChangeSectionMarginsCommandArchive.SectionMargin margin = 3;
  if (has_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->margin(), output);
  }

  // optional float margin_value = 4;
  if (has_margin_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->margin_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeSectionMarginsCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference section = 2;
  if (has_section()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->section(), target);
  }

  // optional .TP.ChangeSectionMarginsCommandArchive.SectionMargin margin = 3;
  if (has_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->margin(), target);
  }

  // optional float margin_value = 4;
  if (has_margin_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->margin_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeSectionMarginsCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference section = 2;
    if (has_section()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->section());
    }

    // optional .TP.ChangeSectionMarginsCommandArchive.SectionMargin margin = 3;
    if (has_margin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->margin());
    }

    // optional float margin_value = 4;
    if (has_margin_value()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeSectionMarginsCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeSectionMarginsCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeSectionMarginsCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeSectionMarginsCommandArchive::MergeFrom(const ChangeSectionMarginsCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_section()) {
      mutable_section()->::TSP::Reference::MergeFrom(from.section());
    }
    if (from.has_margin()) {
      set_margin(from.margin());
    }
    if (from.has_margin_value()) {
      set_margin_value(from.margin_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeSectionMarginsCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeSectionMarginsCommandArchive::CopyFrom(const ChangeSectionMarginsCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeSectionMarginsCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_section()) {
    if (!this->section().IsInitialized()) return false;
  }
  return true;
}

void ChangeSectionMarginsCommandArchive::Swap(ChangeSectionMarginsCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(section_, other->section_);
    std::swap(margin_, other->margin_);
    std::swap(margin_value_, other->margin_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeSectionMarginsCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeSectionMarginsCommandArchive_descriptor_;
  metadata.reflection = ChangeSectionMarginsCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeDocumentPrinterOptionsCommandArchive::kSuperFieldNumber;
const int ChangeDocumentPrinterOptionsCommandArchive::kOBSOLETESectionFieldNumber;
const int ChangeDocumentPrinterOptionsCommandArchive::kPaperWidthFieldNumber;
const int ChangeDocumentPrinterOptionsCommandArchive::kPaperHeightFieldNumber;
const int ChangeDocumentPrinterOptionsCommandArchive::kPageScaleFieldNumber;
const int ChangeDocumentPrinterOptionsCommandArchive::kOrientationFieldNumber;
const int ChangeDocumentPrinterOptionsCommandArchive::kPrinterIdFieldNumber;
const int ChangeDocumentPrinterOptionsCommandArchive::kPaperIdFieldNumber;
#endif  // !_MSC_VER

ChangeDocumentPrinterOptionsCommandArchive::ChangeDocumentPrinterOptionsCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeDocumentPrinterOptionsCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  obsolete_section_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

ChangeDocumentPrinterOptionsCommandArchive::ChangeDocumentPrinterOptionsCommandArchive(const ChangeDocumentPrinterOptionsCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeDocumentPrinterOptionsCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  obsolete_section_ = NULL;
  paper_width_ = 0;
  paper_height_ = 0;
  page_scale_ = 0;
  orientation_ = 0u;
  printer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  paper_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeDocumentPrinterOptionsCommandArchive::~ChangeDocumentPrinterOptionsCommandArchive() {
  SharedDtor();
}

void ChangeDocumentPrinterOptionsCommandArchive::SharedDtor() {
  if (printer_id_ != &::google::protobuf::internal::kEmptyString) {
    delete printer_id_;
  }
  if (paper_id_ != &::google::protobuf::internal::kEmptyString) {
    delete paper_id_;
  }
  if (this != default_instance_) {
    delete super_;
    delete obsolete_section_;
  }
}

void ChangeDocumentPrinterOptionsCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeDocumentPrinterOptionsCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeDocumentPrinterOptionsCommandArchive_descriptor_;
}

const ChangeDocumentPrinterOptionsCommandArchive& ChangeDocumentPrinterOptionsCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPCommandArchives_2eproto();
  return *default_instance_;
}

ChangeDocumentPrinterOptionsCommandArchive* ChangeDocumentPrinterOptionsCommandArchive::default_instance_ = NULL;

ChangeDocumentPrinterOptionsCommandArchive* ChangeDocumentPrinterOptionsCommandArchive::New() const {
  return new ChangeDocumentPrinterOptionsCommandArchive;
}

void ChangeDocumentPrinterOptionsCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_obsolete_section()) {
      if (obsolete_section_ != NULL) obsolete_section_->::TSP::Reference::Clear();
    }
    paper_width_ = 0;
    paper_height_ = 0;
    page_scale_ = 0;
    orientation_ = 0u;
    if (has_printer_id()) {
      if (printer_id_ != &::google::protobuf::internal::kEmptyString) {
        printer_id_->clear();
      }
    }
    if (has_paper_id()) {
      if (paper_id_ != &::google::protobuf::internal::kEmptyString) {
        paper_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeDocumentPrinterOptionsCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_OBSOLETE_section;
        break;
      }

      // optional .TSP.Reference OBSOLETE_section = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OBSOLETE_section:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_obsolete_section()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_paper_width;
        break;
      }

      // optional float paper_width = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_paper_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &paper_width_)));
          set_has_paper_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_paper_height;
        break;
      }

      // optional float paper_height = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_paper_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &paper_height_)));
          set_has_paper_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_page_scale;
        break;
      }

      // optional float page_scale = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_page_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &page_scale_)));
          set_has_page_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_orientation;
        break;
      }

      // optional uint32 orientation = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_orientation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &orientation_)));
          set_has_orientation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_printer_id;
        break;
      }

      // optional string printer_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_printer_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_printer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->printer_id().data(), this->printer_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_paper_id;
        break;
      }

      // optional string paper_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_paper_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_paper_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->paper_id().data(), this->paper_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeDocumentPrinterOptionsCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference OBSOLETE_section = 2;
  if (has_obsolete_section()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->obsolete_section(), output);
  }

  // optional float paper_width = 3;
  if (has_paper_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->paper_width(), output);
  }

  // optional float paper_height = 4;
  if (has_paper_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->paper_height(), output);
  }

  // optional float page_scale = 5;
  if (has_page_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->page_scale(), output);
  }

  // optional uint32 orientation = 6;
  if (has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->orientation(), output);
  }

  // optional string printer_id = 7;
  if (has_printer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->printer_id().data(), this->printer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->printer_id(), output);
  }

  // optional string paper_id = 8;
  if (has_paper_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->paper_id().data(), this->paper_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->paper_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeDocumentPrinterOptionsCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference OBSOLETE_section = 2;
  if (has_obsolete_section()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->obsolete_section(), target);
  }

  // optional float paper_width = 3;
  if (has_paper_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->paper_width(), target);
  }

  // optional float paper_height = 4;
  if (has_paper_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->paper_height(), target);
  }

  // optional float page_scale = 5;
  if (has_page_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->page_scale(), target);
  }

  // optional uint32 orientation = 6;
  if (has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->orientation(), target);
  }

  // optional string printer_id = 7;
  if (has_printer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->printer_id().data(), this->printer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->printer_id(), target);
  }

  // optional string paper_id = 8;
  if (has_paper_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->paper_id().data(), this->paper_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->paper_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeDocumentPrinterOptionsCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference OBSOLETE_section = 2;
    if (has_obsolete_section()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->obsolete_section());
    }

    // optional float paper_width = 3;
    if (has_paper_width()) {
      total_size += 1 + 4;
    }

    // optional float paper_height = 4;
    if (has_paper_height()) {
      total_size += 1 + 4;
    }

    // optional float page_scale = 5;
    if (has_page_scale()) {
      total_size += 1 + 4;
    }

    // optional uint32 orientation = 6;
    if (has_orientation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->orientation());
    }

    // optional string printer_id = 7;
    if (has_printer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->printer_id());
    }

    // optional string paper_id = 8;
    if (has_paper_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->paper_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeDocumentPrinterOptionsCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeDocumentPrinterOptionsCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeDocumentPrinterOptionsCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeDocumentPrinterOptionsCommandArchive::MergeFrom(const ChangeDocumentPrinterOptionsCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_obsolete_section()) {
      mutable_obsolete_section()->::TSP::Reference::MergeFrom(from.obsolete_section());
    }
    if (from.has_paper_width()) {
      set_paper_width(from.paper_width());
    }
    if (from.has_paper_height()) {
      set_paper_height(from.paper_height());
    }
    if (from.has_page_scale()) {
      set_page_scale(from.page_scale());
    }
    if (from.has_orientation()) {
      set_orientation(from.orientation());
    }
    if (from.has_printer_id()) {
      set_printer_id(from.printer_id());
    }
    if (from.has_paper_id()) {
      set_paper_id(from.paper_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeDocumentPrinterOptionsCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeDocumentPrinterOptionsCommandArchive::CopyFrom(const ChangeDocumentPrinterOptionsCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeDocumentPrinterOptionsCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_obsolete_section()) {
    if (!this->obsolete_section().IsInitialized()) return false;
  }
  return true;
}

void ChangeDocumentPrinterOptionsCommandArchive::Swap(ChangeDocumentPrinterOptionsCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(obsolete_section_, other->obsolete_section_);
    std::swap(paper_width_, other->paper_width_);
    std::swap(paper_height_, other->paper_height_);
    std::swap(page_scale_, other->page_scale_);
    std::swap(orientation_, other->orientation_);
    std::swap(printer_id_, other->printer_id_);
    std::swap(paper_id_, other->paper_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeDocumentPrinterOptionsCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeDocumentPrinterOptionsCommandArchive_descriptor_;
  metadata.reflection = ChangeDocumentPrinterOptionsCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InsertMasterDrawablesCommandArchive::kSuperFieldNumber;
const int InsertMasterDrawablesCommandArchive::kOBSOLETESectionFieldNumber;
const int InsertMasterDrawablesCommandArchive::kMasterDrawablesFieldNumber;
const int InsertMasterDrawablesCommandArchive::kDrawableIndexFieldNumber;
const int InsertMasterDrawablesCommandArchive::kMasterDrawableProviderFieldNumber;
#endif  // !_MSC_VER

InsertMasterDrawablesCommandArchive::InsertMasterDrawablesCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InsertMasterDrawablesCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  obsolete_section_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  master_drawable_provider_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

InsertMasterDrawablesCommandArchive::InsertMasterDrawablesCommandArchive(const InsertMasterDrawablesCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InsertMasterDrawablesCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  obsolete_section_ = NULL;
  drawable_index_ = 0u;
  master_drawable_provider_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InsertMasterDrawablesCommandArchive::~InsertMasterDrawablesCommandArchive() {
  SharedDtor();
}

void InsertMasterDrawablesCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete obsolete_section_;
    delete master_drawable_provider_;
  }
}

void InsertMasterDrawablesCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InsertMasterDrawablesCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InsertMasterDrawablesCommandArchive_descriptor_;
}

const InsertMasterDrawablesCommandArchive& InsertMasterDrawablesCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPCommandArchives_2eproto();
  return *default_instance_;
}

InsertMasterDrawablesCommandArchive* InsertMasterDrawablesCommandArchive::default_instance_ = NULL;

InsertMasterDrawablesCommandArchive* InsertMasterDrawablesCommandArchive::New() const {
  return new InsertMasterDrawablesCommandArchive;
}

void InsertMasterDrawablesCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_obsolete_section()) {
      if (obsolete_section_ != NULL) obsolete_section_->::TSP::Reference::Clear();
    }
    drawable_index_ = 0u;
    if (has_master_drawable_provider()) {
      if (master_drawable_provider_ != NULL) master_drawable_provider_->::TSP::Reference::Clear();
    }
  }
  master_drawables_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InsertMasterDrawablesCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_OBSOLETE_section;
        break;
      }

      // optional .TSP.Reference OBSOLETE_section = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OBSOLETE_section:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_obsolete_section()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_master_drawables;
        break;
      }

      // repeated .TSP.Reference master_drawables = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_master_drawables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_master_drawables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_master_drawables;
        if (input->ExpectTag(32)) goto parse_drawable_index;
        break;
      }

      // optional uint32 drawable_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drawable_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &drawable_index_)));
          set_has_drawable_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_master_drawable_provider;
        break;
      }

      // optional .TSP.Reference master_drawable_provider = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_master_drawable_provider:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_master_drawable_provider()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InsertMasterDrawablesCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference OBSOLETE_section = 2;
  if (has_obsolete_section()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->obsolete_section(), output);
  }

  // repeated .TSP.Reference master_drawables = 3;
  for (int i = 0; i < this->master_drawables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->master_drawables(i), output);
  }

  // optional uint32 drawable_index = 4;
  if (has_drawable_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->drawable_index(), output);
  }

  // optional .TSP.Reference master_drawable_provider = 5;
  if (has_master_drawable_provider()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->master_drawable_provider(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InsertMasterDrawablesCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference OBSOLETE_section = 2;
  if (has_obsolete_section()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->obsolete_section(), target);
  }

  // repeated .TSP.Reference master_drawables = 3;
  for (int i = 0; i < this->master_drawables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->master_drawables(i), target);
  }

  // optional uint32 drawable_index = 4;
  if (has_drawable_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->drawable_index(), target);
  }

  // optional .TSP.Reference master_drawable_provider = 5;
  if (has_master_drawable_provider()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->master_drawable_provider(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InsertMasterDrawablesCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference OBSOLETE_section = 2;
    if (has_obsolete_section()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->obsolete_section());
    }

    // optional uint32 drawable_index = 4;
    if (has_drawable_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->drawable_index());
    }

    // optional .TSP.Reference master_drawable_provider = 5;
    if (has_master_drawable_provider()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->master_drawable_provider());
    }

  }
  // repeated .TSP.Reference master_drawables = 3;
  total_size += 1 * this->master_drawables_size();
  for (int i = 0; i < this->master_drawables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->master_drawables(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InsertMasterDrawablesCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InsertMasterDrawablesCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InsertMasterDrawablesCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InsertMasterDrawablesCommandArchive::MergeFrom(const InsertMasterDrawablesCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  master_drawables_.MergeFrom(from.master_drawables_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_obsolete_section()) {
      mutable_obsolete_section()->::TSP::Reference::MergeFrom(from.obsolete_section());
    }
    if (from.has_drawable_index()) {
      set_drawable_index(from.drawable_index());
    }
    if (from.has_master_drawable_provider()) {
      mutable_master_drawable_provider()->::TSP::Reference::MergeFrom(from.master_drawable_provider());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InsertMasterDrawablesCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertMasterDrawablesCommandArchive::CopyFrom(const InsertMasterDrawablesCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertMasterDrawablesCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_obsolete_section()) {
    if (!this->obsolete_section().IsInitialized()) return false;
  }
  for (int i = 0; i < master_drawables_size(); i++) {
    if (!this->master_drawables(i).IsInitialized()) return false;
  }
  if (has_master_drawable_provider()) {
    if (!this->master_drawable_provider().IsInitialized()) return false;
  }
  return true;
}

void InsertMasterDrawablesCommandArchive::Swap(InsertMasterDrawablesCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(obsolete_section_, other->obsolete_section_);
    master_drawables_.Swap(&other->master_drawables_);
    std::swap(drawable_index_, other->drawable_index_);
    std::swap(master_drawable_provider_, other->master_drawable_provider_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InsertMasterDrawablesCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InsertMasterDrawablesCommandArchive_descriptor_;
  metadata.reflection = InsertMasterDrawablesCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoveMasterDrawableZOrderCommandArchive::kSuperFieldNumber;
const int MoveMasterDrawableZOrderCommandArchive::kOBSOLETESectionFieldNumber;
const int MoveMasterDrawableZOrderCommandArchive::kMasterDrawablesFieldNumber;
const int MoveMasterDrawableZOrderCommandArchive::kIndexesFieldNumber;
const int MoveMasterDrawableZOrderCommandArchive::kMasterDrawableProviderFieldNumber;
#endif  // !_MSC_VER

MoveMasterDrawableZOrderCommandArchive::MoveMasterDrawableZOrderCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoveMasterDrawableZOrderCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  obsolete_section_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  master_drawable_provider_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

MoveMasterDrawableZOrderCommandArchive::MoveMasterDrawableZOrderCommandArchive(const MoveMasterDrawableZOrderCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoveMasterDrawableZOrderCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  obsolete_section_ = NULL;
  master_drawable_provider_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveMasterDrawableZOrderCommandArchive::~MoveMasterDrawableZOrderCommandArchive() {
  SharedDtor();
}

void MoveMasterDrawableZOrderCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete obsolete_section_;
    delete master_drawable_provider_;
  }
}

void MoveMasterDrawableZOrderCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveMasterDrawableZOrderCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveMasterDrawableZOrderCommandArchive_descriptor_;
}

const MoveMasterDrawableZOrderCommandArchive& MoveMasterDrawableZOrderCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPCommandArchives_2eproto();
  return *default_instance_;
}

MoveMasterDrawableZOrderCommandArchive* MoveMasterDrawableZOrderCommandArchive::default_instance_ = NULL;

MoveMasterDrawableZOrderCommandArchive* MoveMasterDrawableZOrderCommandArchive::New() const {
  return new MoveMasterDrawableZOrderCommandArchive;
}

void MoveMasterDrawableZOrderCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_obsolete_section()) {
      if (obsolete_section_ != NULL) obsolete_section_->::TSP::Reference::Clear();
    }
    if (has_master_drawable_provider()) {
      if (master_drawable_provider_ != NULL) master_drawable_provider_->::TSP::Reference::Clear();
    }
  }
  master_drawables_.Clear();
  indexes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoveMasterDrawableZOrderCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_OBSOLETE_section;
        break;
      }

      // optional .TSP.Reference OBSOLETE_section = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OBSOLETE_section:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_obsolete_section()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_master_drawables;
        break;
      }

      // repeated .TSP.Reference master_drawables = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_master_drawables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_master_drawables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_master_drawables;
        if (input->ExpectTag(32)) goto parse_indexes;
        break;
      }

      // repeated uint32 indexes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_indexes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_indexes())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_indexes())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_indexes;
        if (input->ExpectTag(42)) goto parse_master_drawable_provider;
        break;
      }

      // optional .TSP.Reference master_drawable_provider = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_master_drawable_provider:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_master_drawable_provider()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoveMasterDrawableZOrderCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference OBSOLETE_section = 2;
  if (has_obsolete_section()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->obsolete_section(), output);
  }

  // repeated .TSP.Reference master_drawables = 3;
  for (int i = 0; i < this->master_drawables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->master_drawables(i), output);
  }

  // repeated uint32 indexes = 4;
  for (int i = 0; i < this->indexes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->indexes(i), output);
  }

  // optional .TSP.Reference master_drawable_provider = 5;
  if (has_master_drawable_provider()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->master_drawable_provider(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoveMasterDrawableZOrderCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference OBSOLETE_section = 2;
  if (has_obsolete_section()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->obsolete_section(), target);
  }

  // repeated .TSP.Reference master_drawables = 3;
  for (int i = 0; i < this->master_drawables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->master_drawables(i), target);
  }

  // repeated uint32 indexes = 4;
  for (int i = 0; i < this->indexes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->indexes(i), target);
  }

  // optional .TSP.Reference master_drawable_provider = 5;
  if (has_master_drawable_provider()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->master_drawable_provider(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoveMasterDrawableZOrderCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference OBSOLETE_section = 2;
    if (has_obsolete_section()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->obsolete_section());
    }

    // optional .TSP.Reference master_drawable_provider = 5;
    if (has_master_drawable_provider()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->master_drawable_provider());
    }

  }
  // repeated .TSP.Reference master_drawables = 3;
  total_size += 1 * this->master_drawables_size();
  for (int i = 0; i < this->master_drawables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->master_drawables(i));
  }

  // repeated uint32 indexes = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->indexes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->indexes(i));
    }
    total_size += 1 * this->indexes_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveMasterDrawableZOrderCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoveMasterDrawableZOrderCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoveMasterDrawableZOrderCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoveMasterDrawableZOrderCommandArchive::MergeFrom(const MoveMasterDrawableZOrderCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  master_drawables_.MergeFrom(from.master_drawables_);
  indexes_.MergeFrom(from.indexes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_obsolete_section()) {
      mutable_obsolete_section()->::TSP::Reference::MergeFrom(from.obsolete_section());
    }
    if (from.has_master_drawable_provider()) {
      mutable_master_drawable_provider()->::TSP::Reference::MergeFrom(from.master_drawable_provider());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoveMasterDrawableZOrderCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveMasterDrawableZOrderCommandArchive::CopyFrom(const MoveMasterDrawableZOrderCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveMasterDrawableZOrderCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_obsolete_section()) {
    if (!this->obsolete_section().IsInitialized()) return false;
  }
  for (int i = 0; i < master_drawables_size(); i++) {
    if (!this->master_drawables(i).IsInitialized()) return false;
  }
  if (has_master_drawable_provider()) {
    if (!this->master_drawable_provider().IsInitialized()) return false;
  }
  return true;
}

void MoveMasterDrawableZOrderCommandArchive::Swap(MoveMasterDrawableZOrderCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(obsolete_section_, other->obsolete_section_);
    master_drawables_.Swap(&other->master_drawables_);
    indexes_.Swap(&other->indexes_);
    std::swap(master_drawable_provider_, other->master_drawable_provider_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoveMasterDrawableZOrderCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveMasterDrawableZOrderCommandArchive_descriptor_;
  metadata.reflection = MoveMasterDrawableZOrderCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveMasterDrawablesCommandArchive_MasterDrawable::kDrawableFieldNumber;
const int RemoveMasterDrawablesCommandArchive_MasterDrawable::kDrawableIndexFieldNumber;
#endif  // !_MSC_VER

RemoveMasterDrawablesCommandArchive_MasterDrawable::RemoveMasterDrawablesCommandArchive_MasterDrawable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveMasterDrawablesCommandArchive_MasterDrawable::InitAsDefaultInstance() {
  drawable_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

RemoveMasterDrawablesCommandArchive_MasterDrawable::RemoveMasterDrawablesCommandArchive_MasterDrawable(const RemoveMasterDrawablesCommandArchive_MasterDrawable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveMasterDrawablesCommandArchive_MasterDrawable::SharedCtor() {
  _cached_size_ = 0;
  drawable_ = NULL;
  drawable_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveMasterDrawablesCommandArchive_MasterDrawable::~RemoveMasterDrawablesCommandArchive_MasterDrawable() {
  SharedDtor();
}

void RemoveMasterDrawablesCommandArchive_MasterDrawable::SharedDtor() {
  if (this != default_instance_) {
    delete drawable_;
  }
}

void RemoveMasterDrawablesCommandArchive_MasterDrawable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveMasterDrawablesCommandArchive_MasterDrawable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveMasterDrawablesCommandArchive_MasterDrawable_descriptor_;
}

const RemoveMasterDrawablesCommandArchive_MasterDrawable& RemoveMasterDrawablesCommandArchive_MasterDrawable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPCommandArchives_2eproto();
  return *default_instance_;
}

RemoveMasterDrawablesCommandArchive_MasterDrawable* RemoveMasterDrawablesCommandArchive_MasterDrawable::default_instance_ = NULL;

RemoveMasterDrawablesCommandArchive_MasterDrawable* RemoveMasterDrawablesCommandArchive_MasterDrawable::New() const {
  return new RemoveMasterDrawablesCommandArchive_MasterDrawable;
}

void RemoveMasterDrawablesCommandArchive_MasterDrawable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_drawable()) {
      if (drawable_ != NULL) drawable_->::TSP::Reference::Clear();
    }
    drawable_index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveMasterDrawablesCommandArchive_MasterDrawable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Reference drawable = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_drawable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_drawable_index;
        break;
      }

      // optional uint32 drawable_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drawable_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &drawable_index_)));
          set_has_drawable_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveMasterDrawablesCommandArchive_MasterDrawable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Reference drawable = 1;
  if (has_drawable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->drawable(), output);
  }

  // optional uint32 drawable_index = 2;
  if (has_drawable_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->drawable_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveMasterDrawablesCommandArchive_MasterDrawable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Reference drawable = 1;
  if (has_drawable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->drawable(), target);
  }

  // optional uint32 drawable_index = 2;
  if (has_drawable_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->drawable_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveMasterDrawablesCommandArchive_MasterDrawable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.Reference drawable = 1;
    if (has_drawable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->drawable());
    }

    // optional uint32 drawable_index = 2;
    if (has_drawable_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->drawable_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveMasterDrawablesCommandArchive_MasterDrawable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveMasterDrawablesCommandArchive_MasterDrawable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveMasterDrawablesCommandArchive_MasterDrawable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveMasterDrawablesCommandArchive_MasterDrawable::MergeFrom(const RemoveMasterDrawablesCommandArchive_MasterDrawable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_drawable()) {
      mutable_drawable()->::TSP::Reference::MergeFrom(from.drawable());
    }
    if (from.has_drawable_index()) {
      set_drawable_index(from.drawable_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveMasterDrawablesCommandArchive_MasterDrawable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveMasterDrawablesCommandArchive_MasterDrawable::CopyFrom(const RemoveMasterDrawablesCommandArchive_MasterDrawable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveMasterDrawablesCommandArchive_MasterDrawable::IsInitialized() const {

  if (has_drawable()) {
    if (!this->drawable().IsInitialized()) return false;
  }
  return true;
}

void RemoveMasterDrawablesCommandArchive_MasterDrawable::Swap(RemoveMasterDrawablesCommandArchive_MasterDrawable* other) {
  if (other != this) {
    std::swap(drawable_, other->drawable_);
    std::swap(drawable_index_, other->drawable_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveMasterDrawablesCommandArchive_MasterDrawable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveMasterDrawablesCommandArchive_MasterDrawable_descriptor_;
  metadata.reflection = RemoveMasterDrawablesCommandArchive_MasterDrawable_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RemoveMasterDrawablesCommandArchive::kSuperFieldNumber;
const int RemoveMasterDrawablesCommandArchive::kOBSOLETESectionFieldNumber;
const int RemoveMasterDrawablesCommandArchive::kMasterDrawablesFieldNumber;
const int RemoveMasterDrawablesCommandArchive::kMasterDrawableProviderFieldNumber;
#endif  // !_MSC_VER

RemoveMasterDrawablesCommandArchive::RemoveMasterDrawablesCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveMasterDrawablesCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  obsolete_section_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  master_drawable_provider_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

RemoveMasterDrawablesCommandArchive::RemoveMasterDrawablesCommandArchive(const RemoveMasterDrawablesCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveMasterDrawablesCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  obsolete_section_ = NULL;
  master_drawable_provider_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveMasterDrawablesCommandArchive::~RemoveMasterDrawablesCommandArchive() {
  SharedDtor();
}

void RemoveMasterDrawablesCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete obsolete_section_;
    delete master_drawable_provider_;
  }
}

void RemoveMasterDrawablesCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveMasterDrawablesCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveMasterDrawablesCommandArchive_descriptor_;
}

const RemoveMasterDrawablesCommandArchive& RemoveMasterDrawablesCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPCommandArchives_2eproto();
  return *default_instance_;
}

RemoveMasterDrawablesCommandArchive* RemoveMasterDrawablesCommandArchive::default_instance_ = NULL;

RemoveMasterDrawablesCommandArchive* RemoveMasterDrawablesCommandArchive::New() const {
  return new RemoveMasterDrawablesCommandArchive;
}

void RemoveMasterDrawablesCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_obsolete_section()) {
      if (obsolete_section_ != NULL) obsolete_section_->::TSP::Reference::Clear();
    }
    if (has_master_drawable_provider()) {
      if (master_drawable_provider_ != NULL) master_drawable_provider_->::TSP::Reference::Clear();
    }
  }
  master_drawables_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveMasterDrawablesCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_OBSOLETE_section;
        break;
      }

      // optional .TSP.Reference OBSOLETE_section = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OBSOLETE_section:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_obsolete_section()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_master_drawables;
        break;
      }

      // repeated .TP.RemoveMasterDrawablesCommandArchive.MasterDrawable master_drawables = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_master_drawables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_master_drawables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_master_drawables;
        if (input->ExpectTag(34)) goto parse_master_drawable_provider;
        break;
      }

      // optional .TSP.Reference master_drawable_provider = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_master_drawable_provider:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_master_drawable_provider()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveMasterDrawablesCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference OBSOLETE_section = 2;
  if (has_obsolete_section()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->obsolete_section(), output);
  }

  // repeated .TP.RemoveMasterDrawablesCommandArchive.MasterDrawable master_drawables = 3;
  for (int i = 0; i < this->master_drawables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->master_drawables(i), output);
  }

  // optional .TSP.Reference master_drawable_provider = 4;
  if (has_master_drawable_provider()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->master_drawable_provider(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveMasterDrawablesCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference OBSOLETE_section = 2;
  if (has_obsolete_section()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->obsolete_section(), target);
  }

  // repeated .TP.RemoveMasterDrawablesCommandArchive.MasterDrawable master_drawables = 3;
  for (int i = 0; i < this->master_drawables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->master_drawables(i), target);
  }

  // optional .TSP.Reference master_drawable_provider = 4;
  if (has_master_drawable_provider()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->master_drawable_provider(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveMasterDrawablesCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference OBSOLETE_section = 2;
    if (has_obsolete_section()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->obsolete_section());
    }

    // optional .TSP.Reference master_drawable_provider = 4;
    if (has_master_drawable_provider()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->master_drawable_provider());
    }

  }
  // repeated .TP.RemoveMasterDrawablesCommandArchive.MasterDrawable master_drawables = 3;
  total_size += 1 * this->master_drawables_size();
  for (int i = 0; i < this->master_drawables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->master_drawables(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveMasterDrawablesCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveMasterDrawablesCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveMasterDrawablesCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveMasterDrawablesCommandArchive::MergeFrom(const RemoveMasterDrawablesCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  master_drawables_.MergeFrom(from.master_drawables_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_obsolete_section()) {
      mutable_obsolete_section()->::TSP::Reference::MergeFrom(from.obsolete_section());
    }
    if (from.has_master_drawable_provider()) {
      mutable_master_drawable_provider()->::TSP::Reference::MergeFrom(from.master_drawable_provider());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveMasterDrawablesCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveMasterDrawablesCommandArchive::CopyFrom(const RemoveMasterDrawablesCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveMasterDrawablesCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_obsolete_section()) {
    if (!this->obsolete_section().IsInitialized()) return false;
  }
  for (int i = 0; i < master_drawables_size(); i++) {
    if (!this->master_drawables(i).IsInitialized()) return false;
  }
  if (has_master_drawable_provider()) {
    if (!this->master_drawable_provider().IsInitialized()) return false;
  }
  return true;
}

void RemoveMasterDrawablesCommandArchive::Swap(RemoveMasterDrawablesCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(obsolete_section_, other->obsolete_section_);
    master_drawables_.Swap(&other->master_drawables_);
    std::swap(master_drawable_provider_, other->master_drawable_provider_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveMasterDrawablesCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveMasterDrawablesCommandArchive_descriptor_;
  metadata.reflection = RemoveMasterDrawablesCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PasteMasterDrawablesCommandArchive::kSuperFieldNumber;
const int PasteMasterDrawablesCommandArchive::kSectionFieldNumber;
const int PasteMasterDrawablesCommandArchive::kMasterDrawablesFieldNumber;
const int PasteMasterDrawablesCommandArchive::kDrawableIndexFieldNumber;
#endif  // !_MSC_VER

PasteMasterDrawablesCommandArchive::PasteMasterDrawablesCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PasteMasterDrawablesCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  section_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

PasteMasterDrawablesCommandArchive::PasteMasterDrawablesCommandArchive(const PasteMasterDrawablesCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PasteMasterDrawablesCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  section_ = NULL;
  drawable_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PasteMasterDrawablesCommandArchive::~PasteMasterDrawablesCommandArchive() {
  SharedDtor();
}

void PasteMasterDrawablesCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete section_;
  }
}

void PasteMasterDrawablesCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PasteMasterDrawablesCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PasteMasterDrawablesCommandArchive_descriptor_;
}

const PasteMasterDrawablesCommandArchive& PasteMasterDrawablesCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPCommandArchives_2eproto();
  return *default_instance_;
}

PasteMasterDrawablesCommandArchive* PasteMasterDrawablesCommandArchive::default_instance_ = NULL;

PasteMasterDrawablesCommandArchive* PasteMasterDrawablesCommandArchive::New() const {
  return new PasteMasterDrawablesCommandArchive;
}

void PasteMasterDrawablesCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_section()) {
      if (section_ != NULL) section_->::TSP::Reference::Clear();
    }
    drawable_index_ = 0u;
  }
  master_drawables_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PasteMasterDrawablesCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_section;
        break;
      }

      // optional .TSP.Reference section = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_section:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_section()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_master_drawables;
        break;
      }

      // repeated .TSP.Reference master_drawables = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_master_drawables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_master_drawables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_master_drawables;
        if (input->ExpectTag(32)) goto parse_drawable_index;
        break;
      }

      // optional uint32 drawable_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drawable_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &drawable_index_)));
          set_has_drawable_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PasteMasterDrawablesCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference section = 2;
  if (has_section()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->section(), output);
  }

  // repeated .TSP.Reference master_drawables = 3;
  for (int i = 0; i < this->master_drawables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->master_drawables(i), output);
  }

  // optional uint32 drawable_index = 4;
  if (has_drawable_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->drawable_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PasteMasterDrawablesCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference section = 2;
  if (has_section()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->section(), target);
  }

  // repeated .TSP.Reference master_drawables = 3;
  for (int i = 0; i < this->master_drawables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->master_drawables(i), target);
  }

  // optional uint32 drawable_index = 4;
  if (has_drawable_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->drawable_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PasteMasterDrawablesCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference section = 2;
    if (has_section()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->section());
    }

    // optional uint32 drawable_index = 4;
    if (has_drawable_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->drawable_index());
    }

  }
  // repeated .TSP.Reference master_drawables = 3;
  total_size += 1 * this->master_drawables_size();
  for (int i = 0; i < this->master_drawables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->master_drawables(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PasteMasterDrawablesCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PasteMasterDrawablesCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PasteMasterDrawablesCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PasteMasterDrawablesCommandArchive::MergeFrom(const PasteMasterDrawablesCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  master_drawables_.MergeFrom(from.master_drawables_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_section()) {
      mutable_section()->::TSP::Reference::MergeFrom(from.section());
    }
    if (from.has_drawable_index()) {
      set_drawable_index(from.drawable_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PasteMasterDrawablesCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PasteMasterDrawablesCommandArchive::CopyFrom(const PasteMasterDrawablesCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PasteMasterDrawablesCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_section()) {
    if (!this->section().IsInitialized()) return false;
  }
  for (int i = 0; i < master_drawables_size(); i++) {
    if (!this->master_drawables(i).IsInitialized()) return false;
  }
  return true;
}

void PasteMasterDrawablesCommandArchive::Swap(PasteMasterDrawablesCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(section_, other->section_);
    master_drawables_.Swap(&other->master_drawables_);
    std::swap(drawable_index_, other->drawable_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PasteMasterDrawablesCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PasteMasterDrawablesCommandArchive_descriptor_;
  metadata.reflection = PasteMasterDrawablesCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoveDrawablesAttachedCommandArchive_FloatingUndo::kDrawableFieldNumber;
const int MoveDrawablesAttachedCommandArchive_FloatingUndo::kGeometryFieldNumber;
const int MoveDrawablesAttachedCommandArchive_FloatingUndo::kAttachmentFieldNumber;
const int MoveDrawablesAttachedCommandArchive_FloatingUndo::kWrapTypeFieldNumber;
const int MoveDrawablesAttachedCommandArchive_FloatingUndo::kPageIndexFieldNumber;
const int MoveDrawablesAttachedCommandArchive_FloatingUndo::kZOrderFieldNumber;
#endif  // !_MSC_VER

MoveDrawablesAttachedCommandArchive_FloatingUndo::MoveDrawablesAttachedCommandArchive_FloatingUndo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoveDrawablesAttachedCommandArchive_FloatingUndo::InitAsDefaultInstance() {
  drawable_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  geometry_ = const_cast< ::TSD::GeometryArchive*>(&::TSD::GeometryArchive::default_instance());
  attachment_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

MoveDrawablesAttachedCommandArchive_FloatingUndo::MoveDrawablesAttachedCommandArchive_FloatingUndo(const MoveDrawablesAttachedCommandArchive_FloatingUndo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoveDrawablesAttachedCommandArchive_FloatingUndo::SharedCtor() {
  _cached_size_ = 0;
  drawable_ = NULL;
  geometry_ = NULL;
  attachment_ = NULL;
  wrap_type_ = 0u;
  page_index_ = 0u;
  z_order_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveDrawablesAttachedCommandArchive_FloatingUndo::~MoveDrawablesAttachedCommandArchive_FloatingUndo() {
  SharedDtor();
}

void MoveDrawablesAttachedCommandArchive_FloatingUndo::SharedDtor() {
  if (this != default_instance_) {
    delete drawable_;
    delete geometry_;
    delete attachment_;
  }
}

void MoveDrawablesAttachedCommandArchive_FloatingUndo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveDrawablesAttachedCommandArchive_FloatingUndo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveDrawablesAttachedCommandArchive_FloatingUndo_descriptor_;
}

const MoveDrawablesAttachedCommandArchive_FloatingUndo& MoveDrawablesAttachedCommandArchive_FloatingUndo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPCommandArchives_2eproto();
  return *default_instance_;
}

MoveDrawablesAttachedCommandArchive_FloatingUndo* MoveDrawablesAttachedCommandArchive_FloatingUndo::default_instance_ = NULL;

MoveDrawablesAttachedCommandArchive_FloatingUndo* MoveDrawablesAttachedCommandArchive_FloatingUndo::New() const {
  return new MoveDrawablesAttachedCommandArchive_FloatingUndo;
}

void MoveDrawablesAttachedCommandArchive_FloatingUndo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_drawable()) {
      if (drawable_ != NULL) drawable_->::TSP::Reference::Clear();
    }
    if (has_geometry()) {
      if (geometry_ != NULL) geometry_->::TSD::GeometryArchive::Clear();
    }
    if (has_attachment()) {
      if (attachment_ != NULL) attachment_->::TSP::Reference::Clear();
    }
    wrap_type_ = 0u;
    page_index_ = 0u;
    z_order_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoveDrawablesAttachedCommandArchive_FloatingUndo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Reference drawable = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_drawable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_geometry;
        break;
      }

      // optional .TSD.GeometryArchive geometry = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_geometry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geometry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attachment;
        break;
      }

      // optional .TSP.Reference attachment = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attachment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attachment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_wrap_type;
        break;
      }

      // optional uint32 wrap_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wrap_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wrap_type_)));
          set_has_wrap_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_page_index;
        break;
      }

      // optional uint32 page_index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_index_)));
          set_has_page_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_z_order;
        break;
      }

      // optional int32 z_order = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_z_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_order_)));
          set_has_z_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoveDrawablesAttachedCommandArchive_FloatingUndo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Reference drawable = 1;
  if (has_drawable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->drawable(), output);
  }

  // optional .TSD.GeometryArchive geometry = 2;
  if (has_geometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->geometry(), output);
  }

  // optional .TSP.Reference attachment = 3;
  if (has_attachment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attachment(), output);
  }

  // optional uint32 wrap_type = 4;
  if (has_wrap_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->wrap_type(), output);
  }

  // optional uint32 page_index = 5;
  if (has_page_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->page_index(), output);
  }

  // optional int32 z_order = 6;
  if (has_z_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->z_order(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoveDrawablesAttachedCommandArchive_FloatingUndo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Reference drawable = 1;
  if (has_drawable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->drawable(), target);
  }

  // optional .TSD.GeometryArchive geometry = 2;
  if (has_geometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->geometry(), target);
  }

  // optional .TSP.Reference attachment = 3;
  if (has_attachment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attachment(), target);
  }

  // optional uint32 wrap_type = 4;
  if (has_wrap_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->wrap_type(), target);
  }

  // optional uint32 page_index = 5;
  if (has_page_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->page_index(), target);
  }

  // optional int32 z_order = 6;
  if (has_z_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->z_order(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoveDrawablesAttachedCommandArchive_FloatingUndo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.Reference drawable = 1;
    if (has_drawable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->drawable());
    }

    // optional .TSD.GeometryArchive geometry = 2;
    if (has_geometry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geometry());
    }

    // optional .TSP.Reference attachment = 3;
    if (has_attachment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attachment());
    }

    // optional uint32 wrap_type = 4;
    if (has_wrap_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wrap_type());
    }

    // optional uint32 page_index = 5;
    if (has_page_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page_index());
    }

    // optional int32 z_order = 6;
    if (has_z_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->z_order());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveDrawablesAttachedCommandArchive_FloatingUndo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoveDrawablesAttachedCommandArchive_FloatingUndo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoveDrawablesAttachedCommandArchive_FloatingUndo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoveDrawablesAttachedCommandArchive_FloatingUndo::MergeFrom(const MoveDrawablesAttachedCommandArchive_FloatingUndo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_drawable()) {
      mutable_drawable()->::TSP::Reference::MergeFrom(from.drawable());
    }
    if (from.has_geometry()) {
      mutable_geometry()->::TSD::GeometryArchive::MergeFrom(from.geometry());
    }
    if (from.has_attachment()) {
      mutable_attachment()->::TSP::Reference::MergeFrom(from.attachment());
    }
    if (from.has_wrap_type()) {
      set_wrap_type(from.wrap_type());
    }
    if (from.has_page_index()) {
      set_page_index(from.page_index());
    }
    if (from.has_z_order()) {
      set_z_order(from.z_order());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoveDrawablesAttachedCommandArchive_FloatingUndo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveDrawablesAttachedCommandArchive_FloatingUndo::CopyFrom(const MoveDrawablesAttachedCommandArchive_FloatingUndo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveDrawablesAttachedCommandArchive_FloatingUndo::IsInitialized() const {

  if (has_drawable()) {
    if (!this->drawable().IsInitialized()) return false;
  }
  if (has_geometry()) {
    if (!this->geometry().IsInitialized()) return false;
  }
  if (has_attachment()) {
    if (!this->attachment().IsInitialized()) return false;
  }
  return true;
}

void MoveDrawablesAttachedCommandArchive_FloatingUndo::Swap(MoveDrawablesAttachedCommandArchive_FloatingUndo* other) {
  if (other != this) {
    std::swap(drawable_, other->drawable_);
    std::swap(geometry_, other->geometry_);
    std::swap(attachment_, other->attachment_);
    std::swap(wrap_type_, other->wrap_type_);
    std::swap(page_index_, other->page_index_);
    std::swap(z_order_, other->z_order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoveDrawablesAttachedCommandArchive_FloatingUndo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveDrawablesAttachedCommandArchive_FloatingUndo_descriptor_;
  metadata.reflection = MoveDrawablesAttachedCommandArchive_FloatingUndo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MoveDrawablesAttachedCommandArchive::kSuperFieldNumber;
const int MoveDrawablesAttachedCommandArchive::kUndoTransactionFieldNumber;
const int MoveDrawablesAttachedCommandArchive::kFloatingUndoFieldNumber;
const int MoveDrawablesAttachedCommandArchive::kSelectFieldNumber;
const int MoveDrawablesAttachedCommandArchive::kMakeInlineFieldNumber;
#endif  // !_MSC_VER

MoveDrawablesAttachedCommandArchive::MoveDrawablesAttachedCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoveDrawablesAttachedCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  undo_transaction_ = const_cast< ::TSWP::UndoTransaction*>(&::TSWP::UndoTransaction::default_instance());
}

MoveDrawablesAttachedCommandArchive::MoveDrawablesAttachedCommandArchive(const MoveDrawablesAttachedCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoveDrawablesAttachedCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  undo_transaction_ = NULL;
  select_ = false;
  make_inline_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveDrawablesAttachedCommandArchive::~MoveDrawablesAttachedCommandArchive() {
  SharedDtor();
}

void MoveDrawablesAttachedCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete undo_transaction_;
  }
}

void MoveDrawablesAttachedCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveDrawablesAttachedCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveDrawablesAttachedCommandArchive_descriptor_;
}

const MoveDrawablesAttachedCommandArchive& MoveDrawablesAttachedCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPCommandArchives_2eproto();
  return *default_instance_;
}

MoveDrawablesAttachedCommandArchive* MoveDrawablesAttachedCommandArchive::default_instance_ = NULL;

MoveDrawablesAttachedCommandArchive* MoveDrawablesAttachedCommandArchive::New() const {
  return new MoveDrawablesAttachedCommandArchive;
}

void MoveDrawablesAttachedCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_undo_transaction()) {
      if (undo_transaction_ != NULL) undo_transaction_->::TSWP::UndoTransaction::Clear();
    }
    select_ = false;
    make_inline_ = false;
  }
  floating_undo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoveDrawablesAttachedCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_undo_transaction;
        break;
      }

      // optional .TSWP.UndoTransaction undo_transaction = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_transaction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_transaction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_floating_undo;
        break;
      }

      // repeated .TP.MoveDrawablesAttachedCommandArchive.FloatingUndo floating_undo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_floating_undo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_floating_undo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_floating_undo;
        if (input->ExpectTag(32)) goto parse_select;
        break;
      }

      // optional bool select = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_select:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &select_)));
          set_has_select();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_make_inline;
        break;
      }

      // optional bool make_inline = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_make_inline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &make_inline_)));
          set_has_make_inline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoveDrawablesAttachedCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 2;
  if (has_undo_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->undo_transaction(), output);
  }

  // repeated .TP.MoveDrawablesAttachedCommandArchive.FloatingUndo floating_undo = 3;
  for (int i = 0; i < this->floating_undo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->floating_undo(i), output);
  }

  // optional bool select = 4;
  if (has_select()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->select(), output);
  }

  // optional bool make_inline = 5;
  if (has_make_inline()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->make_inline(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoveDrawablesAttachedCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 2;
  if (has_undo_transaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->undo_transaction(), target);
  }

  // repeated .TP.MoveDrawablesAttachedCommandArchive.FloatingUndo floating_undo = 3;
  for (int i = 0; i < this->floating_undo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->floating_undo(i), target);
  }

  // optional bool select = 4;
  if (has_select()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->select(), target);
  }

  // optional bool make_inline = 5;
  if (has_make_inline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->make_inline(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoveDrawablesAttachedCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSWP.UndoTransaction undo_transaction = 2;
    if (has_undo_transaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_transaction());
    }

    // optional bool select = 4;
    if (has_select()) {
      total_size += 1 + 1;
    }

    // optional bool make_inline = 5;
    if (has_make_inline()) {
      total_size += 1 + 1;
    }

  }
  // repeated .TP.MoveDrawablesAttachedCommandArchive.FloatingUndo floating_undo = 3;
  total_size += 1 * this->floating_undo_size();
  for (int i = 0; i < this->floating_undo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->floating_undo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveDrawablesAttachedCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoveDrawablesAttachedCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoveDrawablesAttachedCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoveDrawablesAttachedCommandArchive::MergeFrom(const MoveDrawablesAttachedCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  floating_undo_.MergeFrom(from.floating_undo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_undo_transaction()) {
      mutable_undo_transaction()->::TSWP::UndoTransaction::MergeFrom(from.undo_transaction());
    }
    if (from.has_select()) {
      set_select(from.select());
    }
    if (from.has_make_inline()) {
      set_make_inline(from.make_inline());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoveDrawablesAttachedCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveDrawablesAttachedCommandArchive::CopyFrom(const MoveDrawablesAttachedCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveDrawablesAttachedCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_undo_transaction()) {
    if (!this->undo_transaction().IsInitialized()) return false;
  }
  for (int i = 0; i < floating_undo_size(); i++) {
    if (!this->floating_undo(i).IsInitialized()) return false;
  }
  return true;
}

void MoveDrawablesAttachedCommandArchive::Swap(MoveDrawablesAttachedCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(undo_transaction_, other->undo_transaction_);
    floating_undo_.Swap(&other->floating_undo_);
    std::swap(select_, other->select_);
    std::swap(make_inline_, other->make_inline_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoveDrawablesAttachedCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveDrawablesAttachedCommandArchive_descriptor_;
  metadata.reflection = MoveDrawablesAttachedCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoveDrawablesFloatingCommandArchive_AttachedUndo::kDrawableFieldNumber;
const int MoveDrawablesFloatingCommandArchive_AttachedUndo::kGeometryFieldNumber;
const int MoveDrawablesFloatingCommandArchive_AttachedUndo::kAttachmentFieldNumber;
const int MoveDrawablesFloatingCommandArchive_AttachedUndo::kPageIndexFieldNumber;
const int MoveDrawablesFloatingCommandArchive_AttachedUndo::kIsHtmlWrapFieldNumber;
const int MoveDrawablesFloatingCommandArchive_AttachedUndo::kTypeFieldNumber;
const int MoveDrawablesFloatingCommandArchive_AttachedUndo::kDirectionFieldNumber;
const int MoveDrawablesFloatingCommandArchive_AttachedUndo::kFitTypeFieldNumber;
const int MoveDrawablesFloatingCommandArchive_AttachedUndo::kMarginFieldNumber;
const int MoveDrawablesFloatingCommandArchive_AttachedUndo::kAlphaThresholdFieldNumber;
const int MoveDrawablesFloatingCommandArchive_AttachedUndo::kStorageFieldNumber;
const int MoveDrawablesFloatingCommandArchive_AttachedUndo::kUndoTransactionFieldNumber;
#endif  // !_MSC_VER

MoveDrawablesFloatingCommandArchive_AttachedUndo::MoveDrawablesFloatingCommandArchive_AttachedUndo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoveDrawablesFloatingCommandArchive_AttachedUndo::InitAsDefaultInstance() {
  drawable_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  geometry_ = const_cast< ::TSD::GeometryArchive*>(&::TSD::GeometryArchive::default_instance());
  attachment_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  storage_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  undo_transaction_ = const_cast< ::TSWP::UndoTransaction*>(&::TSWP::UndoTransaction::default_instance());
}

MoveDrawablesFloatingCommandArchive_AttachedUndo::MoveDrawablesFloatingCommandArchive_AttachedUndo(const MoveDrawablesFloatingCommandArchive_AttachedUndo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoveDrawablesFloatingCommandArchive_AttachedUndo::SharedCtor() {
  _cached_size_ = 0;
  drawable_ = NULL;
  geometry_ = NULL;
  attachment_ = NULL;
  page_index_ = 0u;
  is_html_wrap_ = false;
  type_ = 0u;
  direction_ = 0u;
  fit_type_ = 0u;
  margin_ = 0;
  alpha_threshold_ = 0;
  storage_ = NULL;
  undo_transaction_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveDrawablesFloatingCommandArchive_AttachedUndo::~MoveDrawablesFloatingCommandArchive_AttachedUndo() {
  SharedDtor();
}

void MoveDrawablesFloatingCommandArchive_AttachedUndo::SharedDtor() {
  if (this != default_instance_) {
    delete drawable_;
    delete geometry_;
    delete attachment_;
    delete storage_;
    delete undo_transaction_;
  }
}

void MoveDrawablesFloatingCommandArchive_AttachedUndo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveDrawablesFloatingCommandArchive_AttachedUndo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveDrawablesFloatingCommandArchive_AttachedUndo_descriptor_;
}

const MoveDrawablesFloatingCommandArchive_AttachedUndo& MoveDrawablesFloatingCommandArchive_AttachedUndo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPCommandArchives_2eproto();
  return *default_instance_;
}

MoveDrawablesFloatingCommandArchive_AttachedUndo* MoveDrawablesFloatingCommandArchive_AttachedUndo::default_instance_ = NULL;

MoveDrawablesFloatingCommandArchive_AttachedUndo* MoveDrawablesFloatingCommandArchive_AttachedUndo::New() const {
  return new MoveDrawablesFloatingCommandArchive_AttachedUndo;
}

void MoveDrawablesFloatingCommandArchive_AttachedUndo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_drawable()) {
      if (drawable_ != NULL) drawable_->::TSP::Reference::Clear();
    }
    if (has_geometry()) {
      if (geometry_ != NULL) geometry_->::TSD::GeometryArchive::Clear();
    }
    if (has_attachment()) {
      if (attachment_ != NULL) attachment_->::TSP::Reference::Clear();
    }
    page_index_ = 0u;
    is_html_wrap_ = false;
    type_ = 0u;
    direction_ = 0u;
    fit_type_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    margin_ = 0;
    alpha_threshold_ = 0;
    if (has_storage()) {
      if (storage_ != NULL) storage_->::TSP::Reference::Clear();
    }
    if (has_undo_transaction()) {
      if (undo_transaction_ != NULL) undo_transaction_->::TSWP::UndoTransaction::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoveDrawablesFloatingCommandArchive_AttachedUndo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Reference drawable = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_drawable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_geometry;
        break;
      }

      // optional .TSD.GeometryArchive geometry = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_geometry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geometry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attachment;
        break;
      }

      // optional .TSP.Reference attachment = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attachment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attachment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_page_index;
        break;
      }

      // optional uint32 page_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_index_)));
          set_has_page_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_html_wrap;
        break;
      }

      // optional bool is_html_wrap = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_html_wrap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_html_wrap_)));
          set_has_is_html_wrap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }

      // optional uint32 type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_direction;
        break;
      }

      // optional uint32 direction = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_fit_type;
        break;
      }

      // optional uint32 fit_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fit_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fit_type_)));
          set_has_fit_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_margin;
        break;
      }

      // optional float margin = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_margin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &margin_)));
          set_has_margin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_alpha_threshold;
        break;
      }

      // optional float alpha_threshold = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_alpha_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_threshold_)));
          set_has_alpha_threshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_storage;
        break;
      }

      // optional .TSP.Reference storage = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_undo_transaction;
        break;
      }

      // optional .TSWP.UndoTransaction undo_transaction = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_transaction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_transaction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoveDrawablesFloatingCommandArchive_AttachedUndo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Reference drawable = 1;
  if (has_drawable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->drawable(), output);
  }

  // optional .TSD.GeometryArchive geometry = 2;
  if (has_geometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->geometry(), output);
  }

  // optional .TSP.Reference attachment = 3;
  if (has_attachment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attachment(), output);
  }

  // optional uint32 page_index = 4;
  if (has_page_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->page_index(), output);
  }

  // optional bool is_html_wrap = 5;
  if (has_is_html_wrap()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_html_wrap(), output);
  }

  // optional uint32 type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->type(), output);
  }

  // optional uint32 direction = 7;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->direction(), output);
  }

  // optional uint32 fit_type = 8;
  if (has_fit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->fit_type(), output);
  }

  // optional float margin = 9;
  if (has_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->margin(), output);
  }

  // optional float alpha_threshold = 10;
  if (has_alpha_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->alpha_threshold(), output);
  }

  // optional .TSP.Reference storage = 11;
  if (has_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->storage(), output);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 12;
  if (has_undo_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->undo_transaction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoveDrawablesFloatingCommandArchive_AttachedUndo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Reference drawable = 1;
  if (has_drawable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->drawable(), target);
  }

  // optional .TSD.GeometryArchive geometry = 2;
  if (has_geometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->geometry(), target);
  }

  // optional .TSP.Reference attachment = 3;
  if (has_attachment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attachment(), target);
  }

  // optional uint32 page_index = 4;
  if (has_page_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->page_index(), target);
  }

  // optional bool is_html_wrap = 5;
  if (has_is_html_wrap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_html_wrap(), target);
  }

  // optional uint32 type = 6;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->type(), target);
  }

  // optional uint32 direction = 7;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->direction(), target);
  }

  // optional uint32 fit_type = 8;
  if (has_fit_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->fit_type(), target);
  }

  // optional float margin = 9;
  if (has_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->margin(), target);
  }

  // optional float alpha_threshold = 10;
  if (has_alpha_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->alpha_threshold(), target);
  }

  // optional .TSP.Reference storage = 11;
  if (has_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->storage(), target);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 12;
  if (has_undo_transaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->undo_transaction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoveDrawablesFloatingCommandArchive_AttachedUndo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.Reference drawable = 1;
    if (has_drawable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->drawable());
    }

    // optional .TSD.GeometryArchive geometry = 2;
    if (has_geometry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geometry());
    }

    // optional .TSP.Reference attachment = 3;
    if (has_attachment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attachment());
    }

    // optional uint32 page_index = 4;
    if (has_page_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page_index());
    }

    // optional bool is_html_wrap = 5;
    if (has_is_html_wrap()) {
      total_size += 1 + 1;
    }

    // optional uint32 type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 direction = 7;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->direction());
    }

    // optional uint32 fit_type = 8;
    if (has_fit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fit_type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float margin = 9;
    if (has_margin()) {
      total_size += 1 + 4;
    }

    // optional float alpha_threshold = 10;
    if (has_alpha_threshold()) {
      total_size += 1 + 4;
    }

    // optional .TSP.Reference storage = 11;
    if (has_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->storage());
    }

    // optional .TSWP.UndoTransaction undo_transaction = 12;
    if (has_undo_transaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_transaction());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveDrawablesFloatingCommandArchive_AttachedUndo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoveDrawablesFloatingCommandArchive_AttachedUndo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoveDrawablesFloatingCommandArchive_AttachedUndo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoveDrawablesFloatingCommandArchive_AttachedUndo::MergeFrom(const MoveDrawablesFloatingCommandArchive_AttachedUndo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_drawable()) {
      mutable_drawable()->::TSP::Reference::MergeFrom(from.drawable());
    }
    if (from.has_geometry()) {
      mutable_geometry()->::TSD::GeometryArchive::MergeFrom(from.geometry());
    }
    if (from.has_attachment()) {
      mutable_attachment()->::TSP::Reference::MergeFrom(from.attachment());
    }
    if (from.has_page_index()) {
      set_page_index(from.page_index());
    }
    if (from.has_is_html_wrap()) {
      set_is_html_wrap(from.is_html_wrap());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_fit_type()) {
      set_fit_type(from.fit_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_margin()) {
      set_margin(from.margin());
    }
    if (from.has_alpha_threshold()) {
      set_alpha_threshold(from.alpha_threshold());
    }
    if (from.has_storage()) {
      mutable_storage()->::TSP::Reference::MergeFrom(from.storage());
    }
    if (from.has_undo_transaction()) {
      mutable_undo_transaction()->::TSWP::UndoTransaction::MergeFrom(from.undo_transaction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoveDrawablesFloatingCommandArchive_AttachedUndo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveDrawablesFloatingCommandArchive_AttachedUndo::CopyFrom(const MoveDrawablesFloatingCommandArchive_AttachedUndo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveDrawablesFloatingCommandArchive_AttachedUndo::IsInitialized() const {

  if (has_drawable()) {
    if (!this->drawable().IsInitialized()) return false;
  }
  if (has_geometry()) {
    if (!this->geometry().IsInitialized()) return false;
  }
  if (has_attachment()) {
    if (!this->attachment().IsInitialized()) return false;
  }
  if (has_storage()) {
    if (!this->storage().IsInitialized()) return false;
  }
  if (has_undo_transaction()) {
    if (!this->undo_transaction().IsInitialized()) return false;
  }
  return true;
}

void MoveDrawablesFloatingCommandArchive_AttachedUndo::Swap(MoveDrawablesFloatingCommandArchive_AttachedUndo* other) {
  if (other != this) {
    std::swap(drawable_, other->drawable_);
    std::swap(geometry_, other->geometry_);
    std::swap(attachment_, other->attachment_);
    std::swap(page_index_, other->page_index_);
    std::swap(is_html_wrap_, other->is_html_wrap_);
    std::swap(type_, other->type_);
    std::swap(direction_, other->direction_);
    std::swap(fit_type_, other->fit_type_);
    std::swap(margin_, other->margin_);
    std::swap(alpha_threshold_, other->alpha_threshold_);
    std::swap(storage_, other->storage_);
    std::swap(undo_transaction_, other->undo_transaction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoveDrawablesFloatingCommandArchive_AttachedUndo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveDrawablesFloatingCommandArchive_AttachedUndo_descriptor_;
  metadata.reflection = MoveDrawablesFloatingCommandArchive_AttachedUndo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MoveDrawablesFloatingCommandArchive::kSuperFieldNumber;
const int MoveDrawablesFloatingCommandArchive::kDeprecatedUndoTransactionFieldNumber;
const int MoveDrawablesFloatingCommandArchive::kAttachedUndoFieldNumber;
const int MoveDrawablesFloatingCommandArchive::kSelectFieldNumber;
#endif  // !_MSC_VER

MoveDrawablesFloatingCommandArchive::MoveDrawablesFloatingCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoveDrawablesFloatingCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  deprecated_undo_transaction_ = const_cast< ::TSWP::UndoTransaction*>(&::TSWP::UndoTransaction::default_instance());
}

MoveDrawablesFloatingCommandArchive::MoveDrawablesFloatingCommandArchive(const MoveDrawablesFloatingCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoveDrawablesFloatingCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  deprecated_undo_transaction_ = NULL;
  select_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveDrawablesFloatingCommandArchive::~MoveDrawablesFloatingCommandArchive() {
  SharedDtor();
}

void MoveDrawablesFloatingCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete deprecated_undo_transaction_;
  }
}

void MoveDrawablesFloatingCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveDrawablesFloatingCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveDrawablesFloatingCommandArchive_descriptor_;
}

const MoveDrawablesFloatingCommandArchive& MoveDrawablesFloatingCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPCommandArchives_2eproto();
  return *default_instance_;
}

MoveDrawablesFloatingCommandArchive* MoveDrawablesFloatingCommandArchive::default_instance_ = NULL;

MoveDrawablesFloatingCommandArchive* MoveDrawablesFloatingCommandArchive::New() const {
  return new MoveDrawablesFloatingCommandArchive;
}

void MoveDrawablesFloatingCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_deprecated_undo_transaction()) {
      if (deprecated_undo_transaction_ != NULL) deprecated_undo_transaction_->::TSWP::UndoTransaction::Clear();
    }
    select_ = false;
  }
  attached_undo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoveDrawablesFloatingCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_deprecated_undo_transaction;
        break;
      }

      // optional .TSWP.UndoTransaction deprecated_undo_transaction = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deprecated_undo_transaction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deprecated_undo_transaction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attached_undo;
        break;
      }

      // repeated .TP.MoveDrawablesFloatingCommandArchive.AttachedUndo attached_undo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attached_undo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attached_undo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attached_undo;
        if (input->ExpectTag(32)) goto parse_select;
        break;
      }

      // optional bool select = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_select:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &select_)));
          set_has_select();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoveDrawablesFloatingCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSWP.UndoTransaction deprecated_undo_transaction = 2;
  if (has_deprecated_undo_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->deprecated_undo_transaction(), output);
  }

  // repeated .TP.MoveDrawablesFloatingCommandArchive.AttachedUndo attached_undo = 3;
  for (int i = 0; i < this->attached_undo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attached_undo(i), output);
  }

  // optional bool select = 4;
  if (has_select()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->select(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoveDrawablesFloatingCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSWP.UndoTransaction deprecated_undo_transaction = 2;
  if (has_deprecated_undo_transaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->deprecated_undo_transaction(), target);
  }

  // repeated .TP.MoveDrawablesFloatingCommandArchive.AttachedUndo attached_undo = 3;
  for (int i = 0; i < this->attached_undo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attached_undo(i), target);
  }

  // optional bool select = 4;
  if (has_select()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->select(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoveDrawablesFloatingCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSWP.UndoTransaction deprecated_undo_transaction = 2;
    if (has_deprecated_undo_transaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deprecated_undo_transaction());
    }

    // optional bool select = 4;
    if (has_select()) {
      total_size += 1 + 1;
    }

  }
  // repeated .TP.MoveDrawablesFloatingCommandArchive.AttachedUndo attached_undo = 3;
  total_size += 1 * this->attached_undo_size();
  for (int i = 0; i < this->attached_undo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attached_undo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveDrawablesFloatingCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoveDrawablesFloatingCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoveDrawablesFloatingCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoveDrawablesFloatingCommandArchive::MergeFrom(const MoveDrawablesFloatingCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  attached_undo_.MergeFrom(from.attached_undo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_deprecated_undo_transaction()) {
      mutable_deprecated_undo_transaction()->::TSWP::UndoTransaction::MergeFrom(from.deprecated_undo_transaction());
    }
    if (from.has_select()) {
      set_select(from.select());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoveDrawablesFloatingCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveDrawablesFloatingCommandArchive::CopyFrom(const MoveDrawablesFloatingCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveDrawablesFloatingCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_deprecated_undo_transaction()) {
    if (!this->deprecated_undo_transaction().IsInitialized()) return false;
  }
  for (int i = 0; i < attached_undo_size(); i++) {
    if (!this->attached_undo(i).IsInitialized()) return false;
  }
  return true;
}

void MoveDrawablesFloatingCommandArchive::Swap(MoveDrawablesFloatingCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(deprecated_undo_transaction_, other->deprecated_undo_transaction_);
    attached_undo_.Swap(&other->attached_undo_);
    std::swap(select_, other->select_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoveDrawablesFloatingCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveDrawablesFloatingCommandArchive_descriptor_;
  metadata.reflection = MoveDrawablesFloatingCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveAnchoredDrawableCommandArchive::kSuperFieldNumber;
const int RemoveAnchoredDrawableCommandArchive::kCharIndexFieldNumber;
const int RemoveAnchoredDrawableCommandArchive::kZOrderFieldNumber;
#endif  // !_MSC_VER

RemoveAnchoredDrawableCommandArchive::RemoveAnchoredDrawableCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveAnchoredDrawableCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSWP::TextCommandArchive*>(&::TSWP::TextCommandArchive::default_instance());
}

RemoveAnchoredDrawableCommandArchive::RemoveAnchoredDrawableCommandArchive(const RemoveAnchoredDrawableCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveAnchoredDrawableCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  char_index_ = 0u;
  z_order_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveAnchoredDrawableCommandArchive::~RemoveAnchoredDrawableCommandArchive() {
  SharedDtor();
}

void RemoveAnchoredDrawableCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void RemoveAnchoredDrawableCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveAnchoredDrawableCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveAnchoredDrawableCommandArchive_descriptor_;
}

const RemoveAnchoredDrawableCommandArchive& RemoveAnchoredDrawableCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPCommandArchives_2eproto();
  return *default_instance_;
}

RemoveAnchoredDrawableCommandArchive* RemoveAnchoredDrawableCommandArchive::default_instance_ = NULL;

RemoveAnchoredDrawableCommandArchive* RemoveAnchoredDrawableCommandArchive::New() const {
  return new RemoveAnchoredDrawableCommandArchive;
}

void RemoveAnchoredDrawableCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSWP::TextCommandArchive::Clear();
    }
    char_index_ = 0u;
    z_order_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveAnchoredDrawableCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSWP.TextCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_char_index;
        break;
      }

      // optional uint32 char_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_char_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &char_index_)));
          set_has_char_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_z_order;
        break;
      }

      // optional uint32 z_order = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_z_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &z_order_)));
          set_has_z_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveAnchoredDrawableCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSWP.TextCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional uint32 char_index = 2;
  if (has_char_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->char_index(), output);
  }

  // optional uint32 z_order = 3;
  if (has_z_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->z_order(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveAnchoredDrawableCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSWP.TextCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional uint32 char_index = 2;
  if (has_char_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->char_index(), target);
  }

  // optional uint32 z_order = 3;
  if (has_z_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->z_order(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveAnchoredDrawableCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSWP.TextCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional uint32 char_index = 2;
    if (has_char_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->char_index());
    }

    // optional uint32 z_order = 3;
    if (has_z_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->z_order());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveAnchoredDrawableCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveAnchoredDrawableCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveAnchoredDrawableCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveAnchoredDrawableCommandArchive::MergeFrom(const RemoveAnchoredDrawableCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSWP::TextCommandArchive::MergeFrom(from.super());
    }
    if (from.has_char_index()) {
      set_char_index(from.char_index());
    }
    if (from.has_z_order()) {
      set_z_order(from.z_order());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveAnchoredDrawableCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveAnchoredDrawableCommandArchive::CopyFrom(const RemoveAnchoredDrawableCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveAnchoredDrawableCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void RemoveAnchoredDrawableCommandArchive::Swap(RemoveAnchoredDrawableCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(char_index_, other->char_index_);
    std::swap(z_order_, other->z_order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveAnchoredDrawableCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveAnchoredDrawableCommandArchive_descriptor_;
  metadata.reflection = RemoveAnchoredDrawableCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ChangeFootnoteFormatCommandArchive_FootnoteFormat_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeFootnoteFormatCommandArchive_FootnoteFormat_descriptor_;
}
bool ChangeFootnoteFormatCommandArchive_FootnoteFormat_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ChangeFootnoteFormatCommandArchive_FootnoteFormat ChangeFootnoteFormatCommandArchive::kFootnoteFormatNumeric;
const ChangeFootnoteFormatCommandArchive_FootnoteFormat ChangeFootnoteFormatCommandArchive::kFootnoteFormatRoman;
const ChangeFootnoteFormatCommandArchive_FootnoteFormat ChangeFootnoteFormatCommandArchive::kFootnoteFormatSymbolic;
const ChangeFootnoteFormatCommandArchive_FootnoteFormat ChangeFootnoteFormatCommandArchive::kFootnoteFormatJapaneseNumeric;
const ChangeFootnoteFormatCommandArchive_FootnoteFormat ChangeFootnoteFormatCommandArchive::kFootnoteFormatJapaneseIdeographic;
const ChangeFootnoteFormatCommandArchive_FootnoteFormat ChangeFootnoteFormatCommandArchive::FootnoteFormat_MIN;
const ChangeFootnoteFormatCommandArchive_FootnoteFormat ChangeFootnoteFormatCommandArchive::FootnoteFormat_MAX;
const int ChangeFootnoteFormatCommandArchive::FootnoteFormat_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ChangeFootnoteFormatCommandArchive::kSuperFieldNumber;
const int ChangeFootnoteFormatCommandArchive::kFormatFieldNumber;
#endif  // !_MSC_VER

ChangeFootnoteFormatCommandArchive::ChangeFootnoteFormatCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeFootnoteFormatCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
}

ChangeFootnoteFormatCommandArchive::ChangeFootnoteFormatCommandArchive(const ChangeFootnoteFormatCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeFootnoteFormatCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  format_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeFootnoteFormatCommandArchive::~ChangeFootnoteFormatCommandArchive() {
  SharedDtor();
}

void ChangeFootnoteFormatCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void ChangeFootnoteFormatCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeFootnoteFormatCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeFootnoteFormatCommandArchive_descriptor_;
}

const ChangeFootnoteFormatCommandArchive& ChangeFootnoteFormatCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPCommandArchives_2eproto();
  return *default_instance_;
}

ChangeFootnoteFormatCommandArchive* ChangeFootnoteFormatCommandArchive::default_instance_ = NULL;

ChangeFootnoteFormatCommandArchive* ChangeFootnoteFormatCommandArchive::New() const {
  return new ChangeFootnoteFormatCommandArchive;
}

void ChangeFootnoteFormatCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    format_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeFootnoteFormatCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_format;
        break;
      }

      // optional .TP.ChangeFootnoteFormatCommandArchive.FootnoteFormat format = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_format:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TP::ChangeFootnoteFormatCommandArchive_FootnoteFormat_IsValid(value)) {
            set_format(static_cast< ::TP::ChangeFootnoteFormatCommandArchive_FootnoteFormat >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeFootnoteFormatCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TP.ChangeFootnoteFormatCommandArchive.FootnoteFormat format = 2;
  if (has_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->format(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeFootnoteFormatCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TP.ChangeFootnoteFormatCommandArchive.FootnoteFormat format = 2;
  if (has_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->format(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeFootnoteFormatCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TP.ChangeFootnoteFormatCommandArchive.FootnoteFormat format = 2;
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->format());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeFootnoteFormatCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeFootnoteFormatCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeFootnoteFormatCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeFootnoteFormatCommandArchive::MergeFrom(const ChangeFootnoteFormatCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_format()) {
      set_format(from.format());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeFootnoteFormatCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeFootnoteFormatCommandArchive::CopyFrom(const ChangeFootnoteFormatCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeFootnoteFormatCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void ChangeFootnoteFormatCommandArchive::Swap(ChangeFootnoteFormatCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(format_, other->format_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeFootnoteFormatCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeFootnoteFormatCommandArchive_descriptor_;
  metadata.reflection = ChangeFootnoteFormatCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ChangeFootnoteKindCommandArchive_FootnoteKind_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeFootnoteKindCommandArchive_FootnoteKind_descriptor_;
}
bool ChangeFootnoteKindCommandArchive_FootnoteKind_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ChangeFootnoteKindCommandArchive_FootnoteKind ChangeFootnoteKindCommandArchive::kFootnoteKindFootnotes;
const ChangeFootnoteKindCommandArchive_FootnoteKind ChangeFootnoteKindCommandArchive::kFootnoteKindDocumentEndnotes;
const ChangeFootnoteKindCommandArchive_FootnoteKind ChangeFootnoteKindCommandArchive::kFootnoteKindSectionEndnotes;
const ChangeFootnoteKindCommandArchive_FootnoteKind ChangeFootnoteKindCommandArchive::FootnoteKind_MIN;
const ChangeFootnoteKindCommandArchive_FootnoteKind ChangeFootnoteKindCommandArchive::FootnoteKind_MAX;
const int ChangeFootnoteKindCommandArchive::FootnoteKind_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ChangeFootnoteKindCommandArchive::kSuperFieldNumber;
const int ChangeFootnoteKindCommandArchive::kKindFieldNumber;
const int ChangeFootnoteKindCommandArchive::kUndoTransactionFieldNumber;
#endif  // !_MSC_VER

ChangeFootnoteKindCommandArchive::ChangeFootnoteKindCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeFootnoteKindCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  undo_transaction_ = const_cast< ::TSWP::UndoTransaction*>(&::TSWP::UndoTransaction::default_instance());
}

ChangeFootnoteKindCommandArchive::ChangeFootnoteKindCommandArchive(const ChangeFootnoteKindCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeFootnoteKindCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  kind_ = 0;
  undo_transaction_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeFootnoteKindCommandArchive::~ChangeFootnoteKindCommandArchive() {
  SharedDtor();
}

void ChangeFootnoteKindCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete undo_transaction_;
  }
}

void ChangeFootnoteKindCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeFootnoteKindCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeFootnoteKindCommandArchive_descriptor_;
}

const ChangeFootnoteKindCommandArchive& ChangeFootnoteKindCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPCommandArchives_2eproto();
  return *default_instance_;
}

ChangeFootnoteKindCommandArchive* ChangeFootnoteKindCommandArchive::default_instance_ = NULL;

ChangeFootnoteKindCommandArchive* ChangeFootnoteKindCommandArchive::New() const {
  return new ChangeFootnoteKindCommandArchive;
}

void ChangeFootnoteKindCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    kind_ = 0;
    if (has_undo_transaction()) {
      if (undo_transaction_ != NULL) undo_transaction_->::TSWP::UndoTransaction::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeFootnoteKindCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_kind;
        break;
      }

      // optional .TP.ChangeFootnoteKindCommandArchive.FootnoteKind kind = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kind:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TP::ChangeFootnoteKindCommandArchive_FootnoteKind_IsValid(value)) {
            set_kind(static_cast< ::TP::ChangeFootnoteKindCommandArchive_FootnoteKind >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_undo_transaction;
        break;
      }

      // optional .TSWP.UndoTransaction undo_transaction = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_transaction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_transaction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeFootnoteKindCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TP.ChangeFootnoteKindCommandArchive.FootnoteKind kind = 2;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->kind(), output);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 3;
  if (has_undo_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->undo_transaction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeFootnoteKindCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TP.ChangeFootnoteKindCommandArchive.FootnoteKind kind = 2;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->kind(), target);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 3;
  if (has_undo_transaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->undo_transaction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeFootnoteKindCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TP.ChangeFootnoteKindCommandArchive.FootnoteKind kind = 2;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
    }

    // optional .TSWP.UndoTransaction undo_transaction = 3;
    if (has_undo_transaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_transaction());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeFootnoteKindCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeFootnoteKindCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeFootnoteKindCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeFootnoteKindCommandArchive::MergeFrom(const ChangeFootnoteKindCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_undo_transaction()) {
      mutable_undo_transaction()->::TSWP::UndoTransaction::MergeFrom(from.undo_transaction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeFootnoteKindCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeFootnoteKindCommandArchive::CopyFrom(const ChangeFootnoteKindCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeFootnoteKindCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_undo_transaction()) {
    if (!this->undo_transaction().IsInitialized()) return false;
  }
  return true;
}

void ChangeFootnoteKindCommandArchive::Swap(ChangeFootnoteKindCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(kind_, other->kind_);
    std::swap(undo_transaction_, other->undo_transaction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeFootnoteKindCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeFootnoteKindCommandArchive_descriptor_;
  metadata.reflection = ChangeFootnoteKindCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ChangeFootnoteNumberingCommandArchive_FootnoteNumbering_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeFootnoteNumberingCommandArchive_FootnoteNumbering_descriptor_;
}
bool ChangeFootnoteNumberingCommandArchive_FootnoteNumbering_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ChangeFootnoteNumberingCommandArchive_FootnoteNumbering ChangeFootnoteNumberingCommandArchive::kFootnoteNumberingContinuous;
const ChangeFootnoteNumberingCommandArchive_FootnoteNumbering ChangeFootnoteNumberingCommandArchive::kFootnoteNumberingRestartEachPage;
const ChangeFootnoteNumberingCommandArchive_FootnoteNumbering ChangeFootnoteNumberingCommandArchive::kFootnoteNumberingRestartEachSection;
const ChangeFootnoteNumberingCommandArchive_FootnoteNumbering ChangeFootnoteNumberingCommandArchive::FootnoteNumbering_MIN;
const ChangeFootnoteNumberingCommandArchive_FootnoteNumbering ChangeFootnoteNumberingCommandArchive::FootnoteNumbering_MAX;
const int ChangeFootnoteNumberingCommandArchive::FootnoteNumbering_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ChangeFootnoteNumberingCommandArchive::kSuperFieldNumber;
const int ChangeFootnoteNumberingCommandArchive::kNumberingFieldNumber;
#endif  // !_MSC_VER

ChangeFootnoteNumberingCommandArchive::ChangeFootnoteNumberingCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeFootnoteNumberingCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
}

ChangeFootnoteNumberingCommandArchive::ChangeFootnoteNumberingCommandArchive(const ChangeFootnoteNumberingCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeFootnoteNumberingCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  numbering_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeFootnoteNumberingCommandArchive::~ChangeFootnoteNumberingCommandArchive() {
  SharedDtor();
}

void ChangeFootnoteNumberingCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void ChangeFootnoteNumberingCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeFootnoteNumberingCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeFootnoteNumberingCommandArchive_descriptor_;
}

const ChangeFootnoteNumberingCommandArchive& ChangeFootnoteNumberingCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPCommandArchives_2eproto();
  return *default_instance_;
}

ChangeFootnoteNumberingCommandArchive* ChangeFootnoteNumberingCommandArchive::default_instance_ = NULL;

ChangeFootnoteNumberingCommandArchive* ChangeFootnoteNumberingCommandArchive::New() const {
  return new ChangeFootnoteNumberingCommandArchive;
}

void ChangeFootnoteNumberingCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    numbering_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeFootnoteNumberingCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_numbering;
        break;
      }

      // optional .TP.ChangeFootnoteNumberingCommandArchive.FootnoteNumbering numbering = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numbering:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TP::ChangeFootnoteNumberingCommandArchive_FootnoteNumbering_IsValid(value)) {
            set_numbering(static_cast< ::TP::ChangeFootnoteNumberingCommandArchive_FootnoteNumbering >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeFootnoteNumberingCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TP.ChangeFootnoteNumberingCommandArchive.FootnoteNumbering numbering = 2;
  if (has_numbering()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->numbering(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeFootnoteNumberingCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TP.ChangeFootnoteNumberingCommandArchive.FootnoteNumbering numbering = 2;
  if (has_numbering()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->numbering(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeFootnoteNumberingCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TP.ChangeFootnoteNumberingCommandArchive.FootnoteNumbering numbering = 2;
    if (has_numbering()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->numbering());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeFootnoteNumberingCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeFootnoteNumberingCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeFootnoteNumberingCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeFootnoteNumberingCommandArchive::MergeFrom(const ChangeFootnoteNumberingCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_numbering()) {
      set_numbering(from.numbering());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeFootnoteNumberingCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeFootnoteNumberingCommandArchive::CopyFrom(const ChangeFootnoteNumberingCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeFootnoteNumberingCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void ChangeFootnoteNumberingCommandArchive::Swap(ChangeFootnoteNumberingCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(numbering_, other->numbering_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeFootnoteNumberingCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeFootnoteNumberingCommandArchive_descriptor_;
  metadata.reflection = ChangeFootnoteNumberingCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeFootnoteSpacingCommandArchive::kSuperFieldNumber;
const int ChangeFootnoteSpacingCommandArchive::kFootnoteSpacingFieldNumber;
#endif  // !_MSC_VER

ChangeFootnoteSpacingCommandArchive::ChangeFootnoteSpacingCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeFootnoteSpacingCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
}

ChangeFootnoteSpacingCommandArchive::ChangeFootnoteSpacingCommandArchive(const ChangeFootnoteSpacingCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeFootnoteSpacingCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  footnote_spacing_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeFootnoteSpacingCommandArchive::~ChangeFootnoteSpacingCommandArchive() {
  SharedDtor();
}

void ChangeFootnoteSpacingCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void ChangeFootnoteSpacingCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeFootnoteSpacingCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeFootnoteSpacingCommandArchive_descriptor_;
}

const ChangeFootnoteSpacingCommandArchive& ChangeFootnoteSpacingCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPCommandArchives_2eproto();
  return *default_instance_;
}

ChangeFootnoteSpacingCommandArchive* ChangeFootnoteSpacingCommandArchive::default_instance_ = NULL;

ChangeFootnoteSpacingCommandArchive* ChangeFootnoteSpacingCommandArchive::New() const {
  return new ChangeFootnoteSpacingCommandArchive;
}

void ChangeFootnoteSpacingCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    footnote_spacing_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeFootnoteSpacingCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_footnote_spacing;
        break;
      }

      // optional int32 footnote_spacing = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_footnote_spacing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &footnote_spacing_)));
          set_has_footnote_spacing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeFootnoteSpacingCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional int32 footnote_spacing = 2;
  if (has_footnote_spacing()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->footnote_spacing(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeFootnoteSpacingCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional int32 footnote_spacing = 2;
  if (has_footnote_spacing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->footnote_spacing(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeFootnoteSpacingCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional int32 footnote_spacing = 2;
    if (has_footnote_spacing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->footnote_spacing());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeFootnoteSpacingCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeFootnoteSpacingCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeFootnoteSpacingCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeFootnoteSpacingCommandArchive::MergeFrom(const ChangeFootnoteSpacingCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_footnote_spacing()) {
      set_footnote_spacing(from.footnote_spacing());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeFootnoteSpacingCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeFootnoteSpacingCommandArchive::CopyFrom(const ChangeFootnoteSpacingCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeFootnoteSpacingCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void ChangeFootnoteSpacingCommandArchive::Swap(ChangeFootnoteSpacingCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(footnote_spacing_, other->footnote_spacing_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeFootnoteSpacingCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeFootnoteSpacingCommandArchive_descriptor_;
  metadata.reflection = ChangeFootnoteSpacingCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoveInlineDrawableAnchoredCommandArchive::kSuperFieldNumber;
const int MoveInlineDrawableAnchoredCommandArchive::kDrawableFieldNumber;
const int MoveInlineDrawableAnchoredCommandArchive::kIsHtmlWrapFieldNumber;
const int MoveInlineDrawableAnchoredCommandArchive::kTypeFieldNumber;
const int MoveInlineDrawableAnchoredCommandArchive::kDirectionFieldNumber;
const int MoveInlineDrawableAnchoredCommandArchive::kFitTypeFieldNumber;
const int MoveInlineDrawableAnchoredCommandArchive::kMarginFieldNumber;
const int MoveInlineDrawableAnchoredCommandArchive::kAlphaThresholdFieldNumber;
#endif  // !_MSC_VER

MoveInlineDrawableAnchoredCommandArchive::MoveInlineDrawableAnchoredCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoveInlineDrawableAnchoredCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  drawable_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

MoveInlineDrawableAnchoredCommandArchive::MoveInlineDrawableAnchoredCommandArchive(const MoveInlineDrawableAnchoredCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoveInlineDrawableAnchoredCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  drawable_ = NULL;
  is_html_wrap_ = false;
  type_ = 0u;
  direction_ = 0u;
  fit_type_ = 0u;
  margin_ = 0;
  alpha_threshold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveInlineDrawableAnchoredCommandArchive::~MoveInlineDrawableAnchoredCommandArchive() {
  SharedDtor();
}

void MoveInlineDrawableAnchoredCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete drawable_;
  }
}

void MoveInlineDrawableAnchoredCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveInlineDrawableAnchoredCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveInlineDrawableAnchoredCommandArchive_descriptor_;
}

const MoveInlineDrawableAnchoredCommandArchive& MoveInlineDrawableAnchoredCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPCommandArchives_2eproto();
  return *default_instance_;
}

MoveInlineDrawableAnchoredCommandArchive* MoveInlineDrawableAnchoredCommandArchive::default_instance_ = NULL;

MoveInlineDrawableAnchoredCommandArchive* MoveInlineDrawableAnchoredCommandArchive::New() const {
  return new MoveInlineDrawableAnchoredCommandArchive;
}

void MoveInlineDrawableAnchoredCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_drawable()) {
      if (drawable_ != NULL) drawable_->::TSP::Reference::Clear();
    }
    is_html_wrap_ = false;
    type_ = 0u;
    direction_ = 0u;
    fit_type_ = 0u;
    margin_ = 0;
    alpha_threshold_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoveInlineDrawableAnchoredCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_drawable;
        break;
      }

      // optional .TSP.Reference drawable = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drawable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_drawable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_html_wrap;
        break;
      }

      // optional bool is_html_wrap = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_html_wrap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_html_wrap_)));
          set_has_is_html_wrap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional uint32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_direction;
        break;
      }

      // optional uint32 direction = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_fit_type;
        break;
      }

      // optional uint32 fit_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fit_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fit_type_)));
          set_has_fit_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_margin;
        break;
      }

      // optional float margin = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_margin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &margin_)));
          set_has_margin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_alpha_threshold;
        break;
      }

      // optional float alpha_threshold = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_alpha_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_threshold_)));
          set_has_alpha_threshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoveInlineDrawableAnchoredCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference drawable = 2;
  if (has_drawable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->drawable(), output);
  }

  // optional bool is_html_wrap = 3;
  if (has_is_html_wrap()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_html_wrap(), output);
  }

  // optional uint32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->type(), output);
  }

  // optional uint32 direction = 5;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->direction(), output);
  }

  // optional uint32 fit_type = 6;
  if (has_fit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->fit_type(), output);
  }

  // optional float margin = 7;
  if (has_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->margin(), output);
  }

  // optional float alpha_threshold = 8;
  if (has_alpha_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->alpha_threshold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoveInlineDrawableAnchoredCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference drawable = 2;
  if (has_drawable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->drawable(), target);
  }

  // optional bool is_html_wrap = 3;
  if (has_is_html_wrap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_html_wrap(), target);
  }

  // optional uint32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->type(), target);
  }

  // optional uint32 direction = 5;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->direction(), target);
  }

  // optional uint32 fit_type = 6;
  if (has_fit_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->fit_type(), target);
  }

  // optional float margin = 7;
  if (has_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->margin(), target);
  }

  // optional float alpha_threshold = 8;
  if (has_alpha_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->alpha_threshold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoveInlineDrawableAnchoredCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference drawable = 2;
    if (has_drawable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->drawable());
    }

    // optional bool is_html_wrap = 3;
    if (has_is_html_wrap()) {
      total_size += 1 + 1;
    }

    // optional uint32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 direction = 5;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->direction());
    }

    // optional uint32 fit_type = 6;
    if (has_fit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fit_type());
    }

    // optional float margin = 7;
    if (has_margin()) {
      total_size += 1 + 4;
    }

    // optional float alpha_threshold = 8;
    if (has_alpha_threshold()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveInlineDrawableAnchoredCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoveInlineDrawableAnchoredCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoveInlineDrawableAnchoredCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoveInlineDrawableAnchoredCommandArchive::MergeFrom(const MoveInlineDrawableAnchoredCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_drawable()) {
      mutable_drawable()->::TSP::Reference::MergeFrom(from.drawable());
    }
    if (from.has_is_html_wrap()) {
      set_is_html_wrap(from.is_html_wrap());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_fit_type()) {
      set_fit_type(from.fit_type());
    }
    if (from.has_margin()) {
      set_margin(from.margin());
    }
    if (from.has_alpha_threshold()) {
      set_alpha_threshold(from.alpha_threshold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoveInlineDrawableAnchoredCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveInlineDrawableAnchoredCommandArchive::CopyFrom(const MoveInlineDrawableAnchoredCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveInlineDrawableAnchoredCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_drawable()) {
    if (!this->drawable().IsInitialized()) return false;
  }
  return true;
}

void MoveInlineDrawableAnchoredCommandArchive::Swap(MoveInlineDrawableAnchoredCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(drawable_, other->drawable_);
    std::swap(is_html_wrap_, other->is_html_wrap_);
    std::swap(type_, other->type_);
    std::swap(direction_, other->direction_);
    std::swap(fit_type_, other->fit_type_);
    std::swap(margin_, other->margin_);
    std::swap(alpha_threshold_, other->alpha_threshold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoveInlineDrawableAnchoredCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveInlineDrawableAnchoredCommandArchive_descriptor_;
  metadata.reflection = MoveInlineDrawableAnchoredCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoveAnchoredDrawableInlineCommandArchive::kSuperFieldNumber;
const int MoveAnchoredDrawableInlineCommandArchive::kDrawableFieldNumber;
const int MoveAnchoredDrawableInlineCommandArchive::kIsHtmlWrapFieldNumber;
const int MoveAnchoredDrawableInlineCommandArchive::kTypeFieldNumber;
const int MoveAnchoredDrawableInlineCommandArchive::kDirectionFieldNumber;
const int MoveAnchoredDrawableInlineCommandArchive::kFitTypeFieldNumber;
const int MoveAnchoredDrawableInlineCommandArchive::kMarginFieldNumber;
const int MoveAnchoredDrawableInlineCommandArchive::kAlphaThresholdFieldNumber;
const int MoveAnchoredDrawableInlineCommandArchive::kZOrderFieldNumber;
#endif  // !_MSC_VER

MoveAnchoredDrawableInlineCommandArchive::MoveAnchoredDrawableInlineCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoveAnchoredDrawableInlineCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  drawable_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

MoveAnchoredDrawableInlineCommandArchive::MoveAnchoredDrawableInlineCommandArchive(const MoveAnchoredDrawableInlineCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoveAnchoredDrawableInlineCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  drawable_ = NULL;
  is_html_wrap_ = false;
  type_ = 0u;
  direction_ = 0u;
  fit_type_ = 0u;
  margin_ = 0;
  alpha_threshold_ = 0;
  z_order_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveAnchoredDrawableInlineCommandArchive::~MoveAnchoredDrawableInlineCommandArchive() {
  SharedDtor();
}

void MoveAnchoredDrawableInlineCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete drawable_;
  }
}

void MoveAnchoredDrawableInlineCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveAnchoredDrawableInlineCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveAnchoredDrawableInlineCommandArchive_descriptor_;
}

const MoveAnchoredDrawableInlineCommandArchive& MoveAnchoredDrawableInlineCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPCommandArchives_2eproto();
  return *default_instance_;
}

MoveAnchoredDrawableInlineCommandArchive* MoveAnchoredDrawableInlineCommandArchive::default_instance_ = NULL;

MoveAnchoredDrawableInlineCommandArchive* MoveAnchoredDrawableInlineCommandArchive::New() const {
  return new MoveAnchoredDrawableInlineCommandArchive;
}

void MoveAnchoredDrawableInlineCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_drawable()) {
      if (drawable_ != NULL) drawable_->::TSP::Reference::Clear();
    }
    is_html_wrap_ = false;
    type_ = 0u;
    direction_ = 0u;
    fit_type_ = 0u;
    margin_ = 0;
    alpha_threshold_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    z_order_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoveAnchoredDrawableInlineCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_drawable;
        break;
      }

      // optional .TSP.Reference drawable = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drawable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_drawable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_html_wrap;
        break;
      }

      // optional bool is_html_wrap = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_html_wrap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_html_wrap_)));
          set_has_is_html_wrap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional uint32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_direction;
        break;
      }

      // optional uint32 direction = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_fit_type;
        break;
      }

      // optional uint32 fit_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fit_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fit_type_)));
          set_has_fit_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_margin;
        break;
      }

      // optional float margin = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_margin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &margin_)));
          set_has_margin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_alpha_threshold;
        break;
      }

      // optional float alpha_threshold = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_alpha_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_threshold_)));
          set_has_alpha_threshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_z_order;
        break;
      }

      // optional uint32 z_order = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_z_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &z_order_)));
          set_has_z_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoveAnchoredDrawableInlineCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference drawable = 2;
  if (has_drawable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->drawable(), output);
  }

  // optional bool is_html_wrap = 3;
  if (has_is_html_wrap()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_html_wrap(), output);
  }

  // optional uint32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->type(), output);
  }

  // optional uint32 direction = 5;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->direction(), output);
  }

  // optional uint32 fit_type = 6;
  if (has_fit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->fit_type(), output);
  }

  // optional float margin = 7;
  if (has_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->margin(), output);
  }

  // optional float alpha_threshold = 8;
  if (has_alpha_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->alpha_threshold(), output);
  }

  // optional uint32 z_order = 9;
  if (has_z_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->z_order(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoveAnchoredDrawableInlineCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference drawable = 2;
  if (has_drawable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->drawable(), target);
  }

  // optional bool is_html_wrap = 3;
  if (has_is_html_wrap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_html_wrap(), target);
  }

  // optional uint32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->type(), target);
  }

  // optional uint32 direction = 5;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->direction(), target);
  }

  // optional uint32 fit_type = 6;
  if (has_fit_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->fit_type(), target);
  }

  // optional float margin = 7;
  if (has_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->margin(), target);
  }

  // optional float alpha_threshold = 8;
  if (has_alpha_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->alpha_threshold(), target);
  }

  // optional uint32 z_order = 9;
  if (has_z_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->z_order(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoveAnchoredDrawableInlineCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference drawable = 2;
    if (has_drawable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->drawable());
    }

    // optional bool is_html_wrap = 3;
    if (has_is_html_wrap()) {
      total_size += 1 + 1;
    }

    // optional uint32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 direction = 5;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->direction());
    }

    // optional uint32 fit_type = 6;
    if (has_fit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fit_type());
    }

    // optional float margin = 7;
    if (has_margin()) {
      total_size += 1 + 4;
    }

    // optional float alpha_threshold = 8;
    if (has_alpha_threshold()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 z_order = 9;
    if (has_z_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->z_order());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveAnchoredDrawableInlineCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoveAnchoredDrawableInlineCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoveAnchoredDrawableInlineCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoveAnchoredDrawableInlineCommandArchive::MergeFrom(const MoveAnchoredDrawableInlineCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_drawable()) {
      mutable_drawable()->::TSP::Reference::MergeFrom(from.drawable());
    }
    if (from.has_is_html_wrap()) {
      set_is_html_wrap(from.is_html_wrap());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_fit_type()) {
      set_fit_type(from.fit_type());
    }
    if (from.has_margin()) {
      set_margin(from.margin());
    }
    if (from.has_alpha_threshold()) {
      set_alpha_threshold(from.alpha_threshold());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_z_order()) {
      set_z_order(from.z_order());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoveAnchoredDrawableInlineCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveAnchoredDrawableInlineCommandArchive::CopyFrom(const MoveAnchoredDrawableInlineCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveAnchoredDrawableInlineCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_drawable()) {
    if (!this->drawable().IsInitialized()) return false;
  }
  return true;
}

void MoveAnchoredDrawableInlineCommandArchive::Swap(MoveAnchoredDrawableInlineCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(drawable_, other->drawable_);
    std::swap(is_html_wrap_, other->is_html_wrap_);
    std::swap(type_, other->type_);
    std::swap(direction_, other->direction_);
    std::swap(fit_type_, other->fit_type_);
    std::swap(margin_, other->margin_);
    std::swap(alpha_threshold_, other->alpha_threshold_);
    std::swap(z_order_, other->z_order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoveAnchoredDrawableInlineCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveAnchoredDrawableInlineCommandArchive_descriptor_;
  metadata.reflection = MoveAnchoredDrawableInlineCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InsertFootnoteCommandArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

InsertFootnoteCommandArchive::InsertFootnoteCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InsertFootnoteCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSWP::TextCommandArchive*>(&::TSWP::TextCommandArchive::default_instance());
}

InsertFootnoteCommandArchive::InsertFootnoteCommandArchive(const InsertFootnoteCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InsertFootnoteCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InsertFootnoteCommandArchive::~InsertFootnoteCommandArchive() {
  SharedDtor();
}

void InsertFootnoteCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void InsertFootnoteCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InsertFootnoteCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InsertFootnoteCommandArchive_descriptor_;
}

const InsertFootnoteCommandArchive& InsertFootnoteCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPCommandArchives_2eproto();
  return *default_instance_;
}

InsertFootnoteCommandArchive* InsertFootnoteCommandArchive::default_instance_ = NULL;

InsertFootnoteCommandArchive* InsertFootnoteCommandArchive::New() const {
  return new InsertFootnoteCommandArchive;
}

void InsertFootnoteCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSWP::TextCommandArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InsertFootnoteCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSWP.TextCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InsertFootnoteCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSWP.TextCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InsertFootnoteCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSWP.TextCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InsertFootnoteCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSWP.TextCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InsertFootnoteCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InsertFootnoteCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InsertFootnoteCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InsertFootnoteCommandArchive::MergeFrom(const InsertFootnoteCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSWP::TextCommandArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InsertFootnoteCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertFootnoteCommandArchive::CopyFrom(const InsertFootnoteCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertFootnoteCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void InsertFootnoteCommandArchive::Swap(InsertFootnoteCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InsertFootnoteCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InsertFootnoteCommandArchive_descriptor_;
  metadata.reflection = InsertFootnoteCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToggleBodyLayoutDirectionCommandArchive::kSuperFieldNumber;
const int ToggleBodyLayoutDirectionCommandArchive::kNewDirectionIsVerticalFieldNumber;
#endif  // !_MSC_VER

ToggleBodyLayoutDirectionCommandArchive::ToggleBodyLayoutDirectionCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToggleBodyLayoutDirectionCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
}

ToggleBodyLayoutDirectionCommandArchive::ToggleBodyLayoutDirectionCommandArchive(const ToggleBodyLayoutDirectionCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToggleBodyLayoutDirectionCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  new_direction_is_vertical_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToggleBodyLayoutDirectionCommandArchive::~ToggleBodyLayoutDirectionCommandArchive() {
  SharedDtor();
}

void ToggleBodyLayoutDirectionCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void ToggleBodyLayoutDirectionCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToggleBodyLayoutDirectionCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToggleBodyLayoutDirectionCommandArchive_descriptor_;
}

const ToggleBodyLayoutDirectionCommandArchive& ToggleBodyLayoutDirectionCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPCommandArchives_2eproto();
  return *default_instance_;
}

ToggleBodyLayoutDirectionCommandArchive* ToggleBodyLayoutDirectionCommandArchive::default_instance_ = NULL;

ToggleBodyLayoutDirectionCommandArchive* ToggleBodyLayoutDirectionCommandArchive::New() const {
  return new ToggleBodyLayoutDirectionCommandArchive;
}

void ToggleBodyLayoutDirectionCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    new_direction_is_vertical_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToggleBodyLayoutDirectionCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_new_direction_is_vertical;
        break;
      }

      // optional bool new_direction_is_vertical = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_direction_is_vertical:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &new_direction_is_vertical_)));
          set_has_new_direction_is_vertical();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToggleBodyLayoutDirectionCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional bool new_direction_is_vertical = 2;
  if (has_new_direction_is_vertical()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->new_direction_is_vertical(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToggleBodyLayoutDirectionCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional bool new_direction_is_vertical = 2;
  if (has_new_direction_is_vertical()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->new_direction_is_vertical(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToggleBodyLayoutDirectionCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional bool new_direction_is_vertical = 2;
    if (has_new_direction_is_vertical()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToggleBodyLayoutDirectionCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToggleBodyLayoutDirectionCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToggleBodyLayoutDirectionCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToggleBodyLayoutDirectionCommandArchive::MergeFrom(const ToggleBodyLayoutDirectionCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_new_direction_is_vertical()) {
      set_new_direction_is_vertical(from.new_direction_is_vertical());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToggleBodyLayoutDirectionCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToggleBodyLayoutDirectionCommandArchive::CopyFrom(const ToggleBodyLayoutDirectionCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToggleBodyLayoutDirectionCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void ToggleBodyLayoutDirectionCommandArchive::Swap(ToggleBodyLayoutDirectionCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(new_direction_is_vertical_, other->new_direction_is_vertical_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToggleBodyLayoutDirectionCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToggleBodyLayoutDirectionCommandArchive_descriptor_;
  metadata.reflection = ToggleBodyLayoutDirectionCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeCTVisibilityCommandArchive::kSuperFieldNumber;
const int ChangeCTVisibilityCommandArchive::kMarkupVisibleFieldNumber;
const int ChangeCTVisibilityCommandArchive::kDeletionsVisibleFieldNumber;
const int ChangeCTVisibilityCommandArchive::kSelectionRangeLocationFieldNumber;
const int ChangeCTVisibilityCommandArchive::kSelectionRangeLengthFieldNumber;
#endif  // !_MSC_VER

ChangeCTVisibilityCommandArchive::ChangeCTVisibilityCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeCTVisibilityCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
}

ChangeCTVisibilityCommandArchive::ChangeCTVisibilityCommandArchive(const ChangeCTVisibilityCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeCTVisibilityCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  markup_visible_ = false;
  deletions_visible_ = false;
  selection_range_location_ = 0u;
  selection_range_length_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeCTVisibilityCommandArchive::~ChangeCTVisibilityCommandArchive() {
  SharedDtor();
}

void ChangeCTVisibilityCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void ChangeCTVisibilityCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeCTVisibilityCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeCTVisibilityCommandArchive_descriptor_;
}

const ChangeCTVisibilityCommandArchive& ChangeCTVisibilityCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPCommandArchives_2eproto();
  return *default_instance_;
}

ChangeCTVisibilityCommandArchive* ChangeCTVisibilityCommandArchive::default_instance_ = NULL;

ChangeCTVisibilityCommandArchive* ChangeCTVisibilityCommandArchive::New() const {
  return new ChangeCTVisibilityCommandArchive;
}

void ChangeCTVisibilityCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    markup_visible_ = false;
    deletions_visible_ = false;
    selection_range_location_ = 0u;
    selection_range_length_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeCTVisibilityCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_markup_visible;
        break;
      }

      // optional bool markup_visible = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_markup_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &markup_visible_)));
          set_has_markup_visible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_deletions_visible;
        break;
      }

      // optional bool deletions_visible = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deletions_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deletions_visible_)));
          set_has_deletions_visible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_selection_range_location;
        break;
      }

      // optional uint32 selection_range_location = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selection_range_location:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selection_range_location_)));
          set_has_selection_range_location();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_selection_range_length;
        break;
      }

      // optional uint32 selection_range_length = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selection_range_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selection_range_length_)));
          set_has_selection_range_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeCTVisibilityCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional bool markup_visible = 2;
  if (has_markup_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->markup_visible(), output);
  }

  // optional bool deletions_visible = 3;
  if (has_deletions_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->deletions_visible(), output);
  }

  // optional uint32 selection_range_location = 4;
  if (has_selection_range_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->selection_range_location(), output);
  }

  // optional uint32 selection_range_length = 5;
  if (has_selection_range_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->selection_range_length(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeCTVisibilityCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional bool markup_visible = 2;
  if (has_markup_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->markup_visible(), target);
  }

  // optional bool deletions_visible = 3;
  if (has_deletions_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->deletions_visible(), target);
  }

  // optional uint32 selection_range_location = 4;
  if (has_selection_range_location()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->selection_range_location(), target);
  }

  // optional uint32 selection_range_length = 5;
  if (has_selection_range_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->selection_range_length(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeCTVisibilityCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional bool markup_visible = 2;
    if (has_markup_visible()) {
      total_size += 1 + 1;
    }

    // optional bool deletions_visible = 3;
    if (has_deletions_visible()) {
      total_size += 1 + 1;
    }

    // optional uint32 selection_range_location = 4;
    if (has_selection_range_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selection_range_location());
    }

    // optional uint32 selection_range_length = 5;
    if (has_selection_range_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selection_range_length());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeCTVisibilityCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeCTVisibilityCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeCTVisibilityCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeCTVisibilityCommandArchive::MergeFrom(const ChangeCTVisibilityCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_markup_visible()) {
      set_markup_visible(from.markup_visible());
    }
    if (from.has_deletions_visible()) {
      set_deletions_visible(from.deletions_visible());
    }
    if (from.has_selection_range_location()) {
      set_selection_range_location(from.selection_range_location());
    }
    if (from.has_selection_range_length()) {
      set_selection_range_length(from.selection_range_length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeCTVisibilityCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeCTVisibilityCommandArchive::CopyFrom(const ChangeCTVisibilityCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeCTVisibilityCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void ChangeCTVisibilityCommandArchive::Swap(ChangeCTVisibilityCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(markup_visible_, other->markup_visible_);
    std::swap(deletions_visible_, other->deletions_visible_);
    std::swap(selection_range_location_, other->selection_range_location_);
    std::swap(selection_range_length_, other->selection_range_length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeCTVisibilityCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeCTVisibilityCommandArchive_descriptor_;
  metadata.reflection = ChangeCTVisibilityCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrackChangesCommandArchive::kSuperFieldNumber;
const int TrackChangesCommandArchive::kTrackChangesFieldNumber;
const int TrackChangesCommandArchive::kChangeSessionHistoryFieldNumber;
const int TrackChangesCommandArchive::kPausedFieldNumber;
#endif  // !_MSC_VER

TrackChangesCommandArchive::TrackChangesCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrackChangesCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
}

TrackChangesCommandArchive::TrackChangesCommandArchive(const TrackChangesCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrackChangesCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  track_changes_ = false;
  paused_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrackChangesCommandArchive::~TrackChangesCommandArchive() {
  SharedDtor();
}

void TrackChangesCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void TrackChangesCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackChangesCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackChangesCommandArchive_descriptor_;
}

const TrackChangesCommandArchive& TrackChangesCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPCommandArchives_2eproto();
  return *default_instance_;
}

TrackChangesCommandArchive* TrackChangesCommandArchive::default_instance_ = NULL;

TrackChangesCommandArchive* TrackChangesCommandArchive::New() const {
  return new TrackChangesCommandArchive;
}

void TrackChangesCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    track_changes_ = false;
    paused_ = false;
  }
  change_session_history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrackChangesCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_track_changes;
        break;
      }

      // optional bool track_changes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_track_changes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &track_changes_)));
          set_has_track_changes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_change_session_history;
        break;
      }

      // repeated .TSP.Reference change_session_history = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_change_session_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_change_session_history()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_change_session_history;
        if (input->ExpectTag(32)) goto parse_paused;
        break;
      }

      // optional bool paused = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_paused:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &paused_)));
          set_has_paused();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrackChangesCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional bool track_changes = 2;
  if (has_track_changes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->track_changes(), output);
  }

  // repeated .TSP.Reference change_session_history = 3;
  for (int i = 0; i < this->change_session_history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->change_session_history(i), output);
  }

  // optional bool paused = 4;
  if (has_paused()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->paused(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrackChangesCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional bool track_changes = 2;
  if (has_track_changes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->track_changes(), target);
  }

  // repeated .TSP.Reference change_session_history = 3;
  for (int i = 0; i < this->change_session_history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->change_session_history(i), target);
  }

  // optional bool paused = 4;
  if (has_paused()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->paused(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrackChangesCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional bool track_changes = 2;
    if (has_track_changes()) {
      total_size += 1 + 1;
    }

    // optional bool paused = 4;
    if (has_paused()) {
      total_size += 1 + 1;
    }

  }
  // repeated .TSP.Reference change_session_history = 3;
  total_size += 1 * this->change_session_history_size();
  for (int i = 0; i < this->change_session_history_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->change_session_history(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackChangesCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrackChangesCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrackChangesCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrackChangesCommandArchive::MergeFrom(const TrackChangesCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  change_session_history_.MergeFrom(from.change_session_history_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_track_changes()) {
      set_track_changes(from.track_changes());
    }
    if (from.has_paused()) {
      set_paused(from.paused());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrackChangesCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackChangesCommandArchive::CopyFrom(const TrackChangesCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackChangesCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  for (int i = 0; i < change_session_history_size(); i++) {
    if (!this->change_session_history(i).IsInitialized()) return false;
  }
  return true;
}

void TrackChangesCommandArchive::Swap(TrackChangesCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(track_changes_, other->track_changes_);
    change_session_history_.Swap(&other->change_session_history_);
    std::swap(paused_, other->paused_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrackChangesCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrackChangesCommandArchive_descriptor_;
  metadata.reflection = TrackChangesCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DocumentHyphenationCommandArchive::kSuperFieldNumber;
const int DocumentHyphenationCommandArchive::kHyphenateDocumentFieldNumber;
#endif  // !_MSC_VER

DocumentHyphenationCommandArchive::DocumentHyphenationCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DocumentHyphenationCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
}

DocumentHyphenationCommandArchive::DocumentHyphenationCommandArchive(const DocumentHyphenationCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DocumentHyphenationCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  hyphenate_document_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DocumentHyphenationCommandArchive::~DocumentHyphenationCommandArchive() {
  SharedDtor();
}

void DocumentHyphenationCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void DocumentHyphenationCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentHyphenationCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DocumentHyphenationCommandArchive_descriptor_;
}

const DocumentHyphenationCommandArchive& DocumentHyphenationCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPCommandArchives_2eproto();
  return *default_instance_;
}

DocumentHyphenationCommandArchive* DocumentHyphenationCommandArchive::default_instance_ = NULL;

DocumentHyphenationCommandArchive* DocumentHyphenationCommandArchive::New() const {
  return new DocumentHyphenationCommandArchive;
}

void DocumentHyphenationCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    hyphenate_document_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DocumentHyphenationCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hyphenate_document;
        break;
      }

      // optional bool hyphenate_document = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hyphenate_document:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hyphenate_document_)));
          set_has_hyphenate_document();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DocumentHyphenationCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional bool hyphenate_document = 2;
  if (has_hyphenate_document()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->hyphenate_document(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DocumentHyphenationCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional bool hyphenate_document = 2;
  if (has_hyphenate_document()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->hyphenate_document(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DocumentHyphenationCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional bool hyphenate_document = 2;
    if (has_hyphenate_document()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentHyphenationCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DocumentHyphenationCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DocumentHyphenationCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DocumentHyphenationCommandArchive::MergeFrom(const DocumentHyphenationCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_hyphenate_document()) {
      set_hyphenate_document(from.hyphenate_document());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DocumentHyphenationCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentHyphenationCommandArchive::CopyFrom(const DocumentHyphenationCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentHyphenationCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void DocumentHyphenationCommandArchive::Swap(DocumentHyphenationCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(hyphenate_document_, other->hyphenate_document_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DocumentHyphenationCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DocumentHyphenationCommandArchive_descriptor_;
  metadata.reflection = DocumentHyphenationCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DocumentLigaturesCommandArchive::kSuperFieldNumber;
const int DocumentLigaturesCommandArchive::kUseLigaturesFieldNumber;
#endif  // !_MSC_VER

DocumentLigaturesCommandArchive::DocumentLigaturesCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DocumentLigaturesCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
}

DocumentLigaturesCommandArchive::DocumentLigaturesCommandArchive(const DocumentLigaturesCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DocumentLigaturesCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  use_ligatures_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DocumentLigaturesCommandArchive::~DocumentLigaturesCommandArchive() {
  SharedDtor();
}

void DocumentLigaturesCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void DocumentLigaturesCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentLigaturesCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DocumentLigaturesCommandArchive_descriptor_;
}

const DocumentLigaturesCommandArchive& DocumentLigaturesCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPCommandArchives_2eproto();
  return *default_instance_;
}

DocumentLigaturesCommandArchive* DocumentLigaturesCommandArchive::default_instance_ = NULL;

DocumentLigaturesCommandArchive* DocumentLigaturesCommandArchive::New() const {
  return new DocumentLigaturesCommandArchive;
}

void DocumentLigaturesCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    use_ligatures_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DocumentLigaturesCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_use_ligatures;
        break;
      }

      // optional bool use_ligatures = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_ligatures:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_ligatures_)));
          set_has_use_ligatures();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DocumentLigaturesCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional bool use_ligatures = 2;
  if (has_use_ligatures()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->use_ligatures(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DocumentLigaturesCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional bool use_ligatures = 2;
  if (has_use_ligatures()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->use_ligatures(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DocumentLigaturesCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional bool use_ligatures = 2;
    if (has_use_ligatures()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentLigaturesCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DocumentLigaturesCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DocumentLigaturesCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DocumentLigaturesCommandArchive::MergeFrom(const DocumentLigaturesCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_use_ligatures()) {
      set_use_ligatures(from.use_ligatures());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DocumentLigaturesCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentLigaturesCommandArchive::CopyFrom(const DocumentLigaturesCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentLigaturesCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void DocumentLigaturesCommandArchive::Swap(DocumentLigaturesCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(use_ligatures_, other->use_ligatures_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DocumentLigaturesCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DocumentLigaturesCommandArchive_descriptor_;
  metadata.reflection = DocumentLigaturesCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DocumentHasBodyCommandArchive::kSuperFieldNumber;
const int DocumentHasBodyCommandArchive::kHasBodyFieldNumber;
#endif  // !_MSC_VER

DocumentHasBodyCommandArchive::DocumentHasBodyCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DocumentHasBodyCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
}

DocumentHasBodyCommandArchive::DocumentHasBodyCommandArchive(const DocumentHasBodyCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DocumentHasBodyCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  has_body_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DocumentHasBodyCommandArchive::~DocumentHasBodyCommandArchive() {
  SharedDtor();
}

void DocumentHasBodyCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void DocumentHasBodyCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentHasBodyCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DocumentHasBodyCommandArchive_descriptor_;
}

const DocumentHasBodyCommandArchive& DocumentHasBodyCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPCommandArchives_2eproto();
  return *default_instance_;
}

DocumentHasBodyCommandArchive* DocumentHasBodyCommandArchive::default_instance_ = NULL;

DocumentHasBodyCommandArchive* DocumentHasBodyCommandArchive::New() const {
  return new DocumentHasBodyCommandArchive;
}

void DocumentHasBodyCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    has_body_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DocumentHasBodyCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_has_body;
        break;
      }

      // optional bool has_body = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_body:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_body_)));
          set_has_has_body();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DocumentHasBodyCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional bool has_body = 2;
  if (has_has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->has_body(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DocumentHasBodyCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional bool has_body = 2;
  if (has_has_body()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->has_body(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DocumentHasBodyCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional bool has_body = 2;
    if (has_has_body()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentHasBodyCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DocumentHasBodyCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DocumentHasBodyCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DocumentHasBodyCommandArchive::MergeFrom(const DocumentHasBodyCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_has_body()) {
      set_has_body(from.has_body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DocumentHasBodyCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentHasBodyCommandArchive::CopyFrom(const DocumentHasBodyCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentHasBodyCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void DocumentHasBodyCommandArchive::Swap(DocumentHasBodyCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(has_body_, other->has_body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DocumentHasBodyCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DocumentHasBodyCommandArchive_descriptor_;
  metadata.reflection = DocumentHasBodyCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PauseChangeTrackingCommandArchive::kSuperFieldNumber;
const int PauseChangeTrackingCommandArchive::kPausedFieldNumber;
#endif  // !_MSC_VER

PauseChangeTrackingCommandArchive::PauseChangeTrackingCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PauseChangeTrackingCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
}

PauseChangeTrackingCommandArchive::PauseChangeTrackingCommandArchive(const PauseChangeTrackingCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PauseChangeTrackingCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  paused_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PauseChangeTrackingCommandArchive::~PauseChangeTrackingCommandArchive() {
  SharedDtor();
}

void PauseChangeTrackingCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void PauseChangeTrackingCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PauseChangeTrackingCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PauseChangeTrackingCommandArchive_descriptor_;
}

const PauseChangeTrackingCommandArchive& PauseChangeTrackingCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPCommandArchives_2eproto();
  return *default_instance_;
}

PauseChangeTrackingCommandArchive* PauseChangeTrackingCommandArchive::default_instance_ = NULL;

PauseChangeTrackingCommandArchive* PauseChangeTrackingCommandArchive::New() const {
  return new PauseChangeTrackingCommandArchive;
}

void PauseChangeTrackingCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    paused_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PauseChangeTrackingCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_paused;
        break;
      }

      // optional bool paused = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_paused:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &paused_)));
          set_has_paused();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PauseChangeTrackingCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional bool paused = 2;
  if (has_paused()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->paused(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PauseChangeTrackingCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional bool paused = 2;
  if (has_paused()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->paused(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PauseChangeTrackingCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional bool paused = 2;
    if (has_paused()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PauseChangeTrackingCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PauseChangeTrackingCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PauseChangeTrackingCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PauseChangeTrackingCommandArchive::MergeFrom(const PauseChangeTrackingCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_paused()) {
      set_paused(from.paused());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PauseChangeTrackingCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PauseChangeTrackingCommandArchive::CopyFrom(const PauseChangeTrackingCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PauseChangeTrackingCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void PauseChangeTrackingCommandArchive::Swap(PauseChangeTrackingCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(paused_, other->paused_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PauseChangeTrackingCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PauseChangeTrackingCommandArchive_descriptor_;
  metadata.reflection = PauseChangeTrackingCommandArchive_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TP

// @@protoc_insertion_point(global_scope)
