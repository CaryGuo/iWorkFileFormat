// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSPDatabaseMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TSPDatabaseMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace TSP {

namespace {

const ::google::protobuf::Descriptor* DatabaseData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DatabaseData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DatabaseDataArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DatabaseDataArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* DatabaseImageDataArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DatabaseImageDataArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DatabaseImageDataArchive_ImageType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_TSPDatabaseMessages_2eproto() {
  protobuf_AddDesc_TSPDatabaseMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TSPDatabaseMessages.proto");
  GOOGLE_CHECK(file != NULL);
  DatabaseData_descriptor_ = file->message_type(0);
  static const int DatabaseData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseData, data_),
  };
  DatabaseData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DatabaseData_descriptor_,
      DatabaseData::default_instance_,
      DatabaseData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DatabaseData));
  DatabaseDataArchive_descriptor_ = file->message_type(1);
  static const int DatabaseDataArchive_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseDataArchive, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseDataArchive, app_relative_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseDataArchive, display_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseDataArchive, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseDataArchive, hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseDataArchive, sharable_),
  };
  DatabaseDataArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DatabaseDataArchive_descriptor_,
      DatabaseDataArchive::default_instance_,
      DatabaseDataArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseDataArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseDataArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DatabaseDataArchive));
  DatabaseImageDataArchive_descriptor_ = file->message_type(2);
  static const int DatabaseImageDataArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseImageDataArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseImageDataArchive, type_),
  };
  DatabaseImageDataArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DatabaseImageDataArchive_descriptor_,
      DatabaseImageDataArchive::default_instance_,
      DatabaseImageDataArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseImageDataArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseImageDataArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DatabaseImageDataArchive));
  DatabaseImageDataArchive_ImageType_descriptor_ = DatabaseImageDataArchive_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TSPDatabaseMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DatabaseData_descriptor_, &DatabaseData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DatabaseDataArchive_descriptor_, &DatabaseDataArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DatabaseImageDataArchive_descriptor_, &DatabaseImageDataArchive::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TSPDatabaseMessages_2eproto() {
  delete DatabaseData::default_instance_;
  delete DatabaseData_reflection_;
  delete DatabaseDataArchive::default_instance_;
  delete DatabaseDataArchive_reflection_;
  delete DatabaseImageDataArchive::default_instance_;
  delete DatabaseImageDataArchive_reflection_;
}

void protobuf_AddDesc_TSPDatabaseMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::TSP::protobuf_AddDesc_TSPMessages_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031TSPDatabaseMessages.proto\022\003TSP\032\021TSPMes"
    "sages.proto\"0\n\014DatabaseData\022 \n\004data\030\001 \002("
    "\0132\022.TSP.DataReference\"\232\001\n\023DatabaseDataAr"
    "chive\022\034\n\004data\030\001 \001(\0132\016.TSP.Reference\022\031\n\021a"
    "pp_relative_path\030\002 \001(\t\022\024\n\014display_name\030\003"
    " \002(\t\022\016\n\006length\030\004 \001(\004\022\014\n\004hash\030\005 \001(\r\022\026\n\010sh"
    "arable\030\006 \002(\010:\004true\"\251\001\n\030DatabaseImageData"
    "Archive\022\'\n\005super\030\001 \002(\0132\030.TSP.DatabaseDat"
    "aArchive\0225\n\004type\030\002 \002(\0162\'.TSP.DatabaseIma"
    "geDataArchive.ImageType\"-\n\tImageType\022\013\n\007"
    "unknown\020\000\022\n\n\006bitmap\020\001\022\007\n\003pdf\020\002", 430);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TSPDatabaseMessages.proto", &protobuf_RegisterTypes);
  DatabaseData::default_instance_ = new DatabaseData();
  DatabaseDataArchive::default_instance_ = new DatabaseDataArchive();
  DatabaseImageDataArchive::default_instance_ = new DatabaseImageDataArchive();
  DatabaseData::default_instance_->InitAsDefaultInstance();
  DatabaseDataArchive::default_instance_->InitAsDefaultInstance();
  DatabaseImageDataArchive::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TSPDatabaseMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TSPDatabaseMessages_2eproto {
  StaticDescriptorInitializer_TSPDatabaseMessages_2eproto() {
    protobuf_AddDesc_TSPDatabaseMessages_2eproto();
  }
} static_descriptor_initializer_TSPDatabaseMessages_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DatabaseData::kDataFieldNumber;
#endif  // !_MSC_VER

DatabaseData::DatabaseData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DatabaseData::InitAsDefaultInstance() {
  data_ = const_cast< ::TSP::DataReference*>(&::TSP::DataReference::default_instance());
}

DatabaseData::DatabaseData(const DatabaseData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DatabaseData::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DatabaseData::~DatabaseData() {
  SharedDtor();
}

void DatabaseData::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void DatabaseData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DatabaseData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DatabaseData_descriptor_;
}

const DatabaseData& DatabaseData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSPDatabaseMessages_2eproto();
  return *default_instance_;
}

DatabaseData* DatabaseData::default_instance_ = NULL;

DatabaseData* DatabaseData::New() const {
  return new DatabaseData;
}

void DatabaseData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::TSP::DataReference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DatabaseData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSP.DataReference data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DatabaseData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSP.DataReference data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DatabaseData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSP.DataReference data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DatabaseData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSP.DataReference data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DatabaseData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DatabaseData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DatabaseData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DatabaseData::MergeFrom(const DatabaseData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::TSP::DataReference::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DatabaseData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatabaseData::CopyFrom(const DatabaseData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatabaseData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void DatabaseData::Swap(DatabaseData* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DatabaseData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DatabaseData_descriptor_;
  metadata.reflection = DatabaseData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DatabaseDataArchive::kDataFieldNumber;
const int DatabaseDataArchive::kAppRelativePathFieldNumber;
const int DatabaseDataArchive::kDisplayNameFieldNumber;
const int DatabaseDataArchive::kLengthFieldNumber;
const int DatabaseDataArchive::kHashFieldNumber;
const int DatabaseDataArchive::kSharableFieldNumber;
#endif  // !_MSC_VER

DatabaseDataArchive::DatabaseDataArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DatabaseDataArchive::InitAsDefaultInstance() {
  data_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

DatabaseDataArchive::DatabaseDataArchive(const DatabaseDataArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DatabaseDataArchive::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  app_relative_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  display_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  length_ = GOOGLE_ULONGLONG(0);
  hash_ = 0u;
  sharable_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DatabaseDataArchive::~DatabaseDataArchive() {
  SharedDtor();
}

void DatabaseDataArchive::SharedDtor() {
  if (app_relative_path_ != &::google::protobuf::internal::kEmptyString) {
    delete app_relative_path_;
  }
  if (display_name_ != &::google::protobuf::internal::kEmptyString) {
    delete display_name_;
  }
  if (this != default_instance_) {
    delete data_;
  }
}

void DatabaseDataArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DatabaseDataArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DatabaseDataArchive_descriptor_;
}

const DatabaseDataArchive& DatabaseDataArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSPDatabaseMessages_2eproto();
  return *default_instance_;
}

DatabaseDataArchive* DatabaseDataArchive::default_instance_ = NULL;

DatabaseDataArchive* DatabaseDataArchive::New() const {
  return new DatabaseDataArchive;
}

void DatabaseDataArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::TSP::Reference::Clear();
    }
    if (has_app_relative_path()) {
      if (app_relative_path_ != &::google::protobuf::internal::kEmptyString) {
        app_relative_path_->clear();
      }
    }
    if (has_display_name()) {
      if (display_name_ != &::google::protobuf::internal::kEmptyString) {
        display_name_->clear();
      }
    }
    length_ = GOOGLE_ULONGLONG(0);
    hash_ = 0u;
    sharable_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DatabaseDataArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Reference data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_app_relative_path;
        break;
      }

      // optional string app_relative_path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app_relative_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_relative_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->app_relative_path().data(), this->app_relative_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_display_name;
        break;
      }

      // required string display_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_display_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->display_name().data(), this->display_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_length;
        break;
      }

      // optional uint64 length = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hash;
        break;
      }

      // optional uint32 hash = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hash_)));
          set_has_hash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sharable;
        break;
      }

      // required bool sharable = 6 [default = true];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sharable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sharable_)));
          set_has_sharable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DatabaseDataArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Reference data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  // optional string app_relative_path = 2;
  if (has_app_relative_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_relative_path().data(), this->app_relative_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->app_relative_path(), output);
  }

  // required string display_name = 3;
  if (has_display_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->display_name(), output);
  }

  // optional uint64 length = 4;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->length(), output);
  }

  // optional uint32 hash = 5;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hash(), output);
  }

  // required bool sharable = 6 [default = true];
  if (has_sharable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->sharable(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DatabaseDataArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Reference data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  // optional string app_relative_path = 2;
  if (has_app_relative_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_relative_path().data(), this->app_relative_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->app_relative_path(), target);
  }

  // required string display_name = 3;
  if (has_display_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->display_name(), target);
  }

  // optional uint64 length = 4;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->length(), target);
  }

  // optional uint32 hash = 5;
  if (has_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hash(), target);
  }

  // required bool sharable = 6 [default = true];
  if (has_sharable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->sharable(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DatabaseDataArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.Reference data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional string app_relative_path = 2;
    if (has_app_relative_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_relative_path());
    }

    // required string display_name = 3;
    if (has_display_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->display_name());
    }

    // optional uint64 length = 4;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->length());
    }

    // optional uint32 hash = 5;
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hash());
    }

    // required bool sharable = 6 [default = true];
    if (has_sharable()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DatabaseDataArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DatabaseDataArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DatabaseDataArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DatabaseDataArchive::MergeFrom(const DatabaseDataArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::TSP::Reference::MergeFrom(from.data());
    }
    if (from.has_app_relative_path()) {
      set_app_relative_path(from.app_relative_path());
    }
    if (from.has_display_name()) {
      set_display_name(from.display_name());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_hash()) {
      set_hash(from.hash());
    }
    if (from.has_sharable()) {
      set_sharable(from.sharable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DatabaseDataArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatabaseDataArchive::CopyFrom(const DatabaseDataArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatabaseDataArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000024) != 0x00000024) return false;

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void DatabaseDataArchive::Swap(DatabaseDataArchive* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(app_relative_path_, other->app_relative_path_);
    std::swap(display_name_, other->display_name_);
    std::swap(length_, other->length_);
    std::swap(hash_, other->hash_);
    std::swap(sharable_, other->sharable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DatabaseDataArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DatabaseDataArchive_descriptor_;
  metadata.reflection = DatabaseDataArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DatabaseImageDataArchive_ImageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DatabaseImageDataArchive_ImageType_descriptor_;
}
bool DatabaseImageDataArchive_ImageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DatabaseImageDataArchive_ImageType DatabaseImageDataArchive::unknown;
const DatabaseImageDataArchive_ImageType DatabaseImageDataArchive::bitmap;
const DatabaseImageDataArchive_ImageType DatabaseImageDataArchive::pdf;
const DatabaseImageDataArchive_ImageType DatabaseImageDataArchive::ImageType_MIN;
const DatabaseImageDataArchive_ImageType DatabaseImageDataArchive::ImageType_MAX;
const int DatabaseImageDataArchive::ImageType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DatabaseImageDataArchive::kSuperFieldNumber;
const int DatabaseImageDataArchive::kTypeFieldNumber;
#endif  // !_MSC_VER

DatabaseImageDataArchive::DatabaseImageDataArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DatabaseImageDataArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSP::DatabaseDataArchive*>(&::TSP::DatabaseDataArchive::default_instance());
}

DatabaseImageDataArchive::DatabaseImageDataArchive(const DatabaseImageDataArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DatabaseImageDataArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DatabaseImageDataArchive::~DatabaseImageDataArchive() {
  SharedDtor();
}

void DatabaseImageDataArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void DatabaseImageDataArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DatabaseImageDataArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DatabaseImageDataArchive_descriptor_;
}

const DatabaseImageDataArchive& DatabaseImageDataArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSPDatabaseMessages_2eproto();
  return *default_instance_;
}

DatabaseImageDataArchive* DatabaseImageDataArchive::default_instance_ = NULL;

DatabaseImageDataArchive* DatabaseImageDataArchive::New() const {
  return new DatabaseImageDataArchive;
}

void DatabaseImageDataArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSP::DatabaseDataArchive::Clear();
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DatabaseImageDataArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSP.DatabaseDataArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .TSP.DatabaseImageDataArchive.ImageType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSP::DatabaseImageDataArchive_ImageType_IsValid(value)) {
            set_type(static_cast< ::TSP::DatabaseImageDataArchive_ImageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DatabaseImageDataArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSP.DatabaseDataArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.DatabaseImageDataArchive.ImageType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DatabaseImageDataArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSP.DatabaseDataArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.DatabaseImageDataArchive.ImageType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DatabaseImageDataArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSP.DatabaseDataArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.DatabaseImageDataArchive.ImageType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DatabaseImageDataArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DatabaseImageDataArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DatabaseImageDataArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DatabaseImageDataArchive::MergeFrom(const DatabaseImageDataArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSP::DatabaseDataArchive::MergeFrom(from.super());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DatabaseImageDataArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatabaseImageDataArchive::CopyFrom(const DatabaseImageDataArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatabaseImageDataArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void DatabaseImageDataArchive::Swap(DatabaseImageDataArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DatabaseImageDataArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DatabaseImageDataArchive_descriptor_;
  metadata.reflection = DatabaseImageDataArchive_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TSP

// @@protoc_insertion_point(global_scope)
