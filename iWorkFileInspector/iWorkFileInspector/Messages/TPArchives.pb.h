// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TPArchives.proto

#ifndef PROTOBUF_TPArchives_2eproto__INCLUDED
#define PROTOBUF_TPArchives_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "TSDArchives.pb.h"
#include "TSKArchives.pb.h"
#include "TSPMessages.pb.h"
#include "TSWPArchives.pb.h"
#include "TSSArchives.pb.h"
#include "TSAArchives.pb.h"
#include "TSCHArchives.pb.h"
// @@protoc_insertion_point(includes)

namespace TP {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TPArchives_2eproto();
void protobuf_AssignDesc_TPArchives_2eproto();
void protobuf_ShutdownFile_TPArchives_2eproto();

class DocumentArchive;
class ThemeArchive;
class SettingsArchive;
class PlaceholderArchive;
class FloatingDrawablesArchive;
class FloatingDrawablesArchive_DrawableEntry;
class FloatingDrawablesArchive_PageGroup;
class DrawablesZOrderArchive;
class PageMasterArchive;
class SectionArchive;
class AnchorPosArchive;
class TargetHintArchive;
class PageHintArchive;
class SectionHintArchive;
class TextboxHintArchive;
class TopicNumberEntryArchive;
class TopicNumberHintsArchive;
class LayoutStateArchive;
class CanvasSelectionArchive;
class ViewStateArchive;
class UIStateArchive;

enum SettingsArchive_FootnoteKind {
  SettingsArchive_FootnoteKind_kFootnoteKindFootnotes = 0,
  SettingsArchive_FootnoteKind_kFootnoteKindDocumentEndnotes = 1,
  SettingsArchive_FootnoteKind_kFootnoteKindSectionEndnotes = 2
};
bool SettingsArchive_FootnoteKind_IsValid(int value);
const SettingsArchive_FootnoteKind SettingsArchive_FootnoteKind_FootnoteKind_MIN = SettingsArchive_FootnoteKind_kFootnoteKindFootnotes;
const SettingsArchive_FootnoteKind SettingsArchive_FootnoteKind_FootnoteKind_MAX = SettingsArchive_FootnoteKind_kFootnoteKindSectionEndnotes;
const int SettingsArchive_FootnoteKind_FootnoteKind_ARRAYSIZE = SettingsArchive_FootnoteKind_FootnoteKind_MAX + 1;

const ::google::protobuf::EnumDescriptor* SettingsArchive_FootnoteKind_descriptor();
inline const ::std::string& SettingsArchive_FootnoteKind_Name(SettingsArchive_FootnoteKind value) {
  return ::google::protobuf::internal::NameOfEnum(
    SettingsArchive_FootnoteKind_descriptor(), value);
}
inline bool SettingsArchive_FootnoteKind_Parse(
    const ::std::string& name, SettingsArchive_FootnoteKind* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SettingsArchive_FootnoteKind>(
    SettingsArchive_FootnoteKind_descriptor(), name, value);
}
enum SettingsArchive_FootnoteFormat {
  SettingsArchive_FootnoteFormat_kFootnoteFormatNumeric = 0,
  SettingsArchive_FootnoteFormat_kFootnoteFormatRoman = 1,
  SettingsArchive_FootnoteFormat_kFootnoteFormatSymbolic = 2,
  SettingsArchive_FootnoteFormat_kFootnoteFormatJapaneseNumeric = 3,
  SettingsArchive_FootnoteFormat_kFootnoteFormatJapaneseIdeographic = 4
};
bool SettingsArchive_FootnoteFormat_IsValid(int value);
const SettingsArchive_FootnoteFormat SettingsArchive_FootnoteFormat_FootnoteFormat_MIN = SettingsArchive_FootnoteFormat_kFootnoteFormatNumeric;
const SettingsArchive_FootnoteFormat SettingsArchive_FootnoteFormat_FootnoteFormat_MAX = SettingsArchive_FootnoteFormat_kFootnoteFormatJapaneseIdeographic;
const int SettingsArchive_FootnoteFormat_FootnoteFormat_ARRAYSIZE = SettingsArchive_FootnoteFormat_FootnoteFormat_MAX + 1;

const ::google::protobuf::EnumDescriptor* SettingsArchive_FootnoteFormat_descriptor();
inline const ::std::string& SettingsArchive_FootnoteFormat_Name(SettingsArchive_FootnoteFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    SettingsArchive_FootnoteFormat_descriptor(), value);
}
inline bool SettingsArchive_FootnoteFormat_Parse(
    const ::std::string& name, SettingsArchive_FootnoteFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SettingsArchive_FootnoteFormat>(
    SettingsArchive_FootnoteFormat_descriptor(), name, value);
}
enum SettingsArchive_FootnoteNumbering {
  SettingsArchive_FootnoteNumbering_kFootnoteNumberingContinuous = 0,
  SettingsArchive_FootnoteNumbering_kFootnoteNumberingRestartEachPage = 1,
  SettingsArchive_FootnoteNumbering_kFootnoteNumberingRestartEachSection = 2
};
bool SettingsArchive_FootnoteNumbering_IsValid(int value);
const SettingsArchive_FootnoteNumbering SettingsArchive_FootnoteNumbering_FootnoteNumbering_MIN = SettingsArchive_FootnoteNumbering_kFootnoteNumberingContinuous;
const SettingsArchive_FootnoteNumbering SettingsArchive_FootnoteNumbering_FootnoteNumbering_MAX = SettingsArchive_FootnoteNumbering_kFootnoteNumberingRestartEachSection;
const int SettingsArchive_FootnoteNumbering_FootnoteNumbering_ARRAYSIZE = SettingsArchive_FootnoteNumbering_FootnoteNumbering_MAX + 1;

const ::google::protobuf::EnumDescriptor* SettingsArchive_FootnoteNumbering_descriptor();
inline const ::std::string& SettingsArchive_FootnoteNumbering_Name(SettingsArchive_FootnoteNumbering value) {
  return ::google::protobuf::internal::NameOfEnum(
    SettingsArchive_FootnoteNumbering_descriptor(), value);
}
inline bool SettingsArchive_FootnoteNumbering_Parse(
    const ::std::string& name, SettingsArchive_FootnoteNumbering* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SettingsArchive_FootnoteNumbering>(
    SettingsArchive_FootnoteNumbering_descriptor(), name, value);
}
enum PageHintArchive_PageKind {
  PageHintArchive_PageKind_kPageKindNone = 0,
  PageHintArchive_PageKind_kPageKindText = 1,
  PageHintArchive_PageKind_kPageKindFiller = 2,
  PageHintArchive_PageKind_kPageKindOrphan = 3,
  PageHintArchive_PageKind_kPageKindEndnote = 4,
  PageHintArchive_PageKind_kPageKindDirty = 5,
  PageHintArchive_PageKind_kTPPageKindPageLayout = 6
};
bool PageHintArchive_PageKind_IsValid(int value);
const PageHintArchive_PageKind PageHintArchive_PageKind_PageKind_MIN = PageHintArchive_PageKind_kPageKindNone;
const PageHintArchive_PageKind PageHintArchive_PageKind_PageKind_MAX = PageHintArchive_PageKind_kTPPageKindPageLayout;
const int PageHintArchive_PageKind_PageKind_ARRAYSIZE = PageHintArchive_PageKind_PageKind_MAX + 1;

const ::google::protobuf::EnumDescriptor* PageHintArchive_PageKind_descriptor();
inline const ::std::string& PageHintArchive_PageKind_Name(PageHintArchive_PageKind value) {
  return ::google::protobuf::internal::NameOfEnum(
    PageHintArchive_PageKind_descriptor(), value);
}
inline bool PageHintArchive_PageKind_Parse(
    const ::std::string& name, PageHintArchive_PageKind* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PageHintArchive_PageKind>(
    PageHintArchive_PageKind_descriptor(), name, value);
}
enum ViewScaleMode {
  ViewScaleMode_UserDefined = 0,
  ViewScaleMode_FitWidth = 1,
  ViewScaleMode_FirPage = 2
};
bool ViewScaleMode_IsValid(int value);
const ViewScaleMode ViewScaleMode_MIN = ViewScaleMode_UserDefined;
const ViewScaleMode ViewScaleMode_MAX = ViewScaleMode_FirPage;
const int ViewScaleMode_ARRAYSIZE = ViewScaleMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ViewScaleMode_descriptor();
inline const ::std::string& ViewScaleMode_Name(ViewScaleMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ViewScaleMode_descriptor(), value);
}
inline bool ViewScaleMode_Parse(
    const ::std::string& name, ViewScaleMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ViewScaleMode>(
    ViewScaleMode_descriptor(), name, value);
}
// ===================================================================

class DocumentArchive : public ::google::protobuf::Message {
 public:
  DocumentArchive();
  virtual ~DocumentArchive();

  DocumentArchive(const DocumentArchive& from);

  inline DocumentArchive& operator=(const DocumentArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentArchive& default_instance();

  void Swap(DocumentArchive* other);

  // implements Message ----------------------------------------------

  DocumentArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DocumentArchive& from);
  void MergeFrom(const DocumentArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSA.DocumentArchive super = 15;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 15;
  inline const ::TSA::DocumentArchive& super() const;
  inline ::TSA::DocumentArchive* mutable_super();
  inline ::TSA::DocumentArchive* release_super();
  inline void set_allocated_super(::TSA::DocumentArchive* super);

  // optional .TSP.Reference stylesheet = 2;
  inline bool has_stylesheet() const;
  inline void clear_stylesheet();
  static const int kStylesheetFieldNumber = 2;
  inline const ::TSP::Reference& stylesheet() const;
  inline ::TSP::Reference* mutable_stylesheet();
  inline ::TSP::Reference* release_stylesheet();
  inline void set_allocated_stylesheet(::TSP::Reference* stylesheet);

  // optional .TSP.Reference floating_drawables = 3;
  inline bool has_floating_drawables() const;
  inline void clear_floating_drawables();
  static const int kFloatingDrawablesFieldNumber = 3;
  inline const ::TSP::Reference& floating_drawables() const;
  inline ::TSP::Reference* mutable_floating_drawables();
  inline ::TSP::Reference* release_floating_drawables();
  inline void set_allocated_floating_drawables(::TSP::Reference* floating_drawables);

  // optional .TSP.Reference body_storage = 4;
  inline bool has_body_storage() const;
  inline void clear_body_storage();
  static const int kBodyStorageFieldNumber = 4;
  inline const ::TSP::Reference& body_storage() const;
  inline ::TSP::Reference* mutable_body_storage();
  inline ::TSP::Reference* release_body_storage();
  inline void set_allocated_body_storage(::TSP::Reference* body_storage);

  // optional .TSP.Reference section = 5;
  inline bool has_section() const;
  inline void clear_section();
  static const int kSectionFieldNumber = 5;
  inline const ::TSP::Reference& section() const;
  inline ::TSP::Reference* mutable_section();
  inline ::TSP::Reference* release_section();
  inline void set_allocated_section(::TSP::Reference* section);

  // optional .TSP.Reference theme = 6;
  inline bool has_theme() const;
  inline void clear_theme();
  static const int kThemeFieldNumber = 6;
  inline const ::TSP::Reference& theme() const;
  inline ::TSP::Reference* mutable_theme();
  inline ::TSP::Reference* release_theme();
  inline void set_allocated_theme(::TSP::Reference* theme);

  // optional .TSP.Reference settings = 7;
  inline bool has_settings() const;
  inline void clear_settings();
  static const int kSettingsFieldNumber = 7;
  inline const ::TSP::Reference& settings() const;
  inline ::TSP::Reference* mutable_settings();
  inline ::TSP::Reference* release_settings();
  inline void set_allocated_settings(::TSP::Reference* settings);

  // optional .TSP.Reference deprecated_layout_state = 11;
  inline bool has_deprecated_layout_state() const;
  inline void clear_deprecated_layout_state();
  static const int kDeprecatedLayoutStateFieldNumber = 11;
  inline const ::TSP::Reference& deprecated_layout_state() const;
  inline ::TSP::Reference* mutable_deprecated_layout_state();
  inline ::TSP::Reference* release_deprecated_layout_state();
  inline void set_allocated_deprecated_layout_state(::TSP::Reference* deprecated_layout_state);

  // optional .TSP.Reference deprecated_view_state = 12;
  inline bool has_deprecated_view_state() const;
  inline void clear_deprecated_view_state();
  static const int kDeprecatedViewStateFieldNumber = 12;
  inline const ::TSP::Reference& deprecated_view_state() const;
  inline ::TSP::Reference* mutable_deprecated_view_state();
  inline ::TSP::Reference* release_deprecated_view_state();
  inline void set_allocated_deprecated_view_state(::TSP::Reference* deprecated_view_state);

  // repeated .TSP.Reference citation_records = 13;
  inline int citation_records_size() const;
  inline void clear_citation_records();
  static const int kCitationRecordsFieldNumber = 13;
  inline const ::TSP::Reference& citation_records(int index) const;
  inline ::TSP::Reference* mutable_citation_records(int index);
  inline ::TSP::Reference* add_citation_records();
  inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
      citation_records() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
      mutable_citation_records();

  // repeated .TSP.Reference toc_styles = 14;
  inline int toc_styles_size() const;
  inline void clear_toc_styles();
  static const int kTocStylesFieldNumber = 14;
  inline const ::TSP::Reference& toc_styles(int index) const;
  inline ::TSP::Reference* mutable_toc_styles(int index);
  inline ::TSP::Reference* add_toc_styles();
  inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
      toc_styles() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
      mutable_toc_styles();

  // repeated .TSP.Reference change_sessions = 16;
  inline int change_sessions_size() const;
  inline void clear_change_sessions();
  static const int kChangeSessionsFieldNumber = 16;
  inline const ::TSP::Reference& change_sessions(int index) const;
  inline ::TSP::Reference* mutable_change_sessions(int index);
  inline ::TSP::Reference* add_change_sessions();
  inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
      change_sessions() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
      mutable_change_sessions();

  // optional .TSP.Reference drawables_zorder = 20;
  inline bool has_drawables_zorder() const;
  inline void clear_drawables_zorder();
  static const int kDrawablesZorderFieldNumber = 20;
  inline const ::TSP::Reference& drawables_zorder() const;
  inline ::TSP::Reference* mutable_drawables_zorder();
  inline ::TSP::Reference* release_drawables_zorder();
  inline void set_allocated_drawables_zorder(::TSP::Reference* drawables_zorder);

  // optional bool uses_single_header_footer = 21;
  inline bool has_uses_single_header_footer() const;
  inline void clear_uses_single_header_footer();
  static const int kUsesSingleHeaderFooterFieldNumber = 21;
  inline bool uses_single_header_footer() const;
  inline void set_uses_single_header_footer(bool value);

  // optional float page_width = 30;
  inline bool has_page_width() const;
  inline void clear_page_width();
  static const int kPageWidthFieldNumber = 30;
  inline float page_width() const;
  inline void set_page_width(float value);

  // optional float page_height = 31;
  inline bool has_page_height() const;
  inline void clear_page_height();
  static const int kPageHeightFieldNumber = 31;
  inline float page_height() const;
  inline void set_page_height(float value);

  // optional float left_margin = 32;
  inline bool has_left_margin() const;
  inline void clear_left_margin();
  static const int kLeftMarginFieldNumber = 32;
  inline float left_margin() const;
  inline void set_left_margin(float value);

  // optional float right_margin = 33;
  inline bool has_right_margin() const;
  inline void clear_right_margin();
  static const int kRightMarginFieldNumber = 33;
  inline float right_margin() const;
  inline void set_right_margin(float value);

  // optional float top_margin = 34;
  inline bool has_top_margin() const;
  inline void clear_top_margin();
  static const int kTopMarginFieldNumber = 34;
  inline float top_margin() const;
  inline void set_top_margin(float value);

  // optional float bottom_margin = 35;
  inline bool has_bottom_margin() const;
  inline void clear_bottom_margin();
  static const int kBottomMarginFieldNumber = 35;
  inline float bottom_margin() const;
  inline void set_bottom_margin(float value);

  // optional float header_margin = 36;
  inline bool has_header_margin() const;
  inline void clear_header_margin();
  static const int kHeaderMarginFieldNumber = 36;
  inline float header_margin() const;
  inline void set_header_margin(float value);

  // optional float footer_margin = 37;
  inline bool has_footer_margin() const;
  inline void clear_footer_margin();
  static const int kFooterMarginFieldNumber = 37;
  inline float footer_margin() const;
  inline void set_footer_margin(float value);

  // optional float page_scale = 38;
  inline bool has_page_scale() const;
  inline void clear_page_scale();
  static const int kPageScaleFieldNumber = 38;
  inline float page_scale() const;
  inline void set_page_scale(float value);

  // optional bool layout_body_vertically = 39;
  inline bool has_layout_body_vertically() const;
  inline void clear_layout_body_vertically();
  static const int kLayoutBodyVerticallyFieldNumber = 39;
  inline bool layout_body_vertically() const;
  inline void set_layout_body_vertically(bool value);

  // optional bool change_tracking_enabled = 40;
  inline bool has_change_tracking_enabled() const;
  inline void clear_change_tracking_enabled();
  static const int kChangeTrackingEnabledFieldNumber = 40;
  inline bool change_tracking_enabled() const;
  inline void set_change_tracking_enabled(bool value);

  // optional .TSP.Reference tables_custom_format_list = 41;
  inline bool has_tables_custom_format_list() const;
  inline void clear_tables_custom_format_list();
  static const int kTablesCustomFormatListFieldNumber = 41;
  inline const ::TSP::Reference& tables_custom_format_list() const;
  inline ::TSP::Reference* mutable_tables_custom_format_list();
  inline ::TSP::Reference* release_tables_custom_format_list();
  inline void set_allocated_tables_custom_format_list(::TSP::Reference* tables_custom_format_list);

  // optional uint32 orientation = 42 [default = 0];
  inline bool has_orientation() const;
  inline void clear_orientation();
  static const int kOrientationFieldNumber = 42;
  inline ::google::protobuf::uint32 orientation() const;
  inline void set_orientation(::google::protobuf::uint32 value);

  // optional string printer_id = 43;
  inline bool has_printer_id() const;
  inline void clear_printer_id();
  static const int kPrinterIdFieldNumber = 43;
  inline const ::std::string& printer_id() const;
  inline void set_printer_id(const ::std::string& value);
  inline void set_printer_id(const char* value);
  inline void set_printer_id(const char* value, size_t size);
  inline ::std::string* mutable_printer_id();
  inline ::std::string* release_printer_id();
  inline void set_allocated_printer_id(::std::string* printer_id);

  // optional string paper_id = 44;
  inline bool has_paper_id() const;
  inline void clear_paper_id();
  static const int kPaperIdFieldNumber = 44;
  inline const ::std::string& paper_id() const;
  inline void set_paper_id(const ::std::string& value);
  inline void set_paper_id(const char* value);
  inline void set_paper_id(const char* value, size_t size);
  inline ::std::string* mutable_paper_id();
  inline ::std::string* release_paper_id();
  inline void set_allocated_paper_id(::std::string* paper_id);

  // optional bool change_tracking_paused = 45;
  inline bool has_change_tracking_paused() const;
  inline void clear_change_tracking_paused();
  static const int kChangeTrackingPausedFieldNumber = 45;
  inline bool change_tracking_paused() const;
  inline void set_change_tracking_paused(bool value);

  // @@protoc_insertion_point(class_scope:TP.DocumentArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();
  inline void set_has_stylesheet();
  inline void clear_has_stylesheet();
  inline void set_has_floating_drawables();
  inline void clear_has_floating_drawables();
  inline void set_has_body_storage();
  inline void clear_has_body_storage();
  inline void set_has_section();
  inline void clear_has_section();
  inline void set_has_theme();
  inline void clear_has_theme();
  inline void set_has_settings();
  inline void clear_has_settings();
  inline void set_has_deprecated_layout_state();
  inline void clear_has_deprecated_layout_state();
  inline void set_has_deprecated_view_state();
  inline void clear_has_deprecated_view_state();
  inline void set_has_drawables_zorder();
  inline void clear_has_drawables_zorder();
  inline void set_has_uses_single_header_footer();
  inline void clear_has_uses_single_header_footer();
  inline void set_has_page_width();
  inline void clear_has_page_width();
  inline void set_has_page_height();
  inline void clear_has_page_height();
  inline void set_has_left_margin();
  inline void clear_has_left_margin();
  inline void set_has_right_margin();
  inline void clear_has_right_margin();
  inline void set_has_top_margin();
  inline void clear_has_top_margin();
  inline void set_has_bottom_margin();
  inline void clear_has_bottom_margin();
  inline void set_has_header_margin();
  inline void clear_has_header_margin();
  inline void set_has_footer_margin();
  inline void clear_has_footer_margin();
  inline void set_has_page_scale();
  inline void clear_has_page_scale();
  inline void set_has_layout_body_vertically();
  inline void clear_has_layout_body_vertically();
  inline void set_has_change_tracking_enabled();
  inline void clear_has_change_tracking_enabled();
  inline void set_has_tables_custom_format_list();
  inline void clear_has_tables_custom_format_list();
  inline void set_has_orientation();
  inline void clear_has_orientation();
  inline void set_has_printer_id();
  inline void clear_has_printer_id();
  inline void set_has_paper_id();
  inline void clear_has_paper_id();
  inline void set_has_change_tracking_paused();
  inline void clear_has_change_tracking_paused();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSA::DocumentArchive* super_;
  ::TSP::Reference* stylesheet_;
  ::TSP::Reference* floating_drawables_;
  ::TSP::Reference* body_storage_;
  ::TSP::Reference* section_;
  ::TSP::Reference* theme_;
  ::TSP::Reference* settings_;
  ::TSP::Reference* deprecated_layout_state_;
  ::TSP::Reference* deprecated_view_state_;
  ::google::protobuf::RepeatedPtrField< ::TSP::Reference > citation_records_;
  ::google::protobuf::RepeatedPtrField< ::TSP::Reference > toc_styles_;
  ::google::protobuf::RepeatedPtrField< ::TSP::Reference > change_sessions_;
  ::TSP::Reference* drawables_zorder_;
  float page_width_;
  float page_height_;
  float left_margin_;
  float right_margin_;
  float top_margin_;
  float bottom_margin_;
  float header_margin_;
  float footer_margin_;
  float page_scale_;
  bool uses_single_header_footer_;
  bool layout_body_vertically_;
  bool change_tracking_enabled_;
  bool change_tracking_paused_;
  ::TSP::Reference* tables_custom_format_list_;
  ::std::string* printer_id_;
  ::std::string* paper_id_;
  ::google::protobuf::uint32 orientation_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(30 + 31) / 32];

  friend void  protobuf_AddDesc_TPArchives_2eproto();
  friend void protobuf_AssignDesc_TPArchives_2eproto();
  friend void protobuf_ShutdownFile_TPArchives_2eproto();

  void InitAsDefaultInstance();
  static DocumentArchive* default_instance_;
};
// -------------------------------------------------------------------

class ThemeArchive : public ::google::protobuf::Message {
 public:
  ThemeArchive();
  virtual ~ThemeArchive();

  ThemeArchive(const ThemeArchive& from);

  inline ThemeArchive& operator=(const ThemeArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ThemeArchive& default_instance();

  void Swap(ThemeArchive* other);

  // implements Message ----------------------------------------------

  ThemeArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ThemeArchive& from);
  void MergeFrom(const ThemeArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSS.ThemeArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSS::ThemeArchive& super() const;
  inline ::TSS::ThemeArchive* mutable_super();
  inline ::TSS::ThemeArchive* release_super();
  inline void set_allocated_super(::TSS::ThemeArchive* super);

  // @@protoc_insertion_point(class_scope:TP.ThemeArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSS::ThemeArchive* super_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_TPArchives_2eproto();
  friend void protobuf_AssignDesc_TPArchives_2eproto();
  friend void protobuf_ShutdownFile_TPArchives_2eproto();

  void InitAsDefaultInstance();
  static ThemeArchive* default_instance_;
};
// -------------------------------------------------------------------

class SettingsArchive : public ::google::protobuf::Message {
 public:
  SettingsArchive();
  virtual ~SettingsArchive();

  SettingsArchive(const SettingsArchive& from);

  inline SettingsArchive& operator=(const SettingsArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SettingsArchive& default_instance();

  void Swap(SettingsArchive* other);

  // implements Message ----------------------------------------------

  SettingsArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SettingsArchive& from);
  void MergeFrom(const SettingsArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SettingsArchive_FootnoteKind FootnoteKind;
  static const FootnoteKind kFootnoteKindFootnotes = SettingsArchive_FootnoteKind_kFootnoteKindFootnotes;
  static const FootnoteKind kFootnoteKindDocumentEndnotes = SettingsArchive_FootnoteKind_kFootnoteKindDocumentEndnotes;
  static const FootnoteKind kFootnoteKindSectionEndnotes = SettingsArchive_FootnoteKind_kFootnoteKindSectionEndnotes;
  static inline bool FootnoteKind_IsValid(int value) {
    return SettingsArchive_FootnoteKind_IsValid(value);
  }
  static const FootnoteKind FootnoteKind_MIN =
    SettingsArchive_FootnoteKind_FootnoteKind_MIN;
  static const FootnoteKind FootnoteKind_MAX =
    SettingsArchive_FootnoteKind_FootnoteKind_MAX;
  static const int FootnoteKind_ARRAYSIZE =
    SettingsArchive_FootnoteKind_FootnoteKind_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FootnoteKind_descriptor() {
    return SettingsArchive_FootnoteKind_descriptor();
  }
  static inline const ::std::string& FootnoteKind_Name(FootnoteKind value) {
    return SettingsArchive_FootnoteKind_Name(value);
  }
  static inline bool FootnoteKind_Parse(const ::std::string& name,
      FootnoteKind* value) {
    return SettingsArchive_FootnoteKind_Parse(name, value);
  }

  typedef SettingsArchive_FootnoteFormat FootnoteFormat;
  static const FootnoteFormat kFootnoteFormatNumeric = SettingsArchive_FootnoteFormat_kFootnoteFormatNumeric;
  static const FootnoteFormat kFootnoteFormatRoman = SettingsArchive_FootnoteFormat_kFootnoteFormatRoman;
  static const FootnoteFormat kFootnoteFormatSymbolic = SettingsArchive_FootnoteFormat_kFootnoteFormatSymbolic;
  static const FootnoteFormat kFootnoteFormatJapaneseNumeric = SettingsArchive_FootnoteFormat_kFootnoteFormatJapaneseNumeric;
  static const FootnoteFormat kFootnoteFormatJapaneseIdeographic = SettingsArchive_FootnoteFormat_kFootnoteFormatJapaneseIdeographic;
  static inline bool FootnoteFormat_IsValid(int value) {
    return SettingsArchive_FootnoteFormat_IsValid(value);
  }
  static const FootnoteFormat FootnoteFormat_MIN =
    SettingsArchive_FootnoteFormat_FootnoteFormat_MIN;
  static const FootnoteFormat FootnoteFormat_MAX =
    SettingsArchive_FootnoteFormat_FootnoteFormat_MAX;
  static const int FootnoteFormat_ARRAYSIZE =
    SettingsArchive_FootnoteFormat_FootnoteFormat_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FootnoteFormat_descriptor() {
    return SettingsArchive_FootnoteFormat_descriptor();
  }
  static inline const ::std::string& FootnoteFormat_Name(FootnoteFormat value) {
    return SettingsArchive_FootnoteFormat_Name(value);
  }
  static inline bool FootnoteFormat_Parse(const ::std::string& name,
      FootnoteFormat* value) {
    return SettingsArchive_FootnoteFormat_Parse(name, value);
  }

  typedef SettingsArchive_FootnoteNumbering FootnoteNumbering;
  static const FootnoteNumbering kFootnoteNumberingContinuous = SettingsArchive_FootnoteNumbering_kFootnoteNumberingContinuous;
  static const FootnoteNumbering kFootnoteNumberingRestartEachPage = SettingsArchive_FootnoteNumbering_kFootnoteNumberingRestartEachPage;
  static const FootnoteNumbering kFootnoteNumberingRestartEachSection = SettingsArchive_FootnoteNumbering_kFootnoteNumberingRestartEachSection;
  static inline bool FootnoteNumbering_IsValid(int value) {
    return SettingsArchive_FootnoteNumbering_IsValid(value);
  }
  static const FootnoteNumbering FootnoteNumbering_MIN =
    SettingsArchive_FootnoteNumbering_FootnoteNumbering_MIN;
  static const FootnoteNumbering FootnoteNumbering_MAX =
    SettingsArchive_FootnoteNumbering_FootnoteNumbering_MAX;
  static const int FootnoteNumbering_ARRAYSIZE =
    SettingsArchive_FootnoteNumbering_FootnoteNumbering_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FootnoteNumbering_descriptor() {
    return SettingsArchive_FootnoteNumbering_descriptor();
  }
  static inline const ::std::string& FootnoteNumbering_Name(FootnoteNumbering value) {
    return SettingsArchive_FootnoteNumbering_Name(value);
  }
  static inline bool FootnoteNumbering_Parse(const ::std::string& name,
      FootnoteNumbering* value) {
    return SettingsArchive_FootnoteNumbering_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bool body = 1 [default = true];
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 1;
  inline bool body() const;
  inline void set_body(bool value);

  // optional bool headers = 2 [default = true];
  inline bool has_headers() const;
  inline void clear_headers();
  static const int kHeadersFieldNumber = 2;
  inline bool headers() const;
  inline void set_headers(bool value);

  // optional bool footers = 3 [default = true];
  inline bool has_footers() const;
  inline void clear_footers();
  static const int kFootersFieldNumber = 3;
  inline bool footers() const;
  inline void set_footers(bool value);

  // optional bool preview = 4 [default = true];
  inline bool has_preview() const;
  inline void clear_preview();
  static const int kPreviewFieldNumber = 4;
  inline bool preview() const;
  inline void set_preview(bool value);

  // optional bool copy_movies = 5 [default = true];
  inline bool has_copy_movies() const;
  inline void clear_copy_movies();
  static const int kCopyMoviesFieldNumber = 5;
  inline bool copy_movies() const;
  inline void set_copy_movies(bool value);

  // optional bool copy_assets = 6 [default = true];
  inline bool has_copy_assets() const;
  inline void clear_copy_assets();
  static const int kCopyAssetsFieldNumber = 6;
  inline bool copy_assets() const;
  inline void set_copy_assets(bool value);

  // optional bool placeholder_authoring = 7 [default = false];
  inline bool has_placeholder_authoring() const;
  inline void clear_placeholder_authoring();
  static const int kPlaceholderAuthoringFieldNumber = 7;
  inline bool placeholder_authoring() const;
  inline void set_placeholder_authoring(bool value);

  // optional bool links_enabled = 8 [default = true];
  inline bool has_links_enabled() const;
  inline void clear_links_enabled();
  static const int kLinksEnabledFieldNumber = 8;
  inline bool links_enabled() const;
  inline void set_links_enabled(bool value);

  // optional bool hyphenation = 9 [default = false];
  inline bool has_hyphenation() const;
  inline void clear_hyphenation();
  static const int kHyphenationFieldNumber = 9;
  inline bool hyphenation() const;
  inline void set_hyphenation(bool value);

  // optional bool use_ligatures = 10 [default = false];
  inline bool has_use_ligatures() const;
  inline void clear_use_ligatures();
  static const int kUseLigaturesFieldNumber = 10;
  inline bool use_ligatures() const;
  inline void set_use_ligatures(bool value);

  // optional bool toc_links_enabled = 11 [default = false];
  inline bool has_toc_links_enabled() const;
  inline void clear_toc_links_enabled();
  static const int kTocLinksEnabledFieldNumber = 11;
  inline bool toc_links_enabled() const;
  inline void set_toc_links_enabled(bool value);

  // optional bool show_ct_markup = 12 [default = true];
  inline bool has_show_ct_markup() const;
  inline void clear_show_ct_markup();
  static const int kShowCtMarkupFieldNumber = 12;
  inline bool show_ct_markup() const;
  inline void set_show_ct_markup(bool value);

  // optional bool show_ct_deletions = 13 [default = true];
  inline bool has_show_ct_deletions() const;
  inline void clear_show_ct_deletions();
  static const int kShowCtDeletionsFieldNumber = 13;
  inline bool show_ct_deletions() const;
  inline void set_show_ct_deletions(bool value);

  // optional int32 ct_bubbles_visibility = 14;
  inline bool has_ct_bubbles_visibility() const;
  inline void clear_ct_bubbles_visibility();
  static const int kCtBubblesVisibilityFieldNumber = 14;
  inline ::google::protobuf::int32 ct_bubbles_visibility() const;
  inline void set_ct_bubbles_visibility(::google::protobuf::int32 value);

  // optional bool change_bars_visible = 15 [default = true];
  inline bool has_change_bars_visible() const;
  inline void clear_change_bars_visible();
  static const int kChangeBarsVisibleFieldNumber = 15;
  inline bool change_bars_visible() const;
  inline void set_change_bars_visible(bool value);

  // optional bool format_changes_visible = 16 [default = true];
  inline bool has_format_changes_visible() const;
  inline void clear_format_changes_visible();
  static const int kFormatChangesVisibleFieldNumber = 16;
  inline bool format_changes_visible() const;
  inline void set_format_changes_visible(bool value);

  // optional bool annotations_visible = 17 [default = true];
  inline bool has_annotations_visible() const;
  inline void clear_annotations_visible();
  static const int kAnnotationsVisibleFieldNumber = 17;
  inline bool annotations_visible() const;
  inline void set_annotations_visible(bool value);

  // optional bool document_is_rtl = 18 [default = false];
  inline bool has_document_is_rtl() const;
  inline void clear_document_is_rtl();
  static const int kDocumentIsRtlFieldNumber = 18;
  inline bool document_is_rtl() const;
  inline void set_document_is_rtl(bool value);

  // optional string decimal_tab = 20;
  inline bool has_decimal_tab() const;
  inline void clear_decimal_tab();
  static const int kDecimalTabFieldNumber = 20;
  inline const ::std::string& decimal_tab() const;
  inline void set_decimal_tab(const ::std::string& value);
  inline void set_decimal_tab(const char* value);
  inline void set_decimal_tab(const char* value, size_t size);
  inline ::std::string* mutable_decimal_tab();
  inline ::std::string* release_decimal_tab();
  inline void set_allocated_decimal_tab(::std::string* decimal_tab);

  // optional string language = 21;
  inline bool has_language() const;
  inline void clear_language();
  static const int kLanguageFieldNumber = 21;
  inline const ::std::string& language() const;
  inline void set_language(const ::std::string& value);
  inline void set_language(const char* value);
  inline void set_language(const char* value, size_t size);
  inline ::std::string* mutable_language();
  inline ::std::string* release_language();
  inline void set_allocated_language(::std::string* language);

  // optional string hyphenation_language = 22;
  inline bool has_hyphenation_language() const;
  inline void clear_hyphenation_language();
  static const int kHyphenationLanguageFieldNumber = 22;
  inline const ::std::string& hyphenation_language() const;
  inline void set_hyphenation_language(const ::std::string& value);
  inline void set_hyphenation_language(const char* value);
  inline void set_hyphenation_language(const char* value, size_t size);
  inline ::std::string* mutable_hyphenation_language();
  inline ::std::string* release_hyphenation_language();
  inline void set_allocated_hyphenation_language(::std::string* hyphenation_language);

  // optional string creation_locale = 23;
  inline bool has_creation_locale() const;
  inline void clear_creation_locale();
  static const int kCreationLocaleFieldNumber = 23;
  inline const ::std::string& creation_locale() const;
  inline void set_creation_locale(const ::std::string& value);
  inline void set_creation_locale(const char* value);
  inline void set_creation_locale(const char* value, size_t size);
  inline ::std::string* mutable_creation_locale();
  inline ::std::string* release_creation_locale();
  inline void set_allocated_creation_locale(::std::string* creation_locale);

  // optional string last_locale = 24;
  inline bool has_last_locale() const;
  inline void clear_last_locale();
  static const int kLastLocaleFieldNumber = 24;
  inline const ::std::string& last_locale() const;
  inline void set_last_locale(const ::std::string& value);
  inline void set_last_locale(const char* value);
  inline void set_last_locale(const char* value, size_t size);
  inline ::std::string* mutable_last_locale();
  inline ::std::string* release_last_locale();
  inline void set_allocated_last_locale(::std::string* last_locale);

  // optional string orig_template = 25;
  inline bool has_orig_template() const;
  inline void clear_orig_template();
  static const int kOrigTemplateFieldNumber = 25;
  inline const ::std::string& orig_template() const;
  inline void set_orig_template(const ::std::string& value);
  inline void set_orig_template(const char* value);
  inline void set_orig_template(const char* value, size_t size);
  inline ::std::string* mutable_orig_template();
  inline ::std::string* release_orig_template();
  inline void set_allocated_orig_template(::std::string* orig_template);

  // optional string creation_date = 26;
  inline bool has_creation_date() const;
  inline void clear_creation_date();
  static const int kCreationDateFieldNumber = 26;
  inline const ::std::string& creation_date() const;
  inline void set_creation_date(const ::std::string& value);
  inline void set_creation_date(const char* value);
  inline void set_creation_date(const char* value, size_t size);
  inline ::std::string* mutable_creation_date();
  inline ::std::string* release_creation_date();
  inline void set_allocated_creation_date(::std::string* creation_date);

  // optional string bibliography_format = 27;
  inline bool has_bibliography_format() const;
  inline void clear_bibliography_format();
  static const int kBibliographyFormatFieldNumber = 27;
  inline const ::std::string& bibliography_format() const;
  inline void set_bibliography_format(const ::std::string& value);
  inline void set_bibliography_format(const char* value);
  inline void set_bibliography_format(const char* value, size_t size);
  inline ::std::string* mutable_bibliography_format();
  inline ::std::string* release_bibliography_format();
  inline void set_allocated_bibliography_format(::std::string* bibliography_format);

  // optional .TP.SettingsArchive.FootnoteKind footnote_kind = 30;
  inline bool has_footnote_kind() const;
  inline void clear_footnote_kind();
  static const int kFootnoteKindFieldNumber = 30;
  inline ::TP::SettingsArchive_FootnoteKind footnote_kind() const;
  inline void set_footnote_kind(::TP::SettingsArchive_FootnoteKind value);

  // optional .TP.SettingsArchive.FootnoteFormat footnote_format = 31;
  inline bool has_footnote_format() const;
  inline void clear_footnote_format();
  static const int kFootnoteFormatFieldNumber = 31;
  inline ::TP::SettingsArchive_FootnoteFormat footnote_format() const;
  inline void set_footnote_format(::TP::SettingsArchive_FootnoteFormat value);

  // optional .TP.SettingsArchive.FootnoteNumbering footnote_numbering = 32;
  inline bool has_footnote_numbering() const;
  inline void clear_footnote_numbering();
  static const int kFootnoteNumberingFieldNumber = 32;
  inline ::TP::SettingsArchive_FootnoteNumbering footnote_numbering() const;
  inline void set_footnote_numbering(::TP::SettingsArchive_FootnoteNumbering value);

  // optional int32 footnote_gap = 33;
  inline bool has_footnote_gap() const;
  inline void clear_footnote_gap();
  static const int kFootnoteGapFieldNumber = 33;
  inline ::google::protobuf::int32 footnote_gap() const;
  inline void set_footnote_gap(::google::protobuf::int32 value);

  // optional bool section_authoring = 40 [default = false];
  inline bool has_section_authoring() const;
  inline void clear_section_authoring();
  static const int kSectionAuthoringFieldNumber = 40;
  inline bool section_authoring() const;
  inline void set_section_authoring(bool value);

  // @@protoc_insertion_point(class_scope:TP.SettingsArchive)
 private:
  inline void set_has_body();
  inline void clear_has_body();
  inline void set_has_headers();
  inline void clear_has_headers();
  inline void set_has_footers();
  inline void clear_has_footers();
  inline void set_has_preview();
  inline void clear_has_preview();
  inline void set_has_copy_movies();
  inline void clear_has_copy_movies();
  inline void set_has_copy_assets();
  inline void clear_has_copy_assets();
  inline void set_has_placeholder_authoring();
  inline void clear_has_placeholder_authoring();
  inline void set_has_links_enabled();
  inline void clear_has_links_enabled();
  inline void set_has_hyphenation();
  inline void clear_has_hyphenation();
  inline void set_has_use_ligatures();
  inline void clear_has_use_ligatures();
  inline void set_has_toc_links_enabled();
  inline void clear_has_toc_links_enabled();
  inline void set_has_show_ct_markup();
  inline void clear_has_show_ct_markup();
  inline void set_has_show_ct_deletions();
  inline void clear_has_show_ct_deletions();
  inline void set_has_ct_bubbles_visibility();
  inline void clear_has_ct_bubbles_visibility();
  inline void set_has_change_bars_visible();
  inline void clear_has_change_bars_visible();
  inline void set_has_format_changes_visible();
  inline void clear_has_format_changes_visible();
  inline void set_has_annotations_visible();
  inline void clear_has_annotations_visible();
  inline void set_has_document_is_rtl();
  inline void clear_has_document_is_rtl();
  inline void set_has_decimal_tab();
  inline void clear_has_decimal_tab();
  inline void set_has_language();
  inline void clear_has_language();
  inline void set_has_hyphenation_language();
  inline void clear_has_hyphenation_language();
  inline void set_has_creation_locale();
  inline void clear_has_creation_locale();
  inline void set_has_last_locale();
  inline void clear_has_last_locale();
  inline void set_has_orig_template();
  inline void clear_has_orig_template();
  inline void set_has_creation_date();
  inline void clear_has_creation_date();
  inline void set_has_bibliography_format();
  inline void clear_has_bibliography_format();
  inline void set_has_footnote_kind();
  inline void clear_has_footnote_kind();
  inline void set_has_footnote_format();
  inline void clear_has_footnote_format();
  inline void set_has_footnote_numbering();
  inline void clear_has_footnote_numbering();
  inline void set_has_footnote_gap();
  inline void clear_has_footnote_gap();
  inline void set_has_section_authoring();
  inline void clear_has_section_authoring();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool body_;
  bool headers_;
  bool footers_;
  bool preview_;
  bool copy_movies_;
  bool copy_assets_;
  bool placeholder_authoring_;
  bool links_enabled_;
  bool hyphenation_;
  bool use_ligatures_;
  bool toc_links_enabled_;
  bool show_ct_markup_;
  ::google::protobuf::int32 ct_bubbles_visibility_;
  bool show_ct_deletions_;
  bool change_bars_visible_;
  bool format_changes_visible_;
  bool annotations_visible_;
  bool document_is_rtl_;
  bool section_authoring_;
  ::std::string* decimal_tab_;
  ::std::string* language_;
  ::std::string* hyphenation_language_;
  ::std::string* creation_locale_;
  ::std::string* last_locale_;
  ::std::string* orig_template_;
  ::std::string* creation_date_;
  ::std::string* bibliography_format_;
  int footnote_kind_;
  int footnote_format_;
  int footnote_numbering_;
  ::google::protobuf::int32 footnote_gap_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(31 + 31) / 32];

  friend void  protobuf_AddDesc_TPArchives_2eproto();
  friend void protobuf_AssignDesc_TPArchives_2eproto();
  friend void protobuf_ShutdownFile_TPArchives_2eproto();

  void InitAsDefaultInstance();
  static SettingsArchive* default_instance_;
};
// -------------------------------------------------------------------

class PlaceholderArchive : public ::google::protobuf::Message {
 public:
  PlaceholderArchive();
  virtual ~PlaceholderArchive();

  PlaceholderArchive(const PlaceholderArchive& from);

  inline PlaceholderArchive& operator=(const PlaceholderArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlaceholderArchive& default_instance();

  void Swap(PlaceholderArchive* other);

  // implements Message ----------------------------------------------

  PlaceholderArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlaceholderArchive& from);
  void MergeFrom(const PlaceholderArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSWP.ShapeInfoArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSWP::ShapeInfoArchive& super() const;
  inline ::TSWP::ShapeInfoArchive* mutable_super();
  inline ::TSWP::ShapeInfoArchive* release_super();
  inline void set_allocated_super(::TSWP::ShapeInfoArchive* super);

  // @@protoc_insertion_point(class_scope:TP.PlaceholderArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSWP::ShapeInfoArchive* super_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_TPArchives_2eproto();
  friend void protobuf_AssignDesc_TPArchives_2eproto();
  friend void protobuf_ShutdownFile_TPArchives_2eproto();

  void InitAsDefaultInstance();
  static PlaceholderArchive* default_instance_;
};
// -------------------------------------------------------------------

class FloatingDrawablesArchive_DrawableEntry : public ::google::protobuf::Message {
 public:
  FloatingDrawablesArchive_DrawableEntry();
  virtual ~FloatingDrawablesArchive_DrawableEntry();

  FloatingDrawablesArchive_DrawableEntry(const FloatingDrawablesArchive_DrawableEntry& from);

  inline FloatingDrawablesArchive_DrawableEntry& operator=(const FloatingDrawablesArchive_DrawableEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FloatingDrawablesArchive_DrawableEntry& default_instance();

  void Swap(FloatingDrawablesArchive_DrawableEntry* other);

  // implements Message ----------------------------------------------

  FloatingDrawablesArchive_DrawableEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FloatingDrawablesArchive_DrawableEntry& from);
  void MergeFrom(const FloatingDrawablesArchive_DrawableEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .TSP.Reference drawable = 1;
  inline bool has_drawable() const;
  inline void clear_drawable();
  static const int kDrawableFieldNumber = 1;
  inline const ::TSP::Reference& drawable() const;
  inline ::TSP::Reference* mutable_drawable();
  inline ::TSP::Reference* release_drawable();
  inline void set_allocated_drawable(::TSP::Reference* drawable);

  // @@protoc_insertion_point(class_scope:TP.FloatingDrawablesArchive.DrawableEntry)
 private:
  inline void set_has_drawable();
  inline void clear_has_drawable();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSP::Reference* drawable_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_TPArchives_2eproto();
  friend void protobuf_AssignDesc_TPArchives_2eproto();
  friend void protobuf_ShutdownFile_TPArchives_2eproto();

  void InitAsDefaultInstance();
  static FloatingDrawablesArchive_DrawableEntry* default_instance_;
};
// -------------------------------------------------------------------

class FloatingDrawablesArchive_PageGroup : public ::google::protobuf::Message {
 public:
  FloatingDrawablesArchive_PageGroup();
  virtual ~FloatingDrawablesArchive_PageGroup();

  FloatingDrawablesArchive_PageGroup(const FloatingDrawablesArchive_PageGroup& from);

  inline FloatingDrawablesArchive_PageGroup& operator=(const FloatingDrawablesArchive_PageGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FloatingDrawablesArchive_PageGroup& default_instance();

  void Swap(FloatingDrawablesArchive_PageGroup* other);

  // implements Message ----------------------------------------------

  FloatingDrawablesArchive_PageGroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FloatingDrawablesArchive_PageGroup& from);
  void MergeFrom(const FloatingDrawablesArchive_PageGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 page_index = 1;
  inline bool has_page_index() const;
  inline void clear_page_index();
  static const int kPageIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 page_index() const;
  inline void set_page_index(::google::protobuf::uint32 value);

  // repeated .TP.FloatingDrawablesArchive.DrawableEntry background_drawables = 2;
  inline int background_drawables_size() const;
  inline void clear_background_drawables();
  static const int kBackgroundDrawablesFieldNumber = 2;
  inline const ::TP::FloatingDrawablesArchive_DrawableEntry& background_drawables(int index) const;
  inline ::TP::FloatingDrawablesArchive_DrawableEntry* mutable_background_drawables(int index);
  inline ::TP::FloatingDrawablesArchive_DrawableEntry* add_background_drawables();
  inline const ::google::protobuf::RepeatedPtrField< ::TP::FloatingDrawablesArchive_DrawableEntry >&
      background_drawables() const;
  inline ::google::protobuf::RepeatedPtrField< ::TP::FloatingDrawablesArchive_DrawableEntry >*
      mutable_background_drawables();

  // repeated .TP.FloatingDrawablesArchive.DrawableEntry foreground_drawables = 3;
  inline int foreground_drawables_size() const;
  inline void clear_foreground_drawables();
  static const int kForegroundDrawablesFieldNumber = 3;
  inline const ::TP::FloatingDrawablesArchive_DrawableEntry& foreground_drawables(int index) const;
  inline ::TP::FloatingDrawablesArchive_DrawableEntry* mutable_foreground_drawables(int index);
  inline ::TP::FloatingDrawablesArchive_DrawableEntry* add_foreground_drawables();
  inline const ::google::protobuf::RepeatedPtrField< ::TP::FloatingDrawablesArchive_DrawableEntry >&
      foreground_drawables() const;
  inline ::google::protobuf::RepeatedPtrField< ::TP::FloatingDrawablesArchive_DrawableEntry >*
      mutable_foreground_drawables();

  // repeated .TP.FloatingDrawablesArchive.DrawableEntry drawables = 4;
  inline int drawables_size() const;
  inline void clear_drawables();
  static const int kDrawablesFieldNumber = 4;
  inline const ::TP::FloatingDrawablesArchive_DrawableEntry& drawables(int index) const;
  inline ::TP::FloatingDrawablesArchive_DrawableEntry* mutable_drawables(int index);
  inline ::TP::FloatingDrawablesArchive_DrawableEntry* add_drawables();
  inline const ::google::protobuf::RepeatedPtrField< ::TP::FloatingDrawablesArchive_DrawableEntry >&
      drawables() const;
  inline ::google::protobuf::RepeatedPtrField< ::TP::FloatingDrawablesArchive_DrawableEntry >*
      mutable_drawables();

  // @@protoc_insertion_point(class_scope:TP.FloatingDrawablesArchive.PageGroup)
 private:
  inline void set_has_page_index();
  inline void clear_has_page_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::TP::FloatingDrawablesArchive_DrawableEntry > background_drawables_;
  ::google::protobuf::RepeatedPtrField< ::TP::FloatingDrawablesArchive_DrawableEntry > foreground_drawables_;
  ::google::protobuf::RepeatedPtrField< ::TP::FloatingDrawablesArchive_DrawableEntry > drawables_;
  ::google::protobuf::uint32 page_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_TPArchives_2eproto();
  friend void protobuf_AssignDesc_TPArchives_2eproto();
  friend void protobuf_ShutdownFile_TPArchives_2eproto();

  void InitAsDefaultInstance();
  static FloatingDrawablesArchive_PageGroup* default_instance_;
};
// -------------------------------------------------------------------

class FloatingDrawablesArchive : public ::google::protobuf::Message {
 public:
  FloatingDrawablesArchive();
  virtual ~FloatingDrawablesArchive();

  FloatingDrawablesArchive(const FloatingDrawablesArchive& from);

  inline FloatingDrawablesArchive& operator=(const FloatingDrawablesArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FloatingDrawablesArchive& default_instance();

  void Swap(FloatingDrawablesArchive* other);

  // implements Message ----------------------------------------------

  FloatingDrawablesArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FloatingDrawablesArchive& from);
  void MergeFrom(const FloatingDrawablesArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FloatingDrawablesArchive_DrawableEntry DrawableEntry;
  typedef FloatingDrawablesArchive_PageGroup PageGroup;

  // accessors -------------------------------------------------------

  // repeated .TP.FloatingDrawablesArchive.PageGroup page_groups = 1;
  inline int page_groups_size() const;
  inline void clear_page_groups();
  static const int kPageGroupsFieldNumber = 1;
  inline const ::TP::FloatingDrawablesArchive_PageGroup& page_groups(int index) const;
  inline ::TP::FloatingDrawablesArchive_PageGroup* mutable_page_groups(int index);
  inline ::TP::FloatingDrawablesArchive_PageGroup* add_page_groups();
  inline const ::google::protobuf::RepeatedPtrField< ::TP::FloatingDrawablesArchive_PageGroup >&
      page_groups() const;
  inline ::google::protobuf::RepeatedPtrField< ::TP::FloatingDrawablesArchive_PageGroup >*
      mutable_page_groups();

  // @@protoc_insertion_point(class_scope:TP.FloatingDrawablesArchive)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::TP::FloatingDrawablesArchive_PageGroup > page_groups_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_TPArchives_2eproto();
  friend void protobuf_AssignDesc_TPArchives_2eproto();
  friend void protobuf_ShutdownFile_TPArchives_2eproto();

  void InitAsDefaultInstance();
  static FloatingDrawablesArchive* default_instance_;
};
// -------------------------------------------------------------------

class DrawablesZOrderArchive : public ::google::protobuf::Message {
 public:
  DrawablesZOrderArchive();
  virtual ~DrawablesZOrderArchive();

  DrawablesZOrderArchive(const DrawablesZOrderArchive& from);

  inline DrawablesZOrderArchive& operator=(const DrawablesZOrderArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DrawablesZOrderArchive& default_instance();

  void Swap(DrawablesZOrderArchive* other);

  // implements Message ----------------------------------------------

  DrawablesZOrderArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DrawablesZOrderArchive& from);
  void MergeFrom(const DrawablesZOrderArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TSP.Reference drawables = 1;
  inline int drawables_size() const;
  inline void clear_drawables();
  static const int kDrawablesFieldNumber = 1;
  inline const ::TSP::Reference& drawables(int index) const;
  inline ::TSP::Reference* mutable_drawables(int index);
  inline ::TSP::Reference* add_drawables();
  inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
      drawables() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
      mutable_drawables();

  // @@protoc_insertion_point(class_scope:TP.DrawablesZOrderArchive)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::TSP::Reference > drawables_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_TPArchives_2eproto();
  friend void protobuf_AssignDesc_TPArchives_2eproto();
  friend void protobuf_ShutdownFile_TPArchives_2eproto();

  void InitAsDefaultInstance();
  static DrawablesZOrderArchive* default_instance_;
};
// -------------------------------------------------------------------

class PageMasterArchive : public ::google::protobuf::Message {
 public:
  PageMasterArchive();
  virtual ~PageMasterArchive();

  PageMasterArchive(const PageMasterArchive& from);

  inline PageMasterArchive& operator=(const PageMasterArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PageMasterArchive& default_instance();

  void Swap(PageMasterArchive* other);

  // implements Message ----------------------------------------------

  PageMasterArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PageMasterArchive& from);
  void MergeFrom(const PageMasterArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TSP.Reference headers = 1;
  inline int headers_size() const;
  inline void clear_headers();
  static const int kHeadersFieldNumber = 1;
  inline const ::TSP::Reference& headers(int index) const;
  inline ::TSP::Reference* mutable_headers(int index);
  inline ::TSP::Reference* add_headers();
  inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
      headers() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
      mutable_headers();

  // repeated .TSP.Reference footers = 2;
  inline int footers_size() const;
  inline void clear_footers();
  static const int kFootersFieldNumber = 2;
  inline const ::TSP::Reference& footers(int index) const;
  inline ::TSP::Reference* mutable_footers(int index);
  inline ::TSP::Reference* add_footers();
  inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
      footers() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
      mutable_footers();

  // repeated .TSP.Reference master_drawables = 3;
  inline int master_drawables_size() const;
  inline void clear_master_drawables();
  static const int kMasterDrawablesFieldNumber = 3;
  inline const ::TSP::Reference& master_drawables(int index) const;
  inline ::TSP::Reference* mutable_master_drawables(int index);
  inline ::TSP::Reference* add_master_drawables();
  inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
      master_drawables() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
      mutable_master_drawables();

  // @@protoc_insertion_point(class_scope:TP.PageMasterArchive)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::TSP::Reference > headers_;
  ::google::protobuf::RepeatedPtrField< ::TSP::Reference > footers_;
  ::google::protobuf::RepeatedPtrField< ::TSP::Reference > master_drawables_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_TPArchives_2eproto();
  friend void protobuf_AssignDesc_TPArchives_2eproto();
  friend void protobuf_ShutdownFile_TPArchives_2eproto();

  void InitAsDefaultInstance();
  static PageMasterArchive* default_instance_;
};
// -------------------------------------------------------------------

class SectionArchive : public ::google::protobuf::Message {
 public:
  SectionArchive();
  virtual ~SectionArchive();

  SectionArchive(const SectionArchive& from);

  inline SectionArchive& operator=(const SectionArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SectionArchive& default_instance();

  void Swap(SectionArchive* other);

  // implements Message ----------------------------------------------

  SectionArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SectionArchive& from);
  void MergeFrom(const SectionArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool OBSOLETE_shows_header = 1;
  inline bool has_obsolete_shows_header() const;
  inline void clear_obsolete_shows_header();
  static const int kOBSOLETEShowsHeaderFieldNumber = 1;
  inline bool obsolete_shows_header() const;
  inline void set_obsolete_shows_header(bool value);

  // optional bool OBSOLETE_shows_footer = 2;
  inline bool has_obsolete_shows_footer() const;
  inline void clear_obsolete_shows_footer();
  static const int kOBSOLETEShowsFooterFieldNumber = 2;
  inline bool obsolete_shows_footer() const;
  inline void set_obsolete_shows_footer(bool value);

  // repeated .TSP.Reference OBSOLETE_headers = 3;
  inline int obsolete_headers_size() const;
  inline void clear_obsolete_headers();
  static const int kOBSOLETEHeadersFieldNumber = 3;
  inline const ::TSP::Reference& obsolete_headers(int index) const;
  inline ::TSP::Reference* mutable_obsolete_headers(int index);
  inline ::TSP::Reference* add_obsolete_headers();
  inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
      obsolete_headers() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
      mutable_obsolete_headers();

  // repeated .TSP.Reference OBSOLETE_footers = 4;
  inline int obsolete_footers_size() const;
  inline void clear_obsolete_footers();
  static const int kOBSOLETEFootersFieldNumber = 4;
  inline const ::TSP::Reference& obsolete_footers(int index) const;
  inline ::TSP::Reference* mutable_obsolete_footers(int index);
  inline ::TSP::Reference* add_obsolete_footers();
  inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
      obsolete_footers() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
      mutable_obsolete_footers();

  // optional float OBSOLETE_left_margin = 5;
  inline bool has_obsolete_left_margin() const;
  inline void clear_obsolete_left_margin();
  static const int kOBSOLETELeftMarginFieldNumber = 5;
  inline float obsolete_left_margin() const;
  inline void set_obsolete_left_margin(float value);

  // optional float OBSOLETE_right_margin = 6;
  inline bool has_obsolete_right_margin() const;
  inline void clear_obsolete_right_margin();
  static const int kOBSOLETERightMarginFieldNumber = 6;
  inline float obsolete_right_margin() const;
  inline void set_obsolete_right_margin(float value);

  // optional float OBSOLETE_top_margin = 7;
  inline bool has_obsolete_top_margin() const;
  inline void clear_obsolete_top_margin();
  static const int kOBSOLETETopMarginFieldNumber = 7;
  inline float obsolete_top_margin() const;
  inline void set_obsolete_top_margin(float value);

  // optional float OBSOLETE_bottom_margin = 8;
  inline bool has_obsolete_bottom_margin() const;
  inline void clear_obsolete_bottom_margin();
  static const int kOBSOLETEBottomMarginFieldNumber = 8;
  inline float obsolete_bottom_margin() const;
  inline void set_obsolete_bottom_margin(float value);

  // optional float OBSOLETE_header_padding = 9;
  inline bool has_obsolete_header_padding() const;
  inline void clear_obsolete_header_padding();
  static const int kOBSOLETEHeaderPaddingFieldNumber = 9;
  inline float obsolete_header_padding() const;
  inline void set_obsolete_header_padding(float value);

  // optional float OBSOLETE_footer_padding = 10;
  inline bool has_obsolete_footer_padding() const;
  inline void clear_obsolete_footer_padding();
  static const int kOBSOLETEFooterPaddingFieldNumber = 10;
  inline float obsolete_footer_padding() const;
  inline void set_obsolete_footer_padding(float value);

  // optional float OBSOLETE_paper_width = 11;
  inline bool has_obsolete_paper_width() const;
  inline void clear_obsolete_paper_width();
  static const int kOBSOLETEPaperWidthFieldNumber = 11;
  inline float obsolete_paper_width() const;
  inline void set_obsolete_paper_width(float value);

  // optional float OBSOLETE_paper_height = 12;
  inline bool has_obsolete_paper_height() const;
  inline void clear_obsolete_paper_height();
  static const int kOBSOLETEPaperHeightFieldNumber = 12;
  inline float obsolete_paper_height() const;
  inline void set_obsolete_paper_height(float value);

  // optional bool OBSOLETE_landscape_mode = 13;
  inline bool has_obsolete_landscape_mode() const;
  inline void clear_obsolete_landscape_mode();
  static const int kOBSOLETELandscapeModeFieldNumber = 13;
  inline bool obsolete_landscape_mode() const;
  inline void set_obsolete_landscape_mode(bool value);

  // repeated .TSP.Reference OBSOLETE_master_drawables = 14;
  inline int obsolete_master_drawables_size() const;
  inline void clear_obsolete_master_drawables();
  static const int kOBSOLETEMasterDrawablesFieldNumber = 14;
  inline const ::TSP::Reference& obsolete_master_drawables(int index) const;
  inline ::TSP::Reference* mutable_obsolete_master_drawables(int index);
  inline ::TSP::Reference* add_obsolete_master_drawables();
  inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
      obsolete_master_drawables() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
      mutable_obsolete_master_drawables();

  // optional float OBSOLETE_header_margin = 15;
  inline bool has_obsolete_header_margin() const;
  inline void clear_obsolete_header_margin();
  static const int kOBSOLETEHeaderMarginFieldNumber = 15;
  inline float obsolete_header_margin() const;
  inline void set_obsolete_header_margin(float value);

  // optional float OBSOLETE_footer_margin = 16;
  inline bool has_obsolete_footer_margin() const;
  inline void clear_obsolete_footer_margin();
  static const int kOBSOLETEFooterMarginFieldNumber = 16;
  inline float obsolete_footer_margin() const;
  inline void set_obsolete_footer_margin(float value);

  // optional bool inherit_previous_header_footer = 17;
  inline bool has_inherit_previous_header_footer() const;
  inline void clear_inherit_previous_header_footer();
  static const int kInheritPreviousHeaderFooterFieldNumber = 17;
  inline bool inherit_previous_header_footer() const;
  inline void set_inherit_previous_header_footer(bool value);

  // optional bool page_master_first_page_different = 18;
  inline bool has_page_master_first_page_different() const;
  inline void clear_page_master_first_page_different();
  static const int kPageMasterFirstPageDifferentFieldNumber = 18;
  inline bool page_master_first_page_different() const;
  inline void set_page_master_first_page_different(bool value);

  // optional bool page_master_even_odd_pages_different = 19;
  inline bool has_page_master_even_odd_pages_different() const;
  inline void clear_page_master_even_odd_pages_different();
  static const int kPageMasterEvenOddPagesDifferentFieldNumber = 19;
  inline bool page_master_even_odd_pages_different() const;
  inline void set_page_master_even_odd_pages_different(bool value);

  // optional uint32 section_start_kind = 20;
  inline bool has_section_start_kind() const;
  inline void clear_section_start_kind();
  static const int kSectionStartKindFieldNumber = 20;
  inline ::google::protobuf::uint32 section_start_kind() const;
  inline void set_section_start_kind(::google::protobuf::uint32 value);

  // optional uint32 section_page_number_kind = 21;
  inline bool has_section_page_number_kind() const;
  inline void clear_section_page_number_kind();
  static const int kSectionPageNumberKindFieldNumber = 21;
  inline ::google::protobuf::uint32 section_page_number_kind() const;
  inline void set_section_page_number_kind(::google::protobuf::uint32 value);

  // optional uint32 section_page_number_start = 22;
  inline bool has_section_page_number_start() const;
  inline void clear_section_page_number_start();
  static const int kSectionPageNumberStartFieldNumber = 22;
  inline ::google::protobuf::uint32 section_page_number_start() const;
  inline void set_section_page_number_start(::google::protobuf::uint32 value);

  // optional .TSP.Reference first_page_master = 23;
  inline bool has_first_page_master() const;
  inline void clear_first_page_master();
  static const int kFirstPageMasterFieldNumber = 23;
  inline const ::TSP::Reference& first_page_master() const;
  inline ::TSP::Reference* mutable_first_page_master();
  inline ::TSP::Reference* release_first_page_master();
  inline void set_allocated_first_page_master(::TSP::Reference* first_page_master);

  // optional .TSP.Reference even_page_master = 24;
  inline bool has_even_page_master() const;
  inline void clear_even_page_master();
  static const int kEvenPageMasterFieldNumber = 24;
  inline const ::TSP::Reference& even_page_master() const;
  inline ::TSP::Reference* mutable_even_page_master();
  inline ::TSP::Reference* release_even_page_master();
  inline void set_allocated_even_page_master(::TSP::Reference* even_page_master);

  // optional .TSP.Reference odd_page_master = 25;
  inline bool has_odd_page_master() const;
  inline void clear_odd_page_master();
  static const int kOddPageMasterFieldNumber = 25;
  inline const ::TSP::Reference& odd_page_master() const;
  inline ::TSP::Reference* mutable_odd_page_master();
  inline ::TSP::Reference* release_odd_page_master();
  inline void set_allocated_odd_page_master(::TSP::Reference* odd_page_master);

  // optional string name = 26;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 26;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bool page_master_first_page_hides_header_footer = 28;
  inline bool has_page_master_first_page_hides_header_footer() const;
  inline void clear_page_master_first_page_hides_header_footer();
  static const int kPageMasterFirstPageHidesHeaderFooterFieldNumber = 28;
  inline bool page_master_first_page_hides_header_footer() const;
  inline void set_page_master_first_page_hides_header_footer(bool value);

  // @@protoc_insertion_point(class_scope:TP.SectionArchive)
 private:
  inline void set_has_obsolete_shows_header();
  inline void clear_has_obsolete_shows_header();
  inline void set_has_obsolete_shows_footer();
  inline void clear_has_obsolete_shows_footer();
  inline void set_has_obsolete_left_margin();
  inline void clear_has_obsolete_left_margin();
  inline void set_has_obsolete_right_margin();
  inline void clear_has_obsolete_right_margin();
  inline void set_has_obsolete_top_margin();
  inline void clear_has_obsolete_top_margin();
  inline void set_has_obsolete_bottom_margin();
  inline void clear_has_obsolete_bottom_margin();
  inline void set_has_obsolete_header_padding();
  inline void clear_has_obsolete_header_padding();
  inline void set_has_obsolete_footer_padding();
  inline void clear_has_obsolete_footer_padding();
  inline void set_has_obsolete_paper_width();
  inline void clear_has_obsolete_paper_width();
  inline void set_has_obsolete_paper_height();
  inline void clear_has_obsolete_paper_height();
  inline void set_has_obsolete_landscape_mode();
  inline void clear_has_obsolete_landscape_mode();
  inline void set_has_obsolete_header_margin();
  inline void clear_has_obsolete_header_margin();
  inline void set_has_obsolete_footer_margin();
  inline void clear_has_obsolete_footer_margin();
  inline void set_has_inherit_previous_header_footer();
  inline void clear_has_inherit_previous_header_footer();
  inline void set_has_page_master_first_page_different();
  inline void clear_has_page_master_first_page_different();
  inline void set_has_page_master_even_odd_pages_different();
  inline void clear_has_page_master_even_odd_pages_different();
  inline void set_has_section_start_kind();
  inline void clear_has_section_start_kind();
  inline void set_has_section_page_number_kind();
  inline void clear_has_section_page_number_kind();
  inline void set_has_section_page_number_start();
  inline void clear_has_section_page_number_start();
  inline void set_has_first_page_master();
  inline void clear_has_first_page_master();
  inline void set_has_even_page_master();
  inline void clear_has_even_page_master();
  inline void set_has_odd_page_master();
  inline void clear_has_odd_page_master();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_page_master_first_page_hides_header_footer();
  inline void clear_has_page_master_first_page_hides_header_footer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::TSP::Reference > obsolete_headers_;
  ::google::protobuf::RepeatedPtrField< ::TSP::Reference > obsolete_footers_;
  float obsolete_left_margin_;
  float obsolete_right_margin_;
  float obsolete_top_margin_;
  float obsolete_bottom_margin_;
  bool obsolete_shows_header_;
  bool obsolete_shows_footer_;
  bool obsolete_landscape_mode_;
  bool inherit_previous_header_footer_;
  float obsolete_header_padding_;
  float obsolete_footer_padding_;
  float obsolete_paper_width_;
  float obsolete_paper_height_;
  float obsolete_header_margin_;
  ::google::protobuf::RepeatedPtrField< ::TSP::Reference > obsolete_master_drawables_;
  float obsolete_footer_margin_;
  ::google::protobuf::uint32 section_start_kind_;
  ::google::protobuf::uint32 section_page_number_kind_;
  bool page_master_first_page_different_;
  bool page_master_even_odd_pages_different_;
  bool page_master_first_page_hides_header_footer_;
  ::TSP::Reference* first_page_master_;
  ::TSP::Reference* even_page_master_;
  ::TSP::Reference* odd_page_master_;
  ::std::string* name_;
  ::google::protobuf::uint32 section_page_number_start_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(27 + 31) / 32];

  friend void  protobuf_AddDesc_TPArchives_2eproto();
  friend void protobuf_AssignDesc_TPArchives_2eproto();
  friend void protobuf_ShutdownFile_TPArchives_2eproto();

  void InitAsDefaultInstance();
  static SectionArchive* default_instance_;
};
// -------------------------------------------------------------------

class AnchorPosArchive : public ::google::protobuf::Message {
 public:
  AnchorPosArchive();
  virtual ~AnchorPosArchive();

  AnchorPosArchive(const AnchorPosArchive& from);

  inline AnchorPosArchive& operator=(const AnchorPosArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnchorPosArchive& default_instance();

  void Swap(AnchorPosArchive* other);

  // implements Message ----------------------------------------------

  AnchorPosArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AnchorPosArchive& from);
  void MergeFrom(const AnchorPosArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .TSP.Reference attachment = 1;
  inline bool has_attachment() const;
  inline void clear_attachment();
  static const int kAttachmentFieldNumber = 1;
  inline const ::TSP::Reference& attachment() const;
  inline ::TSP::Reference* mutable_attachment();
  inline ::TSP::Reference* release_attachment();
  inline void set_allocated_attachment(::TSP::Reference* attachment);

  // optional .TSP.Point position = 2;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  inline const ::TSP::Point& position() const;
  inline ::TSP::Point* mutable_position();
  inline ::TSP::Point* release_position();
  inline void set_allocated_position(::TSP::Point* position);

  // @@protoc_insertion_point(class_scope:TP.AnchorPosArchive)
 private:
  inline void set_has_attachment();
  inline void clear_has_attachment();
  inline void set_has_position();
  inline void clear_has_position();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSP::Reference* attachment_;
  ::TSP::Point* position_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_TPArchives_2eproto();
  friend void protobuf_AssignDesc_TPArchives_2eproto();
  friend void protobuf_ShutdownFile_TPArchives_2eproto();

  void InitAsDefaultInstance();
  static AnchorPosArchive* default_instance_;
};
// -------------------------------------------------------------------

class TargetHintArchive : public ::google::protobuf::Message {
 public:
  TargetHintArchive();
  virtual ~TargetHintArchive();

  TargetHintArchive(const TargetHintArchive& from);

  inline TargetHintArchive& operator=(const TargetHintArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TargetHintArchive& default_instance();

  void Swap(TargetHintArchive* other);

  // implements Message ----------------------------------------------

  TargetHintArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TargetHintArchive& from);
  void MergeFrom(const TargetHintArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .TSP.Point frame_origin = 1;
  inline bool has_frame_origin() const;
  inline void clear_frame_origin();
  static const int kFrameOriginFieldNumber = 1;
  inline const ::TSP::Point& frame_origin() const;
  inline ::TSP::Point* mutable_frame_origin();
  inline ::TSP::Point* release_frame_origin();
  inline void set_allocated_frame_origin(::TSP::Point* frame_origin);

  // optional .TSP.Size frame_size = 2;
  inline bool has_frame_size() const;
  inline void clear_frame_size();
  static const int kFrameSizeFieldNumber = 2;
  inline const ::TSP::Size& frame_size() const;
  inline ::TSP::Size* mutable_frame_size();
  inline ::TSP::Size* release_frame_size();
  inline void set_allocated_frame_size(::TSP::Size* frame_size);

  // optional .TSP.Range range = 3;
  inline bool has_range() const;
  inline void clear_range();
  static const int kRangeFieldNumber = 3;
  inline const ::TSP::Range& range() const;
  inline ::TSP::Range* mutable_range();
  inline ::TSP::Range* release_range();
  inline void set_allocated_range(::TSP::Range* range);

  // optional int32 next_widow_pulls_down_from_char_index = 4;
  inline bool has_next_widow_pulls_down_from_char_index() const;
  inline void clear_next_widow_pulls_down_from_char_index();
  static const int kNextWidowPullsDownFromCharIndexFieldNumber = 4;
  inline ::google::protobuf::int32 next_widow_pulls_down_from_char_index() const;
  inline void set_next_widow_pulls_down_from_char_index(::google::protobuf::int32 value);

  // optional .TSP.Range anchored_range = 5;
  inline bool has_anchored_range() const;
  inline void clear_anchored_range();
  static const int kAnchoredRangeFieldNumber = 5;
  inline const ::TSP::Range& anchored_range() const;
  inline ::TSP::Range* mutable_anchored_range();
  inline ::TSP::Range* release_anchored_range();
  inline void set_allocated_anchored_range(::TSP::Range* anchored_range);

  // optional int32 column_count = 6;
  inline bool has_column_count() const;
  inline void clear_column_count();
  static const int kColumnCountFieldNumber = 6;
  inline ::google::protobuf::int32 column_count() const;
  inline void set_column_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TP.TargetHintArchive)
 private:
  inline void set_has_frame_origin();
  inline void clear_has_frame_origin();
  inline void set_has_frame_size();
  inline void clear_has_frame_size();
  inline void set_has_range();
  inline void clear_has_range();
  inline void set_has_next_widow_pulls_down_from_char_index();
  inline void clear_has_next_widow_pulls_down_from_char_index();
  inline void set_has_anchored_range();
  inline void clear_has_anchored_range();
  inline void set_has_column_count();
  inline void clear_has_column_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSP::Point* frame_origin_;
  ::TSP::Size* frame_size_;
  ::TSP::Range* range_;
  ::TSP::Range* anchored_range_;
  ::google::protobuf::int32 next_widow_pulls_down_from_char_index_;
  ::google::protobuf::int32 column_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_TPArchives_2eproto();
  friend void protobuf_AssignDesc_TPArchives_2eproto();
  friend void protobuf_ShutdownFile_TPArchives_2eproto();

  void InitAsDefaultInstance();
  static TargetHintArchive* default_instance_;
};
// -------------------------------------------------------------------

class PageHintArchive : public ::google::protobuf::Message {
 public:
  PageHintArchive();
  virtual ~PageHintArchive();

  PageHintArchive(const PageHintArchive& from);

  inline PageHintArchive& operator=(const PageHintArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PageHintArchive& default_instance();

  void Swap(PageHintArchive* other);

  // implements Message ----------------------------------------------

  PageHintArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PageHintArchive& from);
  void MergeFrom(const PageHintArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PageHintArchive_PageKind PageKind;
  static const PageKind kPageKindNone = PageHintArchive_PageKind_kPageKindNone;
  static const PageKind kPageKindText = PageHintArchive_PageKind_kPageKindText;
  static const PageKind kPageKindFiller = PageHintArchive_PageKind_kPageKindFiller;
  static const PageKind kPageKindOrphan = PageHintArchive_PageKind_kPageKindOrphan;
  static const PageKind kPageKindEndnote = PageHintArchive_PageKind_kPageKindEndnote;
  static const PageKind kPageKindDirty = PageHintArchive_PageKind_kPageKindDirty;
  static const PageKind kTPPageKindPageLayout = PageHintArchive_PageKind_kTPPageKindPageLayout;
  static inline bool PageKind_IsValid(int value) {
    return PageHintArchive_PageKind_IsValid(value);
  }
  static const PageKind PageKind_MIN =
    PageHintArchive_PageKind_PageKind_MIN;
  static const PageKind PageKind_MAX =
    PageHintArchive_PageKind_PageKind_MAX;
  static const int PageKind_ARRAYSIZE =
    PageHintArchive_PageKind_PageKind_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PageKind_descriptor() {
    return PageHintArchive_PageKind_descriptor();
  }
  static inline const ::std::string& PageKind_Name(PageKind value) {
    return PageHintArchive_PageKind_Name(value);
  }
  static inline bool PageKind_Parse(const ::std::string& name,
      PageKind* value) {
    return PageHintArchive_PageKind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .TP.PageHintArchive.PageKind page_kind = 1;
  inline bool has_page_kind() const;
  inline void clear_page_kind();
  static const int kPageKindFieldNumber = 1;
  inline ::TP::PageHintArchive_PageKind page_kind() const;
  inline void set_page_kind(::TP::PageHintArchive_PageKind value);

  // repeated .TP.TargetHintArchive target_hints = 2;
  inline int target_hints_size() const;
  inline void clear_target_hints();
  static const int kTargetHintsFieldNumber = 2;
  inline const ::TP::TargetHintArchive& target_hints(int index) const;
  inline ::TP::TargetHintArchive* mutable_target_hints(int index);
  inline ::TP::TargetHintArchive* add_target_hints();
  inline const ::google::protobuf::RepeatedPtrField< ::TP::TargetHintArchive >&
      target_hints() const;
  inline ::google::protobuf::RepeatedPtrField< ::TP::TargetHintArchive >*
      mutable_target_hints();

  // optional .TSP.Range footnote_auto_number_range = 3;
  inline bool has_footnote_auto_number_range() const;
  inline void clear_footnote_auto_number_range();
  static const int kFootnoteAutoNumberRangeFieldNumber = 3;
  inline const ::TSP::Range& footnote_auto_number_range() const;
  inline ::TSP::Range* mutable_footnote_auto_number_range();
  inline ::TSP::Range* release_footnote_auto_number_range();
  inline void set_allocated_footnote_auto_number_range(::TSP::Range* footnote_auto_number_range);

  // optional .TSP.Range footnote_layout_range = 4;
  inline bool has_footnote_layout_range() const;
  inline void clear_footnote_layout_range();
  static const int kFootnoteLayoutRangeFieldNumber = 4;
  inline const ::TSP::Range& footnote_layout_range() const;
  inline ::TSP::Range* mutable_footnote_layout_range();
  inline ::TSP::Range* release_footnote_layout_range();
  inline void set_allocated_footnote_layout_range(::TSP::Range* footnote_layout_range);

  // optional .TSP.Reference first_child_hint = 6;
  inline bool has_first_child_hint() const;
  inline void clear_first_child_hint();
  static const int kFirstChildHintFieldNumber = 6;
  inline const ::TSP::Reference& first_child_hint() const;
  inline ::TSP::Reference* mutable_first_child_hint();
  inline ::TSP::Reference* release_first_child_hint();
  inline void set_allocated_first_child_hint(::TSP::Reference* first_child_hint);

  // optional .TSP.Reference last_child_hint = 7;
  inline bool has_last_child_hint() const;
  inline void clear_last_child_hint();
  static const int kLastChildHintFieldNumber = 7;
  inline const ::TSP::Reference& last_child_hint() const;
  inline ::TSP::Reference* mutable_last_child_hint();
  inline ::TSP::Reference* release_last_child_hint();
  inline void set_allocated_last_child_hint(::TSP::Reference* last_child_hint);

  // repeated .TP.AnchorPosArchive anchored_attachments_map = 8;
  inline int anchored_attachments_map_size() const;
  inline void clear_anchored_attachments_map();
  static const int kAnchoredAttachmentsMapFieldNumber = 8;
  inline const ::TP::AnchorPosArchive& anchored_attachments_map(int index) const;
  inline ::TP::AnchorPosArchive* mutable_anchored_attachments_map(int index);
  inline ::TP::AnchorPosArchive* add_anchored_attachments_map();
  inline const ::google::protobuf::RepeatedPtrField< ::TP::AnchorPosArchive >&
      anchored_attachments_map() const;
  inline ::google::protobuf::RepeatedPtrField< ::TP::AnchorPosArchive >*
      mutable_anchored_attachments_map();

  // optional .TP.TopicNumberHintsArchive topic_numbers = 9;
  inline bool has_topic_numbers() const;
  inline void clear_topic_numbers();
  static const int kTopicNumbersFieldNumber = 9;
  inline const ::TP::TopicNumberHintsArchive& topic_numbers() const;
  inline ::TP::TopicNumberHintsArchive* mutable_topic_numbers();
  inline ::TP::TopicNumberHintsArchive* release_topic_numbers();
  inline void set_allocated_topic_numbers(::TP::TopicNumberHintsArchive* topic_numbers);

  // optional uint32 version_number = 10;
  inline bool has_version_number() const;
  inline void clear_version_number();
  static const int kVersionNumberFieldNumber = 10;
  inline ::google::protobuf::uint32 version_number() const;
  inline void set_version_number(::google::protobuf::uint32 value);

  // optional uint32 platform_id = 11;
  inline bool has_platform_id() const;
  inline void clear_platform_id();
  static const int kPlatformIdFieldNumber = 11;
  inline ::google::protobuf::uint32 platform_id() const;
  inline void set_platform_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TP.PageHintArchive)
 private:
  inline void set_has_page_kind();
  inline void clear_has_page_kind();
  inline void set_has_footnote_auto_number_range();
  inline void clear_has_footnote_auto_number_range();
  inline void set_has_footnote_layout_range();
  inline void clear_has_footnote_layout_range();
  inline void set_has_first_child_hint();
  inline void clear_has_first_child_hint();
  inline void set_has_last_child_hint();
  inline void clear_has_last_child_hint();
  inline void set_has_topic_numbers();
  inline void clear_has_topic_numbers();
  inline void set_has_version_number();
  inline void clear_has_version_number();
  inline void set_has_platform_id();
  inline void clear_has_platform_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::TP::TargetHintArchive > target_hints_;
  ::TSP::Range* footnote_auto_number_range_;
  ::TSP::Range* footnote_layout_range_;
  ::TSP::Reference* first_child_hint_;
  int page_kind_;
  ::google::protobuf::uint32 version_number_;
  ::TSP::Reference* last_child_hint_;
  ::google::protobuf::RepeatedPtrField< ::TP::AnchorPosArchive > anchored_attachments_map_;
  ::TP::TopicNumberHintsArchive* topic_numbers_;
  ::google::protobuf::uint32 platform_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_TPArchives_2eproto();
  friend void protobuf_AssignDesc_TPArchives_2eproto();
  friend void protobuf_ShutdownFile_TPArchives_2eproto();

  void InitAsDefaultInstance();
  static PageHintArchive* default_instance_;
};
// -------------------------------------------------------------------

class SectionHintArchive : public ::google::protobuf::Message {
 public:
  SectionHintArchive();
  virtual ~SectionHintArchive();

  SectionHintArchive(const SectionHintArchive& from);

  inline SectionHintArchive& operator=(const SectionHintArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SectionHintArchive& default_instance();

  void Swap(SectionHintArchive* other);

  // implements Message ----------------------------------------------

  SectionHintArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SectionHintArchive& from);
  void MergeFrom(const SectionHintArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TP.PageHintArchive page_hints = 1;
  inline int page_hints_size() const;
  inline void clear_page_hints();
  static const int kPageHintsFieldNumber = 1;
  inline const ::TP::PageHintArchive& page_hints(int index) const;
  inline ::TP::PageHintArchive* mutable_page_hints(int index);
  inline ::TP::PageHintArchive* add_page_hints();
  inline const ::google::protobuf::RepeatedPtrField< ::TP::PageHintArchive >&
      page_hints() const;
  inline ::google::protobuf::RepeatedPtrField< ::TP::PageHintArchive >*
      mutable_page_hints();

  // optional uint32 start_page_index = 2;
  inline bool has_start_page_index() const;
  inline void clear_start_page_index();
  static const int kStartPageIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 start_page_index() const;
  inline void set_start_page_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TP.SectionHintArchive)
 private:
  inline void set_has_start_page_index();
  inline void clear_has_start_page_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::TP::PageHintArchive > page_hints_;
  ::google::protobuf::uint32 start_page_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_TPArchives_2eproto();
  friend void protobuf_AssignDesc_TPArchives_2eproto();
  friend void protobuf_ShutdownFile_TPArchives_2eproto();

  void InitAsDefaultInstance();
  static SectionHintArchive* default_instance_;
};
// -------------------------------------------------------------------

class TextboxHintArchive : public ::google::protobuf::Message {
 public:
  TextboxHintArchive();
  virtual ~TextboxHintArchive();

  TextboxHintArchive(const TextboxHintArchive& from);

  inline TextboxHintArchive& operator=(const TextboxHintArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TextboxHintArchive& default_instance();

  void Swap(TextboxHintArchive* other);

  // implements Message ----------------------------------------------

  TextboxHintArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TextboxHintArchive& from);
  void MergeFrom(const TextboxHintArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSP.Range range = 1;
  inline bool has_range() const;
  inline void clear_range();
  static const int kRangeFieldNumber = 1;
  inline const ::TSP::Range& range() const;
  inline ::TSP::Range* mutable_range();
  inline ::TSP::Range* release_range();
  inline void set_allocated_range(::TSP::Range* range);

  // required .TSP.Size size = 2;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 2;
  inline const ::TSP::Size& size() const;
  inline ::TSP::Size* mutable_size();
  inline ::TSP::Size* release_size();
  inline void set_allocated_size(::TSP::Size* size);

  // @@protoc_insertion_point(class_scope:TP.TextboxHintArchive)
 private:
  inline void set_has_range();
  inline void clear_has_range();
  inline void set_has_size();
  inline void clear_has_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSP::Range* range_;
  ::TSP::Size* size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_TPArchives_2eproto();
  friend void protobuf_AssignDesc_TPArchives_2eproto();
  friend void protobuf_ShutdownFile_TPArchives_2eproto();

  void InitAsDefaultInstance();
  static TextboxHintArchive* default_instance_;
};
// -------------------------------------------------------------------

class TopicNumberEntryArchive : public ::google::protobuf::Message {
 public:
  TopicNumberEntryArchive();
  virtual ~TopicNumberEntryArchive();

  TopicNumberEntryArchive(const TopicNumberEntryArchive& from);

  inline TopicNumberEntryArchive& operator=(const TopicNumberEntryArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TopicNumberEntryArchive& default_instance();

  void Swap(TopicNumberEntryArchive* other);

  // implements Message ----------------------------------------------

  TopicNumberEntryArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TopicNumberEntryArchive& from);
  void MergeFrom(const TopicNumberEntryArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSP.Reference list_style = 1;
  inline bool has_list_style() const;
  inline void clear_list_style();
  static const int kListStyleFieldNumber = 1;
  inline const ::TSP::Reference& list_style() const;
  inline ::TSP::Reference* mutable_list_style();
  inline ::TSP::Reference* release_list_style();
  inline void set_allocated_list_style(::TSP::Reference* list_style);

  // repeated uint32 topic_number = 2;
  inline int topic_number_size() const;
  inline void clear_topic_number();
  static const int kTopicNumberFieldNumber = 2;
  inline ::google::protobuf::uint32 topic_number(int index) const;
  inline void set_topic_number(int index, ::google::protobuf::uint32 value);
  inline void add_topic_number(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      topic_number() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_topic_number();

  // repeated uint32 character_index = 3;
  inline int character_index_size() const;
  inline void clear_character_index();
  static const int kCharacterIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 character_index(int index) const;
  inline void set_character_index(int index, ::google::protobuf::uint32 value);
  inline void add_character_index(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      character_index() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_character_index();

  // @@protoc_insertion_point(class_scope:TP.TopicNumberEntryArchive)
 private:
  inline void set_has_list_style();
  inline void clear_has_list_style();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSP::Reference* list_style_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > topic_number_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > character_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_TPArchives_2eproto();
  friend void protobuf_AssignDesc_TPArchives_2eproto();
  friend void protobuf_ShutdownFile_TPArchives_2eproto();

  void InitAsDefaultInstance();
  static TopicNumberEntryArchive* default_instance_;
};
// -------------------------------------------------------------------

class TopicNumberHintsArchive : public ::google::protobuf::Message {
 public:
  TopicNumberHintsArchive();
  virtual ~TopicNumberHintsArchive();

  TopicNumberHintsArchive(const TopicNumberHintsArchive& from);

  inline TopicNumberHintsArchive& operator=(const TopicNumberHintsArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TopicNumberHintsArchive& default_instance();

  void Swap(TopicNumberHintsArchive* other);

  // implements Message ----------------------------------------------

  TopicNumberHintsArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TopicNumberHintsArchive& from);
  void MergeFrom(const TopicNumberHintsArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charIndex = 1;
  inline bool has_charindex() const;
  inline void clear_charindex();
  static const int kCharIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 charindex() const;
  inline void set_charindex(::google::protobuf::uint32 value);

  // repeated .TP.TopicNumberEntryArchive topic_numbers_map = 2;
  inline int topic_numbers_map_size() const;
  inline void clear_topic_numbers_map();
  static const int kTopicNumbersMapFieldNumber = 2;
  inline const ::TP::TopicNumberEntryArchive& topic_numbers_map(int index) const;
  inline ::TP::TopicNumberEntryArchive* mutable_topic_numbers_map(int index);
  inline ::TP::TopicNumberEntryArchive* add_topic_numbers_map();
  inline const ::google::protobuf::RepeatedPtrField< ::TP::TopicNumberEntryArchive >&
      topic_numbers_map() const;
  inline ::google::protobuf::RepeatedPtrField< ::TP::TopicNumberEntryArchive >*
      mutable_topic_numbers_map();

  // optional uint32 valid_through_char_index = 3;
  inline bool has_valid_through_char_index() const;
  inline void clear_valid_through_char_index();
  static const int kValidThroughCharIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 valid_through_char_index() const;
  inline void set_valid_through_char_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TP.TopicNumberHintsArchive)
 private:
  inline void set_has_charindex();
  inline void clear_has_charindex();
  inline void set_has_valid_through_char_index();
  inline void clear_has_valid_through_char_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::TP::TopicNumberEntryArchive > topic_numbers_map_;
  ::google::protobuf::uint32 charindex_;
  ::google::protobuf::uint32 valid_through_char_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_TPArchives_2eproto();
  friend void protobuf_AssignDesc_TPArchives_2eproto();
  friend void protobuf_ShutdownFile_TPArchives_2eproto();

  void InitAsDefaultInstance();
  static TopicNumberHintsArchive* default_instance_;
};
// -------------------------------------------------------------------

class LayoutStateArchive : public ::google::protobuf::Message {
 public:
  LayoutStateArchive();
  virtual ~LayoutStateArchive();

  LayoutStateArchive(const LayoutStateArchive& from);

  inline LayoutStateArchive& operator=(const LayoutStateArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LayoutStateArchive& default_instance();

  void Swap(LayoutStateArchive* other);

  // implements Message ----------------------------------------------

  LayoutStateArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LayoutStateArchive& from);
  void MergeFrom(const LayoutStateArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 section_index = 1;
  inline bool has_section_index() const;
  inline void clear_section_index();
  static const int kSectionIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 section_index() const;
  inline void set_section_index(::google::protobuf::uint32 value);

  // optional uint32 section_page_index = 2;
  inline bool has_section_page_index() const;
  inline void clear_section_page_index();
  static const int kSectionPageIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 section_page_index() const;
  inline void set_section_page_index(::google::protobuf::uint32 value);

  // optional uint32 document_page_index = 3;
  inline bool has_document_page_index() const;
  inline void clear_document_page_index();
  static const int kDocumentPageIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 document_page_index() const;
  inline void set_document_page_index(::google::protobuf::uint32 value);

  // optional uint32 last_page_count = 4;
  inline bool has_last_page_count() const;
  inline void clear_last_page_count();
  static const int kLastPageCountFieldNumber = 4;
  inline ::google::protobuf::uint32 last_page_count() const;
  inline void set_last_page_count(::google::protobuf::uint32 value);

  // repeated .TP.SectionHintArchive section_hints = 5;
  inline int section_hints_size() const;
  inline void clear_section_hints();
  static const int kSectionHintsFieldNumber = 5;
  inline const ::TP::SectionHintArchive& section_hints(int index) const;
  inline ::TP::SectionHintArchive* mutable_section_hints(int index);
  inline ::TP::SectionHintArchive* add_section_hints();
  inline const ::google::protobuf::RepeatedPtrField< ::TP::SectionHintArchive >&
      section_hints() const;
  inline ::google::protobuf::RepeatedPtrField< ::TP::SectionHintArchive >*
      mutable_section_hints();

  // @@protoc_insertion_point(class_scope:TP.LayoutStateArchive)
 private:
  inline void set_has_section_index();
  inline void clear_has_section_index();
  inline void set_has_section_page_index();
  inline void clear_has_section_page_index();
  inline void set_has_document_page_index();
  inline void clear_has_document_page_index();
  inline void set_has_last_page_count();
  inline void clear_has_last_page_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 section_index_;
  ::google::protobuf::uint32 section_page_index_;
  ::google::protobuf::uint32 document_page_index_;
  ::google::protobuf::uint32 last_page_count_;
  ::google::protobuf::RepeatedPtrField< ::TP::SectionHintArchive > section_hints_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_TPArchives_2eproto();
  friend void protobuf_AssignDesc_TPArchives_2eproto();
  friend void protobuf_ShutdownFile_TPArchives_2eproto();

  void InitAsDefaultInstance();
  static LayoutStateArchive* default_instance_;
};
// -------------------------------------------------------------------

class CanvasSelectionArchive : public ::google::protobuf::Message {
 public:
  CanvasSelectionArchive();
  virtual ~CanvasSelectionArchive();

  CanvasSelectionArchive(const CanvasSelectionArchive& from);

  inline CanvasSelectionArchive& operator=(const CanvasSelectionArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CanvasSelectionArchive& default_instance();

  void Swap(CanvasSelectionArchive* other);

  // implements Message ----------------------------------------------

  CanvasSelectionArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CanvasSelectionArchive& from);
  void MergeFrom(const CanvasSelectionArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSWP.SelectionType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::TSWP::SelectionType type() const;
  inline void set_type(::TSWP::SelectionType value);

  // required .TSP.Range range = 2;
  inline bool has_range() const;
  inline void clear_range();
  static const int kRangeFieldNumber = 2;
  inline const ::TSP::Range& range() const;
  inline ::TSP::Range* mutable_range();
  inline ::TSP::Range* release_range();
  inline void set_allocated_range(::TSP::Range* range);

  // required .TSWP.StyleInsertionBehavior style_insertion_behavior = 3;
  inline bool has_style_insertion_behavior() const;
  inline void clear_style_insertion_behavior();
  static const int kStyleInsertionBehaviorFieldNumber = 3;
  inline ::TSWP::StyleInsertionBehavior style_insertion_behavior() const;
  inline void set_style_insertion_behavior(::TSWP::StyleInsertionBehavior value);

  // required .TSWP.CaretAffinity caret_affinity = 4;
  inline bool has_caret_affinity() const;
  inline void clear_caret_affinity();
  static const int kCaretAffinityFieldNumber = 4;
  inline ::TSWP::CaretAffinity caret_affinity() const;
  inline void set_caret_affinity(::TSWP::CaretAffinity value);

  // repeated .TSP.Reference infos = 5;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 5;
  inline const ::TSP::Reference& infos(int index) const;
  inline ::TSP::Reference* mutable_infos(int index);
  inline ::TSP::Reference* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
      mutable_infos();

  // repeated .TSP.Reference excluded_infos = 6;
  inline int excluded_infos_size() const;
  inline void clear_excluded_infos();
  static const int kExcludedInfosFieldNumber = 6;
  inline const ::TSP::Reference& excluded_infos(int index) const;
  inline ::TSP::Reference* mutable_excluded_infos(int index);
  inline ::TSP::Reference* add_excluded_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
      excluded_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
      mutable_excluded_infos();

  // repeated .TSP.Reference additional_infos = 7;
  inline int additional_infos_size() const;
  inline void clear_additional_infos();
  static const int kAdditionalInfosFieldNumber = 7;
  inline const ::TSP::Reference& additional_infos(int index) const;
  inline ::TSP::Reference* mutable_additional_infos(int index);
  inline ::TSP::Reference* add_additional_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
      additional_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
      mutable_additional_infos();

  // optional .TSP.Reference container = 8;
  inline bool has_container() const;
  inline void clear_container();
  static const int kContainerFieldNumber = 8;
  inline const ::TSP::Reference& container() const;
  inline ::TSP::Reference* mutable_container();
  inline ::TSP::Reference* release_container();
  inline void set_allocated_container(::TSP::Reference* container);

  // @@protoc_insertion_point(class_scope:TP.CanvasSelectionArchive)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_range();
  inline void clear_has_range();
  inline void set_has_style_insertion_behavior();
  inline void clear_has_style_insertion_behavior();
  inline void set_has_caret_affinity();
  inline void clear_has_caret_affinity();
  inline void set_has_container();
  inline void clear_has_container();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSP::Range* range_;
  int type_;
  int style_insertion_behavior_;
  ::google::protobuf::RepeatedPtrField< ::TSP::Reference > infos_;
  ::google::protobuf::RepeatedPtrField< ::TSP::Reference > excluded_infos_;
  ::google::protobuf::RepeatedPtrField< ::TSP::Reference > additional_infos_;
  ::TSP::Reference* container_;
  int caret_affinity_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_TPArchives_2eproto();
  friend void protobuf_AssignDesc_TPArchives_2eproto();
  friend void protobuf_ShutdownFile_TPArchives_2eproto();

  void InitAsDefaultInstance();
  static CanvasSelectionArchive* default_instance_;
};
// -------------------------------------------------------------------

class ViewStateArchive : public ::google::protobuf::Message {
 public:
  ViewStateArchive();
  virtual ~ViewStateArchive();

  ViewStateArchive(const ViewStateArchive& from);

  inline ViewStateArchive& operator=(const ViewStateArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ViewStateArchive& default_instance();

  void Swap(ViewStateArchive* other);

  // implements Message ----------------------------------------------

  ViewStateArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ViewStateArchive& from);
  void MergeFrom(const ViewStateArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float OBSOLETE_view_scale = 1;
  inline bool has_obsolete_view_scale() const;
  inline void clear_obsolete_view_scale();
  static const int kOBSOLETEViewScaleFieldNumber = 1;
  inline float obsolete_view_scale() const;
  inline void set_obsolete_view_scale(float value);

  // optional .TSP.Point visible_rect_origin = 2;
  inline bool has_visible_rect_origin() const;
  inline void clear_visible_rect_origin();
  static const int kVisibleRectOriginFieldNumber = 2;
  inline const ::TSP::Point& visible_rect_origin() const;
  inline ::TSP::Point* mutable_visible_rect_origin();
  inline ::TSP::Point* release_visible_rect_origin();
  inline void set_allocated_visible_rect_origin(::TSP::Point* visible_rect_origin);

  // optional bool OBSOLETE_landscape = 3;
  inline bool has_obsolete_landscape() const;
  inline void clear_obsolete_landscape();
  static const int kOBSOLETELandscapeFieldNumber = 3;
  inline bool obsolete_landscape() const;
  inline void set_obsolete_landscape(bool value);

  // optional .TSP.Reference selection = 4;
  inline bool has_selection() const;
  inline void clear_selection();
  static const int kSelectionFieldNumber = 4;
  inline const ::TSP::Reference& selection() const;
  inline ::TSP::Reference* mutable_selection();
  inline ::TSP::Reference* release_selection();
  inline void set_allocated_selection(::TSP::Reference* selection);

  // optional .TSP.Reference selection_model = 5;
  inline bool has_selection_model() const;
  inline void clear_selection_model();
  static const int kSelectionModelFieldNumber = 5;
  inline const ::TSP::Reference& selection_model() const;
  inline ::TSP::Reference* mutable_selection_model();
  inline ::TSP::Reference* release_selection_model();
  inline void set_allocated_selection_model(::TSP::Reference* selection_model);

  // optional bool master_drawables_selectable = 6;
  inline bool has_master_drawables_selectable() const;
  inline void clear_master_drawables_selectable();
  static const int kMasterDrawablesSelectableFieldNumber = 6;
  inline bool master_drawables_selectable() const;
  inline void set_master_drawables_selectable(bool value);

  // optional .TSP.Size visible_rect_size = 7;
  inline bool has_visible_rect_size() const;
  inline void clear_visible_rect_size();
  static const int kVisibleRectSizeFieldNumber = 7;
  inline const ::TSP::Size& visible_rect_size() const;
  inline ::TSP::Size* mutable_visible_rect_size();
  inline ::TSP::Size* release_visible_rect_size();
  inline void set_allocated_visible_rect_size(::TSP::Size* visible_rect_size);

  // repeated .TSCH.ChartUIState chart_ui_state = 8;
  inline int chart_ui_state_size() const;
  inline void clear_chart_ui_state();
  static const int kChartUiStateFieldNumber = 8;
  inline const ::TSCH::ChartUIState& chart_ui_state(int index) const;
  inline ::TSCH::ChartUIState* mutable_chart_ui_state(int index);
  inline ::TSCH::ChartUIState* add_chart_ui_state();
  inline const ::google::protobuf::RepeatedPtrField< ::TSCH::ChartUIState >&
      chart_ui_state() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSCH::ChartUIState >*
      mutable_chart_ui_state();

  // optional bool ruler_visible = 9 [default = true];
  inline bool has_ruler_visible() const;
  inline void clear_ruler_visible();
  static const int kRulerVisibleFieldNumber = 9;
  inline bool ruler_visible() const;
  inline void set_ruler_visible(bool value);

  // optional bool layout_borders_visible = 10 [default = false];
  inline bool has_layout_borders_visible() const;
  inline void clear_layout_borders_visible();
  static const int kLayoutBordersVisibleFieldNumber = 10;
  inline bool layout_borders_visible() const;
  inline void set_layout_borders_visible(bool value);

  // optional bool word_count_hud_visible = 11 [default = false];
  inline bool has_word_count_hud_visible() const;
  inline void clear_word_count_hud_visible();
  static const int kWordCountHudVisibleFieldNumber = 11;
  inline bool word_count_hud_visible() const;
  inline void set_word_count_hud_visible(bool value);

  // optional bool shows_comments = 12 [default = true];
  inline bool has_shows_comments() const;
  inline void clear_shows_comments();
  static const int kShowsCommentsFieldNumber = 12;
  inline bool shows_comments() const;
  inline void set_shows_comments(bool value);

  // optional bool shows_page_navigator = 13 [default = false];
  inline bool has_shows_page_navigator() const;
  inline void clear_shows_page_navigator();
  static const int kShowsPageNavigatorFieldNumber = 13;
  inline bool shows_page_navigator() const;
  inline void set_shows_page_navigator(bool value);

  // optional .TP.ViewScaleMode view_scale_mode = 14 [default = ViewScaleMode_UserDefined];
  inline bool has_view_scale_mode() const;
  inline void clear_view_scale_mode();
  static const int kViewScaleModeFieldNumber = 14;
  inline ::TP::ViewScaleMode view_scale_mode() const;
  inline void set_view_scale_mode(::TP::ViewScaleMode value);

  // optional float view_scale = 15 [default = 1.25];
  inline bool has_view_scale() const;
  inline void clear_view_scale();
  static const int kViewScaleFieldNumber = 15;
  inline float view_scale() const;
  inline void set_view_scale(float value);

  // optional .TSP.Point window_frame_origin = 16;
  inline bool has_window_frame_origin() const;
  inline void clear_window_frame_origin();
  static const int kWindowFrameOriginFieldNumber = 16;
  inline const ::TSP::Point& window_frame_origin() const;
  inline ::TSP::Point* mutable_window_frame_origin();
  inline ::TSP::Point* release_window_frame_origin();
  inline void set_allocated_window_frame_origin(::TSP::Point* window_frame_origin);

  // optional .TSP.Size window_frame_size = 17;
  inline bool has_window_frame_size() const;
  inline void clear_window_frame_size();
  static const int kWindowFrameSizeFieldNumber = 17;
  inline const ::TSP::Size& window_frame_size() const;
  inline ::TSP::Size* mutable_window_frame_size();
  inline ::TSP::Size* release_window_frame_size();
  inline void set_allocated_window_frame_size(::TSP::Size* window_frame_size);

  // optional string selected_inspector_switch_segment_identifier = 18;
  inline bool has_selected_inspector_switch_segment_identifier() const;
  inline void clear_selected_inspector_switch_segment_identifier();
  static const int kSelectedInspectorSwitchSegmentIdentifierFieldNumber = 18;
  inline const ::std::string& selected_inspector_switch_segment_identifier() const;
  inline void set_selected_inspector_switch_segment_identifier(const ::std::string& value);
  inline void set_selected_inspector_switch_segment_identifier(const char* value);
  inline void set_selected_inspector_switch_segment_identifier(const char* value, size_t size);
  inline ::std::string* mutable_selected_inspector_switch_segment_identifier();
  inline ::std::string* release_selected_inspector_switch_segment_identifier();
  inline void set_allocated_selected_inspector_switch_segment_identifier(::std::string* selected_inspector_switch_segment_identifier);

  // optional bool inspector_hidden = 19;
  inline bool has_inspector_hidden() const;
  inline void clear_inspector_hidden();
  static const int kInspectorHiddenFieldNumber = 19;
  inline bool inspector_hidden() const;
  inline void set_inspector_hidden(bool value);

  // @@protoc_insertion_point(class_scope:TP.ViewStateArchive)
 private:
  inline void set_has_obsolete_view_scale();
  inline void clear_has_obsolete_view_scale();
  inline void set_has_visible_rect_origin();
  inline void clear_has_visible_rect_origin();
  inline void set_has_obsolete_landscape();
  inline void clear_has_obsolete_landscape();
  inline void set_has_selection();
  inline void clear_has_selection();
  inline void set_has_selection_model();
  inline void clear_has_selection_model();
  inline void set_has_master_drawables_selectable();
  inline void clear_has_master_drawables_selectable();
  inline void set_has_visible_rect_size();
  inline void clear_has_visible_rect_size();
  inline void set_has_ruler_visible();
  inline void clear_has_ruler_visible();
  inline void set_has_layout_borders_visible();
  inline void clear_has_layout_borders_visible();
  inline void set_has_word_count_hud_visible();
  inline void clear_has_word_count_hud_visible();
  inline void set_has_shows_comments();
  inline void clear_has_shows_comments();
  inline void set_has_shows_page_navigator();
  inline void clear_has_shows_page_navigator();
  inline void set_has_view_scale_mode();
  inline void clear_has_view_scale_mode();
  inline void set_has_view_scale();
  inline void clear_has_view_scale();
  inline void set_has_window_frame_origin();
  inline void clear_has_window_frame_origin();
  inline void set_has_window_frame_size();
  inline void clear_has_window_frame_size();
  inline void set_has_selected_inspector_switch_segment_identifier();
  inline void clear_has_selected_inspector_switch_segment_identifier();
  inline void set_has_inspector_hidden();
  inline void clear_has_inspector_hidden();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSP::Point* visible_rect_origin_;
  ::TSP::Reference* selection_;
  ::TSP::Reference* selection_model_;
  float obsolete_view_scale_;
  bool obsolete_landscape_;
  bool master_drawables_selectable_;
  bool ruler_visible_;
  bool layout_borders_visible_;
  ::TSP::Size* visible_rect_size_;
  ::google::protobuf::RepeatedPtrField< ::TSCH::ChartUIState > chart_ui_state_;
  bool word_count_hud_visible_;
  bool shows_comments_;
  bool shows_page_navigator_;
  bool inspector_hidden_;
  int view_scale_mode_;
  ::TSP::Point* window_frame_origin_;
  ::TSP::Size* window_frame_size_;
  ::std::string* selected_inspector_switch_segment_identifier_;
  float view_scale_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];

  friend void  protobuf_AddDesc_TPArchives_2eproto();
  friend void protobuf_AssignDesc_TPArchives_2eproto();
  friend void protobuf_ShutdownFile_TPArchives_2eproto();

  void InitAsDefaultInstance();
  static ViewStateArchive* default_instance_;
};
// -------------------------------------------------------------------

class UIStateArchive : public ::google::protobuf::Message {
 public:
  UIStateArchive();
  virtual ~UIStateArchive();

  UIStateArchive(const UIStateArchive& from);

  inline UIStateArchive& operator=(const UIStateArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UIStateArchive& default_instance();

  void Swap(UIStateArchive* other);

  // implements Message ----------------------------------------------

  UIStateArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UIStateArchive& from);
  void MergeFrom(const UIStateArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .TSP.Reference layout_state = 1;
  inline bool has_layout_state() const;
  inline void clear_layout_state();
  static const int kLayoutStateFieldNumber = 1;
  inline const ::TSP::Reference& layout_state() const;
  inline ::TSP::Reference* mutable_layout_state();
  inline ::TSP::Reference* release_layout_state();
  inline void set_allocated_layout_state(::TSP::Reference* layout_state);

  // optional .TSP.Reference view_state = 2;
  inline bool has_view_state() const;
  inline void clear_view_state();
  static const int kViewStateFieldNumber = 2;
  inline const ::TSP::Reference& view_state() const;
  inline ::TSP::Reference* mutable_view_state();
  inline ::TSP::Reference* release_view_state();
  inline void set_allocated_view_state(::TSP::Reference* view_state);

  // @@protoc_insertion_point(class_scope:TP.UIStateArchive)
 private:
  inline void set_has_layout_state();
  inline void clear_has_layout_state();
  inline void set_has_view_state();
  inline void clear_has_view_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSP::Reference* layout_state_;
  ::TSP::Reference* view_state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_TPArchives_2eproto();
  friend void protobuf_AssignDesc_TPArchives_2eproto();
  friend void protobuf_ShutdownFile_TPArchives_2eproto();

  void InitAsDefaultInstance();
  static UIStateArchive* default_instance_;
};
// ===================================================================


// ===================================================================

// DocumentArchive

// required .TSA.DocumentArchive super = 15;
inline bool DocumentArchive::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentArchive::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentArchive::clear_super() {
  if (super_ != NULL) super_->::TSA::DocumentArchive::Clear();
  clear_has_super();
}
inline const ::TSA::DocumentArchive& DocumentArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSA::DocumentArchive* DocumentArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSA::DocumentArchive;
  return super_;
}
inline ::TSA::DocumentArchive* DocumentArchive::release_super() {
  clear_has_super();
  ::TSA::DocumentArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void DocumentArchive::set_allocated_super(::TSA::DocumentArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// optional .TSP.Reference stylesheet = 2;
inline bool DocumentArchive::has_stylesheet() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocumentArchive::set_has_stylesheet() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocumentArchive::clear_has_stylesheet() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocumentArchive::clear_stylesheet() {
  if (stylesheet_ != NULL) stylesheet_->::TSP::Reference::Clear();
  clear_has_stylesheet();
}
inline const ::TSP::Reference& DocumentArchive::stylesheet() const {
  return stylesheet_ != NULL ? *stylesheet_ : *default_instance_->stylesheet_;
}
inline ::TSP::Reference* DocumentArchive::mutable_stylesheet() {
  set_has_stylesheet();
  if (stylesheet_ == NULL) stylesheet_ = new ::TSP::Reference;
  return stylesheet_;
}
inline ::TSP::Reference* DocumentArchive::release_stylesheet() {
  clear_has_stylesheet();
  ::TSP::Reference* temp = stylesheet_;
  stylesheet_ = NULL;
  return temp;
}
inline void DocumentArchive::set_allocated_stylesheet(::TSP::Reference* stylesheet) {
  delete stylesheet_;
  stylesheet_ = stylesheet;
  if (stylesheet) {
    set_has_stylesheet();
  } else {
    clear_has_stylesheet();
  }
}

// optional .TSP.Reference floating_drawables = 3;
inline bool DocumentArchive::has_floating_drawables() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DocumentArchive::set_has_floating_drawables() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DocumentArchive::clear_has_floating_drawables() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DocumentArchive::clear_floating_drawables() {
  if (floating_drawables_ != NULL) floating_drawables_->::TSP::Reference::Clear();
  clear_has_floating_drawables();
}
inline const ::TSP::Reference& DocumentArchive::floating_drawables() const {
  return floating_drawables_ != NULL ? *floating_drawables_ : *default_instance_->floating_drawables_;
}
inline ::TSP::Reference* DocumentArchive::mutable_floating_drawables() {
  set_has_floating_drawables();
  if (floating_drawables_ == NULL) floating_drawables_ = new ::TSP::Reference;
  return floating_drawables_;
}
inline ::TSP::Reference* DocumentArchive::release_floating_drawables() {
  clear_has_floating_drawables();
  ::TSP::Reference* temp = floating_drawables_;
  floating_drawables_ = NULL;
  return temp;
}
inline void DocumentArchive::set_allocated_floating_drawables(::TSP::Reference* floating_drawables) {
  delete floating_drawables_;
  floating_drawables_ = floating_drawables;
  if (floating_drawables) {
    set_has_floating_drawables();
  } else {
    clear_has_floating_drawables();
  }
}

// optional .TSP.Reference body_storage = 4;
inline bool DocumentArchive::has_body_storage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DocumentArchive::set_has_body_storage() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DocumentArchive::clear_has_body_storage() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DocumentArchive::clear_body_storage() {
  if (body_storage_ != NULL) body_storage_->::TSP::Reference::Clear();
  clear_has_body_storage();
}
inline const ::TSP::Reference& DocumentArchive::body_storage() const {
  return body_storage_ != NULL ? *body_storage_ : *default_instance_->body_storage_;
}
inline ::TSP::Reference* DocumentArchive::mutable_body_storage() {
  set_has_body_storage();
  if (body_storage_ == NULL) body_storage_ = new ::TSP::Reference;
  return body_storage_;
}
inline ::TSP::Reference* DocumentArchive::release_body_storage() {
  clear_has_body_storage();
  ::TSP::Reference* temp = body_storage_;
  body_storage_ = NULL;
  return temp;
}
inline void DocumentArchive::set_allocated_body_storage(::TSP::Reference* body_storage) {
  delete body_storage_;
  body_storage_ = body_storage;
  if (body_storage) {
    set_has_body_storage();
  } else {
    clear_has_body_storage();
  }
}

// optional .TSP.Reference section = 5;
inline bool DocumentArchive::has_section() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DocumentArchive::set_has_section() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DocumentArchive::clear_has_section() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DocumentArchive::clear_section() {
  if (section_ != NULL) section_->::TSP::Reference::Clear();
  clear_has_section();
}
inline const ::TSP::Reference& DocumentArchive::section() const {
  return section_ != NULL ? *section_ : *default_instance_->section_;
}
inline ::TSP::Reference* DocumentArchive::mutable_section() {
  set_has_section();
  if (section_ == NULL) section_ = new ::TSP::Reference;
  return section_;
}
inline ::TSP::Reference* DocumentArchive::release_section() {
  clear_has_section();
  ::TSP::Reference* temp = section_;
  section_ = NULL;
  return temp;
}
inline void DocumentArchive::set_allocated_section(::TSP::Reference* section) {
  delete section_;
  section_ = section;
  if (section) {
    set_has_section();
  } else {
    clear_has_section();
  }
}

// optional .TSP.Reference theme = 6;
inline bool DocumentArchive::has_theme() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DocumentArchive::set_has_theme() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DocumentArchive::clear_has_theme() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DocumentArchive::clear_theme() {
  if (theme_ != NULL) theme_->::TSP::Reference::Clear();
  clear_has_theme();
}
inline const ::TSP::Reference& DocumentArchive::theme() const {
  return theme_ != NULL ? *theme_ : *default_instance_->theme_;
}
inline ::TSP::Reference* DocumentArchive::mutable_theme() {
  set_has_theme();
  if (theme_ == NULL) theme_ = new ::TSP::Reference;
  return theme_;
}
inline ::TSP::Reference* DocumentArchive::release_theme() {
  clear_has_theme();
  ::TSP::Reference* temp = theme_;
  theme_ = NULL;
  return temp;
}
inline void DocumentArchive::set_allocated_theme(::TSP::Reference* theme) {
  delete theme_;
  theme_ = theme;
  if (theme) {
    set_has_theme();
  } else {
    clear_has_theme();
  }
}

// optional .TSP.Reference settings = 7;
inline bool DocumentArchive::has_settings() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DocumentArchive::set_has_settings() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DocumentArchive::clear_has_settings() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DocumentArchive::clear_settings() {
  if (settings_ != NULL) settings_->::TSP::Reference::Clear();
  clear_has_settings();
}
inline const ::TSP::Reference& DocumentArchive::settings() const {
  return settings_ != NULL ? *settings_ : *default_instance_->settings_;
}
inline ::TSP::Reference* DocumentArchive::mutable_settings() {
  set_has_settings();
  if (settings_ == NULL) settings_ = new ::TSP::Reference;
  return settings_;
}
inline ::TSP::Reference* DocumentArchive::release_settings() {
  clear_has_settings();
  ::TSP::Reference* temp = settings_;
  settings_ = NULL;
  return temp;
}
inline void DocumentArchive::set_allocated_settings(::TSP::Reference* settings) {
  delete settings_;
  settings_ = settings;
  if (settings) {
    set_has_settings();
  } else {
    clear_has_settings();
  }
}

// optional .TSP.Reference deprecated_layout_state = 11;
inline bool DocumentArchive::has_deprecated_layout_state() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DocumentArchive::set_has_deprecated_layout_state() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DocumentArchive::clear_has_deprecated_layout_state() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DocumentArchive::clear_deprecated_layout_state() {
  if (deprecated_layout_state_ != NULL) deprecated_layout_state_->::TSP::Reference::Clear();
  clear_has_deprecated_layout_state();
}
inline const ::TSP::Reference& DocumentArchive::deprecated_layout_state() const {
  return deprecated_layout_state_ != NULL ? *deprecated_layout_state_ : *default_instance_->deprecated_layout_state_;
}
inline ::TSP::Reference* DocumentArchive::mutable_deprecated_layout_state() {
  set_has_deprecated_layout_state();
  if (deprecated_layout_state_ == NULL) deprecated_layout_state_ = new ::TSP::Reference;
  return deprecated_layout_state_;
}
inline ::TSP::Reference* DocumentArchive::release_deprecated_layout_state() {
  clear_has_deprecated_layout_state();
  ::TSP::Reference* temp = deprecated_layout_state_;
  deprecated_layout_state_ = NULL;
  return temp;
}
inline void DocumentArchive::set_allocated_deprecated_layout_state(::TSP::Reference* deprecated_layout_state) {
  delete deprecated_layout_state_;
  deprecated_layout_state_ = deprecated_layout_state;
  if (deprecated_layout_state) {
    set_has_deprecated_layout_state();
  } else {
    clear_has_deprecated_layout_state();
  }
}

// optional .TSP.Reference deprecated_view_state = 12;
inline bool DocumentArchive::has_deprecated_view_state() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DocumentArchive::set_has_deprecated_view_state() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DocumentArchive::clear_has_deprecated_view_state() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DocumentArchive::clear_deprecated_view_state() {
  if (deprecated_view_state_ != NULL) deprecated_view_state_->::TSP::Reference::Clear();
  clear_has_deprecated_view_state();
}
inline const ::TSP::Reference& DocumentArchive::deprecated_view_state() const {
  return deprecated_view_state_ != NULL ? *deprecated_view_state_ : *default_instance_->deprecated_view_state_;
}
inline ::TSP::Reference* DocumentArchive::mutable_deprecated_view_state() {
  set_has_deprecated_view_state();
  if (deprecated_view_state_ == NULL) deprecated_view_state_ = new ::TSP::Reference;
  return deprecated_view_state_;
}
inline ::TSP::Reference* DocumentArchive::release_deprecated_view_state() {
  clear_has_deprecated_view_state();
  ::TSP::Reference* temp = deprecated_view_state_;
  deprecated_view_state_ = NULL;
  return temp;
}
inline void DocumentArchive::set_allocated_deprecated_view_state(::TSP::Reference* deprecated_view_state) {
  delete deprecated_view_state_;
  deprecated_view_state_ = deprecated_view_state;
  if (deprecated_view_state) {
    set_has_deprecated_view_state();
  } else {
    clear_has_deprecated_view_state();
  }
}

// repeated .TSP.Reference citation_records = 13;
inline int DocumentArchive::citation_records_size() const {
  return citation_records_.size();
}
inline void DocumentArchive::clear_citation_records() {
  citation_records_.Clear();
}
inline const ::TSP::Reference& DocumentArchive::citation_records(int index) const {
  return citation_records_.Get(index);
}
inline ::TSP::Reference* DocumentArchive::mutable_citation_records(int index) {
  return citation_records_.Mutable(index);
}
inline ::TSP::Reference* DocumentArchive::add_citation_records() {
  return citation_records_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
DocumentArchive::citation_records() const {
  return citation_records_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
DocumentArchive::mutable_citation_records() {
  return &citation_records_;
}

// repeated .TSP.Reference toc_styles = 14;
inline int DocumentArchive::toc_styles_size() const {
  return toc_styles_.size();
}
inline void DocumentArchive::clear_toc_styles() {
  toc_styles_.Clear();
}
inline const ::TSP::Reference& DocumentArchive::toc_styles(int index) const {
  return toc_styles_.Get(index);
}
inline ::TSP::Reference* DocumentArchive::mutable_toc_styles(int index) {
  return toc_styles_.Mutable(index);
}
inline ::TSP::Reference* DocumentArchive::add_toc_styles() {
  return toc_styles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
DocumentArchive::toc_styles() const {
  return toc_styles_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
DocumentArchive::mutable_toc_styles() {
  return &toc_styles_;
}

// repeated .TSP.Reference change_sessions = 16;
inline int DocumentArchive::change_sessions_size() const {
  return change_sessions_.size();
}
inline void DocumentArchive::clear_change_sessions() {
  change_sessions_.Clear();
}
inline const ::TSP::Reference& DocumentArchive::change_sessions(int index) const {
  return change_sessions_.Get(index);
}
inline ::TSP::Reference* DocumentArchive::mutable_change_sessions(int index) {
  return change_sessions_.Mutable(index);
}
inline ::TSP::Reference* DocumentArchive::add_change_sessions() {
  return change_sessions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
DocumentArchive::change_sessions() const {
  return change_sessions_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
DocumentArchive::mutable_change_sessions() {
  return &change_sessions_;
}

// optional .TSP.Reference drawables_zorder = 20;
inline bool DocumentArchive::has_drawables_zorder() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DocumentArchive::set_has_drawables_zorder() {
  _has_bits_[0] |= 0x00001000u;
}
inline void DocumentArchive::clear_has_drawables_zorder() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void DocumentArchive::clear_drawables_zorder() {
  if (drawables_zorder_ != NULL) drawables_zorder_->::TSP::Reference::Clear();
  clear_has_drawables_zorder();
}
inline const ::TSP::Reference& DocumentArchive::drawables_zorder() const {
  return drawables_zorder_ != NULL ? *drawables_zorder_ : *default_instance_->drawables_zorder_;
}
inline ::TSP::Reference* DocumentArchive::mutable_drawables_zorder() {
  set_has_drawables_zorder();
  if (drawables_zorder_ == NULL) drawables_zorder_ = new ::TSP::Reference;
  return drawables_zorder_;
}
inline ::TSP::Reference* DocumentArchive::release_drawables_zorder() {
  clear_has_drawables_zorder();
  ::TSP::Reference* temp = drawables_zorder_;
  drawables_zorder_ = NULL;
  return temp;
}
inline void DocumentArchive::set_allocated_drawables_zorder(::TSP::Reference* drawables_zorder) {
  delete drawables_zorder_;
  drawables_zorder_ = drawables_zorder;
  if (drawables_zorder) {
    set_has_drawables_zorder();
  } else {
    clear_has_drawables_zorder();
  }
}

// optional bool uses_single_header_footer = 21;
inline bool DocumentArchive::has_uses_single_header_footer() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void DocumentArchive::set_has_uses_single_header_footer() {
  _has_bits_[0] |= 0x00002000u;
}
inline void DocumentArchive::clear_has_uses_single_header_footer() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void DocumentArchive::clear_uses_single_header_footer() {
  uses_single_header_footer_ = false;
  clear_has_uses_single_header_footer();
}
inline bool DocumentArchive::uses_single_header_footer() const {
  return uses_single_header_footer_;
}
inline void DocumentArchive::set_uses_single_header_footer(bool value) {
  set_has_uses_single_header_footer();
  uses_single_header_footer_ = value;
}

// optional float page_width = 30;
inline bool DocumentArchive::has_page_width() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void DocumentArchive::set_has_page_width() {
  _has_bits_[0] |= 0x00004000u;
}
inline void DocumentArchive::clear_has_page_width() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void DocumentArchive::clear_page_width() {
  page_width_ = 0;
  clear_has_page_width();
}
inline float DocumentArchive::page_width() const {
  return page_width_;
}
inline void DocumentArchive::set_page_width(float value) {
  set_has_page_width();
  page_width_ = value;
}

// optional float page_height = 31;
inline bool DocumentArchive::has_page_height() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void DocumentArchive::set_has_page_height() {
  _has_bits_[0] |= 0x00008000u;
}
inline void DocumentArchive::clear_has_page_height() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void DocumentArchive::clear_page_height() {
  page_height_ = 0;
  clear_has_page_height();
}
inline float DocumentArchive::page_height() const {
  return page_height_;
}
inline void DocumentArchive::set_page_height(float value) {
  set_has_page_height();
  page_height_ = value;
}

// optional float left_margin = 32;
inline bool DocumentArchive::has_left_margin() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void DocumentArchive::set_has_left_margin() {
  _has_bits_[0] |= 0x00010000u;
}
inline void DocumentArchive::clear_has_left_margin() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void DocumentArchive::clear_left_margin() {
  left_margin_ = 0;
  clear_has_left_margin();
}
inline float DocumentArchive::left_margin() const {
  return left_margin_;
}
inline void DocumentArchive::set_left_margin(float value) {
  set_has_left_margin();
  left_margin_ = value;
}

// optional float right_margin = 33;
inline bool DocumentArchive::has_right_margin() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void DocumentArchive::set_has_right_margin() {
  _has_bits_[0] |= 0x00020000u;
}
inline void DocumentArchive::clear_has_right_margin() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void DocumentArchive::clear_right_margin() {
  right_margin_ = 0;
  clear_has_right_margin();
}
inline float DocumentArchive::right_margin() const {
  return right_margin_;
}
inline void DocumentArchive::set_right_margin(float value) {
  set_has_right_margin();
  right_margin_ = value;
}

// optional float top_margin = 34;
inline bool DocumentArchive::has_top_margin() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void DocumentArchive::set_has_top_margin() {
  _has_bits_[0] |= 0x00040000u;
}
inline void DocumentArchive::clear_has_top_margin() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void DocumentArchive::clear_top_margin() {
  top_margin_ = 0;
  clear_has_top_margin();
}
inline float DocumentArchive::top_margin() const {
  return top_margin_;
}
inline void DocumentArchive::set_top_margin(float value) {
  set_has_top_margin();
  top_margin_ = value;
}

// optional float bottom_margin = 35;
inline bool DocumentArchive::has_bottom_margin() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void DocumentArchive::set_has_bottom_margin() {
  _has_bits_[0] |= 0x00080000u;
}
inline void DocumentArchive::clear_has_bottom_margin() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void DocumentArchive::clear_bottom_margin() {
  bottom_margin_ = 0;
  clear_has_bottom_margin();
}
inline float DocumentArchive::bottom_margin() const {
  return bottom_margin_;
}
inline void DocumentArchive::set_bottom_margin(float value) {
  set_has_bottom_margin();
  bottom_margin_ = value;
}

// optional float header_margin = 36;
inline bool DocumentArchive::has_header_margin() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void DocumentArchive::set_has_header_margin() {
  _has_bits_[0] |= 0x00100000u;
}
inline void DocumentArchive::clear_has_header_margin() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void DocumentArchive::clear_header_margin() {
  header_margin_ = 0;
  clear_has_header_margin();
}
inline float DocumentArchive::header_margin() const {
  return header_margin_;
}
inline void DocumentArchive::set_header_margin(float value) {
  set_has_header_margin();
  header_margin_ = value;
}

// optional float footer_margin = 37;
inline bool DocumentArchive::has_footer_margin() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void DocumentArchive::set_has_footer_margin() {
  _has_bits_[0] |= 0x00200000u;
}
inline void DocumentArchive::clear_has_footer_margin() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void DocumentArchive::clear_footer_margin() {
  footer_margin_ = 0;
  clear_has_footer_margin();
}
inline float DocumentArchive::footer_margin() const {
  return footer_margin_;
}
inline void DocumentArchive::set_footer_margin(float value) {
  set_has_footer_margin();
  footer_margin_ = value;
}

// optional float page_scale = 38;
inline bool DocumentArchive::has_page_scale() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void DocumentArchive::set_has_page_scale() {
  _has_bits_[0] |= 0x00400000u;
}
inline void DocumentArchive::clear_has_page_scale() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void DocumentArchive::clear_page_scale() {
  page_scale_ = 0;
  clear_has_page_scale();
}
inline float DocumentArchive::page_scale() const {
  return page_scale_;
}
inline void DocumentArchive::set_page_scale(float value) {
  set_has_page_scale();
  page_scale_ = value;
}

// optional bool layout_body_vertically = 39;
inline bool DocumentArchive::has_layout_body_vertically() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void DocumentArchive::set_has_layout_body_vertically() {
  _has_bits_[0] |= 0x00800000u;
}
inline void DocumentArchive::clear_has_layout_body_vertically() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void DocumentArchive::clear_layout_body_vertically() {
  layout_body_vertically_ = false;
  clear_has_layout_body_vertically();
}
inline bool DocumentArchive::layout_body_vertically() const {
  return layout_body_vertically_;
}
inline void DocumentArchive::set_layout_body_vertically(bool value) {
  set_has_layout_body_vertically();
  layout_body_vertically_ = value;
}

// optional bool change_tracking_enabled = 40;
inline bool DocumentArchive::has_change_tracking_enabled() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void DocumentArchive::set_has_change_tracking_enabled() {
  _has_bits_[0] |= 0x01000000u;
}
inline void DocumentArchive::clear_has_change_tracking_enabled() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void DocumentArchive::clear_change_tracking_enabled() {
  change_tracking_enabled_ = false;
  clear_has_change_tracking_enabled();
}
inline bool DocumentArchive::change_tracking_enabled() const {
  return change_tracking_enabled_;
}
inline void DocumentArchive::set_change_tracking_enabled(bool value) {
  set_has_change_tracking_enabled();
  change_tracking_enabled_ = value;
}

// optional .TSP.Reference tables_custom_format_list = 41;
inline bool DocumentArchive::has_tables_custom_format_list() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void DocumentArchive::set_has_tables_custom_format_list() {
  _has_bits_[0] |= 0x02000000u;
}
inline void DocumentArchive::clear_has_tables_custom_format_list() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void DocumentArchive::clear_tables_custom_format_list() {
  if (tables_custom_format_list_ != NULL) tables_custom_format_list_->::TSP::Reference::Clear();
  clear_has_tables_custom_format_list();
}
inline const ::TSP::Reference& DocumentArchive::tables_custom_format_list() const {
  return tables_custom_format_list_ != NULL ? *tables_custom_format_list_ : *default_instance_->tables_custom_format_list_;
}
inline ::TSP::Reference* DocumentArchive::mutable_tables_custom_format_list() {
  set_has_tables_custom_format_list();
  if (tables_custom_format_list_ == NULL) tables_custom_format_list_ = new ::TSP::Reference;
  return tables_custom_format_list_;
}
inline ::TSP::Reference* DocumentArchive::release_tables_custom_format_list() {
  clear_has_tables_custom_format_list();
  ::TSP::Reference* temp = tables_custom_format_list_;
  tables_custom_format_list_ = NULL;
  return temp;
}
inline void DocumentArchive::set_allocated_tables_custom_format_list(::TSP::Reference* tables_custom_format_list) {
  delete tables_custom_format_list_;
  tables_custom_format_list_ = tables_custom_format_list;
  if (tables_custom_format_list) {
    set_has_tables_custom_format_list();
  } else {
    clear_has_tables_custom_format_list();
  }
}

// optional uint32 orientation = 42 [default = 0];
inline bool DocumentArchive::has_orientation() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void DocumentArchive::set_has_orientation() {
  _has_bits_[0] |= 0x04000000u;
}
inline void DocumentArchive::clear_has_orientation() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void DocumentArchive::clear_orientation() {
  orientation_ = 0u;
  clear_has_orientation();
}
inline ::google::protobuf::uint32 DocumentArchive::orientation() const {
  return orientation_;
}
inline void DocumentArchive::set_orientation(::google::protobuf::uint32 value) {
  set_has_orientation();
  orientation_ = value;
}

// optional string printer_id = 43;
inline bool DocumentArchive::has_printer_id() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void DocumentArchive::set_has_printer_id() {
  _has_bits_[0] |= 0x08000000u;
}
inline void DocumentArchive::clear_has_printer_id() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void DocumentArchive::clear_printer_id() {
  if (printer_id_ != &::google::protobuf::internal::kEmptyString) {
    printer_id_->clear();
  }
  clear_has_printer_id();
}
inline const ::std::string& DocumentArchive::printer_id() const {
  return *printer_id_;
}
inline void DocumentArchive::set_printer_id(const ::std::string& value) {
  set_has_printer_id();
  if (printer_id_ == &::google::protobuf::internal::kEmptyString) {
    printer_id_ = new ::std::string;
  }
  printer_id_->assign(value);
}
inline void DocumentArchive::set_printer_id(const char* value) {
  set_has_printer_id();
  if (printer_id_ == &::google::protobuf::internal::kEmptyString) {
    printer_id_ = new ::std::string;
  }
  printer_id_->assign(value);
}
inline void DocumentArchive::set_printer_id(const char* value, size_t size) {
  set_has_printer_id();
  if (printer_id_ == &::google::protobuf::internal::kEmptyString) {
    printer_id_ = new ::std::string;
  }
  printer_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DocumentArchive::mutable_printer_id() {
  set_has_printer_id();
  if (printer_id_ == &::google::protobuf::internal::kEmptyString) {
    printer_id_ = new ::std::string;
  }
  return printer_id_;
}
inline ::std::string* DocumentArchive::release_printer_id() {
  clear_has_printer_id();
  if (printer_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = printer_id_;
    printer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DocumentArchive::set_allocated_printer_id(::std::string* printer_id) {
  if (printer_id_ != &::google::protobuf::internal::kEmptyString) {
    delete printer_id_;
  }
  if (printer_id) {
    set_has_printer_id();
    printer_id_ = printer_id;
  } else {
    clear_has_printer_id();
    printer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string paper_id = 44;
inline bool DocumentArchive::has_paper_id() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void DocumentArchive::set_has_paper_id() {
  _has_bits_[0] |= 0x10000000u;
}
inline void DocumentArchive::clear_has_paper_id() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void DocumentArchive::clear_paper_id() {
  if (paper_id_ != &::google::protobuf::internal::kEmptyString) {
    paper_id_->clear();
  }
  clear_has_paper_id();
}
inline const ::std::string& DocumentArchive::paper_id() const {
  return *paper_id_;
}
inline void DocumentArchive::set_paper_id(const ::std::string& value) {
  set_has_paper_id();
  if (paper_id_ == &::google::protobuf::internal::kEmptyString) {
    paper_id_ = new ::std::string;
  }
  paper_id_->assign(value);
}
inline void DocumentArchive::set_paper_id(const char* value) {
  set_has_paper_id();
  if (paper_id_ == &::google::protobuf::internal::kEmptyString) {
    paper_id_ = new ::std::string;
  }
  paper_id_->assign(value);
}
inline void DocumentArchive::set_paper_id(const char* value, size_t size) {
  set_has_paper_id();
  if (paper_id_ == &::google::protobuf::internal::kEmptyString) {
    paper_id_ = new ::std::string;
  }
  paper_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DocumentArchive::mutable_paper_id() {
  set_has_paper_id();
  if (paper_id_ == &::google::protobuf::internal::kEmptyString) {
    paper_id_ = new ::std::string;
  }
  return paper_id_;
}
inline ::std::string* DocumentArchive::release_paper_id() {
  clear_has_paper_id();
  if (paper_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = paper_id_;
    paper_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DocumentArchive::set_allocated_paper_id(::std::string* paper_id) {
  if (paper_id_ != &::google::protobuf::internal::kEmptyString) {
    delete paper_id_;
  }
  if (paper_id) {
    set_has_paper_id();
    paper_id_ = paper_id;
  } else {
    clear_has_paper_id();
    paper_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool change_tracking_paused = 45;
inline bool DocumentArchive::has_change_tracking_paused() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void DocumentArchive::set_has_change_tracking_paused() {
  _has_bits_[0] |= 0x20000000u;
}
inline void DocumentArchive::clear_has_change_tracking_paused() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void DocumentArchive::clear_change_tracking_paused() {
  change_tracking_paused_ = false;
  clear_has_change_tracking_paused();
}
inline bool DocumentArchive::change_tracking_paused() const {
  return change_tracking_paused_;
}
inline void DocumentArchive::set_change_tracking_paused(bool value) {
  set_has_change_tracking_paused();
  change_tracking_paused_ = value;
}

// -------------------------------------------------------------------

// ThemeArchive

// required .TSS.ThemeArchive super = 1;
inline bool ThemeArchive::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ThemeArchive::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ThemeArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ThemeArchive::clear_super() {
  if (super_ != NULL) super_->::TSS::ThemeArchive::Clear();
  clear_has_super();
}
inline const ::TSS::ThemeArchive& ThemeArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSS::ThemeArchive* ThemeArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSS::ThemeArchive;
  return super_;
}
inline ::TSS::ThemeArchive* ThemeArchive::release_super() {
  clear_has_super();
  ::TSS::ThemeArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void ThemeArchive::set_allocated_super(::TSS::ThemeArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// -------------------------------------------------------------------

// SettingsArchive

// optional bool body = 1 [default = true];
inline bool SettingsArchive::has_body() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SettingsArchive::set_has_body() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SettingsArchive::clear_has_body() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SettingsArchive::clear_body() {
  body_ = true;
  clear_has_body();
}
inline bool SettingsArchive::body() const {
  return body_;
}
inline void SettingsArchive::set_body(bool value) {
  set_has_body();
  body_ = value;
}

// optional bool headers = 2 [default = true];
inline bool SettingsArchive::has_headers() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SettingsArchive::set_has_headers() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SettingsArchive::clear_has_headers() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SettingsArchive::clear_headers() {
  headers_ = true;
  clear_has_headers();
}
inline bool SettingsArchive::headers() const {
  return headers_;
}
inline void SettingsArchive::set_headers(bool value) {
  set_has_headers();
  headers_ = value;
}

// optional bool footers = 3 [default = true];
inline bool SettingsArchive::has_footers() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SettingsArchive::set_has_footers() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SettingsArchive::clear_has_footers() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SettingsArchive::clear_footers() {
  footers_ = true;
  clear_has_footers();
}
inline bool SettingsArchive::footers() const {
  return footers_;
}
inline void SettingsArchive::set_footers(bool value) {
  set_has_footers();
  footers_ = value;
}

// optional bool preview = 4 [default = true];
inline bool SettingsArchive::has_preview() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SettingsArchive::set_has_preview() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SettingsArchive::clear_has_preview() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SettingsArchive::clear_preview() {
  preview_ = true;
  clear_has_preview();
}
inline bool SettingsArchive::preview() const {
  return preview_;
}
inline void SettingsArchive::set_preview(bool value) {
  set_has_preview();
  preview_ = value;
}

// optional bool copy_movies = 5 [default = true];
inline bool SettingsArchive::has_copy_movies() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SettingsArchive::set_has_copy_movies() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SettingsArchive::clear_has_copy_movies() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SettingsArchive::clear_copy_movies() {
  copy_movies_ = true;
  clear_has_copy_movies();
}
inline bool SettingsArchive::copy_movies() const {
  return copy_movies_;
}
inline void SettingsArchive::set_copy_movies(bool value) {
  set_has_copy_movies();
  copy_movies_ = value;
}

// optional bool copy_assets = 6 [default = true];
inline bool SettingsArchive::has_copy_assets() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SettingsArchive::set_has_copy_assets() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SettingsArchive::clear_has_copy_assets() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SettingsArchive::clear_copy_assets() {
  copy_assets_ = true;
  clear_has_copy_assets();
}
inline bool SettingsArchive::copy_assets() const {
  return copy_assets_;
}
inline void SettingsArchive::set_copy_assets(bool value) {
  set_has_copy_assets();
  copy_assets_ = value;
}

// optional bool placeholder_authoring = 7 [default = false];
inline bool SettingsArchive::has_placeholder_authoring() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SettingsArchive::set_has_placeholder_authoring() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SettingsArchive::clear_has_placeholder_authoring() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SettingsArchive::clear_placeholder_authoring() {
  placeholder_authoring_ = false;
  clear_has_placeholder_authoring();
}
inline bool SettingsArchive::placeholder_authoring() const {
  return placeholder_authoring_;
}
inline void SettingsArchive::set_placeholder_authoring(bool value) {
  set_has_placeholder_authoring();
  placeholder_authoring_ = value;
}

// optional bool links_enabled = 8 [default = true];
inline bool SettingsArchive::has_links_enabled() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SettingsArchive::set_has_links_enabled() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SettingsArchive::clear_has_links_enabled() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SettingsArchive::clear_links_enabled() {
  links_enabled_ = true;
  clear_has_links_enabled();
}
inline bool SettingsArchive::links_enabled() const {
  return links_enabled_;
}
inline void SettingsArchive::set_links_enabled(bool value) {
  set_has_links_enabled();
  links_enabled_ = value;
}

// optional bool hyphenation = 9 [default = false];
inline bool SettingsArchive::has_hyphenation() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SettingsArchive::set_has_hyphenation() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SettingsArchive::clear_has_hyphenation() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SettingsArchive::clear_hyphenation() {
  hyphenation_ = false;
  clear_has_hyphenation();
}
inline bool SettingsArchive::hyphenation() const {
  return hyphenation_;
}
inline void SettingsArchive::set_hyphenation(bool value) {
  set_has_hyphenation();
  hyphenation_ = value;
}

// optional bool use_ligatures = 10 [default = false];
inline bool SettingsArchive::has_use_ligatures() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SettingsArchive::set_has_use_ligatures() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SettingsArchive::clear_has_use_ligatures() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SettingsArchive::clear_use_ligatures() {
  use_ligatures_ = false;
  clear_has_use_ligatures();
}
inline bool SettingsArchive::use_ligatures() const {
  return use_ligatures_;
}
inline void SettingsArchive::set_use_ligatures(bool value) {
  set_has_use_ligatures();
  use_ligatures_ = value;
}

// optional bool toc_links_enabled = 11 [default = false];
inline bool SettingsArchive::has_toc_links_enabled() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SettingsArchive::set_has_toc_links_enabled() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SettingsArchive::clear_has_toc_links_enabled() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SettingsArchive::clear_toc_links_enabled() {
  toc_links_enabled_ = false;
  clear_has_toc_links_enabled();
}
inline bool SettingsArchive::toc_links_enabled() const {
  return toc_links_enabled_;
}
inline void SettingsArchive::set_toc_links_enabled(bool value) {
  set_has_toc_links_enabled();
  toc_links_enabled_ = value;
}

// optional bool show_ct_markup = 12 [default = true];
inline bool SettingsArchive::has_show_ct_markup() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SettingsArchive::set_has_show_ct_markup() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SettingsArchive::clear_has_show_ct_markup() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SettingsArchive::clear_show_ct_markup() {
  show_ct_markup_ = true;
  clear_has_show_ct_markup();
}
inline bool SettingsArchive::show_ct_markup() const {
  return show_ct_markup_;
}
inline void SettingsArchive::set_show_ct_markup(bool value) {
  set_has_show_ct_markup();
  show_ct_markup_ = value;
}

// optional bool show_ct_deletions = 13 [default = true];
inline bool SettingsArchive::has_show_ct_deletions() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SettingsArchive::set_has_show_ct_deletions() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SettingsArchive::clear_has_show_ct_deletions() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SettingsArchive::clear_show_ct_deletions() {
  show_ct_deletions_ = true;
  clear_has_show_ct_deletions();
}
inline bool SettingsArchive::show_ct_deletions() const {
  return show_ct_deletions_;
}
inline void SettingsArchive::set_show_ct_deletions(bool value) {
  set_has_show_ct_deletions();
  show_ct_deletions_ = value;
}

// optional int32 ct_bubbles_visibility = 14;
inline bool SettingsArchive::has_ct_bubbles_visibility() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SettingsArchive::set_has_ct_bubbles_visibility() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SettingsArchive::clear_has_ct_bubbles_visibility() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SettingsArchive::clear_ct_bubbles_visibility() {
  ct_bubbles_visibility_ = 0;
  clear_has_ct_bubbles_visibility();
}
inline ::google::protobuf::int32 SettingsArchive::ct_bubbles_visibility() const {
  return ct_bubbles_visibility_;
}
inline void SettingsArchive::set_ct_bubbles_visibility(::google::protobuf::int32 value) {
  set_has_ct_bubbles_visibility();
  ct_bubbles_visibility_ = value;
}

// optional bool change_bars_visible = 15 [default = true];
inline bool SettingsArchive::has_change_bars_visible() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SettingsArchive::set_has_change_bars_visible() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SettingsArchive::clear_has_change_bars_visible() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SettingsArchive::clear_change_bars_visible() {
  change_bars_visible_ = true;
  clear_has_change_bars_visible();
}
inline bool SettingsArchive::change_bars_visible() const {
  return change_bars_visible_;
}
inline void SettingsArchive::set_change_bars_visible(bool value) {
  set_has_change_bars_visible();
  change_bars_visible_ = value;
}

// optional bool format_changes_visible = 16 [default = true];
inline bool SettingsArchive::has_format_changes_visible() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SettingsArchive::set_has_format_changes_visible() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SettingsArchive::clear_has_format_changes_visible() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SettingsArchive::clear_format_changes_visible() {
  format_changes_visible_ = true;
  clear_has_format_changes_visible();
}
inline bool SettingsArchive::format_changes_visible() const {
  return format_changes_visible_;
}
inline void SettingsArchive::set_format_changes_visible(bool value) {
  set_has_format_changes_visible();
  format_changes_visible_ = value;
}

// optional bool annotations_visible = 17 [default = true];
inline bool SettingsArchive::has_annotations_visible() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SettingsArchive::set_has_annotations_visible() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SettingsArchive::clear_has_annotations_visible() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SettingsArchive::clear_annotations_visible() {
  annotations_visible_ = true;
  clear_has_annotations_visible();
}
inline bool SettingsArchive::annotations_visible() const {
  return annotations_visible_;
}
inline void SettingsArchive::set_annotations_visible(bool value) {
  set_has_annotations_visible();
  annotations_visible_ = value;
}

// optional bool document_is_rtl = 18 [default = false];
inline bool SettingsArchive::has_document_is_rtl() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SettingsArchive::set_has_document_is_rtl() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SettingsArchive::clear_has_document_is_rtl() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SettingsArchive::clear_document_is_rtl() {
  document_is_rtl_ = false;
  clear_has_document_is_rtl();
}
inline bool SettingsArchive::document_is_rtl() const {
  return document_is_rtl_;
}
inline void SettingsArchive::set_document_is_rtl(bool value) {
  set_has_document_is_rtl();
  document_is_rtl_ = value;
}

// optional string decimal_tab = 20;
inline bool SettingsArchive::has_decimal_tab() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SettingsArchive::set_has_decimal_tab() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SettingsArchive::clear_has_decimal_tab() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SettingsArchive::clear_decimal_tab() {
  if (decimal_tab_ != &::google::protobuf::internal::kEmptyString) {
    decimal_tab_->clear();
  }
  clear_has_decimal_tab();
}
inline const ::std::string& SettingsArchive::decimal_tab() const {
  return *decimal_tab_;
}
inline void SettingsArchive::set_decimal_tab(const ::std::string& value) {
  set_has_decimal_tab();
  if (decimal_tab_ == &::google::protobuf::internal::kEmptyString) {
    decimal_tab_ = new ::std::string;
  }
  decimal_tab_->assign(value);
}
inline void SettingsArchive::set_decimal_tab(const char* value) {
  set_has_decimal_tab();
  if (decimal_tab_ == &::google::protobuf::internal::kEmptyString) {
    decimal_tab_ = new ::std::string;
  }
  decimal_tab_->assign(value);
}
inline void SettingsArchive::set_decimal_tab(const char* value, size_t size) {
  set_has_decimal_tab();
  if (decimal_tab_ == &::google::protobuf::internal::kEmptyString) {
    decimal_tab_ = new ::std::string;
  }
  decimal_tab_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SettingsArchive::mutable_decimal_tab() {
  set_has_decimal_tab();
  if (decimal_tab_ == &::google::protobuf::internal::kEmptyString) {
    decimal_tab_ = new ::std::string;
  }
  return decimal_tab_;
}
inline ::std::string* SettingsArchive::release_decimal_tab() {
  clear_has_decimal_tab();
  if (decimal_tab_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = decimal_tab_;
    decimal_tab_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SettingsArchive::set_allocated_decimal_tab(::std::string* decimal_tab) {
  if (decimal_tab_ != &::google::protobuf::internal::kEmptyString) {
    delete decimal_tab_;
  }
  if (decimal_tab) {
    set_has_decimal_tab();
    decimal_tab_ = decimal_tab;
  } else {
    clear_has_decimal_tab();
    decimal_tab_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string language = 21;
inline bool SettingsArchive::has_language() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SettingsArchive::set_has_language() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SettingsArchive::clear_has_language() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SettingsArchive::clear_language() {
  if (language_ != &::google::protobuf::internal::kEmptyString) {
    language_->clear();
  }
  clear_has_language();
}
inline const ::std::string& SettingsArchive::language() const {
  return *language_;
}
inline void SettingsArchive::set_language(const ::std::string& value) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    language_ = new ::std::string;
  }
  language_->assign(value);
}
inline void SettingsArchive::set_language(const char* value) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    language_ = new ::std::string;
  }
  language_->assign(value);
}
inline void SettingsArchive::set_language(const char* value, size_t size) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    language_ = new ::std::string;
  }
  language_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SettingsArchive::mutable_language() {
  set_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    language_ = new ::std::string;
  }
  return language_;
}
inline ::std::string* SettingsArchive::release_language() {
  clear_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = language_;
    language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SettingsArchive::set_allocated_language(::std::string* language) {
  if (language_ != &::google::protobuf::internal::kEmptyString) {
    delete language_;
  }
  if (language) {
    set_has_language();
    language_ = language;
  } else {
    clear_has_language();
    language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string hyphenation_language = 22;
inline bool SettingsArchive::has_hyphenation_language() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SettingsArchive::set_has_hyphenation_language() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SettingsArchive::clear_has_hyphenation_language() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SettingsArchive::clear_hyphenation_language() {
  if (hyphenation_language_ != &::google::protobuf::internal::kEmptyString) {
    hyphenation_language_->clear();
  }
  clear_has_hyphenation_language();
}
inline const ::std::string& SettingsArchive::hyphenation_language() const {
  return *hyphenation_language_;
}
inline void SettingsArchive::set_hyphenation_language(const ::std::string& value) {
  set_has_hyphenation_language();
  if (hyphenation_language_ == &::google::protobuf::internal::kEmptyString) {
    hyphenation_language_ = new ::std::string;
  }
  hyphenation_language_->assign(value);
}
inline void SettingsArchive::set_hyphenation_language(const char* value) {
  set_has_hyphenation_language();
  if (hyphenation_language_ == &::google::protobuf::internal::kEmptyString) {
    hyphenation_language_ = new ::std::string;
  }
  hyphenation_language_->assign(value);
}
inline void SettingsArchive::set_hyphenation_language(const char* value, size_t size) {
  set_has_hyphenation_language();
  if (hyphenation_language_ == &::google::protobuf::internal::kEmptyString) {
    hyphenation_language_ = new ::std::string;
  }
  hyphenation_language_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SettingsArchive::mutable_hyphenation_language() {
  set_has_hyphenation_language();
  if (hyphenation_language_ == &::google::protobuf::internal::kEmptyString) {
    hyphenation_language_ = new ::std::string;
  }
  return hyphenation_language_;
}
inline ::std::string* SettingsArchive::release_hyphenation_language() {
  clear_has_hyphenation_language();
  if (hyphenation_language_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hyphenation_language_;
    hyphenation_language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SettingsArchive::set_allocated_hyphenation_language(::std::string* hyphenation_language) {
  if (hyphenation_language_ != &::google::protobuf::internal::kEmptyString) {
    delete hyphenation_language_;
  }
  if (hyphenation_language) {
    set_has_hyphenation_language();
    hyphenation_language_ = hyphenation_language;
  } else {
    clear_has_hyphenation_language();
    hyphenation_language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string creation_locale = 23;
inline bool SettingsArchive::has_creation_locale() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SettingsArchive::set_has_creation_locale() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SettingsArchive::clear_has_creation_locale() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SettingsArchive::clear_creation_locale() {
  if (creation_locale_ != &::google::protobuf::internal::kEmptyString) {
    creation_locale_->clear();
  }
  clear_has_creation_locale();
}
inline const ::std::string& SettingsArchive::creation_locale() const {
  return *creation_locale_;
}
inline void SettingsArchive::set_creation_locale(const ::std::string& value) {
  set_has_creation_locale();
  if (creation_locale_ == &::google::protobuf::internal::kEmptyString) {
    creation_locale_ = new ::std::string;
  }
  creation_locale_->assign(value);
}
inline void SettingsArchive::set_creation_locale(const char* value) {
  set_has_creation_locale();
  if (creation_locale_ == &::google::protobuf::internal::kEmptyString) {
    creation_locale_ = new ::std::string;
  }
  creation_locale_->assign(value);
}
inline void SettingsArchive::set_creation_locale(const char* value, size_t size) {
  set_has_creation_locale();
  if (creation_locale_ == &::google::protobuf::internal::kEmptyString) {
    creation_locale_ = new ::std::string;
  }
  creation_locale_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SettingsArchive::mutable_creation_locale() {
  set_has_creation_locale();
  if (creation_locale_ == &::google::protobuf::internal::kEmptyString) {
    creation_locale_ = new ::std::string;
  }
  return creation_locale_;
}
inline ::std::string* SettingsArchive::release_creation_locale() {
  clear_has_creation_locale();
  if (creation_locale_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = creation_locale_;
    creation_locale_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SettingsArchive::set_allocated_creation_locale(::std::string* creation_locale) {
  if (creation_locale_ != &::google::protobuf::internal::kEmptyString) {
    delete creation_locale_;
  }
  if (creation_locale) {
    set_has_creation_locale();
    creation_locale_ = creation_locale;
  } else {
    clear_has_creation_locale();
    creation_locale_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string last_locale = 24;
inline bool SettingsArchive::has_last_locale() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SettingsArchive::set_has_last_locale() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SettingsArchive::clear_has_last_locale() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SettingsArchive::clear_last_locale() {
  if (last_locale_ != &::google::protobuf::internal::kEmptyString) {
    last_locale_->clear();
  }
  clear_has_last_locale();
}
inline const ::std::string& SettingsArchive::last_locale() const {
  return *last_locale_;
}
inline void SettingsArchive::set_last_locale(const ::std::string& value) {
  set_has_last_locale();
  if (last_locale_ == &::google::protobuf::internal::kEmptyString) {
    last_locale_ = new ::std::string;
  }
  last_locale_->assign(value);
}
inline void SettingsArchive::set_last_locale(const char* value) {
  set_has_last_locale();
  if (last_locale_ == &::google::protobuf::internal::kEmptyString) {
    last_locale_ = new ::std::string;
  }
  last_locale_->assign(value);
}
inline void SettingsArchive::set_last_locale(const char* value, size_t size) {
  set_has_last_locale();
  if (last_locale_ == &::google::protobuf::internal::kEmptyString) {
    last_locale_ = new ::std::string;
  }
  last_locale_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SettingsArchive::mutable_last_locale() {
  set_has_last_locale();
  if (last_locale_ == &::google::protobuf::internal::kEmptyString) {
    last_locale_ = new ::std::string;
  }
  return last_locale_;
}
inline ::std::string* SettingsArchive::release_last_locale() {
  clear_has_last_locale();
  if (last_locale_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = last_locale_;
    last_locale_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SettingsArchive::set_allocated_last_locale(::std::string* last_locale) {
  if (last_locale_ != &::google::protobuf::internal::kEmptyString) {
    delete last_locale_;
  }
  if (last_locale) {
    set_has_last_locale();
    last_locale_ = last_locale;
  } else {
    clear_has_last_locale();
    last_locale_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string orig_template = 25;
inline bool SettingsArchive::has_orig_template() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SettingsArchive::set_has_orig_template() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SettingsArchive::clear_has_orig_template() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SettingsArchive::clear_orig_template() {
  if (orig_template_ != &::google::protobuf::internal::kEmptyString) {
    orig_template_->clear();
  }
  clear_has_orig_template();
}
inline const ::std::string& SettingsArchive::orig_template() const {
  return *orig_template_;
}
inline void SettingsArchive::set_orig_template(const ::std::string& value) {
  set_has_orig_template();
  if (orig_template_ == &::google::protobuf::internal::kEmptyString) {
    orig_template_ = new ::std::string;
  }
  orig_template_->assign(value);
}
inline void SettingsArchive::set_orig_template(const char* value) {
  set_has_orig_template();
  if (orig_template_ == &::google::protobuf::internal::kEmptyString) {
    orig_template_ = new ::std::string;
  }
  orig_template_->assign(value);
}
inline void SettingsArchive::set_orig_template(const char* value, size_t size) {
  set_has_orig_template();
  if (orig_template_ == &::google::protobuf::internal::kEmptyString) {
    orig_template_ = new ::std::string;
  }
  orig_template_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SettingsArchive::mutable_orig_template() {
  set_has_orig_template();
  if (orig_template_ == &::google::protobuf::internal::kEmptyString) {
    orig_template_ = new ::std::string;
  }
  return orig_template_;
}
inline ::std::string* SettingsArchive::release_orig_template() {
  clear_has_orig_template();
  if (orig_template_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = orig_template_;
    orig_template_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SettingsArchive::set_allocated_orig_template(::std::string* orig_template) {
  if (orig_template_ != &::google::protobuf::internal::kEmptyString) {
    delete orig_template_;
  }
  if (orig_template) {
    set_has_orig_template();
    orig_template_ = orig_template;
  } else {
    clear_has_orig_template();
    orig_template_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string creation_date = 26;
inline bool SettingsArchive::has_creation_date() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void SettingsArchive::set_has_creation_date() {
  _has_bits_[0] |= 0x01000000u;
}
inline void SettingsArchive::clear_has_creation_date() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void SettingsArchive::clear_creation_date() {
  if (creation_date_ != &::google::protobuf::internal::kEmptyString) {
    creation_date_->clear();
  }
  clear_has_creation_date();
}
inline const ::std::string& SettingsArchive::creation_date() const {
  return *creation_date_;
}
inline void SettingsArchive::set_creation_date(const ::std::string& value) {
  set_has_creation_date();
  if (creation_date_ == &::google::protobuf::internal::kEmptyString) {
    creation_date_ = new ::std::string;
  }
  creation_date_->assign(value);
}
inline void SettingsArchive::set_creation_date(const char* value) {
  set_has_creation_date();
  if (creation_date_ == &::google::protobuf::internal::kEmptyString) {
    creation_date_ = new ::std::string;
  }
  creation_date_->assign(value);
}
inline void SettingsArchive::set_creation_date(const char* value, size_t size) {
  set_has_creation_date();
  if (creation_date_ == &::google::protobuf::internal::kEmptyString) {
    creation_date_ = new ::std::string;
  }
  creation_date_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SettingsArchive::mutable_creation_date() {
  set_has_creation_date();
  if (creation_date_ == &::google::protobuf::internal::kEmptyString) {
    creation_date_ = new ::std::string;
  }
  return creation_date_;
}
inline ::std::string* SettingsArchive::release_creation_date() {
  clear_has_creation_date();
  if (creation_date_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = creation_date_;
    creation_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SettingsArchive::set_allocated_creation_date(::std::string* creation_date) {
  if (creation_date_ != &::google::protobuf::internal::kEmptyString) {
    delete creation_date_;
  }
  if (creation_date) {
    set_has_creation_date();
    creation_date_ = creation_date;
  } else {
    clear_has_creation_date();
    creation_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string bibliography_format = 27;
inline bool SettingsArchive::has_bibliography_format() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void SettingsArchive::set_has_bibliography_format() {
  _has_bits_[0] |= 0x02000000u;
}
inline void SettingsArchive::clear_has_bibliography_format() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void SettingsArchive::clear_bibliography_format() {
  if (bibliography_format_ != &::google::protobuf::internal::kEmptyString) {
    bibliography_format_->clear();
  }
  clear_has_bibliography_format();
}
inline const ::std::string& SettingsArchive::bibliography_format() const {
  return *bibliography_format_;
}
inline void SettingsArchive::set_bibliography_format(const ::std::string& value) {
  set_has_bibliography_format();
  if (bibliography_format_ == &::google::protobuf::internal::kEmptyString) {
    bibliography_format_ = new ::std::string;
  }
  bibliography_format_->assign(value);
}
inline void SettingsArchive::set_bibliography_format(const char* value) {
  set_has_bibliography_format();
  if (bibliography_format_ == &::google::protobuf::internal::kEmptyString) {
    bibliography_format_ = new ::std::string;
  }
  bibliography_format_->assign(value);
}
inline void SettingsArchive::set_bibliography_format(const char* value, size_t size) {
  set_has_bibliography_format();
  if (bibliography_format_ == &::google::protobuf::internal::kEmptyString) {
    bibliography_format_ = new ::std::string;
  }
  bibliography_format_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SettingsArchive::mutable_bibliography_format() {
  set_has_bibliography_format();
  if (bibliography_format_ == &::google::protobuf::internal::kEmptyString) {
    bibliography_format_ = new ::std::string;
  }
  return bibliography_format_;
}
inline ::std::string* SettingsArchive::release_bibliography_format() {
  clear_has_bibliography_format();
  if (bibliography_format_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bibliography_format_;
    bibliography_format_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SettingsArchive::set_allocated_bibliography_format(::std::string* bibliography_format) {
  if (bibliography_format_ != &::google::protobuf::internal::kEmptyString) {
    delete bibliography_format_;
  }
  if (bibliography_format) {
    set_has_bibliography_format();
    bibliography_format_ = bibliography_format;
  } else {
    clear_has_bibliography_format();
    bibliography_format_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .TP.SettingsArchive.FootnoteKind footnote_kind = 30;
inline bool SettingsArchive::has_footnote_kind() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void SettingsArchive::set_has_footnote_kind() {
  _has_bits_[0] |= 0x04000000u;
}
inline void SettingsArchive::clear_has_footnote_kind() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void SettingsArchive::clear_footnote_kind() {
  footnote_kind_ = 0;
  clear_has_footnote_kind();
}
inline ::TP::SettingsArchive_FootnoteKind SettingsArchive::footnote_kind() const {
  return static_cast< ::TP::SettingsArchive_FootnoteKind >(footnote_kind_);
}
inline void SettingsArchive::set_footnote_kind(::TP::SettingsArchive_FootnoteKind value) {
  assert(::TP::SettingsArchive_FootnoteKind_IsValid(value));
  set_has_footnote_kind();
  footnote_kind_ = value;
}

// optional .TP.SettingsArchive.FootnoteFormat footnote_format = 31;
inline bool SettingsArchive::has_footnote_format() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void SettingsArchive::set_has_footnote_format() {
  _has_bits_[0] |= 0x08000000u;
}
inline void SettingsArchive::clear_has_footnote_format() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void SettingsArchive::clear_footnote_format() {
  footnote_format_ = 0;
  clear_has_footnote_format();
}
inline ::TP::SettingsArchive_FootnoteFormat SettingsArchive::footnote_format() const {
  return static_cast< ::TP::SettingsArchive_FootnoteFormat >(footnote_format_);
}
inline void SettingsArchive::set_footnote_format(::TP::SettingsArchive_FootnoteFormat value) {
  assert(::TP::SettingsArchive_FootnoteFormat_IsValid(value));
  set_has_footnote_format();
  footnote_format_ = value;
}

// optional .TP.SettingsArchive.FootnoteNumbering footnote_numbering = 32;
inline bool SettingsArchive::has_footnote_numbering() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void SettingsArchive::set_has_footnote_numbering() {
  _has_bits_[0] |= 0x10000000u;
}
inline void SettingsArchive::clear_has_footnote_numbering() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void SettingsArchive::clear_footnote_numbering() {
  footnote_numbering_ = 0;
  clear_has_footnote_numbering();
}
inline ::TP::SettingsArchive_FootnoteNumbering SettingsArchive::footnote_numbering() const {
  return static_cast< ::TP::SettingsArchive_FootnoteNumbering >(footnote_numbering_);
}
inline void SettingsArchive::set_footnote_numbering(::TP::SettingsArchive_FootnoteNumbering value) {
  assert(::TP::SettingsArchive_FootnoteNumbering_IsValid(value));
  set_has_footnote_numbering();
  footnote_numbering_ = value;
}

// optional int32 footnote_gap = 33;
inline bool SettingsArchive::has_footnote_gap() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void SettingsArchive::set_has_footnote_gap() {
  _has_bits_[0] |= 0x20000000u;
}
inline void SettingsArchive::clear_has_footnote_gap() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void SettingsArchive::clear_footnote_gap() {
  footnote_gap_ = 0;
  clear_has_footnote_gap();
}
inline ::google::protobuf::int32 SettingsArchive::footnote_gap() const {
  return footnote_gap_;
}
inline void SettingsArchive::set_footnote_gap(::google::protobuf::int32 value) {
  set_has_footnote_gap();
  footnote_gap_ = value;
}

// optional bool section_authoring = 40 [default = false];
inline bool SettingsArchive::has_section_authoring() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void SettingsArchive::set_has_section_authoring() {
  _has_bits_[0] |= 0x40000000u;
}
inline void SettingsArchive::clear_has_section_authoring() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void SettingsArchive::clear_section_authoring() {
  section_authoring_ = false;
  clear_has_section_authoring();
}
inline bool SettingsArchive::section_authoring() const {
  return section_authoring_;
}
inline void SettingsArchive::set_section_authoring(bool value) {
  set_has_section_authoring();
  section_authoring_ = value;
}

// -------------------------------------------------------------------

// PlaceholderArchive

// required .TSWP.ShapeInfoArchive super = 1;
inline bool PlaceholderArchive::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlaceholderArchive::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlaceholderArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlaceholderArchive::clear_super() {
  if (super_ != NULL) super_->::TSWP::ShapeInfoArchive::Clear();
  clear_has_super();
}
inline const ::TSWP::ShapeInfoArchive& PlaceholderArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSWP::ShapeInfoArchive* PlaceholderArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSWP::ShapeInfoArchive;
  return super_;
}
inline ::TSWP::ShapeInfoArchive* PlaceholderArchive::release_super() {
  clear_has_super();
  ::TSWP::ShapeInfoArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void PlaceholderArchive::set_allocated_super(::TSWP::ShapeInfoArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// -------------------------------------------------------------------

// FloatingDrawablesArchive_DrawableEntry

// optional .TSP.Reference drawable = 1;
inline bool FloatingDrawablesArchive_DrawableEntry::has_drawable() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FloatingDrawablesArchive_DrawableEntry::set_has_drawable() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FloatingDrawablesArchive_DrawableEntry::clear_has_drawable() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FloatingDrawablesArchive_DrawableEntry::clear_drawable() {
  if (drawable_ != NULL) drawable_->::TSP::Reference::Clear();
  clear_has_drawable();
}
inline const ::TSP::Reference& FloatingDrawablesArchive_DrawableEntry::drawable() const {
  return drawable_ != NULL ? *drawable_ : *default_instance_->drawable_;
}
inline ::TSP::Reference* FloatingDrawablesArchive_DrawableEntry::mutable_drawable() {
  set_has_drawable();
  if (drawable_ == NULL) drawable_ = new ::TSP::Reference;
  return drawable_;
}
inline ::TSP::Reference* FloatingDrawablesArchive_DrawableEntry::release_drawable() {
  clear_has_drawable();
  ::TSP::Reference* temp = drawable_;
  drawable_ = NULL;
  return temp;
}
inline void FloatingDrawablesArchive_DrawableEntry::set_allocated_drawable(::TSP::Reference* drawable) {
  delete drawable_;
  drawable_ = drawable;
  if (drawable) {
    set_has_drawable();
  } else {
    clear_has_drawable();
  }
}

// -------------------------------------------------------------------

// FloatingDrawablesArchive_PageGroup

// required uint32 page_index = 1;
inline bool FloatingDrawablesArchive_PageGroup::has_page_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FloatingDrawablesArchive_PageGroup::set_has_page_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FloatingDrawablesArchive_PageGroup::clear_has_page_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FloatingDrawablesArchive_PageGroup::clear_page_index() {
  page_index_ = 0u;
  clear_has_page_index();
}
inline ::google::protobuf::uint32 FloatingDrawablesArchive_PageGroup::page_index() const {
  return page_index_;
}
inline void FloatingDrawablesArchive_PageGroup::set_page_index(::google::protobuf::uint32 value) {
  set_has_page_index();
  page_index_ = value;
}

// repeated .TP.FloatingDrawablesArchive.DrawableEntry background_drawables = 2;
inline int FloatingDrawablesArchive_PageGroup::background_drawables_size() const {
  return background_drawables_.size();
}
inline void FloatingDrawablesArchive_PageGroup::clear_background_drawables() {
  background_drawables_.Clear();
}
inline const ::TP::FloatingDrawablesArchive_DrawableEntry& FloatingDrawablesArchive_PageGroup::background_drawables(int index) const {
  return background_drawables_.Get(index);
}
inline ::TP::FloatingDrawablesArchive_DrawableEntry* FloatingDrawablesArchive_PageGroup::mutable_background_drawables(int index) {
  return background_drawables_.Mutable(index);
}
inline ::TP::FloatingDrawablesArchive_DrawableEntry* FloatingDrawablesArchive_PageGroup::add_background_drawables() {
  return background_drawables_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TP::FloatingDrawablesArchive_DrawableEntry >&
FloatingDrawablesArchive_PageGroup::background_drawables() const {
  return background_drawables_;
}
inline ::google::protobuf::RepeatedPtrField< ::TP::FloatingDrawablesArchive_DrawableEntry >*
FloatingDrawablesArchive_PageGroup::mutable_background_drawables() {
  return &background_drawables_;
}

// repeated .TP.FloatingDrawablesArchive.DrawableEntry foreground_drawables = 3;
inline int FloatingDrawablesArchive_PageGroup::foreground_drawables_size() const {
  return foreground_drawables_.size();
}
inline void FloatingDrawablesArchive_PageGroup::clear_foreground_drawables() {
  foreground_drawables_.Clear();
}
inline const ::TP::FloatingDrawablesArchive_DrawableEntry& FloatingDrawablesArchive_PageGroup::foreground_drawables(int index) const {
  return foreground_drawables_.Get(index);
}
inline ::TP::FloatingDrawablesArchive_DrawableEntry* FloatingDrawablesArchive_PageGroup::mutable_foreground_drawables(int index) {
  return foreground_drawables_.Mutable(index);
}
inline ::TP::FloatingDrawablesArchive_DrawableEntry* FloatingDrawablesArchive_PageGroup::add_foreground_drawables() {
  return foreground_drawables_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TP::FloatingDrawablesArchive_DrawableEntry >&
FloatingDrawablesArchive_PageGroup::foreground_drawables() const {
  return foreground_drawables_;
}
inline ::google::protobuf::RepeatedPtrField< ::TP::FloatingDrawablesArchive_DrawableEntry >*
FloatingDrawablesArchive_PageGroup::mutable_foreground_drawables() {
  return &foreground_drawables_;
}

// repeated .TP.FloatingDrawablesArchive.DrawableEntry drawables = 4;
inline int FloatingDrawablesArchive_PageGroup::drawables_size() const {
  return drawables_.size();
}
inline void FloatingDrawablesArchive_PageGroup::clear_drawables() {
  drawables_.Clear();
}
inline const ::TP::FloatingDrawablesArchive_DrawableEntry& FloatingDrawablesArchive_PageGroup::drawables(int index) const {
  return drawables_.Get(index);
}
inline ::TP::FloatingDrawablesArchive_DrawableEntry* FloatingDrawablesArchive_PageGroup::mutable_drawables(int index) {
  return drawables_.Mutable(index);
}
inline ::TP::FloatingDrawablesArchive_DrawableEntry* FloatingDrawablesArchive_PageGroup::add_drawables() {
  return drawables_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TP::FloatingDrawablesArchive_DrawableEntry >&
FloatingDrawablesArchive_PageGroup::drawables() const {
  return drawables_;
}
inline ::google::protobuf::RepeatedPtrField< ::TP::FloatingDrawablesArchive_DrawableEntry >*
FloatingDrawablesArchive_PageGroup::mutable_drawables() {
  return &drawables_;
}

// -------------------------------------------------------------------

// FloatingDrawablesArchive

// repeated .TP.FloatingDrawablesArchive.PageGroup page_groups = 1;
inline int FloatingDrawablesArchive::page_groups_size() const {
  return page_groups_.size();
}
inline void FloatingDrawablesArchive::clear_page_groups() {
  page_groups_.Clear();
}
inline const ::TP::FloatingDrawablesArchive_PageGroup& FloatingDrawablesArchive::page_groups(int index) const {
  return page_groups_.Get(index);
}
inline ::TP::FloatingDrawablesArchive_PageGroup* FloatingDrawablesArchive::mutable_page_groups(int index) {
  return page_groups_.Mutable(index);
}
inline ::TP::FloatingDrawablesArchive_PageGroup* FloatingDrawablesArchive::add_page_groups() {
  return page_groups_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TP::FloatingDrawablesArchive_PageGroup >&
FloatingDrawablesArchive::page_groups() const {
  return page_groups_;
}
inline ::google::protobuf::RepeatedPtrField< ::TP::FloatingDrawablesArchive_PageGroup >*
FloatingDrawablesArchive::mutable_page_groups() {
  return &page_groups_;
}

// -------------------------------------------------------------------

// DrawablesZOrderArchive

// repeated .TSP.Reference drawables = 1;
inline int DrawablesZOrderArchive::drawables_size() const {
  return drawables_.size();
}
inline void DrawablesZOrderArchive::clear_drawables() {
  drawables_.Clear();
}
inline const ::TSP::Reference& DrawablesZOrderArchive::drawables(int index) const {
  return drawables_.Get(index);
}
inline ::TSP::Reference* DrawablesZOrderArchive::mutable_drawables(int index) {
  return drawables_.Mutable(index);
}
inline ::TSP::Reference* DrawablesZOrderArchive::add_drawables() {
  return drawables_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
DrawablesZOrderArchive::drawables() const {
  return drawables_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
DrawablesZOrderArchive::mutable_drawables() {
  return &drawables_;
}

// -------------------------------------------------------------------

// PageMasterArchive

// repeated .TSP.Reference headers = 1;
inline int PageMasterArchive::headers_size() const {
  return headers_.size();
}
inline void PageMasterArchive::clear_headers() {
  headers_.Clear();
}
inline const ::TSP::Reference& PageMasterArchive::headers(int index) const {
  return headers_.Get(index);
}
inline ::TSP::Reference* PageMasterArchive::mutable_headers(int index) {
  return headers_.Mutable(index);
}
inline ::TSP::Reference* PageMasterArchive::add_headers() {
  return headers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
PageMasterArchive::headers() const {
  return headers_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
PageMasterArchive::mutable_headers() {
  return &headers_;
}

// repeated .TSP.Reference footers = 2;
inline int PageMasterArchive::footers_size() const {
  return footers_.size();
}
inline void PageMasterArchive::clear_footers() {
  footers_.Clear();
}
inline const ::TSP::Reference& PageMasterArchive::footers(int index) const {
  return footers_.Get(index);
}
inline ::TSP::Reference* PageMasterArchive::mutable_footers(int index) {
  return footers_.Mutable(index);
}
inline ::TSP::Reference* PageMasterArchive::add_footers() {
  return footers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
PageMasterArchive::footers() const {
  return footers_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
PageMasterArchive::mutable_footers() {
  return &footers_;
}

// repeated .TSP.Reference master_drawables = 3;
inline int PageMasterArchive::master_drawables_size() const {
  return master_drawables_.size();
}
inline void PageMasterArchive::clear_master_drawables() {
  master_drawables_.Clear();
}
inline const ::TSP::Reference& PageMasterArchive::master_drawables(int index) const {
  return master_drawables_.Get(index);
}
inline ::TSP::Reference* PageMasterArchive::mutable_master_drawables(int index) {
  return master_drawables_.Mutable(index);
}
inline ::TSP::Reference* PageMasterArchive::add_master_drawables() {
  return master_drawables_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
PageMasterArchive::master_drawables() const {
  return master_drawables_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
PageMasterArchive::mutable_master_drawables() {
  return &master_drawables_;
}

// -------------------------------------------------------------------

// SectionArchive

// optional bool OBSOLETE_shows_header = 1;
inline bool SectionArchive::has_obsolete_shows_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SectionArchive::set_has_obsolete_shows_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SectionArchive::clear_has_obsolete_shows_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SectionArchive::clear_obsolete_shows_header() {
  obsolete_shows_header_ = false;
  clear_has_obsolete_shows_header();
}
inline bool SectionArchive::obsolete_shows_header() const {
  return obsolete_shows_header_;
}
inline void SectionArchive::set_obsolete_shows_header(bool value) {
  set_has_obsolete_shows_header();
  obsolete_shows_header_ = value;
}

// optional bool OBSOLETE_shows_footer = 2;
inline bool SectionArchive::has_obsolete_shows_footer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SectionArchive::set_has_obsolete_shows_footer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SectionArchive::clear_has_obsolete_shows_footer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SectionArchive::clear_obsolete_shows_footer() {
  obsolete_shows_footer_ = false;
  clear_has_obsolete_shows_footer();
}
inline bool SectionArchive::obsolete_shows_footer() const {
  return obsolete_shows_footer_;
}
inline void SectionArchive::set_obsolete_shows_footer(bool value) {
  set_has_obsolete_shows_footer();
  obsolete_shows_footer_ = value;
}

// repeated .TSP.Reference OBSOLETE_headers = 3;
inline int SectionArchive::obsolete_headers_size() const {
  return obsolete_headers_.size();
}
inline void SectionArchive::clear_obsolete_headers() {
  obsolete_headers_.Clear();
}
inline const ::TSP::Reference& SectionArchive::obsolete_headers(int index) const {
  return obsolete_headers_.Get(index);
}
inline ::TSP::Reference* SectionArchive::mutable_obsolete_headers(int index) {
  return obsolete_headers_.Mutable(index);
}
inline ::TSP::Reference* SectionArchive::add_obsolete_headers() {
  return obsolete_headers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
SectionArchive::obsolete_headers() const {
  return obsolete_headers_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
SectionArchive::mutable_obsolete_headers() {
  return &obsolete_headers_;
}

// repeated .TSP.Reference OBSOLETE_footers = 4;
inline int SectionArchive::obsolete_footers_size() const {
  return obsolete_footers_.size();
}
inline void SectionArchive::clear_obsolete_footers() {
  obsolete_footers_.Clear();
}
inline const ::TSP::Reference& SectionArchive::obsolete_footers(int index) const {
  return obsolete_footers_.Get(index);
}
inline ::TSP::Reference* SectionArchive::mutable_obsolete_footers(int index) {
  return obsolete_footers_.Mutable(index);
}
inline ::TSP::Reference* SectionArchive::add_obsolete_footers() {
  return obsolete_footers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
SectionArchive::obsolete_footers() const {
  return obsolete_footers_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
SectionArchive::mutable_obsolete_footers() {
  return &obsolete_footers_;
}

// optional float OBSOLETE_left_margin = 5;
inline bool SectionArchive::has_obsolete_left_margin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SectionArchive::set_has_obsolete_left_margin() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SectionArchive::clear_has_obsolete_left_margin() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SectionArchive::clear_obsolete_left_margin() {
  obsolete_left_margin_ = 0;
  clear_has_obsolete_left_margin();
}
inline float SectionArchive::obsolete_left_margin() const {
  return obsolete_left_margin_;
}
inline void SectionArchive::set_obsolete_left_margin(float value) {
  set_has_obsolete_left_margin();
  obsolete_left_margin_ = value;
}

// optional float OBSOLETE_right_margin = 6;
inline bool SectionArchive::has_obsolete_right_margin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SectionArchive::set_has_obsolete_right_margin() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SectionArchive::clear_has_obsolete_right_margin() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SectionArchive::clear_obsolete_right_margin() {
  obsolete_right_margin_ = 0;
  clear_has_obsolete_right_margin();
}
inline float SectionArchive::obsolete_right_margin() const {
  return obsolete_right_margin_;
}
inline void SectionArchive::set_obsolete_right_margin(float value) {
  set_has_obsolete_right_margin();
  obsolete_right_margin_ = value;
}

// optional float OBSOLETE_top_margin = 7;
inline bool SectionArchive::has_obsolete_top_margin() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SectionArchive::set_has_obsolete_top_margin() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SectionArchive::clear_has_obsolete_top_margin() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SectionArchive::clear_obsolete_top_margin() {
  obsolete_top_margin_ = 0;
  clear_has_obsolete_top_margin();
}
inline float SectionArchive::obsolete_top_margin() const {
  return obsolete_top_margin_;
}
inline void SectionArchive::set_obsolete_top_margin(float value) {
  set_has_obsolete_top_margin();
  obsolete_top_margin_ = value;
}

// optional float OBSOLETE_bottom_margin = 8;
inline bool SectionArchive::has_obsolete_bottom_margin() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SectionArchive::set_has_obsolete_bottom_margin() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SectionArchive::clear_has_obsolete_bottom_margin() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SectionArchive::clear_obsolete_bottom_margin() {
  obsolete_bottom_margin_ = 0;
  clear_has_obsolete_bottom_margin();
}
inline float SectionArchive::obsolete_bottom_margin() const {
  return obsolete_bottom_margin_;
}
inline void SectionArchive::set_obsolete_bottom_margin(float value) {
  set_has_obsolete_bottom_margin();
  obsolete_bottom_margin_ = value;
}

// optional float OBSOLETE_header_padding = 9;
inline bool SectionArchive::has_obsolete_header_padding() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SectionArchive::set_has_obsolete_header_padding() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SectionArchive::clear_has_obsolete_header_padding() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SectionArchive::clear_obsolete_header_padding() {
  obsolete_header_padding_ = 0;
  clear_has_obsolete_header_padding();
}
inline float SectionArchive::obsolete_header_padding() const {
  return obsolete_header_padding_;
}
inline void SectionArchive::set_obsolete_header_padding(float value) {
  set_has_obsolete_header_padding();
  obsolete_header_padding_ = value;
}

// optional float OBSOLETE_footer_padding = 10;
inline bool SectionArchive::has_obsolete_footer_padding() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SectionArchive::set_has_obsolete_footer_padding() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SectionArchive::clear_has_obsolete_footer_padding() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SectionArchive::clear_obsolete_footer_padding() {
  obsolete_footer_padding_ = 0;
  clear_has_obsolete_footer_padding();
}
inline float SectionArchive::obsolete_footer_padding() const {
  return obsolete_footer_padding_;
}
inline void SectionArchive::set_obsolete_footer_padding(float value) {
  set_has_obsolete_footer_padding();
  obsolete_footer_padding_ = value;
}

// optional float OBSOLETE_paper_width = 11;
inline bool SectionArchive::has_obsolete_paper_width() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SectionArchive::set_has_obsolete_paper_width() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SectionArchive::clear_has_obsolete_paper_width() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SectionArchive::clear_obsolete_paper_width() {
  obsolete_paper_width_ = 0;
  clear_has_obsolete_paper_width();
}
inline float SectionArchive::obsolete_paper_width() const {
  return obsolete_paper_width_;
}
inline void SectionArchive::set_obsolete_paper_width(float value) {
  set_has_obsolete_paper_width();
  obsolete_paper_width_ = value;
}

// optional float OBSOLETE_paper_height = 12;
inline bool SectionArchive::has_obsolete_paper_height() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SectionArchive::set_has_obsolete_paper_height() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SectionArchive::clear_has_obsolete_paper_height() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SectionArchive::clear_obsolete_paper_height() {
  obsolete_paper_height_ = 0;
  clear_has_obsolete_paper_height();
}
inline float SectionArchive::obsolete_paper_height() const {
  return obsolete_paper_height_;
}
inline void SectionArchive::set_obsolete_paper_height(float value) {
  set_has_obsolete_paper_height();
  obsolete_paper_height_ = value;
}

// optional bool OBSOLETE_landscape_mode = 13;
inline bool SectionArchive::has_obsolete_landscape_mode() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SectionArchive::set_has_obsolete_landscape_mode() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SectionArchive::clear_has_obsolete_landscape_mode() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SectionArchive::clear_obsolete_landscape_mode() {
  obsolete_landscape_mode_ = false;
  clear_has_obsolete_landscape_mode();
}
inline bool SectionArchive::obsolete_landscape_mode() const {
  return obsolete_landscape_mode_;
}
inline void SectionArchive::set_obsolete_landscape_mode(bool value) {
  set_has_obsolete_landscape_mode();
  obsolete_landscape_mode_ = value;
}

// repeated .TSP.Reference OBSOLETE_master_drawables = 14;
inline int SectionArchive::obsolete_master_drawables_size() const {
  return obsolete_master_drawables_.size();
}
inline void SectionArchive::clear_obsolete_master_drawables() {
  obsolete_master_drawables_.Clear();
}
inline const ::TSP::Reference& SectionArchive::obsolete_master_drawables(int index) const {
  return obsolete_master_drawables_.Get(index);
}
inline ::TSP::Reference* SectionArchive::mutable_obsolete_master_drawables(int index) {
  return obsolete_master_drawables_.Mutable(index);
}
inline ::TSP::Reference* SectionArchive::add_obsolete_master_drawables() {
  return obsolete_master_drawables_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
SectionArchive::obsolete_master_drawables() const {
  return obsolete_master_drawables_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
SectionArchive::mutable_obsolete_master_drawables() {
  return &obsolete_master_drawables_;
}

// optional float OBSOLETE_header_margin = 15;
inline bool SectionArchive::has_obsolete_header_margin() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SectionArchive::set_has_obsolete_header_margin() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SectionArchive::clear_has_obsolete_header_margin() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SectionArchive::clear_obsolete_header_margin() {
  obsolete_header_margin_ = 0;
  clear_has_obsolete_header_margin();
}
inline float SectionArchive::obsolete_header_margin() const {
  return obsolete_header_margin_;
}
inline void SectionArchive::set_obsolete_header_margin(float value) {
  set_has_obsolete_header_margin();
  obsolete_header_margin_ = value;
}

// optional float OBSOLETE_footer_margin = 16;
inline bool SectionArchive::has_obsolete_footer_margin() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SectionArchive::set_has_obsolete_footer_margin() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SectionArchive::clear_has_obsolete_footer_margin() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SectionArchive::clear_obsolete_footer_margin() {
  obsolete_footer_margin_ = 0;
  clear_has_obsolete_footer_margin();
}
inline float SectionArchive::obsolete_footer_margin() const {
  return obsolete_footer_margin_;
}
inline void SectionArchive::set_obsolete_footer_margin(float value) {
  set_has_obsolete_footer_margin();
  obsolete_footer_margin_ = value;
}

// optional bool inherit_previous_header_footer = 17;
inline bool SectionArchive::has_inherit_previous_header_footer() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SectionArchive::set_has_inherit_previous_header_footer() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SectionArchive::clear_has_inherit_previous_header_footer() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SectionArchive::clear_inherit_previous_header_footer() {
  inherit_previous_header_footer_ = false;
  clear_has_inherit_previous_header_footer();
}
inline bool SectionArchive::inherit_previous_header_footer() const {
  return inherit_previous_header_footer_;
}
inline void SectionArchive::set_inherit_previous_header_footer(bool value) {
  set_has_inherit_previous_header_footer();
  inherit_previous_header_footer_ = value;
}

// optional bool page_master_first_page_different = 18;
inline bool SectionArchive::has_page_master_first_page_different() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SectionArchive::set_has_page_master_first_page_different() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SectionArchive::clear_has_page_master_first_page_different() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SectionArchive::clear_page_master_first_page_different() {
  page_master_first_page_different_ = false;
  clear_has_page_master_first_page_different();
}
inline bool SectionArchive::page_master_first_page_different() const {
  return page_master_first_page_different_;
}
inline void SectionArchive::set_page_master_first_page_different(bool value) {
  set_has_page_master_first_page_different();
  page_master_first_page_different_ = value;
}

// optional bool page_master_even_odd_pages_different = 19;
inline bool SectionArchive::has_page_master_even_odd_pages_different() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SectionArchive::set_has_page_master_even_odd_pages_different() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SectionArchive::clear_has_page_master_even_odd_pages_different() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SectionArchive::clear_page_master_even_odd_pages_different() {
  page_master_even_odd_pages_different_ = false;
  clear_has_page_master_even_odd_pages_different();
}
inline bool SectionArchive::page_master_even_odd_pages_different() const {
  return page_master_even_odd_pages_different_;
}
inline void SectionArchive::set_page_master_even_odd_pages_different(bool value) {
  set_has_page_master_even_odd_pages_different();
  page_master_even_odd_pages_different_ = value;
}

// optional uint32 section_start_kind = 20;
inline bool SectionArchive::has_section_start_kind() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SectionArchive::set_has_section_start_kind() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SectionArchive::clear_has_section_start_kind() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SectionArchive::clear_section_start_kind() {
  section_start_kind_ = 0u;
  clear_has_section_start_kind();
}
inline ::google::protobuf::uint32 SectionArchive::section_start_kind() const {
  return section_start_kind_;
}
inline void SectionArchive::set_section_start_kind(::google::protobuf::uint32 value) {
  set_has_section_start_kind();
  section_start_kind_ = value;
}

// optional uint32 section_page_number_kind = 21;
inline bool SectionArchive::has_section_page_number_kind() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SectionArchive::set_has_section_page_number_kind() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SectionArchive::clear_has_section_page_number_kind() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SectionArchive::clear_section_page_number_kind() {
  section_page_number_kind_ = 0u;
  clear_has_section_page_number_kind();
}
inline ::google::protobuf::uint32 SectionArchive::section_page_number_kind() const {
  return section_page_number_kind_;
}
inline void SectionArchive::set_section_page_number_kind(::google::protobuf::uint32 value) {
  set_has_section_page_number_kind();
  section_page_number_kind_ = value;
}

// optional uint32 section_page_number_start = 22;
inline bool SectionArchive::has_section_page_number_start() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SectionArchive::set_has_section_page_number_start() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SectionArchive::clear_has_section_page_number_start() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SectionArchive::clear_section_page_number_start() {
  section_page_number_start_ = 0u;
  clear_has_section_page_number_start();
}
inline ::google::protobuf::uint32 SectionArchive::section_page_number_start() const {
  return section_page_number_start_;
}
inline void SectionArchive::set_section_page_number_start(::google::protobuf::uint32 value) {
  set_has_section_page_number_start();
  section_page_number_start_ = value;
}

// optional .TSP.Reference first_page_master = 23;
inline bool SectionArchive::has_first_page_master() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SectionArchive::set_has_first_page_master() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SectionArchive::clear_has_first_page_master() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SectionArchive::clear_first_page_master() {
  if (first_page_master_ != NULL) first_page_master_->::TSP::Reference::Clear();
  clear_has_first_page_master();
}
inline const ::TSP::Reference& SectionArchive::first_page_master() const {
  return first_page_master_ != NULL ? *first_page_master_ : *default_instance_->first_page_master_;
}
inline ::TSP::Reference* SectionArchive::mutable_first_page_master() {
  set_has_first_page_master();
  if (first_page_master_ == NULL) first_page_master_ = new ::TSP::Reference;
  return first_page_master_;
}
inline ::TSP::Reference* SectionArchive::release_first_page_master() {
  clear_has_first_page_master();
  ::TSP::Reference* temp = first_page_master_;
  first_page_master_ = NULL;
  return temp;
}
inline void SectionArchive::set_allocated_first_page_master(::TSP::Reference* first_page_master) {
  delete first_page_master_;
  first_page_master_ = first_page_master;
  if (first_page_master) {
    set_has_first_page_master();
  } else {
    clear_has_first_page_master();
  }
}

// optional .TSP.Reference even_page_master = 24;
inline bool SectionArchive::has_even_page_master() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SectionArchive::set_has_even_page_master() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SectionArchive::clear_has_even_page_master() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SectionArchive::clear_even_page_master() {
  if (even_page_master_ != NULL) even_page_master_->::TSP::Reference::Clear();
  clear_has_even_page_master();
}
inline const ::TSP::Reference& SectionArchive::even_page_master() const {
  return even_page_master_ != NULL ? *even_page_master_ : *default_instance_->even_page_master_;
}
inline ::TSP::Reference* SectionArchive::mutable_even_page_master() {
  set_has_even_page_master();
  if (even_page_master_ == NULL) even_page_master_ = new ::TSP::Reference;
  return even_page_master_;
}
inline ::TSP::Reference* SectionArchive::release_even_page_master() {
  clear_has_even_page_master();
  ::TSP::Reference* temp = even_page_master_;
  even_page_master_ = NULL;
  return temp;
}
inline void SectionArchive::set_allocated_even_page_master(::TSP::Reference* even_page_master) {
  delete even_page_master_;
  even_page_master_ = even_page_master;
  if (even_page_master) {
    set_has_even_page_master();
  } else {
    clear_has_even_page_master();
  }
}

// optional .TSP.Reference odd_page_master = 25;
inline bool SectionArchive::has_odd_page_master() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void SectionArchive::set_has_odd_page_master() {
  _has_bits_[0] |= 0x01000000u;
}
inline void SectionArchive::clear_has_odd_page_master() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void SectionArchive::clear_odd_page_master() {
  if (odd_page_master_ != NULL) odd_page_master_->::TSP::Reference::Clear();
  clear_has_odd_page_master();
}
inline const ::TSP::Reference& SectionArchive::odd_page_master() const {
  return odd_page_master_ != NULL ? *odd_page_master_ : *default_instance_->odd_page_master_;
}
inline ::TSP::Reference* SectionArchive::mutable_odd_page_master() {
  set_has_odd_page_master();
  if (odd_page_master_ == NULL) odd_page_master_ = new ::TSP::Reference;
  return odd_page_master_;
}
inline ::TSP::Reference* SectionArchive::release_odd_page_master() {
  clear_has_odd_page_master();
  ::TSP::Reference* temp = odd_page_master_;
  odd_page_master_ = NULL;
  return temp;
}
inline void SectionArchive::set_allocated_odd_page_master(::TSP::Reference* odd_page_master) {
  delete odd_page_master_;
  odd_page_master_ = odd_page_master;
  if (odd_page_master) {
    set_has_odd_page_master();
  } else {
    clear_has_odd_page_master();
  }
}

// optional string name = 26;
inline bool SectionArchive::has_name() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void SectionArchive::set_has_name() {
  _has_bits_[0] |= 0x02000000u;
}
inline void SectionArchive::clear_has_name() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void SectionArchive::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SectionArchive::name() const {
  return *name_;
}
inline void SectionArchive::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SectionArchive::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SectionArchive::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SectionArchive::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SectionArchive::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SectionArchive::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool page_master_first_page_hides_header_footer = 28;
inline bool SectionArchive::has_page_master_first_page_hides_header_footer() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void SectionArchive::set_has_page_master_first_page_hides_header_footer() {
  _has_bits_[0] |= 0x04000000u;
}
inline void SectionArchive::clear_has_page_master_first_page_hides_header_footer() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void SectionArchive::clear_page_master_first_page_hides_header_footer() {
  page_master_first_page_hides_header_footer_ = false;
  clear_has_page_master_first_page_hides_header_footer();
}
inline bool SectionArchive::page_master_first_page_hides_header_footer() const {
  return page_master_first_page_hides_header_footer_;
}
inline void SectionArchive::set_page_master_first_page_hides_header_footer(bool value) {
  set_has_page_master_first_page_hides_header_footer();
  page_master_first_page_hides_header_footer_ = value;
}

// -------------------------------------------------------------------

// AnchorPosArchive

// optional .TSP.Reference attachment = 1;
inline bool AnchorPosArchive::has_attachment() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AnchorPosArchive::set_has_attachment() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AnchorPosArchive::clear_has_attachment() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AnchorPosArchive::clear_attachment() {
  if (attachment_ != NULL) attachment_->::TSP::Reference::Clear();
  clear_has_attachment();
}
inline const ::TSP::Reference& AnchorPosArchive::attachment() const {
  return attachment_ != NULL ? *attachment_ : *default_instance_->attachment_;
}
inline ::TSP::Reference* AnchorPosArchive::mutable_attachment() {
  set_has_attachment();
  if (attachment_ == NULL) attachment_ = new ::TSP::Reference;
  return attachment_;
}
inline ::TSP::Reference* AnchorPosArchive::release_attachment() {
  clear_has_attachment();
  ::TSP::Reference* temp = attachment_;
  attachment_ = NULL;
  return temp;
}
inline void AnchorPosArchive::set_allocated_attachment(::TSP::Reference* attachment) {
  delete attachment_;
  attachment_ = attachment;
  if (attachment) {
    set_has_attachment();
  } else {
    clear_has_attachment();
  }
}

// optional .TSP.Point position = 2;
inline bool AnchorPosArchive::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AnchorPosArchive::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AnchorPosArchive::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AnchorPosArchive::clear_position() {
  if (position_ != NULL) position_->::TSP::Point::Clear();
  clear_has_position();
}
inline const ::TSP::Point& AnchorPosArchive::position() const {
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::TSP::Point* AnchorPosArchive::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::TSP::Point;
  return position_;
}
inline ::TSP::Point* AnchorPosArchive::release_position() {
  clear_has_position();
  ::TSP::Point* temp = position_;
  position_ = NULL;
  return temp;
}
inline void AnchorPosArchive::set_allocated_position(::TSP::Point* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
}

// -------------------------------------------------------------------

// TargetHintArchive

// optional .TSP.Point frame_origin = 1;
inline bool TargetHintArchive::has_frame_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TargetHintArchive::set_has_frame_origin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TargetHintArchive::clear_has_frame_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TargetHintArchive::clear_frame_origin() {
  if (frame_origin_ != NULL) frame_origin_->::TSP::Point::Clear();
  clear_has_frame_origin();
}
inline const ::TSP::Point& TargetHintArchive::frame_origin() const {
  return frame_origin_ != NULL ? *frame_origin_ : *default_instance_->frame_origin_;
}
inline ::TSP::Point* TargetHintArchive::mutable_frame_origin() {
  set_has_frame_origin();
  if (frame_origin_ == NULL) frame_origin_ = new ::TSP::Point;
  return frame_origin_;
}
inline ::TSP::Point* TargetHintArchive::release_frame_origin() {
  clear_has_frame_origin();
  ::TSP::Point* temp = frame_origin_;
  frame_origin_ = NULL;
  return temp;
}
inline void TargetHintArchive::set_allocated_frame_origin(::TSP::Point* frame_origin) {
  delete frame_origin_;
  frame_origin_ = frame_origin;
  if (frame_origin) {
    set_has_frame_origin();
  } else {
    clear_has_frame_origin();
  }
}

// optional .TSP.Size frame_size = 2;
inline bool TargetHintArchive::has_frame_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TargetHintArchive::set_has_frame_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TargetHintArchive::clear_has_frame_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TargetHintArchive::clear_frame_size() {
  if (frame_size_ != NULL) frame_size_->::TSP::Size::Clear();
  clear_has_frame_size();
}
inline const ::TSP::Size& TargetHintArchive::frame_size() const {
  return frame_size_ != NULL ? *frame_size_ : *default_instance_->frame_size_;
}
inline ::TSP::Size* TargetHintArchive::mutable_frame_size() {
  set_has_frame_size();
  if (frame_size_ == NULL) frame_size_ = new ::TSP::Size;
  return frame_size_;
}
inline ::TSP::Size* TargetHintArchive::release_frame_size() {
  clear_has_frame_size();
  ::TSP::Size* temp = frame_size_;
  frame_size_ = NULL;
  return temp;
}
inline void TargetHintArchive::set_allocated_frame_size(::TSP::Size* frame_size) {
  delete frame_size_;
  frame_size_ = frame_size;
  if (frame_size) {
    set_has_frame_size();
  } else {
    clear_has_frame_size();
  }
}

// optional .TSP.Range range = 3;
inline bool TargetHintArchive::has_range() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TargetHintArchive::set_has_range() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TargetHintArchive::clear_has_range() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TargetHintArchive::clear_range() {
  if (range_ != NULL) range_->::TSP::Range::Clear();
  clear_has_range();
}
inline const ::TSP::Range& TargetHintArchive::range() const {
  return range_ != NULL ? *range_ : *default_instance_->range_;
}
inline ::TSP::Range* TargetHintArchive::mutable_range() {
  set_has_range();
  if (range_ == NULL) range_ = new ::TSP::Range;
  return range_;
}
inline ::TSP::Range* TargetHintArchive::release_range() {
  clear_has_range();
  ::TSP::Range* temp = range_;
  range_ = NULL;
  return temp;
}
inline void TargetHintArchive::set_allocated_range(::TSP::Range* range) {
  delete range_;
  range_ = range;
  if (range) {
    set_has_range();
  } else {
    clear_has_range();
  }
}

// optional int32 next_widow_pulls_down_from_char_index = 4;
inline bool TargetHintArchive::has_next_widow_pulls_down_from_char_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TargetHintArchive::set_has_next_widow_pulls_down_from_char_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TargetHintArchive::clear_has_next_widow_pulls_down_from_char_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TargetHintArchive::clear_next_widow_pulls_down_from_char_index() {
  next_widow_pulls_down_from_char_index_ = 0;
  clear_has_next_widow_pulls_down_from_char_index();
}
inline ::google::protobuf::int32 TargetHintArchive::next_widow_pulls_down_from_char_index() const {
  return next_widow_pulls_down_from_char_index_;
}
inline void TargetHintArchive::set_next_widow_pulls_down_from_char_index(::google::protobuf::int32 value) {
  set_has_next_widow_pulls_down_from_char_index();
  next_widow_pulls_down_from_char_index_ = value;
}

// optional .TSP.Range anchored_range = 5;
inline bool TargetHintArchive::has_anchored_range() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TargetHintArchive::set_has_anchored_range() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TargetHintArchive::clear_has_anchored_range() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TargetHintArchive::clear_anchored_range() {
  if (anchored_range_ != NULL) anchored_range_->::TSP::Range::Clear();
  clear_has_anchored_range();
}
inline const ::TSP::Range& TargetHintArchive::anchored_range() const {
  return anchored_range_ != NULL ? *anchored_range_ : *default_instance_->anchored_range_;
}
inline ::TSP::Range* TargetHintArchive::mutable_anchored_range() {
  set_has_anchored_range();
  if (anchored_range_ == NULL) anchored_range_ = new ::TSP::Range;
  return anchored_range_;
}
inline ::TSP::Range* TargetHintArchive::release_anchored_range() {
  clear_has_anchored_range();
  ::TSP::Range* temp = anchored_range_;
  anchored_range_ = NULL;
  return temp;
}
inline void TargetHintArchive::set_allocated_anchored_range(::TSP::Range* anchored_range) {
  delete anchored_range_;
  anchored_range_ = anchored_range;
  if (anchored_range) {
    set_has_anchored_range();
  } else {
    clear_has_anchored_range();
  }
}

// optional int32 column_count = 6;
inline bool TargetHintArchive::has_column_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TargetHintArchive::set_has_column_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TargetHintArchive::clear_has_column_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TargetHintArchive::clear_column_count() {
  column_count_ = 0;
  clear_has_column_count();
}
inline ::google::protobuf::int32 TargetHintArchive::column_count() const {
  return column_count_;
}
inline void TargetHintArchive::set_column_count(::google::protobuf::int32 value) {
  set_has_column_count();
  column_count_ = value;
}

// -------------------------------------------------------------------

// PageHintArchive

// optional .TP.PageHintArchive.PageKind page_kind = 1;
inline bool PageHintArchive::has_page_kind() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PageHintArchive::set_has_page_kind() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PageHintArchive::clear_has_page_kind() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PageHintArchive::clear_page_kind() {
  page_kind_ = 0;
  clear_has_page_kind();
}
inline ::TP::PageHintArchive_PageKind PageHintArchive::page_kind() const {
  return static_cast< ::TP::PageHintArchive_PageKind >(page_kind_);
}
inline void PageHintArchive::set_page_kind(::TP::PageHintArchive_PageKind value) {
  assert(::TP::PageHintArchive_PageKind_IsValid(value));
  set_has_page_kind();
  page_kind_ = value;
}

// repeated .TP.TargetHintArchive target_hints = 2;
inline int PageHintArchive::target_hints_size() const {
  return target_hints_.size();
}
inline void PageHintArchive::clear_target_hints() {
  target_hints_.Clear();
}
inline const ::TP::TargetHintArchive& PageHintArchive::target_hints(int index) const {
  return target_hints_.Get(index);
}
inline ::TP::TargetHintArchive* PageHintArchive::mutable_target_hints(int index) {
  return target_hints_.Mutable(index);
}
inline ::TP::TargetHintArchive* PageHintArchive::add_target_hints() {
  return target_hints_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TP::TargetHintArchive >&
PageHintArchive::target_hints() const {
  return target_hints_;
}
inline ::google::protobuf::RepeatedPtrField< ::TP::TargetHintArchive >*
PageHintArchive::mutable_target_hints() {
  return &target_hints_;
}

// optional .TSP.Range footnote_auto_number_range = 3;
inline bool PageHintArchive::has_footnote_auto_number_range() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PageHintArchive::set_has_footnote_auto_number_range() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PageHintArchive::clear_has_footnote_auto_number_range() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PageHintArchive::clear_footnote_auto_number_range() {
  if (footnote_auto_number_range_ != NULL) footnote_auto_number_range_->::TSP::Range::Clear();
  clear_has_footnote_auto_number_range();
}
inline const ::TSP::Range& PageHintArchive::footnote_auto_number_range() const {
  return footnote_auto_number_range_ != NULL ? *footnote_auto_number_range_ : *default_instance_->footnote_auto_number_range_;
}
inline ::TSP::Range* PageHintArchive::mutable_footnote_auto_number_range() {
  set_has_footnote_auto_number_range();
  if (footnote_auto_number_range_ == NULL) footnote_auto_number_range_ = new ::TSP::Range;
  return footnote_auto_number_range_;
}
inline ::TSP::Range* PageHintArchive::release_footnote_auto_number_range() {
  clear_has_footnote_auto_number_range();
  ::TSP::Range* temp = footnote_auto_number_range_;
  footnote_auto_number_range_ = NULL;
  return temp;
}
inline void PageHintArchive::set_allocated_footnote_auto_number_range(::TSP::Range* footnote_auto_number_range) {
  delete footnote_auto_number_range_;
  footnote_auto_number_range_ = footnote_auto_number_range;
  if (footnote_auto_number_range) {
    set_has_footnote_auto_number_range();
  } else {
    clear_has_footnote_auto_number_range();
  }
}

// optional .TSP.Range footnote_layout_range = 4;
inline bool PageHintArchive::has_footnote_layout_range() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PageHintArchive::set_has_footnote_layout_range() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PageHintArchive::clear_has_footnote_layout_range() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PageHintArchive::clear_footnote_layout_range() {
  if (footnote_layout_range_ != NULL) footnote_layout_range_->::TSP::Range::Clear();
  clear_has_footnote_layout_range();
}
inline const ::TSP::Range& PageHintArchive::footnote_layout_range() const {
  return footnote_layout_range_ != NULL ? *footnote_layout_range_ : *default_instance_->footnote_layout_range_;
}
inline ::TSP::Range* PageHintArchive::mutable_footnote_layout_range() {
  set_has_footnote_layout_range();
  if (footnote_layout_range_ == NULL) footnote_layout_range_ = new ::TSP::Range;
  return footnote_layout_range_;
}
inline ::TSP::Range* PageHintArchive::release_footnote_layout_range() {
  clear_has_footnote_layout_range();
  ::TSP::Range* temp = footnote_layout_range_;
  footnote_layout_range_ = NULL;
  return temp;
}
inline void PageHintArchive::set_allocated_footnote_layout_range(::TSP::Range* footnote_layout_range) {
  delete footnote_layout_range_;
  footnote_layout_range_ = footnote_layout_range;
  if (footnote_layout_range) {
    set_has_footnote_layout_range();
  } else {
    clear_has_footnote_layout_range();
  }
}

// optional .TSP.Reference first_child_hint = 6;
inline bool PageHintArchive::has_first_child_hint() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PageHintArchive::set_has_first_child_hint() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PageHintArchive::clear_has_first_child_hint() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PageHintArchive::clear_first_child_hint() {
  if (first_child_hint_ != NULL) first_child_hint_->::TSP::Reference::Clear();
  clear_has_first_child_hint();
}
inline const ::TSP::Reference& PageHintArchive::first_child_hint() const {
  return first_child_hint_ != NULL ? *first_child_hint_ : *default_instance_->first_child_hint_;
}
inline ::TSP::Reference* PageHintArchive::mutable_first_child_hint() {
  set_has_first_child_hint();
  if (first_child_hint_ == NULL) first_child_hint_ = new ::TSP::Reference;
  return first_child_hint_;
}
inline ::TSP::Reference* PageHintArchive::release_first_child_hint() {
  clear_has_first_child_hint();
  ::TSP::Reference* temp = first_child_hint_;
  first_child_hint_ = NULL;
  return temp;
}
inline void PageHintArchive::set_allocated_first_child_hint(::TSP::Reference* first_child_hint) {
  delete first_child_hint_;
  first_child_hint_ = first_child_hint;
  if (first_child_hint) {
    set_has_first_child_hint();
  } else {
    clear_has_first_child_hint();
  }
}

// optional .TSP.Reference last_child_hint = 7;
inline bool PageHintArchive::has_last_child_hint() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PageHintArchive::set_has_last_child_hint() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PageHintArchive::clear_has_last_child_hint() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PageHintArchive::clear_last_child_hint() {
  if (last_child_hint_ != NULL) last_child_hint_->::TSP::Reference::Clear();
  clear_has_last_child_hint();
}
inline const ::TSP::Reference& PageHintArchive::last_child_hint() const {
  return last_child_hint_ != NULL ? *last_child_hint_ : *default_instance_->last_child_hint_;
}
inline ::TSP::Reference* PageHintArchive::mutable_last_child_hint() {
  set_has_last_child_hint();
  if (last_child_hint_ == NULL) last_child_hint_ = new ::TSP::Reference;
  return last_child_hint_;
}
inline ::TSP::Reference* PageHintArchive::release_last_child_hint() {
  clear_has_last_child_hint();
  ::TSP::Reference* temp = last_child_hint_;
  last_child_hint_ = NULL;
  return temp;
}
inline void PageHintArchive::set_allocated_last_child_hint(::TSP::Reference* last_child_hint) {
  delete last_child_hint_;
  last_child_hint_ = last_child_hint;
  if (last_child_hint) {
    set_has_last_child_hint();
  } else {
    clear_has_last_child_hint();
  }
}

// repeated .TP.AnchorPosArchive anchored_attachments_map = 8;
inline int PageHintArchive::anchored_attachments_map_size() const {
  return anchored_attachments_map_.size();
}
inline void PageHintArchive::clear_anchored_attachments_map() {
  anchored_attachments_map_.Clear();
}
inline const ::TP::AnchorPosArchive& PageHintArchive::anchored_attachments_map(int index) const {
  return anchored_attachments_map_.Get(index);
}
inline ::TP::AnchorPosArchive* PageHintArchive::mutable_anchored_attachments_map(int index) {
  return anchored_attachments_map_.Mutable(index);
}
inline ::TP::AnchorPosArchive* PageHintArchive::add_anchored_attachments_map() {
  return anchored_attachments_map_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TP::AnchorPosArchive >&
PageHintArchive::anchored_attachments_map() const {
  return anchored_attachments_map_;
}
inline ::google::protobuf::RepeatedPtrField< ::TP::AnchorPosArchive >*
PageHintArchive::mutable_anchored_attachments_map() {
  return &anchored_attachments_map_;
}

// optional .TP.TopicNumberHintsArchive topic_numbers = 9;
inline bool PageHintArchive::has_topic_numbers() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PageHintArchive::set_has_topic_numbers() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PageHintArchive::clear_has_topic_numbers() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PageHintArchive::clear_topic_numbers() {
  if (topic_numbers_ != NULL) topic_numbers_->::TP::TopicNumberHintsArchive::Clear();
  clear_has_topic_numbers();
}
inline const ::TP::TopicNumberHintsArchive& PageHintArchive::topic_numbers() const {
  return topic_numbers_ != NULL ? *topic_numbers_ : *default_instance_->topic_numbers_;
}
inline ::TP::TopicNumberHintsArchive* PageHintArchive::mutable_topic_numbers() {
  set_has_topic_numbers();
  if (topic_numbers_ == NULL) topic_numbers_ = new ::TP::TopicNumberHintsArchive;
  return topic_numbers_;
}
inline ::TP::TopicNumberHintsArchive* PageHintArchive::release_topic_numbers() {
  clear_has_topic_numbers();
  ::TP::TopicNumberHintsArchive* temp = topic_numbers_;
  topic_numbers_ = NULL;
  return temp;
}
inline void PageHintArchive::set_allocated_topic_numbers(::TP::TopicNumberHintsArchive* topic_numbers) {
  delete topic_numbers_;
  topic_numbers_ = topic_numbers;
  if (topic_numbers) {
    set_has_topic_numbers();
  } else {
    clear_has_topic_numbers();
  }
}

// optional uint32 version_number = 10;
inline bool PageHintArchive::has_version_number() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PageHintArchive::set_has_version_number() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PageHintArchive::clear_has_version_number() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PageHintArchive::clear_version_number() {
  version_number_ = 0u;
  clear_has_version_number();
}
inline ::google::protobuf::uint32 PageHintArchive::version_number() const {
  return version_number_;
}
inline void PageHintArchive::set_version_number(::google::protobuf::uint32 value) {
  set_has_version_number();
  version_number_ = value;
}

// optional uint32 platform_id = 11;
inline bool PageHintArchive::has_platform_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PageHintArchive::set_has_platform_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PageHintArchive::clear_has_platform_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PageHintArchive::clear_platform_id() {
  platform_id_ = 0u;
  clear_has_platform_id();
}
inline ::google::protobuf::uint32 PageHintArchive::platform_id() const {
  return platform_id_;
}
inline void PageHintArchive::set_platform_id(::google::protobuf::uint32 value) {
  set_has_platform_id();
  platform_id_ = value;
}

// -------------------------------------------------------------------

// SectionHintArchive

// repeated .TP.PageHintArchive page_hints = 1;
inline int SectionHintArchive::page_hints_size() const {
  return page_hints_.size();
}
inline void SectionHintArchive::clear_page_hints() {
  page_hints_.Clear();
}
inline const ::TP::PageHintArchive& SectionHintArchive::page_hints(int index) const {
  return page_hints_.Get(index);
}
inline ::TP::PageHintArchive* SectionHintArchive::mutable_page_hints(int index) {
  return page_hints_.Mutable(index);
}
inline ::TP::PageHintArchive* SectionHintArchive::add_page_hints() {
  return page_hints_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TP::PageHintArchive >&
SectionHintArchive::page_hints() const {
  return page_hints_;
}
inline ::google::protobuf::RepeatedPtrField< ::TP::PageHintArchive >*
SectionHintArchive::mutable_page_hints() {
  return &page_hints_;
}

// optional uint32 start_page_index = 2;
inline bool SectionHintArchive::has_start_page_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SectionHintArchive::set_has_start_page_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SectionHintArchive::clear_has_start_page_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SectionHintArchive::clear_start_page_index() {
  start_page_index_ = 0u;
  clear_has_start_page_index();
}
inline ::google::protobuf::uint32 SectionHintArchive::start_page_index() const {
  return start_page_index_;
}
inline void SectionHintArchive::set_start_page_index(::google::protobuf::uint32 value) {
  set_has_start_page_index();
  start_page_index_ = value;
}

// -------------------------------------------------------------------

// TextboxHintArchive

// required .TSP.Range range = 1;
inline bool TextboxHintArchive::has_range() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TextboxHintArchive::set_has_range() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TextboxHintArchive::clear_has_range() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TextboxHintArchive::clear_range() {
  if (range_ != NULL) range_->::TSP::Range::Clear();
  clear_has_range();
}
inline const ::TSP::Range& TextboxHintArchive::range() const {
  return range_ != NULL ? *range_ : *default_instance_->range_;
}
inline ::TSP::Range* TextboxHintArchive::mutable_range() {
  set_has_range();
  if (range_ == NULL) range_ = new ::TSP::Range;
  return range_;
}
inline ::TSP::Range* TextboxHintArchive::release_range() {
  clear_has_range();
  ::TSP::Range* temp = range_;
  range_ = NULL;
  return temp;
}
inline void TextboxHintArchive::set_allocated_range(::TSP::Range* range) {
  delete range_;
  range_ = range;
  if (range) {
    set_has_range();
  } else {
    clear_has_range();
  }
}

// required .TSP.Size size = 2;
inline bool TextboxHintArchive::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TextboxHintArchive::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TextboxHintArchive::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TextboxHintArchive::clear_size() {
  if (size_ != NULL) size_->::TSP::Size::Clear();
  clear_has_size();
}
inline const ::TSP::Size& TextboxHintArchive::size() const {
  return size_ != NULL ? *size_ : *default_instance_->size_;
}
inline ::TSP::Size* TextboxHintArchive::mutable_size() {
  set_has_size();
  if (size_ == NULL) size_ = new ::TSP::Size;
  return size_;
}
inline ::TSP::Size* TextboxHintArchive::release_size() {
  clear_has_size();
  ::TSP::Size* temp = size_;
  size_ = NULL;
  return temp;
}
inline void TextboxHintArchive::set_allocated_size(::TSP::Size* size) {
  delete size_;
  size_ = size;
  if (size) {
    set_has_size();
  } else {
    clear_has_size();
  }
}

// -------------------------------------------------------------------

// TopicNumberEntryArchive

// required .TSP.Reference list_style = 1;
inline bool TopicNumberEntryArchive::has_list_style() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TopicNumberEntryArchive::set_has_list_style() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TopicNumberEntryArchive::clear_has_list_style() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TopicNumberEntryArchive::clear_list_style() {
  if (list_style_ != NULL) list_style_->::TSP::Reference::Clear();
  clear_has_list_style();
}
inline const ::TSP::Reference& TopicNumberEntryArchive::list_style() const {
  return list_style_ != NULL ? *list_style_ : *default_instance_->list_style_;
}
inline ::TSP::Reference* TopicNumberEntryArchive::mutable_list_style() {
  set_has_list_style();
  if (list_style_ == NULL) list_style_ = new ::TSP::Reference;
  return list_style_;
}
inline ::TSP::Reference* TopicNumberEntryArchive::release_list_style() {
  clear_has_list_style();
  ::TSP::Reference* temp = list_style_;
  list_style_ = NULL;
  return temp;
}
inline void TopicNumberEntryArchive::set_allocated_list_style(::TSP::Reference* list_style) {
  delete list_style_;
  list_style_ = list_style;
  if (list_style) {
    set_has_list_style();
  } else {
    clear_has_list_style();
  }
}

// repeated uint32 topic_number = 2;
inline int TopicNumberEntryArchive::topic_number_size() const {
  return topic_number_.size();
}
inline void TopicNumberEntryArchive::clear_topic_number() {
  topic_number_.Clear();
}
inline ::google::protobuf::uint32 TopicNumberEntryArchive::topic_number(int index) const {
  return topic_number_.Get(index);
}
inline void TopicNumberEntryArchive::set_topic_number(int index, ::google::protobuf::uint32 value) {
  topic_number_.Set(index, value);
}
inline void TopicNumberEntryArchive::add_topic_number(::google::protobuf::uint32 value) {
  topic_number_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TopicNumberEntryArchive::topic_number() const {
  return topic_number_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TopicNumberEntryArchive::mutable_topic_number() {
  return &topic_number_;
}

// repeated uint32 character_index = 3;
inline int TopicNumberEntryArchive::character_index_size() const {
  return character_index_.size();
}
inline void TopicNumberEntryArchive::clear_character_index() {
  character_index_.Clear();
}
inline ::google::protobuf::uint32 TopicNumberEntryArchive::character_index(int index) const {
  return character_index_.Get(index);
}
inline void TopicNumberEntryArchive::set_character_index(int index, ::google::protobuf::uint32 value) {
  character_index_.Set(index, value);
}
inline void TopicNumberEntryArchive::add_character_index(::google::protobuf::uint32 value) {
  character_index_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TopicNumberEntryArchive::character_index() const {
  return character_index_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TopicNumberEntryArchive::mutable_character_index() {
  return &character_index_;
}

// -------------------------------------------------------------------

// TopicNumberHintsArchive

// optional uint32 charIndex = 1;
inline bool TopicNumberHintsArchive::has_charindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TopicNumberHintsArchive::set_has_charindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TopicNumberHintsArchive::clear_has_charindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TopicNumberHintsArchive::clear_charindex() {
  charindex_ = 0u;
  clear_has_charindex();
}
inline ::google::protobuf::uint32 TopicNumberHintsArchive::charindex() const {
  return charindex_;
}
inline void TopicNumberHintsArchive::set_charindex(::google::protobuf::uint32 value) {
  set_has_charindex();
  charindex_ = value;
}

// repeated .TP.TopicNumberEntryArchive topic_numbers_map = 2;
inline int TopicNumberHintsArchive::topic_numbers_map_size() const {
  return topic_numbers_map_.size();
}
inline void TopicNumberHintsArchive::clear_topic_numbers_map() {
  topic_numbers_map_.Clear();
}
inline const ::TP::TopicNumberEntryArchive& TopicNumberHintsArchive::topic_numbers_map(int index) const {
  return topic_numbers_map_.Get(index);
}
inline ::TP::TopicNumberEntryArchive* TopicNumberHintsArchive::mutable_topic_numbers_map(int index) {
  return topic_numbers_map_.Mutable(index);
}
inline ::TP::TopicNumberEntryArchive* TopicNumberHintsArchive::add_topic_numbers_map() {
  return topic_numbers_map_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TP::TopicNumberEntryArchive >&
TopicNumberHintsArchive::topic_numbers_map() const {
  return topic_numbers_map_;
}
inline ::google::protobuf::RepeatedPtrField< ::TP::TopicNumberEntryArchive >*
TopicNumberHintsArchive::mutable_topic_numbers_map() {
  return &topic_numbers_map_;
}

// optional uint32 valid_through_char_index = 3;
inline bool TopicNumberHintsArchive::has_valid_through_char_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TopicNumberHintsArchive::set_has_valid_through_char_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TopicNumberHintsArchive::clear_has_valid_through_char_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TopicNumberHintsArchive::clear_valid_through_char_index() {
  valid_through_char_index_ = 0u;
  clear_has_valid_through_char_index();
}
inline ::google::protobuf::uint32 TopicNumberHintsArchive::valid_through_char_index() const {
  return valid_through_char_index_;
}
inline void TopicNumberHintsArchive::set_valid_through_char_index(::google::protobuf::uint32 value) {
  set_has_valid_through_char_index();
  valid_through_char_index_ = value;
}

// -------------------------------------------------------------------

// LayoutStateArchive

// optional uint32 section_index = 1;
inline bool LayoutStateArchive::has_section_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LayoutStateArchive::set_has_section_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LayoutStateArchive::clear_has_section_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LayoutStateArchive::clear_section_index() {
  section_index_ = 0u;
  clear_has_section_index();
}
inline ::google::protobuf::uint32 LayoutStateArchive::section_index() const {
  return section_index_;
}
inline void LayoutStateArchive::set_section_index(::google::protobuf::uint32 value) {
  set_has_section_index();
  section_index_ = value;
}

// optional uint32 section_page_index = 2;
inline bool LayoutStateArchive::has_section_page_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LayoutStateArchive::set_has_section_page_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LayoutStateArchive::clear_has_section_page_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LayoutStateArchive::clear_section_page_index() {
  section_page_index_ = 0u;
  clear_has_section_page_index();
}
inline ::google::protobuf::uint32 LayoutStateArchive::section_page_index() const {
  return section_page_index_;
}
inline void LayoutStateArchive::set_section_page_index(::google::protobuf::uint32 value) {
  set_has_section_page_index();
  section_page_index_ = value;
}

// optional uint32 document_page_index = 3;
inline bool LayoutStateArchive::has_document_page_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LayoutStateArchive::set_has_document_page_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LayoutStateArchive::clear_has_document_page_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LayoutStateArchive::clear_document_page_index() {
  document_page_index_ = 0u;
  clear_has_document_page_index();
}
inline ::google::protobuf::uint32 LayoutStateArchive::document_page_index() const {
  return document_page_index_;
}
inline void LayoutStateArchive::set_document_page_index(::google::protobuf::uint32 value) {
  set_has_document_page_index();
  document_page_index_ = value;
}

// optional uint32 last_page_count = 4;
inline bool LayoutStateArchive::has_last_page_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LayoutStateArchive::set_has_last_page_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LayoutStateArchive::clear_has_last_page_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LayoutStateArchive::clear_last_page_count() {
  last_page_count_ = 0u;
  clear_has_last_page_count();
}
inline ::google::protobuf::uint32 LayoutStateArchive::last_page_count() const {
  return last_page_count_;
}
inline void LayoutStateArchive::set_last_page_count(::google::protobuf::uint32 value) {
  set_has_last_page_count();
  last_page_count_ = value;
}

// repeated .TP.SectionHintArchive section_hints = 5;
inline int LayoutStateArchive::section_hints_size() const {
  return section_hints_.size();
}
inline void LayoutStateArchive::clear_section_hints() {
  section_hints_.Clear();
}
inline const ::TP::SectionHintArchive& LayoutStateArchive::section_hints(int index) const {
  return section_hints_.Get(index);
}
inline ::TP::SectionHintArchive* LayoutStateArchive::mutable_section_hints(int index) {
  return section_hints_.Mutable(index);
}
inline ::TP::SectionHintArchive* LayoutStateArchive::add_section_hints() {
  return section_hints_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TP::SectionHintArchive >&
LayoutStateArchive::section_hints() const {
  return section_hints_;
}
inline ::google::protobuf::RepeatedPtrField< ::TP::SectionHintArchive >*
LayoutStateArchive::mutable_section_hints() {
  return &section_hints_;
}

// -------------------------------------------------------------------

// CanvasSelectionArchive

// required .TSWP.SelectionType type = 1;
inline bool CanvasSelectionArchive::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CanvasSelectionArchive::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CanvasSelectionArchive::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CanvasSelectionArchive::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::TSWP::SelectionType CanvasSelectionArchive::type() const {
  return static_cast< ::TSWP::SelectionType >(type_);
}
inline void CanvasSelectionArchive::set_type(::TSWP::SelectionType value) {
  assert(::TSWP::SelectionType_IsValid(value));
  set_has_type();
  type_ = value;
}

// required .TSP.Range range = 2;
inline bool CanvasSelectionArchive::has_range() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CanvasSelectionArchive::set_has_range() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CanvasSelectionArchive::clear_has_range() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CanvasSelectionArchive::clear_range() {
  if (range_ != NULL) range_->::TSP::Range::Clear();
  clear_has_range();
}
inline const ::TSP::Range& CanvasSelectionArchive::range() const {
  return range_ != NULL ? *range_ : *default_instance_->range_;
}
inline ::TSP::Range* CanvasSelectionArchive::mutable_range() {
  set_has_range();
  if (range_ == NULL) range_ = new ::TSP::Range;
  return range_;
}
inline ::TSP::Range* CanvasSelectionArchive::release_range() {
  clear_has_range();
  ::TSP::Range* temp = range_;
  range_ = NULL;
  return temp;
}
inline void CanvasSelectionArchive::set_allocated_range(::TSP::Range* range) {
  delete range_;
  range_ = range;
  if (range) {
    set_has_range();
  } else {
    clear_has_range();
  }
}

// required .TSWP.StyleInsertionBehavior style_insertion_behavior = 3;
inline bool CanvasSelectionArchive::has_style_insertion_behavior() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CanvasSelectionArchive::set_has_style_insertion_behavior() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CanvasSelectionArchive::clear_has_style_insertion_behavior() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CanvasSelectionArchive::clear_style_insertion_behavior() {
  style_insertion_behavior_ = 0;
  clear_has_style_insertion_behavior();
}
inline ::TSWP::StyleInsertionBehavior CanvasSelectionArchive::style_insertion_behavior() const {
  return static_cast< ::TSWP::StyleInsertionBehavior >(style_insertion_behavior_);
}
inline void CanvasSelectionArchive::set_style_insertion_behavior(::TSWP::StyleInsertionBehavior value) {
  assert(::TSWP::StyleInsertionBehavior_IsValid(value));
  set_has_style_insertion_behavior();
  style_insertion_behavior_ = value;
}

// required .TSWP.CaretAffinity caret_affinity = 4;
inline bool CanvasSelectionArchive::has_caret_affinity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CanvasSelectionArchive::set_has_caret_affinity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CanvasSelectionArchive::clear_has_caret_affinity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CanvasSelectionArchive::clear_caret_affinity() {
  caret_affinity_ = 0;
  clear_has_caret_affinity();
}
inline ::TSWP::CaretAffinity CanvasSelectionArchive::caret_affinity() const {
  return static_cast< ::TSWP::CaretAffinity >(caret_affinity_);
}
inline void CanvasSelectionArchive::set_caret_affinity(::TSWP::CaretAffinity value) {
  assert(::TSWP::CaretAffinity_IsValid(value));
  set_has_caret_affinity();
  caret_affinity_ = value;
}

// repeated .TSP.Reference infos = 5;
inline int CanvasSelectionArchive::infos_size() const {
  return infos_.size();
}
inline void CanvasSelectionArchive::clear_infos() {
  infos_.Clear();
}
inline const ::TSP::Reference& CanvasSelectionArchive::infos(int index) const {
  return infos_.Get(index);
}
inline ::TSP::Reference* CanvasSelectionArchive::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::TSP::Reference* CanvasSelectionArchive::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
CanvasSelectionArchive::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
CanvasSelectionArchive::mutable_infos() {
  return &infos_;
}

// repeated .TSP.Reference excluded_infos = 6;
inline int CanvasSelectionArchive::excluded_infos_size() const {
  return excluded_infos_.size();
}
inline void CanvasSelectionArchive::clear_excluded_infos() {
  excluded_infos_.Clear();
}
inline const ::TSP::Reference& CanvasSelectionArchive::excluded_infos(int index) const {
  return excluded_infos_.Get(index);
}
inline ::TSP::Reference* CanvasSelectionArchive::mutable_excluded_infos(int index) {
  return excluded_infos_.Mutable(index);
}
inline ::TSP::Reference* CanvasSelectionArchive::add_excluded_infos() {
  return excluded_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
CanvasSelectionArchive::excluded_infos() const {
  return excluded_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
CanvasSelectionArchive::mutable_excluded_infos() {
  return &excluded_infos_;
}

// repeated .TSP.Reference additional_infos = 7;
inline int CanvasSelectionArchive::additional_infos_size() const {
  return additional_infos_.size();
}
inline void CanvasSelectionArchive::clear_additional_infos() {
  additional_infos_.Clear();
}
inline const ::TSP::Reference& CanvasSelectionArchive::additional_infos(int index) const {
  return additional_infos_.Get(index);
}
inline ::TSP::Reference* CanvasSelectionArchive::mutable_additional_infos(int index) {
  return additional_infos_.Mutable(index);
}
inline ::TSP::Reference* CanvasSelectionArchive::add_additional_infos() {
  return additional_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
CanvasSelectionArchive::additional_infos() const {
  return additional_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
CanvasSelectionArchive::mutable_additional_infos() {
  return &additional_infos_;
}

// optional .TSP.Reference container = 8;
inline bool CanvasSelectionArchive::has_container() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CanvasSelectionArchive::set_has_container() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CanvasSelectionArchive::clear_has_container() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CanvasSelectionArchive::clear_container() {
  if (container_ != NULL) container_->::TSP::Reference::Clear();
  clear_has_container();
}
inline const ::TSP::Reference& CanvasSelectionArchive::container() const {
  return container_ != NULL ? *container_ : *default_instance_->container_;
}
inline ::TSP::Reference* CanvasSelectionArchive::mutable_container() {
  set_has_container();
  if (container_ == NULL) container_ = new ::TSP::Reference;
  return container_;
}
inline ::TSP::Reference* CanvasSelectionArchive::release_container() {
  clear_has_container();
  ::TSP::Reference* temp = container_;
  container_ = NULL;
  return temp;
}
inline void CanvasSelectionArchive::set_allocated_container(::TSP::Reference* container) {
  delete container_;
  container_ = container;
  if (container) {
    set_has_container();
  } else {
    clear_has_container();
  }
}

// -------------------------------------------------------------------

// ViewStateArchive

// optional float OBSOLETE_view_scale = 1;
inline bool ViewStateArchive::has_obsolete_view_scale() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ViewStateArchive::set_has_obsolete_view_scale() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ViewStateArchive::clear_has_obsolete_view_scale() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ViewStateArchive::clear_obsolete_view_scale() {
  obsolete_view_scale_ = 0;
  clear_has_obsolete_view_scale();
}
inline float ViewStateArchive::obsolete_view_scale() const {
  return obsolete_view_scale_;
}
inline void ViewStateArchive::set_obsolete_view_scale(float value) {
  set_has_obsolete_view_scale();
  obsolete_view_scale_ = value;
}

// optional .TSP.Point visible_rect_origin = 2;
inline bool ViewStateArchive::has_visible_rect_origin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ViewStateArchive::set_has_visible_rect_origin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ViewStateArchive::clear_has_visible_rect_origin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ViewStateArchive::clear_visible_rect_origin() {
  if (visible_rect_origin_ != NULL) visible_rect_origin_->::TSP::Point::Clear();
  clear_has_visible_rect_origin();
}
inline const ::TSP::Point& ViewStateArchive::visible_rect_origin() const {
  return visible_rect_origin_ != NULL ? *visible_rect_origin_ : *default_instance_->visible_rect_origin_;
}
inline ::TSP::Point* ViewStateArchive::mutable_visible_rect_origin() {
  set_has_visible_rect_origin();
  if (visible_rect_origin_ == NULL) visible_rect_origin_ = new ::TSP::Point;
  return visible_rect_origin_;
}
inline ::TSP::Point* ViewStateArchive::release_visible_rect_origin() {
  clear_has_visible_rect_origin();
  ::TSP::Point* temp = visible_rect_origin_;
  visible_rect_origin_ = NULL;
  return temp;
}
inline void ViewStateArchive::set_allocated_visible_rect_origin(::TSP::Point* visible_rect_origin) {
  delete visible_rect_origin_;
  visible_rect_origin_ = visible_rect_origin;
  if (visible_rect_origin) {
    set_has_visible_rect_origin();
  } else {
    clear_has_visible_rect_origin();
  }
}

// optional bool OBSOLETE_landscape = 3;
inline bool ViewStateArchive::has_obsolete_landscape() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ViewStateArchive::set_has_obsolete_landscape() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ViewStateArchive::clear_has_obsolete_landscape() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ViewStateArchive::clear_obsolete_landscape() {
  obsolete_landscape_ = false;
  clear_has_obsolete_landscape();
}
inline bool ViewStateArchive::obsolete_landscape() const {
  return obsolete_landscape_;
}
inline void ViewStateArchive::set_obsolete_landscape(bool value) {
  set_has_obsolete_landscape();
  obsolete_landscape_ = value;
}

// optional .TSP.Reference selection = 4;
inline bool ViewStateArchive::has_selection() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ViewStateArchive::set_has_selection() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ViewStateArchive::clear_has_selection() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ViewStateArchive::clear_selection() {
  if (selection_ != NULL) selection_->::TSP::Reference::Clear();
  clear_has_selection();
}
inline const ::TSP::Reference& ViewStateArchive::selection() const {
  return selection_ != NULL ? *selection_ : *default_instance_->selection_;
}
inline ::TSP::Reference* ViewStateArchive::mutable_selection() {
  set_has_selection();
  if (selection_ == NULL) selection_ = new ::TSP::Reference;
  return selection_;
}
inline ::TSP::Reference* ViewStateArchive::release_selection() {
  clear_has_selection();
  ::TSP::Reference* temp = selection_;
  selection_ = NULL;
  return temp;
}
inline void ViewStateArchive::set_allocated_selection(::TSP::Reference* selection) {
  delete selection_;
  selection_ = selection;
  if (selection) {
    set_has_selection();
  } else {
    clear_has_selection();
  }
}

// optional .TSP.Reference selection_model = 5;
inline bool ViewStateArchive::has_selection_model() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ViewStateArchive::set_has_selection_model() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ViewStateArchive::clear_has_selection_model() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ViewStateArchive::clear_selection_model() {
  if (selection_model_ != NULL) selection_model_->::TSP::Reference::Clear();
  clear_has_selection_model();
}
inline const ::TSP::Reference& ViewStateArchive::selection_model() const {
  return selection_model_ != NULL ? *selection_model_ : *default_instance_->selection_model_;
}
inline ::TSP::Reference* ViewStateArchive::mutable_selection_model() {
  set_has_selection_model();
  if (selection_model_ == NULL) selection_model_ = new ::TSP::Reference;
  return selection_model_;
}
inline ::TSP::Reference* ViewStateArchive::release_selection_model() {
  clear_has_selection_model();
  ::TSP::Reference* temp = selection_model_;
  selection_model_ = NULL;
  return temp;
}
inline void ViewStateArchive::set_allocated_selection_model(::TSP::Reference* selection_model) {
  delete selection_model_;
  selection_model_ = selection_model;
  if (selection_model) {
    set_has_selection_model();
  } else {
    clear_has_selection_model();
  }
}

// optional bool master_drawables_selectable = 6;
inline bool ViewStateArchive::has_master_drawables_selectable() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ViewStateArchive::set_has_master_drawables_selectable() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ViewStateArchive::clear_has_master_drawables_selectable() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ViewStateArchive::clear_master_drawables_selectable() {
  master_drawables_selectable_ = false;
  clear_has_master_drawables_selectable();
}
inline bool ViewStateArchive::master_drawables_selectable() const {
  return master_drawables_selectable_;
}
inline void ViewStateArchive::set_master_drawables_selectable(bool value) {
  set_has_master_drawables_selectable();
  master_drawables_selectable_ = value;
}

// optional .TSP.Size visible_rect_size = 7;
inline bool ViewStateArchive::has_visible_rect_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ViewStateArchive::set_has_visible_rect_size() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ViewStateArchive::clear_has_visible_rect_size() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ViewStateArchive::clear_visible_rect_size() {
  if (visible_rect_size_ != NULL) visible_rect_size_->::TSP::Size::Clear();
  clear_has_visible_rect_size();
}
inline const ::TSP::Size& ViewStateArchive::visible_rect_size() const {
  return visible_rect_size_ != NULL ? *visible_rect_size_ : *default_instance_->visible_rect_size_;
}
inline ::TSP::Size* ViewStateArchive::mutable_visible_rect_size() {
  set_has_visible_rect_size();
  if (visible_rect_size_ == NULL) visible_rect_size_ = new ::TSP::Size;
  return visible_rect_size_;
}
inline ::TSP::Size* ViewStateArchive::release_visible_rect_size() {
  clear_has_visible_rect_size();
  ::TSP::Size* temp = visible_rect_size_;
  visible_rect_size_ = NULL;
  return temp;
}
inline void ViewStateArchive::set_allocated_visible_rect_size(::TSP::Size* visible_rect_size) {
  delete visible_rect_size_;
  visible_rect_size_ = visible_rect_size;
  if (visible_rect_size) {
    set_has_visible_rect_size();
  } else {
    clear_has_visible_rect_size();
  }
}

// repeated .TSCH.ChartUIState chart_ui_state = 8;
inline int ViewStateArchive::chart_ui_state_size() const {
  return chart_ui_state_.size();
}
inline void ViewStateArchive::clear_chart_ui_state() {
  chart_ui_state_.Clear();
}
inline const ::TSCH::ChartUIState& ViewStateArchive::chart_ui_state(int index) const {
  return chart_ui_state_.Get(index);
}
inline ::TSCH::ChartUIState* ViewStateArchive::mutable_chart_ui_state(int index) {
  return chart_ui_state_.Mutable(index);
}
inline ::TSCH::ChartUIState* ViewStateArchive::add_chart_ui_state() {
  return chart_ui_state_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSCH::ChartUIState >&
ViewStateArchive::chart_ui_state() const {
  return chart_ui_state_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSCH::ChartUIState >*
ViewStateArchive::mutable_chart_ui_state() {
  return &chart_ui_state_;
}

// optional bool ruler_visible = 9 [default = true];
inline bool ViewStateArchive::has_ruler_visible() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ViewStateArchive::set_has_ruler_visible() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ViewStateArchive::clear_has_ruler_visible() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ViewStateArchive::clear_ruler_visible() {
  ruler_visible_ = true;
  clear_has_ruler_visible();
}
inline bool ViewStateArchive::ruler_visible() const {
  return ruler_visible_;
}
inline void ViewStateArchive::set_ruler_visible(bool value) {
  set_has_ruler_visible();
  ruler_visible_ = value;
}

// optional bool layout_borders_visible = 10 [default = false];
inline bool ViewStateArchive::has_layout_borders_visible() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ViewStateArchive::set_has_layout_borders_visible() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ViewStateArchive::clear_has_layout_borders_visible() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ViewStateArchive::clear_layout_borders_visible() {
  layout_borders_visible_ = false;
  clear_has_layout_borders_visible();
}
inline bool ViewStateArchive::layout_borders_visible() const {
  return layout_borders_visible_;
}
inline void ViewStateArchive::set_layout_borders_visible(bool value) {
  set_has_layout_borders_visible();
  layout_borders_visible_ = value;
}

// optional bool word_count_hud_visible = 11 [default = false];
inline bool ViewStateArchive::has_word_count_hud_visible() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ViewStateArchive::set_has_word_count_hud_visible() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ViewStateArchive::clear_has_word_count_hud_visible() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ViewStateArchive::clear_word_count_hud_visible() {
  word_count_hud_visible_ = false;
  clear_has_word_count_hud_visible();
}
inline bool ViewStateArchive::word_count_hud_visible() const {
  return word_count_hud_visible_;
}
inline void ViewStateArchive::set_word_count_hud_visible(bool value) {
  set_has_word_count_hud_visible();
  word_count_hud_visible_ = value;
}

// optional bool shows_comments = 12 [default = true];
inline bool ViewStateArchive::has_shows_comments() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ViewStateArchive::set_has_shows_comments() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ViewStateArchive::clear_has_shows_comments() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ViewStateArchive::clear_shows_comments() {
  shows_comments_ = true;
  clear_has_shows_comments();
}
inline bool ViewStateArchive::shows_comments() const {
  return shows_comments_;
}
inline void ViewStateArchive::set_shows_comments(bool value) {
  set_has_shows_comments();
  shows_comments_ = value;
}

// optional bool shows_page_navigator = 13 [default = false];
inline bool ViewStateArchive::has_shows_page_navigator() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ViewStateArchive::set_has_shows_page_navigator() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ViewStateArchive::clear_has_shows_page_navigator() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ViewStateArchive::clear_shows_page_navigator() {
  shows_page_navigator_ = false;
  clear_has_shows_page_navigator();
}
inline bool ViewStateArchive::shows_page_navigator() const {
  return shows_page_navigator_;
}
inline void ViewStateArchive::set_shows_page_navigator(bool value) {
  set_has_shows_page_navigator();
  shows_page_navigator_ = value;
}

// optional .TP.ViewScaleMode view_scale_mode = 14 [default = ViewScaleMode_UserDefined];
inline bool ViewStateArchive::has_view_scale_mode() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ViewStateArchive::set_has_view_scale_mode() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ViewStateArchive::clear_has_view_scale_mode() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ViewStateArchive::clear_view_scale_mode() {
  view_scale_mode_ = 0;
  clear_has_view_scale_mode();
}
inline ::TP::ViewScaleMode ViewStateArchive::view_scale_mode() const {
  return static_cast< ::TP::ViewScaleMode >(view_scale_mode_);
}
inline void ViewStateArchive::set_view_scale_mode(::TP::ViewScaleMode value) {
  assert(::TP::ViewScaleMode_IsValid(value));
  set_has_view_scale_mode();
  view_scale_mode_ = value;
}

// optional float view_scale = 15 [default = 1.25];
inline bool ViewStateArchive::has_view_scale() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ViewStateArchive::set_has_view_scale() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ViewStateArchive::clear_has_view_scale() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ViewStateArchive::clear_view_scale() {
  view_scale_ = 1.25f;
  clear_has_view_scale();
}
inline float ViewStateArchive::view_scale() const {
  return view_scale_;
}
inline void ViewStateArchive::set_view_scale(float value) {
  set_has_view_scale();
  view_scale_ = value;
}

// optional .TSP.Point window_frame_origin = 16;
inline bool ViewStateArchive::has_window_frame_origin() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ViewStateArchive::set_has_window_frame_origin() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ViewStateArchive::clear_has_window_frame_origin() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ViewStateArchive::clear_window_frame_origin() {
  if (window_frame_origin_ != NULL) window_frame_origin_->::TSP::Point::Clear();
  clear_has_window_frame_origin();
}
inline const ::TSP::Point& ViewStateArchive::window_frame_origin() const {
  return window_frame_origin_ != NULL ? *window_frame_origin_ : *default_instance_->window_frame_origin_;
}
inline ::TSP::Point* ViewStateArchive::mutable_window_frame_origin() {
  set_has_window_frame_origin();
  if (window_frame_origin_ == NULL) window_frame_origin_ = new ::TSP::Point;
  return window_frame_origin_;
}
inline ::TSP::Point* ViewStateArchive::release_window_frame_origin() {
  clear_has_window_frame_origin();
  ::TSP::Point* temp = window_frame_origin_;
  window_frame_origin_ = NULL;
  return temp;
}
inline void ViewStateArchive::set_allocated_window_frame_origin(::TSP::Point* window_frame_origin) {
  delete window_frame_origin_;
  window_frame_origin_ = window_frame_origin;
  if (window_frame_origin) {
    set_has_window_frame_origin();
  } else {
    clear_has_window_frame_origin();
  }
}

// optional .TSP.Size window_frame_size = 17;
inline bool ViewStateArchive::has_window_frame_size() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ViewStateArchive::set_has_window_frame_size() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ViewStateArchive::clear_has_window_frame_size() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ViewStateArchive::clear_window_frame_size() {
  if (window_frame_size_ != NULL) window_frame_size_->::TSP::Size::Clear();
  clear_has_window_frame_size();
}
inline const ::TSP::Size& ViewStateArchive::window_frame_size() const {
  return window_frame_size_ != NULL ? *window_frame_size_ : *default_instance_->window_frame_size_;
}
inline ::TSP::Size* ViewStateArchive::mutable_window_frame_size() {
  set_has_window_frame_size();
  if (window_frame_size_ == NULL) window_frame_size_ = new ::TSP::Size;
  return window_frame_size_;
}
inline ::TSP::Size* ViewStateArchive::release_window_frame_size() {
  clear_has_window_frame_size();
  ::TSP::Size* temp = window_frame_size_;
  window_frame_size_ = NULL;
  return temp;
}
inline void ViewStateArchive::set_allocated_window_frame_size(::TSP::Size* window_frame_size) {
  delete window_frame_size_;
  window_frame_size_ = window_frame_size;
  if (window_frame_size) {
    set_has_window_frame_size();
  } else {
    clear_has_window_frame_size();
  }
}

// optional string selected_inspector_switch_segment_identifier = 18;
inline bool ViewStateArchive::has_selected_inspector_switch_segment_identifier() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ViewStateArchive::set_has_selected_inspector_switch_segment_identifier() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ViewStateArchive::clear_has_selected_inspector_switch_segment_identifier() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ViewStateArchive::clear_selected_inspector_switch_segment_identifier() {
  if (selected_inspector_switch_segment_identifier_ != &::google::protobuf::internal::kEmptyString) {
    selected_inspector_switch_segment_identifier_->clear();
  }
  clear_has_selected_inspector_switch_segment_identifier();
}
inline const ::std::string& ViewStateArchive::selected_inspector_switch_segment_identifier() const {
  return *selected_inspector_switch_segment_identifier_;
}
inline void ViewStateArchive::set_selected_inspector_switch_segment_identifier(const ::std::string& value) {
  set_has_selected_inspector_switch_segment_identifier();
  if (selected_inspector_switch_segment_identifier_ == &::google::protobuf::internal::kEmptyString) {
    selected_inspector_switch_segment_identifier_ = new ::std::string;
  }
  selected_inspector_switch_segment_identifier_->assign(value);
}
inline void ViewStateArchive::set_selected_inspector_switch_segment_identifier(const char* value) {
  set_has_selected_inspector_switch_segment_identifier();
  if (selected_inspector_switch_segment_identifier_ == &::google::protobuf::internal::kEmptyString) {
    selected_inspector_switch_segment_identifier_ = new ::std::string;
  }
  selected_inspector_switch_segment_identifier_->assign(value);
}
inline void ViewStateArchive::set_selected_inspector_switch_segment_identifier(const char* value, size_t size) {
  set_has_selected_inspector_switch_segment_identifier();
  if (selected_inspector_switch_segment_identifier_ == &::google::protobuf::internal::kEmptyString) {
    selected_inspector_switch_segment_identifier_ = new ::std::string;
  }
  selected_inspector_switch_segment_identifier_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ViewStateArchive::mutable_selected_inspector_switch_segment_identifier() {
  set_has_selected_inspector_switch_segment_identifier();
  if (selected_inspector_switch_segment_identifier_ == &::google::protobuf::internal::kEmptyString) {
    selected_inspector_switch_segment_identifier_ = new ::std::string;
  }
  return selected_inspector_switch_segment_identifier_;
}
inline ::std::string* ViewStateArchive::release_selected_inspector_switch_segment_identifier() {
  clear_has_selected_inspector_switch_segment_identifier();
  if (selected_inspector_switch_segment_identifier_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = selected_inspector_switch_segment_identifier_;
    selected_inspector_switch_segment_identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ViewStateArchive::set_allocated_selected_inspector_switch_segment_identifier(::std::string* selected_inspector_switch_segment_identifier) {
  if (selected_inspector_switch_segment_identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete selected_inspector_switch_segment_identifier_;
  }
  if (selected_inspector_switch_segment_identifier) {
    set_has_selected_inspector_switch_segment_identifier();
    selected_inspector_switch_segment_identifier_ = selected_inspector_switch_segment_identifier;
  } else {
    clear_has_selected_inspector_switch_segment_identifier();
    selected_inspector_switch_segment_identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool inspector_hidden = 19;
inline bool ViewStateArchive::has_inspector_hidden() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ViewStateArchive::set_has_inspector_hidden() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ViewStateArchive::clear_has_inspector_hidden() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ViewStateArchive::clear_inspector_hidden() {
  inspector_hidden_ = false;
  clear_has_inspector_hidden();
}
inline bool ViewStateArchive::inspector_hidden() const {
  return inspector_hidden_;
}
inline void ViewStateArchive::set_inspector_hidden(bool value) {
  set_has_inspector_hidden();
  inspector_hidden_ = value;
}

// -------------------------------------------------------------------

// UIStateArchive

// optional .TSP.Reference layout_state = 1;
inline bool UIStateArchive::has_layout_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UIStateArchive::set_has_layout_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UIStateArchive::clear_has_layout_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UIStateArchive::clear_layout_state() {
  if (layout_state_ != NULL) layout_state_->::TSP::Reference::Clear();
  clear_has_layout_state();
}
inline const ::TSP::Reference& UIStateArchive::layout_state() const {
  return layout_state_ != NULL ? *layout_state_ : *default_instance_->layout_state_;
}
inline ::TSP::Reference* UIStateArchive::mutable_layout_state() {
  set_has_layout_state();
  if (layout_state_ == NULL) layout_state_ = new ::TSP::Reference;
  return layout_state_;
}
inline ::TSP::Reference* UIStateArchive::release_layout_state() {
  clear_has_layout_state();
  ::TSP::Reference* temp = layout_state_;
  layout_state_ = NULL;
  return temp;
}
inline void UIStateArchive::set_allocated_layout_state(::TSP::Reference* layout_state) {
  delete layout_state_;
  layout_state_ = layout_state;
  if (layout_state) {
    set_has_layout_state();
  } else {
    clear_has_layout_state();
  }
}

// optional .TSP.Reference view_state = 2;
inline bool UIStateArchive::has_view_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UIStateArchive::set_has_view_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UIStateArchive::clear_has_view_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UIStateArchive::clear_view_state() {
  if (view_state_ != NULL) view_state_->::TSP::Reference::Clear();
  clear_has_view_state();
}
inline const ::TSP::Reference& UIStateArchive::view_state() const {
  return view_state_ != NULL ? *view_state_ : *default_instance_->view_state_;
}
inline ::TSP::Reference* UIStateArchive::mutable_view_state() {
  set_has_view_state();
  if (view_state_ == NULL) view_state_ = new ::TSP::Reference;
  return view_state_;
}
inline ::TSP::Reference* UIStateArchive::release_view_state() {
  clear_has_view_state();
  ::TSP::Reference* temp = view_state_;
  view_state_ = NULL;
  return temp;
}
inline void UIStateArchive::set_allocated_view_state(::TSP::Reference* view_state) {
  delete view_state_;
  view_state_ = view_state;
  if (view_state) {
    set_has_view_state();
  } else {
    clear_has_view_state();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TP

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TP::SettingsArchive_FootnoteKind>() {
  return ::TP::SettingsArchive_FootnoteKind_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TP::SettingsArchive_FootnoteFormat>() {
  return ::TP::SettingsArchive_FootnoteFormat_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TP::SettingsArchive_FootnoteNumbering>() {
  return ::TP::SettingsArchive_FootnoteNumbering_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TP::PageHintArchive_PageKind>() {
  return ::TP::PageHintArchive_PageKind_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TP::ViewScaleMode>() {
  return ::TP::ViewScaleMode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TPArchives_2eproto__INCLUDED
