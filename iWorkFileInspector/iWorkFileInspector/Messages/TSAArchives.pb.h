// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSAArchives.proto

#ifndef PROTOBUF_TSAArchives_2eproto__INCLUDED
#define PROTOBUF_TSAArchives_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "TSKArchives.pb.h"
#include "TSPMessages.pb.h"
#include "TSWPArchives.pb.h"
#include "TSSArchives.pb.h"
// @@protoc_insertion_point(includes)

namespace TSA {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TSAArchives_2eproto();
void protobuf_AssignDesc_TSAArchives_2eproto();
void protobuf_ShutdownFile_TSAArchives_2eproto();

class DocumentArchive;
class FunctionBrowserStateArchive;
class TestDocumentArchive;
class PropagatePresetCommandArchive;

// ===================================================================

class DocumentArchive : public ::google::protobuf::Message {
 public:
  DocumentArchive();
  virtual ~DocumentArchive();

  DocumentArchive(const DocumentArchive& from);

  inline DocumentArchive& operator=(const DocumentArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentArchive& default_instance();

  void Swap(DocumentArchive* other);

  // implements Message ----------------------------------------------

  DocumentArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DocumentArchive& from);
  void MergeFrom(const DocumentArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSK.DocumentArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSK::DocumentArchive& super() const;
  inline ::TSK::DocumentArchive* mutable_super();
  inline ::TSK::DocumentArchive* release_super();
  inline void set_allocated_super(::TSK::DocumentArchive* super);

  // repeated .TSWP.TextPresetDisplayItemArchive text_preset_display_items = 2;
  inline int text_preset_display_items_size() const;
  inline void clear_text_preset_display_items();
  static const int kTextPresetDisplayItemsFieldNumber = 2;
  inline const ::TSWP::TextPresetDisplayItemArchive& text_preset_display_items(int index) const;
  inline ::TSWP::TextPresetDisplayItemArchive* mutable_text_preset_display_items(int index);
  inline ::TSWP::TextPresetDisplayItemArchive* add_text_preset_display_items();
  inline const ::google::protobuf::RepeatedPtrField< ::TSWP::TextPresetDisplayItemArchive >&
      text_preset_display_items() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSWP::TextPresetDisplayItemArchive >*
      mutable_text_preset_display_items();

  // optional string creation_language = 3;
  inline bool has_creation_language() const;
  inline void clear_creation_language();
  static const int kCreationLanguageFieldNumber = 3;
  inline const ::std::string& creation_language() const;
  inline void set_creation_language(const ::std::string& value);
  inline void set_creation_language(const char* value);
  inline void set_creation_language(const char* value, size_t size);
  inline ::std::string* mutable_creation_language();
  inline ::std::string* release_creation_language();
  inline void set_allocated_creation_language(::std::string* creation_language);

  // optional .TSP.Reference calculation_engine = 4;
  inline bool has_calculation_engine() const;
  inline void clear_calculation_engine();
  static const int kCalculationEngineFieldNumber = 4;
  inline const ::TSP::Reference& calculation_engine() const;
  inline ::TSP::Reference* mutable_calculation_engine();
  inline ::TSP::Reference* release_calculation_engine();
  inline void set_allocated_calculation_engine(::TSP::Reference* calculation_engine);

  // optional .TSP.Reference view_state = 5;
  inline bool has_view_state() const;
  inline void clear_view_state();
  static const int kViewStateFieldNumber = 5;
  inline const ::TSP::Reference& view_state() const;
  inline ::TSP::Reference* mutable_view_state();
  inline ::TSP::Reference* release_view_state();
  inline void set_allocated_view_state(::TSP::Reference* view_state);

  // optional .TSP.Reference function_browser_state = 6;
  inline bool has_function_browser_state() const;
  inline void clear_function_browser_state();
  static const int kFunctionBrowserStateFieldNumber = 6;
  inline const ::TSP::Reference& function_browser_state() const;
  inline ::TSP::Reference* mutable_function_browser_state();
  inline ::TSP::Reference* release_function_browser_state();
  inline void set_allocated_function_browser_state(::TSP::Reference* function_browser_state);

  // optional .TSP.Reference tables_custom_format_list = 7;
  inline bool has_tables_custom_format_list() const;
  inline void clear_tables_custom_format_list();
  static const int kTablesCustomFormatListFieldNumber = 7;
  inline const ::TSP::Reference& tables_custom_format_list() const;
  inline ::TSP::Reference* mutable_tables_custom_format_list();
  inline ::TSP::Reference* release_tables_custom_format_list();
  inline void set_allocated_tables_custom_format_list(::TSP::Reference* tables_custom_format_list);

  // optional bool needs_movie_compatibility_upgrade = 8;
  inline bool has_needs_movie_compatibility_upgrade() const;
  inline void clear_needs_movie_compatibility_upgrade();
  static const int kNeedsMovieCompatibilityUpgradeFieldNumber = 8;
  inline bool needs_movie_compatibility_upgrade() const;
  inline void set_needs_movie_compatibility_upgrade(bool value);

  // optional string template_identifier = 9;
  inline bool has_template_identifier() const;
  inline void clear_template_identifier();
  static const int kTemplateIdentifierFieldNumber = 9;
  inline const ::std::string& template_identifier() const;
  inline void set_template_identifier(const ::std::string& value);
  inline void set_template_identifier(const char* value);
  inline void set_template_identifier(const char* value, size_t size);
  inline ::std::string* mutable_template_identifier();
  inline ::std::string* release_template_identifier();
  inline void set_allocated_template_identifier(::std::string* template_identifier);

  // @@protoc_insertion_point(class_scope:TSA.DocumentArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();
  inline void set_has_creation_language();
  inline void clear_has_creation_language();
  inline void set_has_calculation_engine();
  inline void clear_has_calculation_engine();
  inline void set_has_view_state();
  inline void clear_has_view_state();
  inline void set_has_function_browser_state();
  inline void clear_has_function_browser_state();
  inline void set_has_tables_custom_format_list();
  inline void clear_has_tables_custom_format_list();
  inline void set_has_needs_movie_compatibility_upgrade();
  inline void clear_has_needs_movie_compatibility_upgrade();
  inline void set_has_template_identifier();
  inline void clear_has_template_identifier();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSK::DocumentArchive* super_;
  ::google::protobuf::RepeatedPtrField< ::TSWP::TextPresetDisplayItemArchive > text_preset_display_items_;
  ::std::string* creation_language_;
  ::TSP::Reference* calculation_engine_;
  ::TSP::Reference* view_state_;
  ::TSP::Reference* function_browser_state_;
  ::TSP::Reference* tables_custom_format_list_;
  ::std::string* template_identifier_;
  bool needs_movie_compatibility_upgrade_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_TSAArchives_2eproto();
  friend void protobuf_AssignDesc_TSAArchives_2eproto();
  friend void protobuf_ShutdownFile_TSAArchives_2eproto();

  void InitAsDefaultInstance();
  static DocumentArchive* default_instance_;
};
// -------------------------------------------------------------------

class FunctionBrowserStateArchive : public ::google::protobuf::Message {
 public:
  FunctionBrowserStateArchive();
  virtual ~FunctionBrowserStateArchive();

  FunctionBrowserStateArchive(const FunctionBrowserStateArchive& from);

  inline FunctionBrowserStateArchive& operator=(const FunctionBrowserStateArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FunctionBrowserStateArchive& default_instance();

  void Swap(FunctionBrowserStateArchive* other);

  // implements Message ----------------------------------------------

  FunctionBrowserStateArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FunctionBrowserStateArchive& from);
  void MergeFrom(const FunctionBrowserStateArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 recent_functions = 1;
  inline int recent_functions_size() const;
  inline void clear_recent_functions();
  static const int kRecentFunctionsFieldNumber = 1;
  inline ::google::protobuf::uint32 recent_functions(int index) const;
  inline void set_recent_functions(int index, ::google::protobuf::uint32 value);
  inline void add_recent_functions(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      recent_functions() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_recent_functions();

  // repeated uint32 back_functions = 2;
  inline int back_functions_size() const;
  inline void clear_back_functions();
  static const int kBackFunctionsFieldNumber = 2;
  inline ::google::protobuf::uint32 back_functions(int index) const;
  inline void set_back_functions(int index, ::google::protobuf::uint32 value);
  inline void add_back_functions(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      back_functions() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_back_functions();

  // repeated uint32 forward_functions = 3;
  inline int forward_functions_size() const;
  inline void clear_forward_functions();
  static const int kForwardFunctionsFieldNumber = 3;
  inline ::google::protobuf::uint32 forward_functions(int index) const;
  inline void set_forward_functions(int index, ::google::protobuf::uint32 value);
  inline void add_forward_functions(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      forward_functions() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_forward_functions();

  // optional uint32 current_function = 4;
  inline bool has_current_function() const;
  inline void clear_current_function();
  static const int kCurrentFunctionFieldNumber = 4;
  inline ::google::protobuf::uint32 current_function() const;
  inline void set_current_function(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TSA.FunctionBrowserStateArchive)
 private:
  inline void set_has_current_function();
  inline void clear_has_current_function();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > recent_functions_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > back_functions_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > forward_functions_;
  ::google::protobuf::uint32 current_function_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_TSAArchives_2eproto();
  friend void protobuf_AssignDesc_TSAArchives_2eproto();
  friend void protobuf_ShutdownFile_TSAArchives_2eproto();

  void InitAsDefaultInstance();
  static FunctionBrowserStateArchive* default_instance_;
};
// -------------------------------------------------------------------

class TestDocumentArchive : public ::google::protobuf::Message {
 public:
  TestDocumentArchive();
  virtual ~TestDocumentArchive();

  TestDocumentArchive(const TestDocumentArchive& from);

  inline TestDocumentArchive& operator=(const TestDocumentArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TestDocumentArchive& default_instance();

  void Swap(TestDocumentArchive* other);

  // implements Message ----------------------------------------------

  TestDocumentArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestDocumentArchive& from);
  void MergeFrom(const TestDocumentArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSA.DocumentArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSA::DocumentArchive& super() const;
  inline ::TSA::DocumentArchive* mutable_super();
  inline ::TSA::DocumentArchive* release_super();
  inline void set_allocated_super(::TSA::DocumentArchive* super);

  // optional string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:TSA.TestDocumentArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSA::DocumentArchive* super_;
  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_TSAArchives_2eproto();
  friend void protobuf_AssignDesc_TSAArchives_2eproto();
  friend void protobuf_ShutdownFile_TSAArchives_2eproto();

  void InitAsDefaultInstance();
  static TestDocumentArchive* default_instance_;
};
// -------------------------------------------------------------------

class PropagatePresetCommandArchive : public ::google::protobuf::Message {
 public:
  PropagatePresetCommandArchive();
  virtual ~PropagatePresetCommandArchive();

  PropagatePresetCommandArchive(const PropagatePresetCommandArchive& from);

  inline PropagatePresetCommandArchive& operator=(const PropagatePresetCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PropagatePresetCommandArchive& default_instance();

  void Swap(PropagatePresetCommandArchive* other);

  // implements Message ----------------------------------------------

  PropagatePresetCommandArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PropagatePresetCommandArchive& from);
  void MergeFrom(const PropagatePresetCommandArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSK.CommandArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSK::CommandArchive& super() const;
  inline ::TSK::CommandArchive* mutable_super();
  inline ::TSK::CommandArchive* release_super();
  inline void set_allocated_super(::TSK::CommandArchive* super);

  // @@protoc_insertion_point(class_scope:TSA.PropagatePresetCommandArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSK::CommandArchive* super_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_TSAArchives_2eproto();
  friend void protobuf_AssignDesc_TSAArchives_2eproto();
  friend void protobuf_ShutdownFile_TSAArchives_2eproto();

  void InitAsDefaultInstance();
  static PropagatePresetCommandArchive* default_instance_;
};
// ===================================================================


// ===================================================================

// DocumentArchive

// required .TSK.DocumentArchive super = 1;
inline bool DocumentArchive::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentArchive::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentArchive::clear_super() {
  if (super_ != NULL) super_->::TSK::DocumentArchive::Clear();
  clear_has_super();
}
inline const ::TSK::DocumentArchive& DocumentArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSK::DocumentArchive* DocumentArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSK::DocumentArchive;
  return super_;
}
inline ::TSK::DocumentArchive* DocumentArchive::release_super() {
  clear_has_super();
  ::TSK::DocumentArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void DocumentArchive::set_allocated_super(::TSK::DocumentArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// repeated .TSWP.TextPresetDisplayItemArchive text_preset_display_items = 2;
inline int DocumentArchive::text_preset_display_items_size() const {
  return text_preset_display_items_.size();
}
inline void DocumentArchive::clear_text_preset_display_items() {
  text_preset_display_items_.Clear();
}
inline const ::TSWP::TextPresetDisplayItemArchive& DocumentArchive::text_preset_display_items(int index) const {
  return text_preset_display_items_.Get(index);
}
inline ::TSWP::TextPresetDisplayItemArchive* DocumentArchive::mutable_text_preset_display_items(int index) {
  return text_preset_display_items_.Mutable(index);
}
inline ::TSWP::TextPresetDisplayItemArchive* DocumentArchive::add_text_preset_display_items() {
  return text_preset_display_items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSWP::TextPresetDisplayItemArchive >&
DocumentArchive::text_preset_display_items() const {
  return text_preset_display_items_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSWP::TextPresetDisplayItemArchive >*
DocumentArchive::mutable_text_preset_display_items() {
  return &text_preset_display_items_;
}

// optional string creation_language = 3;
inline bool DocumentArchive::has_creation_language() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DocumentArchive::set_has_creation_language() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DocumentArchive::clear_has_creation_language() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DocumentArchive::clear_creation_language() {
  if (creation_language_ != &::google::protobuf::internal::kEmptyString) {
    creation_language_->clear();
  }
  clear_has_creation_language();
}
inline const ::std::string& DocumentArchive::creation_language() const {
  return *creation_language_;
}
inline void DocumentArchive::set_creation_language(const ::std::string& value) {
  set_has_creation_language();
  if (creation_language_ == &::google::protobuf::internal::kEmptyString) {
    creation_language_ = new ::std::string;
  }
  creation_language_->assign(value);
}
inline void DocumentArchive::set_creation_language(const char* value) {
  set_has_creation_language();
  if (creation_language_ == &::google::protobuf::internal::kEmptyString) {
    creation_language_ = new ::std::string;
  }
  creation_language_->assign(value);
}
inline void DocumentArchive::set_creation_language(const char* value, size_t size) {
  set_has_creation_language();
  if (creation_language_ == &::google::protobuf::internal::kEmptyString) {
    creation_language_ = new ::std::string;
  }
  creation_language_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DocumentArchive::mutable_creation_language() {
  set_has_creation_language();
  if (creation_language_ == &::google::protobuf::internal::kEmptyString) {
    creation_language_ = new ::std::string;
  }
  return creation_language_;
}
inline ::std::string* DocumentArchive::release_creation_language() {
  clear_has_creation_language();
  if (creation_language_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = creation_language_;
    creation_language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DocumentArchive::set_allocated_creation_language(::std::string* creation_language) {
  if (creation_language_ != &::google::protobuf::internal::kEmptyString) {
    delete creation_language_;
  }
  if (creation_language) {
    set_has_creation_language();
    creation_language_ = creation_language;
  } else {
    clear_has_creation_language();
    creation_language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .TSP.Reference calculation_engine = 4;
inline bool DocumentArchive::has_calculation_engine() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DocumentArchive::set_has_calculation_engine() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DocumentArchive::clear_has_calculation_engine() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DocumentArchive::clear_calculation_engine() {
  if (calculation_engine_ != NULL) calculation_engine_->::TSP::Reference::Clear();
  clear_has_calculation_engine();
}
inline const ::TSP::Reference& DocumentArchive::calculation_engine() const {
  return calculation_engine_ != NULL ? *calculation_engine_ : *default_instance_->calculation_engine_;
}
inline ::TSP::Reference* DocumentArchive::mutable_calculation_engine() {
  set_has_calculation_engine();
  if (calculation_engine_ == NULL) calculation_engine_ = new ::TSP::Reference;
  return calculation_engine_;
}
inline ::TSP::Reference* DocumentArchive::release_calculation_engine() {
  clear_has_calculation_engine();
  ::TSP::Reference* temp = calculation_engine_;
  calculation_engine_ = NULL;
  return temp;
}
inline void DocumentArchive::set_allocated_calculation_engine(::TSP::Reference* calculation_engine) {
  delete calculation_engine_;
  calculation_engine_ = calculation_engine;
  if (calculation_engine) {
    set_has_calculation_engine();
  } else {
    clear_has_calculation_engine();
  }
}

// optional .TSP.Reference view_state = 5;
inline bool DocumentArchive::has_view_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DocumentArchive::set_has_view_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DocumentArchive::clear_has_view_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DocumentArchive::clear_view_state() {
  if (view_state_ != NULL) view_state_->::TSP::Reference::Clear();
  clear_has_view_state();
}
inline const ::TSP::Reference& DocumentArchive::view_state() const {
  return view_state_ != NULL ? *view_state_ : *default_instance_->view_state_;
}
inline ::TSP::Reference* DocumentArchive::mutable_view_state() {
  set_has_view_state();
  if (view_state_ == NULL) view_state_ = new ::TSP::Reference;
  return view_state_;
}
inline ::TSP::Reference* DocumentArchive::release_view_state() {
  clear_has_view_state();
  ::TSP::Reference* temp = view_state_;
  view_state_ = NULL;
  return temp;
}
inline void DocumentArchive::set_allocated_view_state(::TSP::Reference* view_state) {
  delete view_state_;
  view_state_ = view_state;
  if (view_state) {
    set_has_view_state();
  } else {
    clear_has_view_state();
  }
}

// optional .TSP.Reference function_browser_state = 6;
inline bool DocumentArchive::has_function_browser_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DocumentArchive::set_has_function_browser_state() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DocumentArchive::clear_has_function_browser_state() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DocumentArchive::clear_function_browser_state() {
  if (function_browser_state_ != NULL) function_browser_state_->::TSP::Reference::Clear();
  clear_has_function_browser_state();
}
inline const ::TSP::Reference& DocumentArchive::function_browser_state() const {
  return function_browser_state_ != NULL ? *function_browser_state_ : *default_instance_->function_browser_state_;
}
inline ::TSP::Reference* DocumentArchive::mutable_function_browser_state() {
  set_has_function_browser_state();
  if (function_browser_state_ == NULL) function_browser_state_ = new ::TSP::Reference;
  return function_browser_state_;
}
inline ::TSP::Reference* DocumentArchive::release_function_browser_state() {
  clear_has_function_browser_state();
  ::TSP::Reference* temp = function_browser_state_;
  function_browser_state_ = NULL;
  return temp;
}
inline void DocumentArchive::set_allocated_function_browser_state(::TSP::Reference* function_browser_state) {
  delete function_browser_state_;
  function_browser_state_ = function_browser_state;
  if (function_browser_state) {
    set_has_function_browser_state();
  } else {
    clear_has_function_browser_state();
  }
}

// optional .TSP.Reference tables_custom_format_list = 7;
inline bool DocumentArchive::has_tables_custom_format_list() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DocumentArchive::set_has_tables_custom_format_list() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DocumentArchive::clear_has_tables_custom_format_list() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DocumentArchive::clear_tables_custom_format_list() {
  if (tables_custom_format_list_ != NULL) tables_custom_format_list_->::TSP::Reference::Clear();
  clear_has_tables_custom_format_list();
}
inline const ::TSP::Reference& DocumentArchive::tables_custom_format_list() const {
  return tables_custom_format_list_ != NULL ? *tables_custom_format_list_ : *default_instance_->tables_custom_format_list_;
}
inline ::TSP::Reference* DocumentArchive::mutable_tables_custom_format_list() {
  set_has_tables_custom_format_list();
  if (tables_custom_format_list_ == NULL) tables_custom_format_list_ = new ::TSP::Reference;
  return tables_custom_format_list_;
}
inline ::TSP::Reference* DocumentArchive::release_tables_custom_format_list() {
  clear_has_tables_custom_format_list();
  ::TSP::Reference* temp = tables_custom_format_list_;
  tables_custom_format_list_ = NULL;
  return temp;
}
inline void DocumentArchive::set_allocated_tables_custom_format_list(::TSP::Reference* tables_custom_format_list) {
  delete tables_custom_format_list_;
  tables_custom_format_list_ = tables_custom_format_list;
  if (tables_custom_format_list) {
    set_has_tables_custom_format_list();
  } else {
    clear_has_tables_custom_format_list();
  }
}

// optional bool needs_movie_compatibility_upgrade = 8;
inline bool DocumentArchive::has_needs_movie_compatibility_upgrade() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DocumentArchive::set_has_needs_movie_compatibility_upgrade() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DocumentArchive::clear_has_needs_movie_compatibility_upgrade() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DocumentArchive::clear_needs_movie_compatibility_upgrade() {
  needs_movie_compatibility_upgrade_ = false;
  clear_has_needs_movie_compatibility_upgrade();
}
inline bool DocumentArchive::needs_movie_compatibility_upgrade() const {
  return needs_movie_compatibility_upgrade_;
}
inline void DocumentArchive::set_needs_movie_compatibility_upgrade(bool value) {
  set_has_needs_movie_compatibility_upgrade();
  needs_movie_compatibility_upgrade_ = value;
}

// optional string template_identifier = 9;
inline bool DocumentArchive::has_template_identifier() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DocumentArchive::set_has_template_identifier() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DocumentArchive::clear_has_template_identifier() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DocumentArchive::clear_template_identifier() {
  if (template_identifier_ != &::google::protobuf::internal::kEmptyString) {
    template_identifier_->clear();
  }
  clear_has_template_identifier();
}
inline const ::std::string& DocumentArchive::template_identifier() const {
  return *template_identifier_;
}
inline void DocumentArchive::set_template_identifier(const ::std::string& value) {
  set_has_template_identifier();
  if (template_identifier_ == &::google::protobuf::internal::kEmptyString) {
    template_identifier_ = new ::std::string;
  }
  template_identifier_->assign(value);
}
inline void DocumentArchive::set_template_identifier(const char* value) {
  set_has_template_identifier();
  if (template_identifier_ == &::google::protobuf::internal::kEmptyString) {
    template_identifier_ = new ::std::string;
  }
  template_identifier_->assign(value);
}
inline void DocumentArchive::set_template_identifier(const char* value, size_t size) {
  set_has_template_identifier();
  if (template_identifier_ == &::google::protobuf::internal::kEmptyString) {
    template_identifier_ = new ::std::string;
  }
  template_identifier_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DocumentArchive::mutable_template_identifier() {
  set_has_template_identifier();
  if (template_identifier_ == &::google::protobuf::internal::kEmptyString) {
    template_identifier_ = new ::std::string;
  }
  return template_identifier_;
}
inline ::std::string* DocumentArchive::release_template_identifier() {
  clear_has_template_identifier();
  if (template_identifier_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = template_identifier_;
    template_identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DocumentArchive::set_allocated_template_identifier(::std::string* template_identifier) {
  if (template_identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete template_identifier_;
  }
  if (template_identifier) {
    set_has_template_identifier();
    template_identifier_ = template_identifier;
  } else {
    clear_has_template_identifier();
    template_identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FunctionBrowserStateArchive

// repeated uint32 recent_functions = 1;
inline int FunctionBrowserStateArchive::recent_functions_size() const {
  return recent_functions_.size();
}
inline void FunctionBrowserStateArchive::clear_recent_functions() {
  recent_functions_.Clear();
}
inline ::google::protobuf::uint32 FunctionBrowserStateArchive::recent_functions(int index) const {
  return recent_functions_.Get(index);
}
inline void FunctionBrowserStateArchive::set_recent_functions(int index, ::google::protobuf::uint32 value) {
  recent_functions_.Set(index, value);
}
inline void FunctionBrowserStateArchive::add_recent_functions(::google::protobuf::uint32 value) {
  recent_functions_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
FunctionBrowserStateArchive::recent_functions() const {
  return recent_functions_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
FunctionBrowserStateArchive::mutable_recent_functions() {
  return &recent_functions_;
}

// repeated uint32 back_functions = 2;
inline int FunctionBrowserStateArchive::back_functions_size() const {
  return back_functions_.size();
}
inline void FunctionBrowserStateArchive::clear_back_functions() {
  back_functions_.Clear();
}
inline ::google::protobuf::uint32 FunctionBrowserStateArchive::back_functions(int index) const {
  return back_functions_.Get(index);
}
inline void FunctionBrowserStateArchive::set_back_functions(int index, ::google::protobuf::uint32 value) {
  back_functions_.Set(index, value);
}
inline void FunctionBrowserStateArchive::add_back_functions(::google::protobuf::uint32 value) {
  back_functions_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
FunctionBrowserStateArchive::back_functions() const {
  return back_functions_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
FunctionBrowserStateArchive::mutable_back_functions() {
  return &back_functions_;
}

// repeated uint32 forward_functions = 3;
inline int FunctionBrowserStateArchive::forward_functions_size() const {
  return forward_functions_.size();
}
inline void FunctionBrowserStateArchive::clear_forward_functions() {
  forward_functions_.Clear();
}
inline ::google::protobuf::uint32 FunctionBrowserStateArchive::forward_functions(int index) const {
  return forward_functions_.Get(index);
}
inline void FunctionBrowserStateArchive::set_forward_functions(int index, ::google::protobuf::uint32 value) {
  forward_functions_.Set(index, value);
}
inline void FunctionBrowserStateArchive::add_forward_functions(::google::protobuf::uint32 value) {
  forward_functions_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
FunctionBrowserStateArchive::forward_functions() const {
  return forward_functions_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
FunctionBrowserStateArchive::mutable_forward_functions() {
  return &forward_functions_;
}

// optional uint32 current_function = 4;
inline bool FunctionBrowserStateArchive::has_current_function() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FunctionBrowserStateArchive::set_has_current_function() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FunctionBrowserStateArchive::clear_has_current_function() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FunctionBrowserStateArchive::clear_current_function() {
  current_function_ = 0u;
  clear_has_current_function();
}
inline ::google::protobuf::uint32 FunctionBrowserStateArchive::current_function() const {
  return current_function_;
}
inline void FunctionBrowserStateArchive::set_current_function(::google::protobuf::uint32 value) {
  set_has_current_function();
  current_function_ = value;
}

// -------------------------------------------------------------------

// TestDocumentArchive

// required .TSA.DocumentArchive super = 1;
inline bool TestDocumentArchive::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestDocumentArchive::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestDocumentArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestDocumentArchive::clear_super() {
  if (super_ != NULL) super_->::TSA::DocumentArchive::Clear();
  clear_has_super();
}
inline const ::TSA::DocumentArchive& TestDocumentArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSA::DocumentArchive* TestDocumentArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSA::DocumentArchive;
  return super_;
}
inline ::TSA::DocumentArchive* TestDocumentArchive::release_super() {
  clear_has_super();
  ::TSA::DocumentArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void TestDocumentArchive::set_allocated_super(::TSA::DocumentArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// optional string value = 2;
inline bool TestDocumentArchive::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TestDocumentArchive::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TestDocumentArchive::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TestDocumentArchive::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& TestDocumentArchive::value() const {
  return *value_;
}
inline void TestDocumentArchive::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void TestDocumentArchive::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void TestDocumentArchive::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestDocumentArchive::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* TestDocumentArchive::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TestDocumentArchive::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// PropagatePresetCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool PropagatePresetCommandArchive::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PropagatePresetCommandArchive::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PropagatePresetCommandArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PropagatePresetCommandArchive::clear_super() {
  if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
  clear_has_super();
}
inline const ::TSK::CommandArchive& PropagatePresetCommandArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSK::CommandArchive* PropagatePresetCommandArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSK::CommandArchive;
  return super_;
}
inline ::TSK::CommandArchive* PropagatePresetCommandArchive::release_super() {
  clear_has_super();
  ::TSK::CommandArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void PropagatePresetCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TSA

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TSAArchives_2eproto__INCLUDED
