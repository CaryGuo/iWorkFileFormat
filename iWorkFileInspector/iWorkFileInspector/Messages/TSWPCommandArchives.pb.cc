// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSWPCommandArchives.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TSWPCommandArchives.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace TSWP {

namespace {

const ::google::protobuf::Descriptor* DummyCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DummyCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* TextCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TextCommandArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TextCommandArchive_Kind_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReplaceAllTextCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplaceAllTextCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* FormatTextCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FormatTextCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetColumnStyleCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetColumnStyleCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplaceAllUsesOfStyleCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplaceAllUsesOfStyleCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* InsertAttachmentCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InsertAttachmentCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* InsertColumnsCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InsertColumnsCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* InsertRowsCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InsertRowsCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveColumnsCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveColumnsCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveRowsCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveRowsCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* MergeCellsCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MergeCellsCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyPlaceholderTextCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyPlaceholderTextCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyHighlightTextCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyHighlightTextCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateHyperlinkCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateHyperlinkCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveHyperlinkCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveHyperlinkCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyHyperlinkCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyHyperlinkCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateDateTimeFieldCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateDateTimeFieldCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyRubyTextCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyRubyTextCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveRubyTextCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveRubyTextCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyRubyTextCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyRubyTextCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyTOCSettingsBaseCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyTOCSettingsBaseCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyTOCSettingsForTOCInfoCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyTOCSettingsForTOCInfoCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyTOCSettingsPresetForThemeCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyTOCSettingsPresetForThemeCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnchorAttachmentCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnchorAttachmentCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* TextApplyThemeCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TextApplyThemeCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveColumnsCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveColumnsCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveRowsCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveRowsCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShapeApplyPresetCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShapeApplyPresetCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShapePasteStyleCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShapePasteStyleCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* StyleBaseCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StyleBaseCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* StyleCreateCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StyleCreateCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* StyleRenameCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StyleRenameCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* StyleUpdateCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StyleUpdateCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* StyleDeleteCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StyleDeleteCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* StyleReorderCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StyleReorderCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* StyleUpdatePropertyMapCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StyleUpdatePropertyMapCommandArchive_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TSWPCommandArchives_2eproto() {
  protobuf_AddDesc_TSWPCommandArchives_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TSWPCommandArchives.proto");
  GOOGLE_CHECK(file != NULL);
  DummyCommandArchive_descriptor_ = file->message_type(0);
  static const int DummyCommandArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyCommandArchive, foo_),
  };
  DummyCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DummyCommandArchive_descriptor_,
      DummyCommandArchive::default_instance_,
      DummyCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DummyCommandArchive));
  TextCommandArchive_descriptor_ = file->message_type(1);
  static const int TextCommandArchive_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextCommandArchive, storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextCommandArchive, undo_transaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextCommandArchive, restore_range_location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextCommandArchive, restore_range_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextCommandArchive, redo_restore_range_location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextCommandArchive, redo_restore_range_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextCommandArchive, text_command_flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextCommandArchive, kind_),
  };
  TextCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TextCommandArchive_descriptor_,
      TextCommandArchive::default_instance_,
      TextCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TextCommandArchive));
  TextCommandArchive_Kind_descriptor_ = TextCommandArchive_descriptor_->enum_type(0);
  ReplaceAllTextCommandArchive_descriptor_ = file->message_type(2);
  static const int ReplaceAllTextCommandArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplaceAllTextCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplaceAllTextCommandArchive, storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplaceAllTextCommandArchive, undo_transaction_),
  };
  ReplaceAllTextCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplaceAllTextCommandArchive_descriptor_,
      ReplaceAllTextCommandArchive::default_instance_,
      ReplaceAllTextCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplaceAllTextCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplaceAllTextCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplaceAllTextCommandArchive));
  FormatTextCommandArchive_descriptor_ = file->message_type(3);
  static const int FormatTextCommandArchive_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatTextCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatTextCommandArchive, storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatTextCommandArchive, undo_transaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatTextCommandArchive, selection_range_location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatTextCommandArchive, selection_range_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatTextCommandArchive, text_command_flags_),
  };
  FormatTextCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FormatTextCommandArchive_descriptor_,
      FormatTextCommandArchive::default_instance_,
      FormatTextCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatTextCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatTextCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FormatTextCommandArchive));
  SetColumnStyleCommandArchive_descriptor_ = file->message_type(4);
  static const int SetColumnStyleCommandArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetColumnStyleCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetColumnStyleCommandArchive, storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetColumnStyleCommandArchive, undo_transaction_),
  };
  SetColumnStyleCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetColumnStyleCommandArchive_descriptor_,
      SetColumnStyleCommandArchive::default_instance_,
      SetColumnStyleCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetColumnStyleCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetColumnStyleCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetColumnStyleCommandArchive));
  ReplaceAllUsesOfStyleCommandArchive_descriptor_ = file->message_type(5);
  static const int ReplaceAllUsesOfStyleCommandArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplaceAllUsesOfStyleCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplaceAllUsesOfStyleCommandArchive, storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplaceAllUsesOfStyleCommandArchive, undo_transaction_),
  };
  ReplaceAllUsesOfStyleCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplaceAllUsesOfStyleCommandArchive_descriptor_,
      ReplaceAllUsesOfStyleCommandArchive::default_instance_,
      ReplaceAllUsesOfStyleCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplaceAllUsesOfStyleCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplaceAllUsesOfStyleCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplaceAllUsesOfStyleCommandArchive));
  InsertAttachmentCommandArchive_descriptor_ = file->message_type(6);
  static const int InsertAttachmentCommandArchive_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertAttachmentCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertAttachmentCommandArchive, storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertAttachmentCommandArchive, selection_range_location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertAttachmentCommandArchive, selection_range_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertAttachmentCommandArchive, attachment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertAttachmentCommandArchive, undo_transaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertAttachmentCommandArchive, text_command_flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertAttachmentCommandArchive, redo_restore_range_location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertAttachmentCommandArchive, redo_restore_range_length_),
  };
  InsertAttachmentCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InsertAttachmentCommandArchive_descriptor_,
      InsertAttachmentCommandArchive::default_instance_,
      InsertAttachmentCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertAttachmentCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertAttachmentCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InsertAttachmentCommandArchive));
  InsertColumnsCommandArchive_descriptor_ = file->message_type(7);
  static const int InsertColumnsCommandArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertColumnsCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertColumnsCommandArchive, storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertColumnsCommandArchive, column_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertColumnsCommandArchive, column_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertColumnsCommandArchive, undo_transaction_),
  };
  InsertColumnsCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InsertColumnsCommandArchive_descriptor_,
      InsertColumnsCommandArchive::default_instance_,
      InsertColumnsCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertColumnsCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertColumnsCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InsertColumnsCommandArchive));
  InsertRowsCommandArchive_descriptor_ = file->message_type(8);
  static const int InsertRowsCommandArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertRowsCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertRowsCommandArchive, storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertRowsCommandArchive, row_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertRowsCommandArchive, row_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertRowsCommandArchive, undo_transaction_),
  };
  InsertRowsCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InsertRowsCommandArchive_descriptor_,
      InsertRowsCommandArchive::default_instance_,
      InsertRowsCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertRowsCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertRowsCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InsertRowsCommandArchive));
  RemoveColumnsCommandArchive_descriptor_ = file->message_type(9);
  static const int RemoveColumnsCommandArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveColumnsCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveColumnsCommandArchive, storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveColumnsCommandArchive, column_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveColumnsCommandArchive, column_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveColumnsCommandArchive, undo_transaction_),
  };
  RemoveColumnsCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveColumnsCommandArchive_descriptor_,
      RemoveColumnsCommandArchive::default_instance_,
      RemoveColumnsCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveColumnsCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveColumnsCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveColumnsCommandArchive));
  RemoveRowsCommandArchive_descriptor_ = file->message_type(10);
  static const int RemoveRowsCommandArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveRowsCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveRowsCommandArchive, storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveRowsCommandArchive, row_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveRowsCommandArchive, row_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveRowsCommandArchive, undo_transaction_),
  };
  RemoveRowsCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveRowsCommandArchive_descriptor_,
      RemoveRowsCommandArchive::default_instance_,
      RemoveRowsCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveRowsCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveRowsCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveRowsCommandArchive));
  MergeCellsCommandArchive_descriptor_ = file->message_type(11);
  static const int MergeCellsCommandArchive_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeCellsCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeCellsCommandArchive, storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeCellsCommandArchive, row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeCellsCommandArchive, column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeCellsCommandArchive, row_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeCellsCommandArchive, column_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeCellsCommandArchive, undo_transaction_),
  };
  MergeCellsCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MergeCellsCommandArchive_descriptor_,
      MergeCellsCommandArchive::default_instance_,
      MergeCellsCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeCellsCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeCellsCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MergeCellsCommandArchive));
  ApplyPlaceholderTextCommandArchive_descriptor_ = file->message_type(12);
  static const int ApplyPlaceholderTextCommandArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyPlaceholderTextCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyPlaceholderTextCommandArchive, storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyPlaceholderTextCommandArchive, selection_range_location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyPlaceholderTextCommandArchive, selection_range_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyPlaceholderTextCommandArchive, undo_transaction_),
  };
  ApplyPlaceholderTextCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyPlaceholderTextCommandArchive_descriptor_,
      ApplyPlaceholderTextCommandArchive::default_instance_,
      ApplyPlaceholderTextCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyPlaceholderTextCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyPlaceholderTextCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyPlaceholderTextCommandArchive));
  ApplyHighlightTextCommandArchive_descriptor_ = file->message_type(13);
  static const int ApplyHighlightTextCommandArchive_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyHighlightTextCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyHighlightTextCommandArchive, storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyHighlightTextCommandArchive, selection_range_location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyHighlightTextCommandArchive, selection_range_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyHighlightTextCommandArchive, undo_transaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyHighlightTextCommandArchive, remove_),
  };
  ApplyHighlightTextCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyHighlightTextCommandArchive_descriptor_,
      ApplyHighlightTextCommandArchive::default_instance_,
      ApplyHighlightTextCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyHighlightTextCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyHighlightTextCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyHighlightTextCommandArchive));
  CreateHyperlinkCommandArchive_descriptor_ = file->message_type(14);
  static const int CreateHyperlinkCommandArchive_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateHyperlinkCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateHyperlinkCommandArchive, storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateHyperlinkCommandArchive, selection_range_location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateHyperlinkCommandArchive, selection_range_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateHyperlinkCommandArchive, url_ref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateHyperlinkCommandArchive, undo_transaction_),
  };
  CreateHyperlinkCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateHyperlinkCommandArchive_descriptor_,
      CreateHyperlinkCommandArchive::default_instance_,
      CreateHyperlinkCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateHyperlinkCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateHyperlinkCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateHyperlinkCommandArchive));
  RemoveHyperlinkCommandArchive_descriptor_ = file->message_type(15);
  static const int RemoveHyperlinkCommandArchive_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveHyperlinkCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveHyperlinkCommandArchive, storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveHyperlinkCommandArchive, selection_range_location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveHyperlinkCommandArchive, selection_range_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveHyperlinkCommandArchive, undo_transaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveHyperlinkCommandArchive, is_remove_character_style_),
  };
  RemoveHyperlinkCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveHyperlinkCommandArchive_descriptor_,
      RemoveHyperlinkCommandArchive::default_instance_,
      RemoveHyperlinkCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveHyperlinkCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveHyperlinkCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveHyperlinkCommandArchive));
  ModifyHyperlinkCommandArchive_descriptor_ = file->message_type(16);
  static const int ModifyHyperlinkCommandArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyHyperlinkCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyHyperlinkCommandArchive, hyperlink_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyHyperlinkCommandArchive, display_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyHyperlinkCommandArchive, url_ref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyHyperlinkCommandArchive, undo_transaction_),
  };
  ModifyHyperlinkCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyHyperlinkCommandArchive_descriptor_,
      ModifyHyperlinkCommandArchive::default_instance_,
      ModifyHyperlinkCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyHyperlinkCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyHyperlinkCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyHyperlinkCommandArchive));
  UpdateDateTimeFieldCommandArchive_descriptor_ = file->message_type(17);
  static const int UpdateDateTimeFieldCommandArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDateTimeFieldCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDateTimeFieldCommandArchive, date_time_field_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDateTimeFieldCommandArchive, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDateTimeFieldCommandArchive, date_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDateTimeFieldCommandArchive, time_style_),
  };
  UpdateDateTimeFieldCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateDateTimeFieldCommandArchive_descriptor_,
      UpdateDateTimeFieldCommandArchive::default_instance_,
      UpdateDateTimeFieldCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDateTimeFieldCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDateTimeFieldCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateDateTimeFieldCommandArchive));
  ApplyRubyTextCommandArchive_descriptor_ = file->message_type(18);
  static const int ApplyRubyTextCommandArchive_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyRubyTextCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyRubyTextCommandArchive, storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyRubyTextCommandArchive, selection_range_location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyRubyTextCommandArchive, selection_range_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyRubyTextCommandArchive, ruby_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyRubyTextCommandArchive, undo_transaction_),
  };
  ApplyRubyTextCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyRubyTextCommandArchive_descriptor_,
      ApplyRubyTextCommandArchive::default_instance_,
      ApplyRubyTextCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyRubyTextCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyRubyTextCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyRubyTextCommandArchive));
  RemoveRubyTextCommandArchive_descriptor_ = file->message_type(19);
  static const int RemoveRubyTextCommandArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveRubyTextCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveRubyTextCommandArchive, storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveRubyTextCommandArchive, selection_range_location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveRubyTextCommandArchive, selection_range_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveRubyTextCommandArchive, undo_transaction_),
  };
  RemoveRubyTextCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveRubyTextCommandArchive_descriptor_,
      RemoveRubyTextCommandArchive::default_instance_,
      RemoveRubyTextCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveRubyTextCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveRubyTextCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveRubyTextCommandArchive));
  ModifyRubyTextCommandArchive_descriptor_ = file->message_type(20);
  static const int ModifyRubyTextCommandArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyRubyTextCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyRubyTextCommandArchive, ruby_field_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyRubyTextCommandArchive, ruby_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyRubyTextCommandArchive, base_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyRubyTextCommandArchive, undo_transaction_),
  };
  ModifyRubyTextCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyRubyTextCommandArchive_descriptor_,
      ModifyRubyTextCommandArchive::default_instance_,
      ModifyRubyTextCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyRubyTextCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyRubyTextCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyRubyTextCommandArchive));
  ModifyTOCSettingsBaseCommandArchive_descriptor_ = file->message_type(21);
  static const int ModifyTOCSettingsBaseCommandArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyTOCSettingsBaseCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyTOCSettingsBaseCommandArchive, old_toc_settings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyTOCSettingsBaseCommandArchive, new_toc_settings_),
  };
  ModifyTOCSettingsBaseCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyTOCSettingsBaseCommandArchive_descriptor_,
      ModifyTOCSettingsBaseCommandArchive::default_instance_,
      ModifyTOCSettingsBaseCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyTOCSettingsBaseCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyTOCSettingsBaseCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyTOCSettingsBaseCommandArchive));
  ModifyTOCSettingsForTOCInfoCommandArchive_descriptor_ = file->message_type(22);
  static const int ModifyTOCSettingsForTOCInfoCommandArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyTOCSettingsForTOCInfoCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyTOCSettingsForTOCInfoCommandArchive, toc_info_),
  };
  ModifyTOCSettingsForTOCInfoCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyTOCSettingsForTOCInfoCommandArchive_descriptor_,
      ModifyTOCSettingsForTOCInfoCommandArchive::default_instance_,
      ModifyTOCSettingsForTOCInfoCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyTOCSettingsForTOCInfoCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyTOCSettingsForTOCInfoCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyTOCSettingsForTOCInfoCommandArchive));
  ModifyTOCSettingsPresetForThemeCommandArchive_descriptor_ = file->message_type(23);
  static const int ModifyTOCSettingsPresetForThemeCommandArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyTOCSettingsPresetForThemeCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyTOCSettingsPresetForThemeCommandArchive, theme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyTOCSettingsPresetForThemeCommandArchive, preset_index_),
  };
  ModifyTOCSettingsPresetForThemeCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyTOCSettingsPresetForThemeCommandArchive_descriptor_,
      ModifyTOCSettingsPresetForThemeCommandArchive::default_instance_,
      ModifyTOCSettingsPresetForThemeCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyTOCSettingsPresetForThemeCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyTOCSettingsPresetForThemeCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyTOCSettingsPresetForThemeCommandArchive));
  AnchorAttachmentCommandArchive_descriptor_ = file->message_type(24);
  static const int AnchorAttachmentCommandArchive_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnchorAttachmentCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnchorAttachmentCommandArchive, storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnchorAttachmentCommandArchive, attachment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnchorAttachmentCommandArchive, h_offset_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnchorAttachmentCommandArchive, h_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnchorAttachmentCommandArchive, v_offset_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnchorAttachmentCommandArchive, v_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnchorAttachmentCommandArchive, undo_transaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnchorAttachmentCommandArchive, is_html_wrap_),
  };
  AnchorAttachmentCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnchorAttachmentCommandArchive_descriptor_,
      AnchorAttachmentCommandArchive::default_instance_,
      AnchorAttachmentCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnchorAttachmentCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnchorAttachmentCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnchorAttachmentCommandArchive));
  TextApplyThemeCommandArchive_descriptor_ = file->message_type(25);
  static const int TextApplyThemeCommandArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextApplyThemeCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextApplyThemeCommandArchive, storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextApplyThemeCommandArchive, undo_transaction_),
  };
  TextApplyThemeCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TextApplyThemeCommandArchive_descriptor_,
      TextApplyThemeCommandArchive::default_instance_,
      TextApplyThemeCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextApplyThemeCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextApplyThemeCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TextApplyThemeCommandArchive));
  MoveColumnsCommandArchive_descriptor_ = file->message_type(26);
  static const int MoveColumnsCommandArchive_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveColumnsCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveColumnsCommandArchive, storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveColumnsCommandArchive, src_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveColumnsCommandArchive, dst_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveColumnsCommandArchive, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveColumnsCommandArchive, undo_transaction_),
  };
  MoveColumnsCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoveColumnsCommandArchive_descriptor_,
      MoveColumnsCommandArchive::default_instance_,
      MoveColumnsCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveColumnsCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveColumnsCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoveColumnsCommandArchive));
  MoveRowsCommandArchive_descriptor_ = file->message_type(27);
  static const int MoveRowsCommandArchive_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveRowsCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveRowsCommandArchive, storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveRowsCommandArchive, src_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveRowsCommandArchive, dst_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveRowsCommandArchive, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveRowsCommandArchive, undo_transaction_),
  };
  MoveRowsCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoveRowsCommandArchive_descriptor_,
      MoveRowsCommandArchive::default_instance_,
      MoveRowsCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveRowsCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveRowsCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoveRowsCommandArchive));
  ShapeApplyPresetCommandArchive_descriptor_ = file->message_type(28);
  static const int ShapeApplyPresetCommandArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeApplyPresetCommandArchive, super_),
  };
  ShapeApplyPresetCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShapeApplyPresetCommandArchive_descriptor_,
      ShapeApplyPresetCommandArchive::default_instance_,
      ShapeApplyPresetCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeApplyPresetCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeApplyPresetCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShapeApplyPresetCommandArchive));
  ShapePasteStyleCommandArchive_descriptor_ = file->message_type(29);
  static const int ShapePasteStyleCommandArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapePasteStyleCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapePasteStyleCommandArchive, paragraph_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapePasteStyleCommandArchive, list_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapePasteStyleCommandArchive, character_style_),
  };
  ShapePasteStyleCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShapePasteStyleCommandArchive_descriptor_,
      ShapePasteStyleCommandArchive::default_instance_,
      ShapePasteStyleCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapePasteStyleCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapePasteStyleCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShapePasteStyleCommandArchive));
  StyleBaseCommandArchive_descriptor_ = file->message_type(30);
  static const int StyleBaseCommandArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleBaseCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleBaseCommandArchive, theme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleBaseCommandArchive, style_),
  };
  StyleBaseCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StyleBaseCommandArchive_descriptor_,
      StyleBaseCommandArchive::default_instance_,
      StyleBaseCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleBaseCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleBaseCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StyleBaseCommandArchive));
  StyleCreateCommandArchive_descriptor_ = file->message_type(31);
  static const int StyleCreateCommandArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleCreateCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleCreateCommandArchive, preset_index_),
  };
  StyleCreateCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StyleCreateCommandArchive_descriptor_,
      StyleCreateCommandArchive::default_instance_,
      StyleCreateCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleCreateCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleCreateCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StyleCreateCommandArchive));
  StyleRenameCommandArchive_descriptor_ = file->message_type(32);
  static const int StyleRenameCommandArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleRenameCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleRenameCommandArchive, updated_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleRenameCommandArchive, old_name_),
  };
  StyleRenameCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StyleRenameCommandArchive_descriptor_,
      StyleRenameCommandArchive::default_instance_,
      StyleRenameCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleRenameCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleRenameCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StyleRenameCommandArchive));
  StyleUpdateCommandArchive_descriptor_ = file->message_type(33);
  static const int StyleUpdateCommandArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleUpdateCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleUpdateCommandArchive, original_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleUpdateCommandArchive, updated_style_),
  };
  StyleUpdateCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StyleUpdateCommandArchive_descriptor_,
      StyleUpdateCommandArchive::default_instance_,
      StyleUpdateCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleUpdateCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleUpdateCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StyleUpdateCommandArchive));
  StyleDeleteCommandArchive_descriptor_ = file->message_type(34);
  static const int StyleDeleteCommandArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleDeleteCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleDeleteCommandArchive, old_preset_index_),
  };
  StyleDeleteCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StyleDeleteCommandArchive_descriptor_,
      StyleDeleteCommandArchive::default_instance_,
      StyleDeleteCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleDeleteCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleDeleteCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StyleDeleteCommandArchive));
  StyleReorderCommandArchive_descriptor_ = file->message_type(35);
  static const int StyleReorderCommandArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleReorderCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleReorderCommandArchive, old_preset_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleReorderCommandArchive, new_preset_index_),
  };
  StyleReorderCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StyleReorderCommandArchive_descriptor_,
      StyleReorderCommandArchive::default_instance_,
      StyleReorderCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleReorderCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleReorderCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StyleReorderCommandArchive));
  StyleUpdatePropertyMapCommandArchive_descriptor_ = file->message_type(36);
  static const int StyleUpdatePropertyMapCommandArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleUpdatePropertyMapCommandArchive, super_),
  };
  StyleUpdatePropertyMapCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StyleUpdatePropertyMapCommandArchive_descriptor_,
      StyleUpdatePropertyMapCommandArchive::default_instance_,
      StyleUpdatePropertyMapCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleUpdatePropertyMapCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleUpdatePropertyMapCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StyleUpdatePropertyMapCommandArchive));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TSWPCommandArchives_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DummyCommandArchive_descriptor_, &DummyCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TextCommandArchive_descriptor_, &TextCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplaceAllTextCommandArchive_descriptor_, &ReplaceAllTextCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FormatTextCommandArchive_descriptor_, &FormatTextCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetColumnStyleCommandArchive_descriptor_, &SetColumnStyleCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplaceAllUsesOfStyleCommandArchive_descriptor_, &ReplaceAllUsesOfStyleCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InsertAttachmentCommandArchive_descriptor_, &InsertAttachmentCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InsertColumnsCommandArchive_descriptor_, &InsertColumnsCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InsertRowsCommandArchive_descriptor_, &InsertRowsCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveColumnsCommandArchive_descriptor_, &RemoveColumnsCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveRowsCommandArchive_descriptor_, &RemoveRowsCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MergeCellsCommandArchive_descriptor_, &MergeCellsCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyPlaceholderTextCommandArchive_descriptor_, &ApplyPlaceholderTextCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyHighlightTextCommandArchive_descriptor_, &ApplyHighlightTextCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateHyperlinkCommandArchive_descriptor_, &CreateHyperlinkCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveHyperlinkCommandArchive_descriptor_, &RemoveHyperlinkCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyHyperlinkCommandArchive_descriptor_, &ModifyHyperlinkCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateDateTimeFieldCommandArchive_descriptor_, &UpdateDateTimeFieldCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyRubyTextCommandArchive_descriptor_, &ApplyRubyTextCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveRubyTextCommandArchive_descriptor_, &RemoveRubyTextCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyRubyTextCommandArchive_descriptor_, &ModifyRubyTextCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyTOCSettingsBaseCommandArchive_descriptor_, &ModifyTOCSettingsBaseCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyTOCSettingsForTOCInfoCommandArchive_descriptor_, &ModifyTOCSettingsForTOCInfoCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyTOCSettingsPresetForThemeCommandArchive_descriptor_, &ModifyTOCSettingsPresetForThemeCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnchorAttachmentCommandArchive_descriptor_, &AnchorAttachmentCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TextApplyThemeCommandArchive_descriptor_, &TextApplyThemeCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoveColumnsCommandArchive_descriptor_, &MoveColumnsCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoveRowsCommandArchive_descriptor_, &MoveRowsCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShapeApplyPresetCommandArchive_descriptor_, &ShapeApplyPresetCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShapePasteStyleCommandArchive_descriptor_, &ShapePasteStyleCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StyleBaseCommandArchive_descriptor_, &StyleBaseCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StyleCreateCommandArchive_descriptor_, &StyleCreateCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StyleRenameCommandArchive_descriptor_, &StyleRenameCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StyleUpdateCommandArchive_descriptor_, &StyleUpdateCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StyleDeleteCommandArchive_descriptor_, &StyleDeleteCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StyleReorderCommandArchive_descriptor_, &StyleReorderCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StyleUpdatePropertyMapCommandArchive_descriptor_, &StyleUpdatePropertyMapCommandArchive::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TSWPCommandArchives_2eproto() {
  delete DummyCommandArchive::default_instance_;
  delete DummyCommandArchive_reflection_;
  delete TextCommandArchive::default_instance_;
  delete TextCommandArchive_reflection_;
  delete ReplaceAllTextCommandArchive::default_instance_;
  delete ReplaceAllTextCommandArchive_reflection_;
  delete FormatTextCommandArchive::default_instance_;
  delete FormatTextCommandArchive_reflection_;
  delete SetColumnStyleCommandArchive::default_instance_;
  delete SetColumnStyleCommandArchive_reflection_;
  delete ReplaceAllUsesOfStyleCommandArchive::default_instance_;
  delete ReplaceAllUsesOfStyleCommandArchive_reflection_;
  delete InsertAttachmentCommandArchive::default_instance_;
  delete InsertAttachmentCommandArchive_reflection_;
  delete InsertColumnsCommandArchive::default_instance_;
  delete InsertColumnsCommandArchive_reflection_;
  delete InsertRowsCommandArchive::default_instance_;
  delete InsertRowsCommandArchive_reflection_;
  delete RemoveColumnsCommandArchive::default_instance_;
  delete RemoveColumnsCommandArchive_reflection_;
  delete RemoveRowsCommandArchive::default_instance_;
  delete RemoveRowsCommandArchive_reflection_;
  delete MergeCellsCommandArchive::default_instance_;
  delete MergeCellsCommandArchive_reflection_;
  delete ApplyPlaceholderTextCommandArchive::default_instance_;
  delete ApplyPlaceholderTextCommandArchive_reflection_;
  delete ApplyHighlightTextCommandArchive::default_instance_;
  delete ApplyHighlightTextCommandArchive_reflection_;
  delete CreateHyperlinkCommandArchive::default_instance_;
  delete CreateHyperlinkCommandArchive_reflection_;
  delete RemoveHyperlinkCommandArchive::default_instance_;
  delete RemoveHyperlinkCommandArchive_reflection_;
  delete ModifyHyperlinkCommandArchive::default_instance_;
  delete ModifyHyperlinkCommandArchive_reflection_;
  delete UpdateDateTimeFieldCommandArchive::default_instance_;
  delete UpdateDateTimeFieldCommandArchive_reflection_;
  delete ApplyRubyTextCommandArchive::default_instance_;
  delete ApplyRubyTextCommandArchive_reflection_;
  delete RemoveRubyTextCommandArchive::default_instance_;
  delete RemoveRubyTextCommandArchive_reflection_;
  delete ModifyRubyTextCommandArchive::default_instance_;
  delete ModifyRubyTextCommandArchive_reflection_;
  delete ModifyTOCSettingsBaseCommandArchive::default_instance_;
  delete ModifyTOCSettingsBaseCommandArchive_reflection_;
  delete ModifyTOCSettingsForTOCInfoCommandArchive::default_instance_;
  delete ModifyTOCSettingsForTOCInfoCommandArchive_reflection_;
  delete ModifyTOCSettingsPresetForThemeCommandArchive::default_instance_;
  delete ModifyTOCSettingsPresetForThemeCommandArchive_reflection_;
  delete AnchorAttachmentCommandArchive::default_instance_;
  delete AnchorAttachmentCommandArchive_reflection_;
  delete TextApplyThemeCommandArchive::default_instance_;
  delete TextApplyThemeCommandArchive_reflection_;
  delete MoveColumnsCommandArchive::default_instance_;
  delete MoveColumnsCommandArchive_reflection_;
  delete MoveRowsCommandArchive::default_instance_;
  delete MoveRowsCommandArchive_reflection_;
  delete ShapeApplyPresetCommandArchive::default_instance_;
  delete ShapeApplyPresetCommandArchive_reflection_;
  delete ShapePasteStyleCommandArchive::default_instance_;
  delete ShapePasteStyleCommandArchive_reflection_;
  delete StyleBaseCommandArchive::default_instance_;
  delete StyleBaseCommandArchive_reflection_;
  delete StyleCreateCommandArchive::default_instance_;
  delete StyleCreateCommandArchive_reflection_;
  delete StyleRenameCommandArchive::default_instance_;
  delete StyleRenameCommandArchive_reflection_;
  delete StyleUpdateCommandArchive::default_instance_;
  delete StyleUpdateCommandArchive_reflection_;
  delete StyleDeleteCommandArchive::default_instance_;
  delete StyleDeleteCommandArchive_reflection_;
  delete StyleReorderCommandArchive::default_instance_;
  delete StyleReorderCommandArchive_reflection_;
  delete StyleUpdatePropertyMapCommandArchive::default_instance_;
  delete StyleUpdatePropertyMapCommandArchive_reflection_;
}

void protobuf_AddDesc_TSWPCommandArchives_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::TSP::protobuf_AddDesc_TSPMessages_2eproto();
  ::TSS::protobuf_AddDesc_TSSArchives_2eproto();
  ::TSD::protobuf_AddDesc_TSDArchives_2eproto();
  ::TSD::protobuf_AddDesc_TSDCommandArchives_2eproto();
  ::TSK::protobuf_AddDesc_TSKArchives_2eproto();
  ::TSWP::protobuf_AddDesc_TSWPArchives_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031TSWPCommandArchives.proto\022\004TSWP\032\021TSPMe"
    "ssages.proto\032\021TSSArchives.proto\032\021TSDArch"
    "ives.proto\032\030TSDCommandArchives.proto\032\021TS"
    "KArchives.proto\032\022TSWPArchives.proto\"\"\n\023D"
    "ummyCommandArchive\022\013\n\003foo\030\001 \002(\r\"\205\007\n\022Text"
    "CommandArchive\022\"\n\005super\030\001 \001(\0132\023.TSK.Comm"
    "andArchive\022\037\n\007storage\030\002 \001(\0132\016.TSP.Refere"
    "nce\022/\n\020undo_transaction\030\003 \001(\0132\025.TSWP.Und"
    "oTransaction\022\036\n\026restore_range_location\030\004"
    " \001(\r\022\034\n\024restore_range_length\030\005 \001(\r\022#\n\033re"
    "do_restore_range_location\030\006 \001(\r\022!\n\031redo_"
    "restore_range_length\030\007 \001(\r\022\032\n\022text_comma"
    "nd_flags\030\t \001(\r\022;\n\004kind\030\n \001(\0162\035.TSWP.Text"
    "CommandArchive.Kind:\016kKindContained\"\231\004\n\004"
    "Kind\022\022\n\016kKindContained\020\000\022\024\n\020kKindReplace"
    "Text\020\001\022\016\n\nkKindPaste\020\002\022\027\n\023kKindParagraph"
    "Style\020\003\022\022\n\016kKindListStyle\020\004\022\035\n\031kKindInde"
    "ntParagraphLevel\020\005\022\021\n\rkKindDragText\020\006\022\023\n"
    "\017kKindPasteStyle\020\007\022\034\n\030kKindApplyChangesI"
    "nRange\020\010\022\032\n\026kKindSetParagraphLevel\020\t\022\034\n\030"
    "kKindInsertCitationField\020\n\022 \n\034kKindInser"
    "tBibliographyEntry\020\013\022\035\n\031kKindFormatCitat"
    "ionFields\020\014\022\034\n\030kKindInsertTOCSmartField\020"
    "\r\022\034\n\030kKindInsertDateTimeField\020\016\022\034\n\030kKind"
    "UpdateDateTimeField\020\017\022%\n!kKindSetParagra"
    "phFirstTopicNumber\020\020\022\027\n\023kKindCharacterSt"
    "yle\020\021\022\025\n\021kKindRevertStyles\020\022\022\031\n\025kKindSet"
    "ParagraphBidi\020\023\"\243\001\n\034ReplaceAllTextComman"
    "dArchive\0221\n\005super\030\001 \001(\0132\".TSK.ReplaceAll"
    "ChildCommandArchive\022\037\n\007storage\030\002 \001(\0132\016.T"
    "SP.Reference\022/\n\020undo_transaction\030\003 \001(\0132\025"
    ".TSWP.UndoTransaction\"\356\001\n\030FormatTextComm"
    "andArchive\022\"\n\005super\030\001 \001(\0132\023.TSK.CommandA"
    "rchive\022\037\n\007storage\030\002 \001(\0132\016.TSP.Reference\022"
    "/\n\020undo_transaction\030\003 \001(\0132\025.TSWP.UndoTra"
    "nsaction\022 \n\030selection_range_location\030\010 \001"
    "(\r\022\036\n\026selection_range_length\030\t \001(\r\022\032\n\022te"
    "xt_command_flags\030\013 \001(\r\"\224\001\n\034SetColumnStyl"
    "eCommandArchive\022\"\n\005super\030\001 \001(\0132\023.TSK.Com"
    "mandArchive\022\037\n\007storage\030\002 \001(\0132\016.TSP.Refer"
    "ence\022/\n\020undo_transaction\030\003 \001(\0132\025.TSWP.Un"
    "doTransaction\"\233\001\n#ReplaceAllUsesOfStyleC"
    "ommandArchive\022\"\n\005super\030\001 \001(\0132\023.TSK.Comma"
    "ndArchive\022\037\n\007storage\030\002 \001(\0132\016.TSP.Referen"
    "ce\022/\n\020undo_transaction\030\003 \001(\0132\025.TSWP.Undo"
    "Transaction\"\340\002\n\036InsertAttachmentCommandA"
    "rchive\022\"\n\005super\030\001 \001(\0132\023.TSK.CommandArchi"
    "ve\022\037\n\007storage\030\002 \001(\0132\016.TSP.Reference\022 \n\030s"
    "election_range_location\030\003 \001(\r\022\036\n\026selecti"
    "on_range_length\030\004 \001(\r\022\"\n\nattachment\030\005 \001("
    "\0132\016.TSP.Reference\022/\n\020undo_transaction\030\006 "
    "\001(\0132\025.TSWP.UndoTransaction\022\032\n\022text_comma"
    "nd_flags\030\007 \001(\r\022#\n\033redo_restore_range_loc"
    "ation\030\010 \001(\r\022!\n\031redo_restore_range_length"
    "\030\t \001(\r\"\277\001\n\033InsertColumnsCommandArchive\022\""
    "\n\005super\030\001 \001(\0132\023.TSK.CommandArchive\022\037\n\007st"
    "orage\030\002 \001(\0132\016.TSP.Reference\022\024\n\014column_in"
    "dex\030\003 \001(\r\022\024\n\014column_count\030\004 \001(\r\022/\n\020undo_"
    "transaction\030\005 \001(\0132\025.TSWP.UndoTransaction"
    "\"\266\001\n\030InsertRowsCommandArchive\022\"\n\005super\030\001"
    " \001(\0132\023.TSK.CommandArchive\022\037\n\007storage\030\002 \001"
    "(\0132\016.TSP.Reference\022\021\n\trow_index\030\003 \001(\r\022\021\n"
    "\trow_count\030\004 \001(\r\022/\n\020undo_transaction\030\005 \001"
    "(\0132\025.TSWP.UndoTransaction\"\277\001\n\033RemoveColu"
    "mnsCommandArchive\022\"\n\005super\030\001 \001(\0132\023.TSK.C"
    "ommandArchive\022\037\n\007storage\030\002 \001(\0132\016.TSP.Ref"
    "erence\022\024\n\014column_index\030\003 \001(\r\022\024\n\014column_c"
    "ount\030\004 \001(\r\022/\n\020undo_transaction\030\005 \001(\0132\025.T"
    "SWP.UndoTransaction\"\266\001\n\030RemoveRowsComman"
    "dArchive\022\"\n\005super\030\001 \001(\0132\023.TSK.CommandArc"
    "hive\022\037\n\007storage\030\002 \001(\0132\016.TSP.Reference\022\021\n"
    "\trow_index\030\003 \001(\r\022\021\n\trow_count\030\004 \001(\r\022/\n\020u"
    "ndo_transaction\030\005 \001(\0132\025.TSWP.UndoTransac"
    "tion\"\326\001\n\030MergeCellsCommandArchive\022\"\n\005sup"
    "er\030\001 \001(\0132\023.TSK.CommandArchive\022\037\n\007storage"
    "\030\002 \001(\0132\016.TSP.Reference\022\013\n\003row\030\003 \001(\r\022\016\n\006c"
    "olumn\030\004 \001(\r\022\021\n\trow_count\030\005 \001(\r\022\024\n\014column"
    "_count\030\006 \001(\r\022/\n\020undo_transaction\030\007 \001(\0132\025"
    ".TSWP.UndoTransaction\"\334\001\n\"ApplyPlacehold"
    "erTextCommandArchive\022\"\n\005super\030\001 \001(\0132\023.TS"
    "K.CommandArchive\022\037\n\007storage\030\002 \001(\0132\016.TSP."
    "Reference\022 \n\030selection_range_location\030\003 "
    "\001(\r\022\036\n\026selection_range_length\030\004 \001(\r\022/\n\020u"
    "ndo_transaction\030\005 \001(\0132\025.TSWP.UndoTransac"
    "tion\"\352\001\n ApplyHighlightTextCommandArchiv"
    "e\022\"\n\005super\030\001 \001(\0132\023.TSK.CommandArchive\022\037\n"
    "\007storage\030\002 \001(\0132\016.TSP.Reference\022 \n\030select"
    "ion_range_location\030\003 \001(\r\022\036\n\026selection_ra"
    "nge_length\030\004 \001(\r\022/\n\020undo_transaction\030\005 \001"
    "(\0132\025.TSWP.UndoTransaction\022\016\n\006remove\030\006 \001("
    "\010\"\350\001\n\035CreateHyperlinkCommandArchive\022\"\n\005s"
    "uper\030\001 \001(\0132\023.TSK.CommandArchive\022\037\n\007stora"
    "ge\030\002 \001(\0132\016.TSP.Reference\022 \n\030selection_ra"
    "nge_location\030\003 \001(\r\022\036\n\026selection_range_le"
    "ngth\030\004 \001(\r\022\017\n\007url_ref\030\005 \001(\t\022/\n\020undo_tran"
    "saction\030\006 \001(\0132\025.TSWP.UndoTransaction\"\200\002\n"
    "\035RemoveHyperlinkCommandArchive\022\"\n\005super\030"
    "\001 \001(\0132\023.TSK.CommandArchive\022\037\n\007storage\030\002 "
    "\001(\0132\016.TSP.Reference\022 \n\030selection_range_l"
    "ocation\030\003 \001(\r\022\036\n\026selection_range_length\030"
    "\004 \001(\r\022/\n\020undo_transaction\030\005 \001(\0132\025.TSWP.U"
    "ndoTransaction\022\'\n\031is_remove_character_st"
    "yle\030\006 \001(\010:\004true\"\276\001\n\035ModifyHyperlinkComma"
    "ndArchive\022\"\n\005super\030\001 \001(\0132\023.TSK.CommandAr"
    "chive\022!\n\thyperlink\030\002 \001(\0132\016.TSP.Reference"
    "\022\024\n\014display_text\030\003 \001(\t\022\017\n\007url_ref\030\004 \001(\t\022"
    "/\n\020undo_transaction\030\005 \001(\0132\025.TSWP.UndoTra"
    "nsaction\"\246\002\n!UpdateDateTimeFieldCommandA"
    "rchive\022\'\n\005super\030\001 \001(\0132\030.TSWP.TextCommand"
    "Archive\022\'\n\017date_time_field\030\002 \001(\0132\016.TSP.R"
    "eference\022\027\n\004date\030\003 \001(\0132\t.TSP.Date\022J\n\ndat"
    "e_style\030\004 \001(\01626.TSWP.DateTimeSmartFieldA"
    "rchive.DateTimeFormatterStyle\022J\n\ntime_st"
    "yle\030\005 \001(\01626.TSWP.DateTimeSmartFieldArchi"
    "ve.DateTimeFormatterStyle\"\350\001\n\033ApplyRubyT"
    "extCommandArchive\022\"\n\005super\030\001 \001(\0132\023.TSK.C"
    "ommandArchive\022\037\n\007storage\030\002 \001(\0132\016.TSP.Ref"
    "erence\022 \n\030selection_range_location\030\003 \001(\r"
    "\022\036\n\026selection_range_length\030\004 \001(\r\022\021\n\truby"
    "_text\030\005 \001(\t\022/\n\020undo_transaction\030\006 \001(\0132\025."
    "TSWP.UndoTransaction\"\326\001\n\034RemoveRubyTextC"
    "ommandArchive\022\"\n\005super\030\001 \001(\0132\023.TSK.Comma"
    "ndArchive\022\037\n\007storage\030\002 \001(\0132\016.TSP.Referen"
    "ce\022 \n\030selection_range_location\030\003 \001(\r\022\036\n\026"
    "selection_range_length\030\004 \001(\r\022/\n\020undo_tra"
    "nsaction\030\005 \001(\0132\025.TSWP.UndoTransaction\"\275\001"
    "\n\034ModifyRubyTextCommandArchive\022\"\n\005super\030"
    "\001 \001(\0132\023.TSK.CommandArchive\022\"\n\nruby_field"
    "\030\002 \001(\0132\016.TSP.Reference\022\021\n\truby_text\030\003 \001("
    "\t\022\021\n\tbase_text\030\004 \001(\t\022/\n\020undo_transaction"
    "\030\005 \001(\0132\025.TSWP.UndoTransaction\"\235\001\n#Modify"
    "TOCSettingsBaseCommandArchive\022\"\n\005super\030\001"
    " \001(\0132\023.TSK.CommandArchive\022(\n\020old_toc_set"
    "tings\030\002 \001(\0132\016.TSP.Reference\022(\n\020new_toc_s"
    "ettings\030\003 \001(\0132\016.TSP.Reference\"\207\001\n)Modify"
    "TOCSettingsForTOCInfoCommandArchive\0228\n\005s"
    "uper\030\001 \001(\0132).TSWP.ModifyTOCSettingsBaseC"
    "ommandArchive\022 \n\010toc_info\030\002 \001(\0132\016.TSP.Re"
    "ference\"\236\001\n-ModifyTOCSettingsPresetForTh"
    "emeCommandArchive\0228\n\005super\030\001 \001(\0132).TSWP."
    "ModifyTOCSettingsBaseCommandArchive\022\035\n\005t"
    "heme\030\002 \001(\0132\016.TSP.Reference\022\024\n\014preset_ind"
    "ex\030\003 \001(\r\"\242\002\n\036AnchorAttachmentCommandArch"
    "ive\022\"\n\005super\030\001 \001(\0132\023.TSK.CommandArchive\022"
    "\037\n\007storage\030\002 \001(\0132\016.TSP.Reference\022\"\n\natta"
    "chment\030\003 \001(\0132\016.TSP.Reference\022\025\n\rh_offset"
    "_type\030\004 \001(\r\022\020\n\010h_offset\030\005 \001(\002\022\025\n\rv_offse"
    "t_type\030\006 \001(\r\022\020\n\010v_offset\030\007 \001(\002\022/\n\020undo_t"
    "ransaction\030\010 \001(\0132\025.TSWP.UndoTransaction\022"
    "\024\n\014is_html_wrap\030\t \001(\010\"\243\001\n\034TextApplyTheme"
    "CommandArchive\0221\n\005super\030\001 \001(\0132\".TSS.Appl"
    "yThemeChildCommandArchive\022\037\n\007storage\030\002 \001"
    "(\0132\016.TSP.Reference\022/\n\020undo_transaction\030\006"
    " \001(\0132\025.TSWP.UndoTransaction\"\306\001\n\031MoveColu"
    "mnsCommandArchive\022\"\n\005super\030\001 \001(\0132\023.TSK.C"
    "ommandArchive\022\037\n\007storage\030\002 \001(\0132\016.TSP.Ref"
    "erence\022\021\n\tsrc_index\030\003 \001(\r\022\021\n\tdst_index\030\004"
    " \001(\r\022\r\n\005count\030\005 \001(\r\022/\n\020undo_transaction\030"
    "\006 \001(\0132\025.TSWP.UndoTransaction\"\303\001\n\026MoveRow"
    "sCommandArchive\022\"\n\005super\030\001 \001(\0132\023.TSK.Com"
    "mandArchive\022\037\n\007storage\030\002 \001(\0132\016.TSP.Refer"
    "ence\022\021\n\tsrc_index\030\003 \001(\r\022\021\n\tdst_index\030\004 \001"
    "(\r\022\r\n\005count\030\005 \001(\r\022/\n\020undo_transaction\030\006 "
    "\001(\0132\025.TSWP.UndoTransaction\"T\n\036ShapeApply"
    "PresetCommandArchive\0222\n\005super\030\001 \002(\0132#.TS"
    "D.ShapeApplyPresetCommandArchive\"\303\001\n\035Sha"
    "pePasteStyleCommandArchive\022,\n\005super\030\001 \002("
    "\0132\035.TSD.PasteStyleCommandArchive\022\'\n\017para"
    "graph_style\030\002 \001(\0132\016.TSP.Reference\022\"\n\nlis"
    "t_style\030\003 \001(\0132\016.TSP.Reference\022\'\n\017charact"
    "er_style\030\004 \001(\0132\016.TSP.Reference\"{\n\027StyleB"
    "aseCommandArchive\022\"\n\005super\030\001 \001(\0132\023.TSK.C"
    "ommandArchive\022\035\n\005theme\030\002 \001(\0132\016.TSP.Refer"
    "ence\022\035\n\005style\030\003 \001(\0132\016.TSP.Reference\"_\n\031S"
    "tyleCreateCommandArchive\022,\n\005super\030\001 \001(\0132"
    "\035.TSWP.StyleBaseCommandArchive\022\024\n\014preset"
    "_index\030\002 \001(\r\"q\n\031StyleRenameCommandArchiv"
    "e\022,\n\005super\030\001 \001(\0132\035.TSWP.StyleBaseCommand"
    "Archive\022\024\n\014updated_name\030\002 \001(\t\022\020\n\010old_nam"
    "e\030\003 \001(\t\"\230\001\n\031StyleUpdateCommandArchive\022,\n"
    "\005super\030\001 \001(\0132\035.TSWP.StyleBaseCommandArch"
    "ive\022&\n\016original_style\030\002 \001(\0132\016.TSP.Refere"
    "nce\022%\n\rupdated_style\030\003 \001(\0132\016.TSP.Referen"
    "ce\"c\n\031StyleDeleteCommandArchive\022,\n\005super"
    "\030\001 \001(\0132\035.TSWP.StyleBaseCommandArchive\022\030\n"
    "\020old_preset_index\030\002 \001(\r\"~\n\032StyleReorderC"
    "ommandArchive\022,\n\005super\030\001 \001(\0132\035.TSWP.Styl"
    "eBaseCommandArchive\022\030\n\020old_preset_index\030"
    "\002 \001(\r\022\030\n\020new_preset_index\030\003 \001(\r\"`\n$Style"
    "UpdatePropertyMapCommandArchive\0228\n\005super"
    "\030\001 \002(\0132).TSS.StyleUpdatePropertyMapComma"
    "ndArchive", 7649);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TSWPCommandArchives.proto", &protobuf_RegisterTypes);
  DummyCommandArchive::default_instance_ = new DummyCommandArchive();
  TextCommandArchive::default_instance_ = new TextCommandArchive();
  ReplaceAllTextCommandArchive::default_instance_ = new ReplaceAllTextCommandArchive();
  FormatTextCommandArchive::default_instance_ = new FormatTextCommandArchive();
  SetColumnStyleCommandArchive::default_instance_ = new SetColumnStyleCommandArchive();
  ReplaceAllUsesOfStyleCommandArchive::default_instance_ = new ReplaceAllUsesOfStyleCommandArchive();
  InsertAttachmentCommandArchive::default_instance_ = new InsertAttachmentCommandArchive();
  InsertColumnsCommandArchive::default_instance_ = new InsertColumnsCommandArchive();
  InsertRowsCommandArchive::default_instance_ = new InsertRowsCommandArchive();
  RemoveColumnsCommandArchive::default_instance_ = new RemoveColumnsCommandArchive();
  RemoveRowsCommandArchive::default_instance_ = new RemoveRowsCommandArchive();
  MergeCellsCommandArchive::default_instance_ = new MergeCellsCommandArchive();
  ApplyPlaceholderTextCommandArchive::default_instance_ = new ApplyPlaceholderTextCommandArchive();
  ApplyHighlightTextCommandArchive::default_instance_ = new ApplyHighlightTextCommandArchive();
  CreateHyperlinkCommandArchive::default_instance_ = new CreateHyperlinkCommandArchive();
  RemoveHyperlinkCommandArchive::default_instance_ = new RemoveHyperlinkCommandArchive();
  ModifyHyperlinkCommandArchive::default_instance_ = new ModifyHyperlinkCommandArchive();
  UpdateDateTimeFieldCommandArchive::default_instance_ = new UpdateDateTimeFieldCommandArchive();
  ApplyRubyTextCommandArchive::default_instance_ = new ApplyRubyTextCommandArchive();
  RemoveRubyTextCommandArchive::default_instance_ = new RemoveRubyTextCommandArchive();
  ModifyRubyTextCommandArchive::default_instance_ = new ModifyRubyTextCommandArchive();
  ModifyTOCSettingsBaseCommandArchive::default_instance_ = new ModifyTOCSettingsBaseCommandArchive();
  ModifyTOCSettingsForTOCInfoCommandArchive::default_instance_ = new ModifyTOCSettingsForTOCInfoCommandArchive();
  ModifyTOCSettingsPresetForThemeCommandArchive::default_instance_ = new ModifyTOCSettingsPresetForThemeCommandArchive();
  AnchorAttachmentCommandArchive::default_instance_ = new AnchorAttachmentCommandArchive();
  TextApplyThemeCommandArchive::default_instance_ = new TextApplyThemeCommandArchive();
  MoveColumnsCommandArchive::default_instance_ = new MoveColumnsCommandArchive();
  MoveRowsCommandArchive::default_instance_ = new MoveRowsCommandArchive();
  ShapeApplyPresetCommandArchive::default_instance_ = new ShapeApplyPresetCommandArchive();
  ShapePasteStyleCommandArchive::default_instance_ = new ShapePasteStyleCommandArchive();
  StyleBaseCommandArchive::default_instance_ = new StyleBaseCommandArchive();
  StyleCreateCommandArchive::default_instance_ = new StyleCreateCommandArchive();
  StyleRenameCommandArchive::default_instance_ = new StyleRenameCommandArchive();
  StyleUpdateCommandArchive::default_instance_ = new StyleUpdateCommandArchive();
  StyleDeleteCommandArchive::default_instance_ = new StyleDeleteCommandArchive();
  StyleReorderCommandArchive::default_instance_ = new StyleReorderCommandArchive();
  StyleUpdatePropertyMapCommandArchive::default_instance_ = new StyleUpdatePropertyMapCommandArchive();
  DummyCommandArchive::default_instance_->InitAsDefaultInstance();
  TextCommandArchive::default_instance_->InitAsDefaultInstance();
  ReplaceAllTextCommandArchive::default_instance_->InitAsDefaultInstance();
  FormatTextCommandArchive::default_instance_->InitAsDefaultInstance();
  SetColumnStyleCommandArchive::default_instance_->InitAsDefaultInstance();
  ReplaceAllUsesOfStyleCommandArchive::default_instance_->InitAsDefaultInstance();
  InsertAttachmentCommandArchive::default_instance_->InitAsDefaultInstance();
  InsertColumnsCommandArchive::default_instance_->InitAsDefaultInstance();
  InsertRowsCommandArchive::default_instance_->InitAsDefaultInstance();
  RemoveColumnsCommandArchive::default_instance_->InitAsDefaultInstance();
  RemoveRowsCommandArchive::default_instance_->InitAsDefaultInstance();
  MergeCellsCommandArchive::default_instance_->InitAsDefaultInstance();
  ApplyPlaceholderTextCommandArchive::default_instance_->InitAsDefaultInstance();
  ApplyHighlightTextCommandArchive::default_instance_->InitAsDefaultInstance();
  CreateHyperlinkCommandArchive::default_instance_->InitAsDefaultInstance();
  RemoveHyperlinkCommandArchive::default_instance_->InitAsDefaultInstance();
  ModifyHyperlinkCommandArchive::default_instance_->InitAsDefaultInstance();
  UpdateDateTimeFieldCommandArchive::default_instance_->InitAsDefaultInstance();
  ApplyRubyTextCommandArchive::default_instance_->InitAsDefaultInstance();
  RemoveRubyTextCommandArchive::default_instance_->InitAsDefaultInstance();
  ModifyRubyTextCommandArchive::default_instance_->InitAsDefaultInstance();
  ModifyTOCSettingsBaseCommandArchive::default_instance_->InitAsDefaultInstance();
  ModifyTOCSettingsForTOCInfoCommandArchive::default_instance_->InitAsDefaultInstance();
  ModifyTOCSettingsPresetForThemeCommandArchive::default_instance_->InitAsDefaultInstance();
  AnchorAttachmentCommandArchive::default_instance_->InitAsDefaultInstance();
  TextApplyThemeCommandArchive::default_instance_->InitAsDefaultInstance();
  MoveColumnsCommandArchive::default_instance_->InitAsDefaultInstance();
  MoveRowsCommandArchive::default_instance_->InitAsDefaultInstance();
  ShapeApplyPresetCommandArchive::default_instance_->InitAsDefaultInstance();
  ShapePasteStyleCommandArchive::default_instance_->InitAsDefaultInstance();
  StyleBaseCommandArchive::default_instance_->InitAsDefaultInstance();
  StyleCreateCommandArchive::default_instance_->InitAsDefaultInstance();
  StyleRenameCommandArchive::default_instance_->InitAsDefaultInstance();
  StyleUpdateCommandArchive::default_instance_->InitAsDefaultInstance();
  StyleDeleteCommandArchive::default_instance_->InitAsDefaultInstance();
  StyleReorderCommandArchive::default_instance_->InitAsDefaultInstance();
  StyleUpdatePropertyMapCommandArchive::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TSWPCommandArchives_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TSWPCommandArchives_2eproto {
  StaticDescriptorInitializer_TSWPCommandArchives_2eproto() {
    protobuf_AddDesc_TSWPCommandArchives_2eproto();
  }
} static_descriptor_initializer_TSWPCommandArchives_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DummyCommandArchive::kFooFieldNumber;
#endif  // !_MSC_VER

DummyCommandArchive::DummyCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DummyCommandArchive::InitAsDefaultInstance() {
}

DummyCommandArchive::DummyCommandArchive(const DummyCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DummyCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  foo_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DummyCommandArchive::~DummyCommandArchive() {
  SharedDtor();
}

void DummyCommandArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DummyCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DummyCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DummyCommandArchive_descriptor_;
}

const DummyCommandArchive& DummyCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPCommandArchives_2eproto();
  return *default_instance_;
}

DummyCommandArchive* DummyCommandArchive::default_instance_ = NULL;

DummyCommandArchive* DummyCommandArchive::New() const {
  return new DummyCommandArchive;
}

void DummyCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    foo_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DummyCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 foo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &foo_)));
          set_has_foo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DummyCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 foo = 1;
  if (has_foo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->foo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DummyCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 foo = 1;
  if (has_foo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->foo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DummyCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 foo = 1;
    if (has_foo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->foo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DummyCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DummyCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DummyCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DummyCommandArchive::MergeFrom(const DummyCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_foo()) {
      set_foo(from.foo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DummyCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DummyCommandArchive::CopyFrom(const DummyCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DummyCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DummyCommandArchive::Swap(DummyCommandArchive* other) {
  if (other != this) {
    std::swap(foo_, other->foo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DummyCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DummyCommandArchive_descriptor_;
  metadata.reflection = DummyCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* TextCommandArchive_Kind_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TextCommandArchive_Kind_descriptor_;
}
bool TextCommandArchive_Kind_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TextCommandArchive_Kind TextCommandArchive::kKindContained;
const TextCommandArchive_Kind TextCommandArchive::kKindReplaceText;
const TextCommandArchive_Kind TextCommandArchive::kKindPaste;
const TextCommandArchive_Kind TextCommandArchive::kKindParagraphStyle;
const TextCommandArchive_Kind TextCommandArchive::kKindListStyle;
const TextCommandArchive_Kind TextCommandArchive::kKindIndentParagraphLevel;
const TextCommandArchive_Kind TextCommandArchive::kKindDragText;
const TextCommandArchive_Kind TextCommandArchive::kKindPasteStyle;
const TextCommandArchive_Kind TextCommandArchive::kKindApplyChangesInRange;
const TextCommandArchive_Kind TextCommandArchive::kKindSetParagraphLevel;
const TextCommandArchive_Kind TextCommandArchive::kKindInsertCitationField;
const TextCommandArchive_Kind TextCommandArchive::kKindInsertBibliographyEntry;
const TextCommandArchive_Kind TextCommandArchive::kKindFormatCitationFields;
const TextCommandArchive_Kind TextCommandArchive::kKindInsertTOCSmartField;
const TextCommandArchive_Kind TextCommandArchive::kKindInsertDateTimeField;
const TextCommandArchive_Kind TextCommandArchive::kKindUpdateDateTimeField;
const TextCommandArchive_Kind TextCommandArchive::kKindSetParagraphFirstTopicNumber;
const TextCommandArchive_Kind TextCommandArchive::kKindCharacterStyle;
const TextCommandArchive_Kind TextCommandArchive::kKindRevertStyles;
const TextCommandArchive_Kind TextCommandArchive::kKindSetParagraphBidi;
const TextCommandArchive_Kind TextCommandArchive::Kind_MIN;
const TextCommandArchive_Kind TextCommandArchive::Kind_MAX;
const int TextCommandArchive::Kind_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TextCommandArchive::kSuperFieldNumber;
const int TextCommandArchive::kStorageFieldNumber;
const int TextCommandArchive::kUndoTransactionFieldNumber;
const int TextCommandArchive::kRestoreRangeLocationFieldNumber;
const int TextCommandArchive::kRestoreRangeLengthFieldNumber;
const int TextCommandArchive::kRedoRestoreRangeLocationFieldNumber;
const int TextCommandArchive::kRedoRestoreRangeLengthFieldNumber;
const int TextCommandArchive::kTextCommandFlagsFieldNumber;
const int TextCommandArchive::kKindFieldNumber;
#endif  // !_MSC_VER

TextCommandArchive::TextCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TextCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  storage_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  undo_transaction_ = const_cast< ::TSWP::UndoTransaction*>(&::TSWP::UndoTransaction::default_instance());
}

TextCommandArchive::TextCommandArchive(const TextCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TextCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  storage_ = NULL;
  undo_transaction_ = NULL;
  restore_range_location_ = 0u;
  restore_range_length_ = 0u;
  redo_restore_range_location_ = 0u;
  redo_restore_range_length_ = 0u;
  text_command_flags_ = 0u;
  kind_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TextCommandArchive::~TextCommandArchive() {
  SharedDtor();
}

void TextCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete storage_;
    delete undo_transaction_;
  }
}

void TextCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TextCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TextCommandArchive_descriptor_;
}

const TextCommandArchive& TextCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPCommandArchives_2eproto();
  return *default_instance_;
}

TextCommandArchive* TextCommandArchive::default_instance_ = NULL;

TextCommandArchive* TextCommandArchive::New() const {
  return new TextCommandArchive;
}

void TextCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_storage()) {
      if (storage_ != NULL) storage_->::TSP::Reference::Clear();
    }
    if (has_undo_transaction()) {
      if (undo_transaction_ != NULL) undo_transaction_->::TSWP::UndoTransaction::Clear();
    }
    restore_range_location_ = 0u;
    restore_range_length_ = 0u;
    redo_restore_range_location_ = 0u;
    redo_restore_range_length_ = 0u;
    text_command_flags_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    kind_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TextCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_storage;
        break;
      }

      // optional .TSP.Reference storage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_undo_transaction;
        break;
      }

      // optional .TSWP.UndoTransaction undo_transaction = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_transaction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_transaction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_restore_range_location;
        break;
      }

      // optional uint32 restore_range_location = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_restore_range_location:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &restore_range_location_)));
          set_has_restore_range_location();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_restore_range_length;
        break;
      }

      // optional uint32 restore_range_length = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_restore_range_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &restore_range_length_)));
          set_has_restore_range_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_redo_restore_range_location;
        break;
      }

      // optional uint32 redo_restore_range_location = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_redo_restore_range_location:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &redo_restore_range_location_)));
          set_has_redo_restore_range_location();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_redo_restore_range_length;
        break;
      }

      // optional uint32 redo_restore_range_length = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_redo_restore_range_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &redo_restore_range_length_)));
          set_has_redo_restore_range_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_text_command_flags;
        break;
      }

      // optional uint32 text_command_flags = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_text_command_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &text_command_flags_)));
          set_has_text_command_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_kind;
        break;
      }

      // optional .TSWP.TextCommandArchive.Kind kind = 10 [default = kKindContained];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kind:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSWP::TextCommandArchive_Kind_IsValid(value)) {
            set_kind(static_cast< ::TSWP::TextCommandArchive_Kind >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TextCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference storage = 2;
  if (has_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->storage(), output);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 3;
  if (has_undo_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->undo_transaction(), output);
  }

  // optional uint32 restore_range_location = 4;
  if (has_restore_range_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->restore_range_location(), output);
  }

  // optional uint32 restore_range_length = 5;
  if (has_restore_range_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->restore_range_length(), output);
  }

  // optional uint32 redo_restore_range_location = 6;
  if (has_redo_restore_range_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->redo_restore_range_location(), output);
  }

  // optional uint32 redo_restore_range_length = 7;
  if (has_redo_restore_range_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->redo_restore_range_length(), output);
  }

  // optional uint32 text_command_flags = 9;
  if (has_text_command_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->text_command_flags(), output);
  }

  // optional .TSWP.TextCommandArchive.Kind kind = 10 [default = kKindContained];
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->kind(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TextCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference storage = 2;
  if (has_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->storage(), target);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 3;
  if (has_undo_transaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->undo_transaction(), target);
  }

  // optional uint32 restore_range_location = 4;
  if (has_restore_range_location()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->restore_range_location(), target);
  }

  // optional uint32 restore_range_length = 5;
  if (has_restore_range_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->restore_range_length(), target);
  }

  // optional uint32 redo_restore_range_location = 6;
  if (has_redo_restore_range_location()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->redo_restore_range_location(), target);
  }

  // optional uint32 redo_restore_range_length = 7;
  if (has_redo_restore_range_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->redo_restore_range_length(), target);
  }

  // optional uint32 text_command_flags = 9;
  if (has_text_command_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->text_command_flags(), target);
  }

  // optional .TSWP.TextCommandArchive.Kind kind = 10 [default = kKindContained];
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->kind(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TextCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference storage = 2;
    if (has_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->storage());
    }

    // optional .TSWP.UndoTransaction undo_transaction = 3;
    if (has_undo_transaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_transaction());
    }

    // optional uint32 restore_range_location = 4;
    if (has_restore_range_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->restore_range_location());
    }

    // optional uint32 restore_range_length = 5;
    if (has_restore_range_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->restore_range_length());
    }

    // optional uint32 redo_restore_range_location = 6;
    if (has_redo_restore_range_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->redo_restore_range_location());
    }

    // optional uint32 redo_restore_range_length = 7;
    if (has_redo_restore_range_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->redo_restore_range_length());
    }

    // optional uint32 text_command_flags = 9;
    if (has_text_command_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->text_command_flags());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .TSWP.TextCommandArchive.Kind kind = 10 [default = kKindContained];
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TextCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TextCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TextCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TextCommandArchive::MergeFrom(const TextCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_storage()) {
      mutable_storage()->::TSP::Reference::MergeFrom(from.storage());
    }
    if (from.has_undo_transaction()) {
      mutable_undo_transaction()->::TSWP::UndoTransaction::MergeFrom(from.undo_transaction());
    }
    if (from.has_restore_range_location()) {
      set_restore_range_location(from.restore_range_location());
    }
    if (from.has_restore_range_length()) {
      set_restore_range_length(from.restore_range_length());
    }
    if (from.has_redo_restore_range_location()) {
      set_redo_restore_range_location(from.redo_restore_range_location());
    }
    if (from.has_redo_restore_range_length()) {
      set_redo_restore_range_length(from.redo_restore_range_length());
    }
    if (from.has_text_command_flags()) {
      set_text_command_flags(from.text_command_flags());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_kind()) {
      set_kind(from.kind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TextCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextCommandArchive::CopyFrom(const TextCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextCommandArchive::IsInitialized() const {

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_storage()) {
    if (!this->storage().IsInitialized()) return false;
  }
  if (has_undo_transaction()) {
    if (!this->undo_transaction().IsInitialized()) return false;
  }
  return true;
}

void TextCommandArchive::Swap(TextCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(storage_, other->storage_);
    std::swap(undo_transaction_, other->undo_transaction_);
    std::swap(restore_range_location_, other->restore_range_location_);
    std::swap(restore_range_length_, other->restore_range_length_);
    std::swap(redo_restore_range_location_, other->redo_restore_range_location_);
    std::swap(redo_restore_range_length_, other->redo_restore_range_length_);
    std::swap(text_command_flags_, other->text_command_flags_);
    std::swap(kind_, other->kind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TextCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TextCommandArchive_descriptor_;
  metadata.reflection = TextCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplaceAllTextCommandArchive::kSuperFieldNumber;
const int ReplaceAllTextCommandArchive::kStorageFieldNumber;
const int ReplaceAllTextCommandArchive::kUndoTransactionFieldNumber;
#endif  // !_MSC_VER

ReplaceAllTextCommandArchive::ReplaceAllTextCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReplaceAllTextCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::ReplaceAllChildCommandArchive*>(&::TSK::ReplaceAllChildCommandArchive::default_instance());
  storage_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  undo_transaction_ = const_cast< ::TSWP::UndoTransaction*>(&::TSWP::UndoTransaction::default_instance());
}

ReplaceAllTextCommandArchive::ReplaceAllTextCommandArchive(const ReplaceAllTextCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReplaceAllTextCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  storage_ = NULL;
  undo_transaction_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplaceAllTextCommandArchive::~ReplaceAllTextCommandArchive() {
  SharedDtor();
}

void ReplaceAllTextCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete storage_;
    delete undo_transaction_;
  }
}

void ReplaceAllTextCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplaceAllTextCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplaceAllTextCommandArchive_descriptor_;
}

const ReplaceAllTextCommandArchive& ReplaceAllTextCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPCommandArchives_2eproto();
  return *default_instance_;
}

ReplaceAllTextCommandArchive* ReplaceAllTextCommandArchive::default_instance_ = NULL;

ReplaceAllTextCommandArchive* ReplaceAllTextCommandArchive::New() const {
  return new ReplaceAllTextCommandArchive;
}

void ReplaceAllTextCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::ReplaceAllChildCommandArchive::Clear();
    }
    if (has_storage()) {
      if (storage_ != NULL) storage_->::TSP::Reference::Clear();
    }
    if (has_undo_transaction()) {
      if (undo_transaction_ != NULL) undo_transaction_->::TSWP::UndoTransaction::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplaceAllTextCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSK.ReplaceAllChildCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_storage;
        break;
      }

      // optional .TSP.Reference storage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_undo_transaction;
        break;
      }

      // optional .TSWP.UndoTransaction undo_transaction = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_transaction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_transaction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReplaceAllTextCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSK.ReplaceAllChildCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference storage = 2;
  if (has_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->storage(), output);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 3;
  if (has_undo_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->undo_transaction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReplaceAllTextCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSK.ReplaceAllChildCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference storage = 2;
  if (has_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->storage(), target);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 3;
  if (has_undo_transaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->undo_transaction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReplaceAllTextCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSK.ReplaceAllChildCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference storage = 2;
    if (has_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->storage());
    }

    // optional .TSWP.UndoTransaction undo_transaction = 3;
    if (has_undo_transaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_transaction());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplaceAllTextCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplaceAllTextCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplaceAllTextCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplaceAllTextCommandArchive::MergeFrom(const ReplaceAllTextCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::ReplaceAllChildCommandArchive::MergeFrom(from.super());
    }
    if (from.has_storage()) {
      mutable_storage()->::TSP::Reference::MergeFrom(from.storage());
    }
    if (from.has_undo_transaction()) {
      mutable_undo_transaction()->::TSWP::UndoTransaction::MergeFrom(from.undo_transaction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplaceAllTextCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplaceAllTextCommandArchive::CopyFrom(const ReplaceAllTextCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplaceAllTextCommandArchive::IsInitialized() const {

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_storage()) {
    if (!this->storage().IsInitialized()) return false;
  }
  if (has_undo_transaction()) {
    if (!this->undo_transaction().IsInitialized()) return false;
  }
  return true;
}

void ReplaceAllTextCommandArchive::Swap(ReplaceAllTextCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(storage_, other->storage_);
    std::swap(undo_transaction_, other->undo_transaction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplaceAllTextCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplaceAllTextCommandArchive_descriptor_;
  metadata.reflection = ReplaceAllTextCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FormatTextCommandArchive::kSuperFieldNumber;
const int FormatTextCommandArchive::kStorageFieldNumber;
const int FormatTextCommandArchive::kUndoTransactionFieldNumber;
const int FormatTextCommandArchive::kSelectionRangeLocationFieldNumber;
const int FormatTextCommandArchive::kSelectionRangeLengthFieldNumber;
const int FormatTextCommandArchive::kTextCommandFlagsFieldNumber;
#endif  // !_MSC_VER

FormatTextCommandArchive::FormatTextCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FormatTextCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  storage_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  undo_transaction_ = const_cast< ::TSWP::UndoTransaction*>(&::TSWP::UndoTransaction::default_instance());
}

FormatTextCommandArchive::FormatTextCommandArchive(const FormatTextCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FormatTextCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  storage_ = NULL;
  undo_transaction_ = NULL;
  selection_range_location_ = 0u;
  selection_range_length_ = 0u;
  text_command_flags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FormatTextCommandArchive::~FormatTextCommandArchive() {
  SharedDtor();
}

void FormatTextCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete storage_;
    delete undo_transaction_;
  }
}

void FormatTextCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FormatTextCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FormatTextCommandArchive_descriptor_;
}

const FormatTextCommandArchive& FormatTextCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPCommandArchives_2eproto();
  return *default_instance_;
}

FormatTextCommandArchive* FormatTextCommandArchive::default_instance_ = NULL;

FormatTextCommandArchive* FormatTextCommandArchive::New() const {
  return new FormatTextCommandArchive;
}

void FormatTextCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_storage()) {
      if (storage_ != NULL) storage_->::TSP::Reference::Clear();
    }
    if (has_undo_transaction()) {
      if (undo_transaction_ != NULL) undo_transaction_->::TSWP::UndoTransaction::Clear();
    }
    selection_range_location_ = 0u;
    selection_range_length_ = 0u;
    text_command_flags_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FormatTextCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_storage;
        break;
      }

      // optional .TSP.Reference storage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_undo_transaction;
        break;
      }

      // optional .TSWP.UndoTransaction undo_transaction = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_transaction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_transaction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_selection_range_location;
        break;
      }

      // optional uint32 selection_range_location = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selection_range_location:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selection_range_location_)));
          set_has_selection_range_location();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_selection_range_length;
        break;
      }

      // optional uint32 selection_range_length = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selection_range_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selection_range_length_)));
          set_has_selection_range_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_text_command_flags;
        break;
      }

      // optional uint32 text_command_flags = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_text_command_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &text_command_flags_)));
          set_has_text_command_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FormatTextCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference storage = 2;
  if (has_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->storage(), output);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 3;
  if (has_undo_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->undo_transaction(), output);
  }

  // optional uint32 selection_range_location = 8;
  if (has_selection_range_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->selection_range_location(), output);
  }

  // optional uint32 selection_range_length = 9;
  if (has_selection_range_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->selection_range_length(), output);
  }

  // optional uint32 text_command_flags = 11;
  if (has_text_command_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->text_command_flags(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FormatTextCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference storage = 2;
  if (has_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->storage(), target);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 3;
  if (has_undo_transaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->undo_transaction(), target);
  }

  // optional uint32 selection_range_location = 8;
  if (has_selection_range_location()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->selection_range_location(), target);
  }

  // optional uint32 selection_range_length = 9;
  if (has_selection_range_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->selection_range_length(), target);
  }

  // optional uint32 text_command_flags = 11;
  if (has_text_command_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->text_command_flags(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FormatTextCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference storage = 2;
    if (has_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->storage());
    }

    // optional .TSWP.UndoTransaction undo_transaction = 3;
    if (has_undo_transaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_transaction());
    }

    // optional uint32 selection_range_location = 8;
    if (has_selection_range_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selection_range_location());
    }

    // optional uint32 selection_range_length = 9;
    if (has_selection_range_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selection_range_length());
    }

    // optional uint32 text_command_flags = 11;
    if (has_text_command_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->text_command_flags());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FormatTextCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FormatTextCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FormatTextCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FormatTextCommandArchive::MergeFrom(const FormatTextCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_storage()) {
      mutable_storage()->::TSP::Reference::MergeFrom(from.storage());
    }
    if (from.has_undo_transaction()) {
      mutable_undo_transaction()->::TSWP::UndoTransaction::MergeFrom(from.undo_transaction());
    }
    if (from.has_selection_range_location()) {
      set_selection_range_location(from.selection_range_location());
    }
    if (from.has_selection_range_length()) {
      set_selection_range_length(from.selection_range_length());
    }
    if (from.has_text_command_flags()) {
      set_text_command_flags(from.text_command_flags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FormatTextCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FormatTextCommandArchive::CopyFrom(const FormatTextCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormatTextCommandArchive::IsInitialized() const {

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_storage()) {
    if (!this->storage().IsInitialized()) return false;
  }
  if (has_undo_transaction()) {
    if (!this->undo_transaction().IsInitialized()) return false;
  }
  return true;
}

void FormatTextCommandArchive::Swap(FormatTextCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(storage_, other->storage_);
    std::swap(undo_transaction_, other->undo_transaction_);
    std::swap(selection_range_location_, other->selection_range_location_);
    std::swap(selection_range_length_, other->selection_range_length_);
    std::swap(text_command_flags_, other->text_command_flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FormatTextCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FormatTextCommandArchive_descriptor_;
  metadata.reflection = FormatTextCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetColumnStyleCommandArchive::kSuperFieldNumber;
const int SetColumnStyleCommandArchive::kStorageFieldNumber;
const int SetColumnStyleCommandArchive::kUndoTransactionFieldNumber;
#endif  // !_MSC_VER

SetColumnStyleCommandArchive::SetColumnStyleCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetColumnStyleCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  storage_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  undo_transaction_ = const_cast< ::TSWP::UndoTransaction*>(&::TSWP::UndoTransaction::default_instance());
}

SetColumnStyleCommandArchive::SetColumnStyleCommandArchive(const SetColumnStyleCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetColumnStyleCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  storage_ = NULL;
  undo_transaction_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetColumnStyleCommandArchive::~SetColumnStyleCommandArchive() {
  SharedDtor();
}

void SetColumnStyleCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete storage_;
    delete undo_transaction_;
  }
}

void SetColumnStyleCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetColumnStyleCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetColumnStyleCommandArchive_descriptor_;
}

const SetColumnStyleCommandArchive& SetColumnStyleCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPCommandArchives_2eproto();
  return *default_instance_;
}

SetColumnStyleCommandArchive* SetColumnStyleCommandArchive::default_instance_ = NULL;

SetColumnStyleCommandArchive* SetColumnStyleCommandArchive::New() const {
  return new SetColumnStyleCommandArchive;
}

void SetColumnStyleCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_storage()) {
      if (storage_ != NULL) storage_->::TSP::Reference::Clear();
    }
    if (has_undo_transaction()) {
      if (undo_transaction_ != NULL) undo_transaction_->::TSWP::UndoTransaction::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetColumnStyleCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_storage;
        break;
      }

      // optional .TSP.Reference storage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_undo_transaction;
        break;
      }

      // optional .TSWP.UndoTransaction undo_transaction = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_transaction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_transaction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetColumnStyleCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference storage = 2;
  if (has_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->storage(), output);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 3;
  if (has_undo_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->undo_transaction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetColumnStyleCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference storage = 2;
  if (has_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->storage(), target);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 3;
  if (has_undo_transaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->undo_transaction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetColumnStyleCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference storage = 2;
    if (has_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->storage());
    }

    // optional .TSWP.UndoTransaction undo_transaction = 3;
    if (has_undo_transaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_transaction());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetColumnStyleCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetColumnStyleCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetColumnStyleCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetColumnStyleCommandArchive::MergeFrom(const SetColumnStyleCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_storage()) {
      mutable_storage()->::TSP::Reference::MergeFrom(from.storage());
    }
    if (from.has_undo_transaction()) {
      mutable_undo_transaction()->::TSWP::UndoTransaction::MergeFrom(from.undo_transaction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetColumnStyleCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetColumnStyleCommandArchive::CopyFrom(const SetColumnStyleCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetColumnStyleCommandArchive::IsInitialized() const {

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_storage()) {
    if (!this->storage().IsInitialized()) return false;
  }
  if (has_undo_transaction()) {
    if (!this->undo_transaction().IsInitialized()) return false;
  }
  return true;
}

void SetColumnStyleCommandArchive::Swap(SetColumnStyleCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(storage_, other->storage_);
    std::swap(undo_transaction_, other->undo_transaction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetColumnStyleCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetColumnStyleCommandArchive_descriptor_;
  metadata.reflection = SetColumnStyleCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplaceAllUsesOfStyleCommandArchive::kSuperFieldNumber;
const int ReplaceAllUsesOfStyleCommandArchive::kStorageFieldNumber;
const int ReplaceAllUsesOfStyleCommandArchive::kUndoTransactionFieldNumber;
#endif  // !_MSC_VER

ReplaceAllUsesOfStyleCommandArchive::ReplaceAllUsesOfStyleCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReplaceAllUsesOfStyleCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  storage_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  undo_transaction_ = const_cast< ::TSWP::UndoTransaction*>(&::TSWP::UndoTransaction::default_instance());
}

ReplaceAllUsesOfStyleCommandArchive::ReplaceAllUsesOfStyleCommandArchive(const ReplaceAllUsesOfStyleCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReplaceAllUsesOfStyleCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  storage_ = NULL;
  undo_transaction_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplaceAllUsesOfStyleCommandArchive::~ReplaceAllUsesOfStyleCommandArchive() {
  SharedDtor();
}

void ReplaceAllUsesOfStyleCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete storage_;
    delete undo_transaction_;
  }
}

void ReplaceAllUsesOfStyleCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplaceAllUsesOfStyleCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplaceAllUsesOfStyleCommandArchive_descriptor_;
}

const ReplaceAllUsesOfStyleCommandArchive& ReplaceAllUsesOfStyleCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPCommandArchives_2eproto();
  return *default_instance_;
}

ReplaceAllUsesOfStyleCommandArchive* ReplaceAllUsesOfStyleCommandArchive::default_instance_ = NULL;

ReplaceAllUsesOfStyleCommandArchive* ReplaceAllUsesOfStyleCommandArchive::New() const {
  return new ReplaceAllUsesOfStyleCommandArchive;
}

void ReplaceAllUsesOfStyleCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_storage()) {
      if (storage_ != NULL) storage_->::TSP::Reference::Clear();
    }
    if (has_undo_transaction()) {
      if (undo_transaction_ != NULL) undo_transaction_->::TSWP::UndoTransaction::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplaceAllUsesOfStyleCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_storage;
        break;
      }

      // optional .TSP.Reference storage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_undo_transaction;
        break;
      }

      // optional .TSWP.UndoTransaction undo_transaction = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_transaction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_transaction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReplaceAllUsesOfStyleCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference storage = 2;
  if (has_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->storage(), output);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 3;
  if (has_undo_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->undo_transaction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReplaceAllUsesOfStyleCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference storage = 2;
  if (has_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->storage(), target);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 3;
  if (has_undo_transaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->undo_transaction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReplaceAllUsesOfStyleCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference storage = 2;
    if (has_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->storage());
    }

    // optional .TSWP.UndoTransaction undo_transaction = 3;
    if (has_undo_transaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_transaction());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplaceAllUsesOfStyleCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplaceAllUsesOfStyleCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplaceAllUsesOfStyleCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplaceAllUsesOfStyleCommandArchive::MergeFrom(const ReplaceAllUsesOfStyleCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_storage()) {
      mutable_storage()->::TSP::Reference::MergeFrom(from.storage());
    }
    if (from.has_undo_transaction()) {
      mutable_undo_transaction()->::TSWP::UndoTransaction::MergeFrom(from.undo_transaction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplaceAllUsesOfStyleCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplaceAllUsesOfStyleCommandArchive::CopyFrom(const ReplaceAllUsesOfStyleCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplaceAllUsesOfStyleCommandArchive::IsInitialized() const {

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_storage()) {
    if (!this->storage().IsInitialized()) return false;
  }
  if (has_undo_transaction()) {
    if (!this->undo_transaction().IsInitialized()) return false;
  }
  return true;
}

void ReplaceAllUsesOfStyleCommandArchive::Swap(ReplaceAllUsesOfStyleCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(storage_, other->storage_);
    std::swap(undo_transaction_, other->undo_transaction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplaceAllUsesOfStyleCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplaceAllUsesOfStyleCommandArchive_descriptor_;
  metadata.reflection = ReplaceAllUsesOfStyleCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InsertAttachmentCommandArchive::kSuperFieldNumber;
const int InsertAttachmentCommandArchive::kStorageFieldNumber;
const int InsertAttachmentCommandArchive::kSelectionRangeLocationFieldNumber;
const int InsertAttachmentCommandArchive::kSelectionRangeLengthFieldNumber;
const int InsertAttachmentCommandArchive::kAttachmentFieldNumber;
const int InsertAttachmentCommandArchive::kUndoTransactionFieldNumber;
const int InsertAttachmentCommandArchive::kTextCommandFlagsFieldNumber;
const int InsertAttachmentCommandArchive::kRedoRestoreRangeLocationFieldNumber;
const int InsertAttachmentCommandArchive::kRedoRestoreRangeLengthFieldNumber;
#endif  // !_MSC_VER

InsertAttachmentCommandArchive::InsertAttachmentCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InsertAttachmentCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  storage_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  attachment_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  undo_transaction_ = const_cast< ::TSWP::UndoTransaction*>(&::TSWP::UndoTransaction::default_instance());
}

InsertAttachmentCommandArchive::InsertAttachmentCommandArchive(const InsertAttachmentCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InsertAttachmentCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  storage_ = NULL;
  selection_range_location_ = 0u;
  selection_range_length_ = 0u;
  attachment_ = NULL;
  undo_transaction_ = NULL;
  text_command_flags_ = 0u;
  redo_restore_range_location_ = 0u;
  redo_restore_range_length_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InsertAttachmentCommandArchive::~InsertAttachmentCommandArchive() {
  SharedDtor();
}

void InsertAttachmentCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete storage_;
    delete attachment_;
    delete undo_transaction_;
  }
}

void InsertAttachmentCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InsertAttachmentCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InsertAttachmentCommandArchive_descriptor_;
}

const InsertAttachmentCommandArchive& InsertAttachmentCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPCommandArchives_2eproto();
  return *default_instance_;
}

InsertAttachmentCommandArchive* InsertAttachmentCommandArchive::default_instance_ = NULL;

InsertAttachmentCommandArchive* InsertAttachmentCommandArchive::New() const {
  return new InsertAttachmentCommandArchive;
}

void InsertAttachmentCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_storage()) {
      if (storage_ != NULL) storage_->::TSP::Reference::Clear();
    }
    selection_range_location_ = 0u;
    selection_range_length_ = 0u;
    if (has_attachment()) {
      if (attachment_ != NULL) attachment_->::TSP::Reference::Clear();
    }
    if (has_undo_transaction()) {
      if (undo_transaction_ != NULL) undo_transaction_->::TSWP::UndoTransaction::Clear();
    }
    text_command_flags_ = 0u;
    redo_restore_range_location_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    redo_restore_range_length_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InsertAttachmentCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_storage;
        break;
      }

      // optional .TSP.Reference storage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_selection_range_location;
        break;
      }

      // optional uint32 selection_range_location = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selection_range_location:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selection_range_location_)));
          set_has_selection_range_location();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_selection_range_length;
        break;
      }

      // optional uint32 selection_range_length = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selection_range_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selection_range_length_)));
          set_has_selection_range_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_attachment;
        break;
      }

      // optional .TSP.Reference attachment = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attachment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attachment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_undo_transaction;
        break;
      }

      // optional .TSWP.UndoTransaction undo_transaction = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_transaction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_transaction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_text_command_flags;
        break;
      }

      // optional uint32 text_command_flags = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_text_command_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &text_command_flags_)));
          set_has_text_command_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_redo_restore_range_location;
        break;
      }

      // optional uint32 redo_restore_range_location = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_redo_restore_range_location:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &redo_restore_range_location_)));
          set_has_redo_restore_range_location();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_redo_restore_range_length;
        break;
      }

      // optional uint32 redo_restore_range_length = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_redo_restore_range_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &redo_restore_range_length_)));
          set_has_redo_restore_range_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InsertAttachmentCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference storage = 2;
  if (has_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->storage(), output);
  }

  // optional uint32 selection_range_location = 3;
  if (has_selection_range_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->selection_range_location(), output);
  }

  // optional uint32 selection_range_length = 4;
  if (has_selection_range_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->selection_range_length(), output);
  }

  // optional .TSP.Reference attachment = 5;
  if (has_attachment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->attachment(), output);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 6;
  if (has_undo_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->undo_transaction(), output);
  }

  // optional uint32 text_command_flags = 7;
  if (has_text_command_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->text_command_flags(), output);
  }

  // optional uint32 redo_restore_range_location = 8;
  if (has_redo_restore_range_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->redo_restore_range_location(), output);
  }

  // optional uint32 redo_restore_range_length = 9;
  if (has_redo_restore_range_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->redo_restore_range_length(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InsertAttachmentCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference storage = 2;
  if (has_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->storage(), target);
  }

  // optional uint32 selection_range_location = 3;
  if (has_selection_range_location()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->selection_range_location(), target);
  }

  // optional uint32 selection_range_length = 4;
  if (has_selection_range_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->selection_range_length(), target);
  }

  // optional .TSP.Reference attachment = 5;
  if (has_attachment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->attachment(), target);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 6;
  if (has_undo_transaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->undo_transaction(), target);
  }

  // optional uint32 text_command_flags = 7;
  if (has_text_command_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->text_command_flags(), target);
  }

  // optional uint32 redo_restore_range_location = 8;
  if (has_redo_restore_range_location()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->redo_restore_range_location(), target);
  }

  // optional uint32 redo_restore_range_length = 9;
  if (has_redo_restore_range_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->redo_restore_range_length(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InsertAttachmentCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference storage = 2;
    if (has_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->storage());
    }

    // optional uint32 selection_range_location = 3;
    if (has_selection_range_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selection_range_location());
    }

    // optional uint32 selection_range_length = 4;
    if (has_selection_range_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selection_range_length());
    }

    // optional .TSP.Reference attachment = 5;
    if (has_attachment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attachment());
    }

    // optional .TSWP.UndoTransaction undo_transaction = 6;
    if (has_undo_transaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_transaction());
    }

    // optional uint32 text_command_flags = 7;
    if (has_text_command_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->text_command_flags());
    }

    // optional uint32 redo_restore_range_location = 8;
    if (has_redo_restore_range_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->redo_restore_range_location());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 redo_restore_range_length = 9;
    if (has_redo_restore_range_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->redo_restore_range_length());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InsertAttachmentCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InsertAttachmentCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InsertAttachmentCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InsertAttachmentCommandArchive::MergeFrom(const InsertAttachmentCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_storage()) {
      mutable_storage()->::TSP::Reference::MergeFrom(from.storage());
    }
    if (from.has_selection_range_location()) {
      set_selection_range_location(from.selection_range_location());
    }
    if (from.has_selection_range_length()) {
      set_selection_range_length(from.selection_range_length());
    }
    if (from.has_attachment()) {
      mutable_attachment()->::TSP::Reference::MergeFrom(from.attachment());
    }
    if (from.has_undo_transaction()) {
      mutable_undo_transaction()->::TSWP::UndoTransaction::MergeFrom(from.undo_transaction());
    }
    if (from.has_text_command_flags()) {
      set_text_command_flags(from.text_command_flags());
    }
    if (from.has_redo_restore_range_location()) {
      set_redo_restore_range_location(from.redo_restore_range_location());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_redo_restore_range_length()) {
      set_redo_restore_range_length(from.redo_restore_range_length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InsertAttachmentCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertAttachmentCommandArchive::CopyFrom(const InsertAttachmentCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertAttachmentCommandArchive::IsInitialized() const {

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_storage()) {
    if (!this->storage().IsInitialized()) return false;
  }
  if (has_attachment()) {
    if (!this->attachment().IsInitialized()) return false;
  }
  if (has_undo_transaction()) {
    if (!this->undo_transaction().IsInitialized()) return false;
  }
  return true;
}

void InsertAttachmentCommandArchive::Swap(InsertAttachmentCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(storage_, other->storage_);
    std::swap(selection_range_location_, other->selection_range_location_);
    std::swap(selection_range_length_, other->selection_range_length_);
    std::swap(attachment_, other->attachment_);
    std::swap(undo_transaction_, other->undo_transaction_);
    std::swap(text_command_flags_, other->text_command_flags_);
    std::swap(redo_restore_range_location_, other->redo_restore_range_location_);
    std::swap(redo_restore_range_length_, other->redo_restore_range_length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InsertAttachmentCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InsertAttachmentCommandArchive_descriptor_;
  metadata.reflection = InsertAttachmentCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InsertColumnsCommandArchive::kSuperFieldNumber;
const int InsertColumnsCommandArchive::kStorageFieldNumber;
const int InsertColumnsCommandArchive::kColumnIndexFieldNumber;
const int InsertColumnsCommandArchive::kColumnCountFieldNumber;
const int InsertColumnsCommandArchive::kUndoTransactionFieldNumber;
#endif  // !_MSC_VER

InsertColumnsCommandArchive::InsertColumnsCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InsertColumnsCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  storage_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  undo_transaction_ = const_cast< ::TSWP::UndoTransaction*>(&::TSWP::UndoTransaction::default_instance());
}

InsertColumnsCommandArchive::InsertColumnsCommandArchive(const InsertColumnsCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InsertColumnsCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  storage_ = NULL;
  column_index_ = 0u;
  column_count_ = 0u;
  undo_transaction_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InsertColumnsCommandArchive::~InsertColumnsCommandArchive() {
  SharedDtor();
}

void InsertColumnsCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete storage_;
    delete undo_transaction_;
  }
}

void InsertColumnsCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InsertColumnsCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InsertColumnsCommandArchive_descriptor_;
}

const InsertColumnsCommandArchive& InsertColumnsCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPCommandArchives_2eproto();
  return *default_instance_;
}

InsertColumnsCommandArchive* InsertColumnsCommandArchive::default_instance_ = NULL;

InsertColumnsCommandArchive* InsertColumnsCommandArchive::New() const {
  return new InsertColumnsCommandArchive;
}

void InsertColumnsCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_storage()) {
      if (storage_ != NULL) storage_->::TSP::Reference::Clear();
    }
    column_index_ = 0u;
    column_count_ = 0u;
    if (has_undo_transaction()) {
      if (undo_transaction_ != NULL) undo_transaction_->::TSWP::UndoTransaction::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InsertColumnsCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_storage;
        break;
      }

      // optional .TSP.Reference storage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_column_index;
        break;
      }

      // optional uint32 column_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_column_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &column_index_)));
          set_has_column_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_column_count;
        break;
      }

      // optional uint32 column_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_column_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &column_count_)));
          set_has_column_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_undo_transaction;
        break;
      }

      // optional .TSWP.UndoTransaction undo_transaction = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_transaction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_transaction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InsertColumnsCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference storage = 2;
  if (has_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->storage(), output);
  }

  // optional uint32 column_index = 3;
  if (has_column_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->column_index(), output);
  }

  // optional uint32 column_count = 4;
  if (has_column_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->column_count(), output);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 5;
  if (has_undo_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->undo_transaction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InsertColumnsCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference storage = 2;
  if (has_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->storage(), target);
  }

  // optional uint32 column_index = 3;
  if (has_column_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->column_index(), target);
  }

  // optional uint32 column_count = 4;
  if (has_column_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->column_count(), target);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 5;
  if (has_undo_transaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->undo_transaction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InsertColumnsCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference storage = 2;
    if (has_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->storage());
    }

    // optional uint32 column_index = 3;
    if (has_column_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->column_index());
    }

    // optional uint32 column_count = 4;
    if (has_column_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->column_count());
    }

    // optional .TSWP.UndoTransaction undo_transaction = 5;
    if (has_undo_transaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_transaction());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InsertColumnsCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InsertColumnsCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InsertColumnsCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InsertColumnsCommandArchive::MergeFrom(const InsertColumnsCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_storage()) {
      mutable_storage()->::TSP::Reference::MergeFrom(from.storage());
    }
    if (from.has_column_index()) {
      set_column_index(from.column_index());
    }
    if (from.has_column_count()) {
      set_column_count(from.column_count());
    }
    if (from.has_undo_transaction()) {
      mutable_undo_transaction()->::TSWP::UndoTransaction::MergeFrom(from.undo_transaction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InsertColumnsCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertColumnsCommandArchive::CopyFrom(const InsertColumnsCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertColumnsCommandArchive::IsInitialized() const {

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_storage()) {
    if (!this->storage().IsInitialized()) return false;
  }
  if (has_undo_transaction()) {
    if (!this->undo_transaction().IsInitialized()) return false;
  }
  return true;
}

void InsertColumnsCommandArchive::Swap(InsertColumnsCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(storage_, other->storage_);
    std::swap(column_index_, other->column_index_);
    std::swap(column_count_, other->column_count_);
    std::swap(undo_transaction_, other->undo_transaction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InsertColumnsCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InsertColumnsCommandArchive_descriptor_;
  metadata.reflection = InsertColumnsCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InsertRowsCommandArchive::kSuperFieldNumber;
const int InsertRowsCommandArchive::kStorageFieldNumber;
const int InsertRowsCommandArchive::kRowIndexFieldNumber;
const int InsertRowsCommandArchive::kRowCountFieldNumber;
const int InsertRowsCommandArchive::kUndoTransactionFieldNumber;
#endif  // !_MSC_VER

InsertRowsCommandArchive::InsertRowsCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InsertRowsCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  storage_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  undo_transaction_ = const_cast< ::TSWP::UndoTransaction*>(&::TSWP::UndoTransaction::default_instance());
}

InsertRowsCommandArchive::InsertRowsCommandArchive(const InsertRowsCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InsertRowsCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  storage_ = NULL;
  row_index_ = 0u;
  row_count_ = 0u;
  undo_transaction_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InsertRowsCommandArchive::~InsertRowsCommandArchive() {
  SharedDtor();
}

void InsertRowsCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete storage_;
    delete undo_transaction_;
  }
}

void InsertRowsCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InsertRowsCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InsertRowsCommandArchive_descriptor_;
}

const InsertRowsCommandArchive& InsertRowsCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPCommandArchives_2eproto();
  return *default_instance_;
}

InsertRowsCommandArchive* InsertRowsCommandArchive::default_instance_ = NULL;

InsertRowsCommandArchive* InsertRowsCommandArchive::New() const {
  return new InsertRowsCommandArchive;
}

void InsertRowsCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_storage()) {
      if (storage_ != NULL) storage_->::TSP::Reference::Clear();
    }
    row_index_ = 0u;
    row_count_ = 0u;
    if (has_undo_transaction()) {
      if (undo_transaction_ != NULL) undo_transaction_->::TSWP::UndoTransaction::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InsertRowsCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_storage;
        break;
      }

      // optional .TSP.Reference storage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_row_index;
        break;
      }

      // optional uint32 row_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_row_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &row_index_)));
          set_has_row_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_row_count;
        break;
      }

      // optional uint32 row_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_row_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &row_count_)));
          set_has_row_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_undo_transaction;
        break;
      }

      // optional .TSWP.UndoTransaction undo_transaction = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_transaction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_transaction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InsertRowsCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference storage = 2;
  if (has_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->storage(), output);
  }

  // optional uint32 row_index = 3;
  if (has_row_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->row_index(), output);
  }

  // optional uint32 row_count = 4;
  if (has_row_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->row_count(), output);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 5;
  if (has_undo_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->undo_transaction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InsertRowsCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference storage = 2;
  if (has_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->storage(), target);
  }

  // optional uint32 row_index = 3;
  if (has_row_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->row_index(), target);
  }

  // optional uint32 row_count = 4;
  if (has_row_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->row_count(), target);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 5;
  if (has_undo_transaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->undo_transaction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InsertRowsCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference storage = 2;
    if (has_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->storage());
    }

    // optional uint32 row_index = 3;
    if (has_row_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->row_index());
    }

    // optional uint32 row_count = 4;
    if (has_row_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->row_count());
    }

    // optional .TSWP.UndoTransaction undo_transaction = 5;
    if (has_undo_transaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_transaction());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InsertRowsCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InsertRowsCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InsertRowsCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InsertRowsCommandArchive::MergeFrom(const InsertRowsCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_storage()) {
      mutable_storage()->::TSP::Reference::MergeFrom(from.storage());
    }
    if (from.has_row_index()) {
      set_row_index(from.row_index());
    }
    if (from.has_row_count()) {
      set_row_count(from.row_count());
    }
    if (from.has_undo_transaction()) {
      mutable_undo_transaction()->::TSWP::UndoTransaction::MergeFrom(from.undo_transaction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InsertRowsCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertRowsCommandArchive::CopyFrom(const InsertRowsCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertRowsCommandArchive::IsInitialized() const {

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_storage()) {
    if (!this->storage().IsInitialized()) return false;
  }
  if (has_undo_transaction()) {
    if (!this->undo_transaction().IsInitialized()) return false;
  }
  return true;
}

void InsertRowsCommandArchive::Swap(InsertRowsCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(storage_, other->storage_);
    std::swap(row_index_, other->row_index_);
    std::swap(row_count_, other->row_count_);
    std::swap(undo_transaction_, other->undo_transaction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InsertRowsCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InsertRowsCommandArchive_descriptor_;
  metadata.reflection = InsertRowsCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveColumnsCommandArchive::kSuperFieldNumber;
const int RemoveColumnsCommandArchive::kStorageFieldNumber;
const int RemoveColumnsCommandArchive::kColumnIndexFieldNumber;
const int RemoveColumnsCommandArchive::kColumnCountFieldNumber;
const int RemoveColumnsCommandArchive::kUndoTransactionFieldNumber;
#endif  // !_MSC_VER

RemoveColumnsCommandArchive::RemoveColumnsCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveColumnsCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  storage_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  undo_transaction_ = const_cast< ::TSWP::UndoTransaction*>(&::TSWP::UndoTransaction::default_instance());
}

RemoveColumnsCommandArchive::RemoveColumnsCommandArchive(const RemoveColumnsCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveColumnsCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  storage_ = NULL;
  column_index_ = 0u;
  column_count_ = 0u;
  undo_transaction_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveColumnsCommandArchive::~RemoveColumnsCommandArchive() {
  SharedDtor();
}

void RemoveColumnsCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete storage_;
    delete undo_transaction_;
  }
}

void RemoveColumnsCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveColumnsCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveColumnsCommandArchive_descriptor_;
}

const RemoveColumnsCommandArchive& RemoveColumnsCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPCommandArchives_2eproto();
  return *default_instance_;
}

RemoveColumnsCommandArchive* RemoveColumnsCommandArchive::default_instance_ = NULL;

RemoveColumnsCommandArchive* RemoveColumnsCommandArchive::New() const {
  return new RemoveColumnsCommandArchive;
}

void RemoveColumnsCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_storage()) {
      if (storage_ != NULL) storage_->::TSP::Reference::Clear();
    }
    column_index_ = 0u;
    column_count_ = 0u;
    if (has_undo_transaction()) {
      if (undo_transaction_ != NULL) undo_transaction_->::TSWP::UndoTransaction::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveColumnsCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_storage;
        break;
      }

      // optional .TSP.Reference storage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_column_index;
        break;
      }

      // optional uint32 column_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_column_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &column_index_)));
          set_has_column_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_column_count;
        break;
      }

      // optional uint32 column_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_column_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &column_count_)));
          set_has_column_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_undo_transaction;
        break;
      }

      // optional .TSWP.UndoTransaction undo_transaction = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_transaction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_transaction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveColumnsCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference storage = 2;
  if (has_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->storage(), output);
  }

  // optional uint32 column_index = 3;
  if (has_column_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->column_index(), output);
  }

  // optional uint32 column_count = 4;
  if (has_column_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->column_count(), output);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 5;
  if (has_undo_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->undo_transaction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveColumnsCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference storage = 2;
  if (has_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->storage(), target);
  }

  // optional uint32 column_index = 3;
  if (has_column_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->column_index(), target);
  }

  // optional uint32 column_count = 4;
  if (has_column_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->column_count(), target);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 5;
  if (has_undo_transaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->undo_transaction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveColumnsCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference storage = 2;
    if (has_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->storage());
    }

    // optional uint32 column_index = 3;
    if (has_column_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->column_index());
    }

    // optional uint32 column_count = 4;
    if (has_column_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->column_count());
    }

    // optional .TSWP.UndoTransaction undo_transaction = 5;
    if (has_undo_transaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_transaction());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveColumnsCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveColumnsCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveColumnsCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveColumnsCommandArchive::MergeFrom(const RemoveColumnsCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_storage()) {
      mutable_storage()->::TSP::Reference::MergeFrom(from.storage());
    }
    if (from.has_column_index()) {
      set_column_index(from.column_index());
    }
    if (from.has_column_count()) {
      set_column_count(from.column_count());
    }
    if (from.has_undo_transaction()) {
      mutable_undo_transaction()->::TSWP::UndoTransaction::MergeFrom(from.undo_transaction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveColumnsCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveColumnsCommandArchive::CopyFrom(const RemoveColumnsCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveColumnsCommandArchive::IsInitialized() const {

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_storage()) {
    if (!this->storage().IsInitialized()) return false;
  }
  if (has_undo_transaction()) {
    if (!this->undo_transaction().IsInitialized()) return false;
  }
  return true;
}

void RemoveColumnsCommandArchive::Swap(RemoveColumnsCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(storage_, other->storage_);
    std::swap(column_index_, other->column_index_);
    std::swap(column_count_, other->column_count_);
    std::swap(undo_transaction_, other->undo_transaction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveColumnsCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveColumnsCommandArchive_descriptor_;
  metadata.reflection = RemoveColumnsCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveRowsCommandArchive::kSuperFieldNumber;
const int RemoveRowsCommandArchive::kStorageFieldNumber;
const int RemoveRowsCommandArchive::kRowIndexFieldNumber;
const int RemoveRowsCommandArchive::kRowCountFieldNumber;
const int RemoveRowsCommandArchive::kUndoTransactionFieldNumber;
#endif  // !_MSC_VER

RemoveRowsCommandArchive::RemoveRowsCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveRowsCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  storage_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  undo_transaction_ = const_cast< ::TSWP::UndoTransaction*>(&::TSWP::UndoTransaction::default_instance());
}

RemoveRowsCommandArchive::RemoveRowsCommandArchive(const RemoveRowsCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveRowsCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  storage_ = NULL;
  row_index_ = 0u;
  row_count_ = 0u;
  undo_transaction_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveRowsCommandArchive::~RemoveRowsCommandArchive() {
  SharedDtor();
}

void RemoveRowsCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete storage_;
    delete undo_transaction_;
  }
}

void RemoveRowsCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveRowsCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveRowsCommandArchive_descriptor_;
}

const RemoveRowsCommandArchive& RemoveRowsCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPCommandArchives_2eproto();
  return *default_instance_;
}

RemoveRowsCommandArchive* RemoveRowsCommandArchive::default_instance_ = NULL;

RemoveRowsCommandArchive* RemoveRowsCommandArchive::New() const {
  return new RemoveRowsCommandArchive;
}

void RemoveRowsCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_storage()) {
      if (storage_ != NULL) storage_->::TSP::Reference::Clear();
    }
    row_index_ = 0u;
    row_count_ = 0u;
    if (has_undo_transaction()) {
      if (undo_transaction_ != NULL) undo_transaction_->::TSWP::UndoTransaction::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveRowsCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_storage;
        break;
      }

      // optional .TSP.Reference storage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_row_index;
        break;
      }

      // optional uint32 row_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_row_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &row_index_)));
          set_has_row_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_row_count;
        break;
      }

      // optional uint32 row_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_row_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &row_count_)));
          set_has_row_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_undo_transaction;
        break;
      }

      // optional .TSWP.UndoTransaction undo_transaction = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_transaction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_transaction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveRowsCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference storage = 2;
  if (has_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->storage(), output);
  }

  // optional uint32 row_index = 3;
  if (has_row_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->row_index(), output);
  }

  // optional uint32 row_count = 4;
  if (has_row_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->row_count(), output);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 5;
  if (has_undo_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->undo_transaction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveRowsCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference storage = 2;
  if (has_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->storage(), target);
  }

  // optional uint32 row_index = 3;
  if (has_row_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->row_index(), target);
  }

  // optional uint32 row_count = 4;
  if (has_row_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->row_count(), target);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 5;
  if (has_undo_transaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->undo_transaction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveRowsCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference storage = 2;
    if (has_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->storage());
    }

    // optional uint32 row_index = 3;
    if (has_row_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->row_index());
    }

    // optional uint32 row_count = 4;
    if (has_row_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->row_count());
    }

    // optional .TSWP.UndoTransaction undo_transaction = 5;
    if (has_undo_transaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_transaction());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveRowsCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveRowsCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveRowsCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveRowsCommandArchive::MergeFrom(const RemoveRowsCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_storage()) {
      mutable_storage()->::TSP::Reference::MergeFrom(from.storage());
    }
    if (from.has_row_index()) {
      set_row_index(from.row_index());
    }
    if (from.has_row_count()) {
      set_row_count(from.row_count());
    }
    if (from.has_undo_transaction()) {
      mutable_undo_transaction()->::TSWP::UndoTransaction::MergeFrom(from.undo_transaction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveRowsCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveRowsCommandArchive::CopyFrom(const RemoveRowsCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveRowsCommandArchive::IsInitialized() const {

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_storage()) {
    if (!this->storage().IsInitialized()) return false;
  }
  if (has_undo_transaction()) {
    if (!this->undo_transaction().IsInitialized()) return false;
  }
  return true;
}

void RemoveRowsCommandArchive::Swap(RemoveRowsCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(storage_, other->storage_);
    std::swap(row_index_, other->row_index_);
    std::swap(row_count_, other->row_count_);
    std::swap(undo_transaction_, other->undo_transaction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveRowsCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveRowsCommandArchive_descriptor_;
  metadata.reflection = RemoveRowsCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MergeCellsCommandArchive::kSuperFieldNumber;
const int MergeCellsCommandArchive::kStorageFieldNumber;
const int MergeCellsCommandArchive::kRowFieldNumber;
const int MergeCellsCommandArchive::kColumnFieldNumber;
const int MergeCellsCommandArchive::kRowCountFieldNumber;
const int MergeCellsCommandArchive::kColumnCountFieldNumber;
const int MergeCellsCommandArchive::kUndoTransactionFieldNumber;
#endif  // !_MSC_VER

MergeCellsCommandArchive::MergeCellsCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MergeCellsCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  storage_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  undo_transaction_ = const_cast< ::TSWP::UndoTransaction*>(&::TSWP::UndoTransaction::default_instance());
}

MergeCellsCommandArchive::MergeCellsCommandArchive(const MergeCellsCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MergeCellsCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  storage_ = NULL;
  row_ = 0u;
  column_ = 0u;
  row_count_ = 0u;
  column_count_ = 0u;
  undo_transaction_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MergeCellsCommandArchive::~MergeCellsCommandArchive() {
  SharedDtor();
}

void MergeCellsCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete storage_;
    delete undo_transaction_;
  }
}

void MergeCellsCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MergeCellsCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MergeCellsCommandArchive_descriptor_;
}

const MergeCellsCommandArchive& MergeCellsCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPCommandArchives_2eproto();
  return *default_instance_;
}

MergeCellsCommandArchive* MergeCellsCommandArchive::default_instance_ = NULL;

MergeCellsCommandArchive* MergeCellsCommandArchive::New() const {
  return new MergeCellsCommandArchive;
}

void MergeCellsCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_storage()) {
      if (storage_ != NULL) storage_->::TSP::Reference::Clear();
    }
    row_ = 0u;
    column_ = 0u;
    row_count_ = 0u;
    column_count_ = 0u;
    if (has_undo_transaction()) {
      if (undo_transaction_ != NULL) undo_transaction_->::TSWP::UndoTransaction::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MergeCellsCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_storage;
        break;
      }

      // optional .TSP.Reference storage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_row;
        break;
      }

      // optional uint32 row = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_row:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &row_)));
          set_has_row();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_column;
        break;
      }

      // optional uint32 column = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_column:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &column_)));
          set_has_column();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_row_count;
        break;
      }

      // optional uint32 row_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_row_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &row_count_)));
          set_has_row_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_column_count;
        break;
      }

      // optional uint32 column_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_column_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &column_count_)));
          set_has_column_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_undo_transaction;
        break;
      }

      // optional .TSWP.UndoTransaction undo_transaction = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_transaction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_transaction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MergeCellsCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference storage = 2;
  if (has_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->storage(), output);
  }

  // optional uint32 row = 3;
  if (has_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->row(), output);
  }

  // optional uint32 column = 4;
  if (has_column()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->column(), output);
  }

  // optional uint32 row_count = 5;
  if (has_row_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->row_count(), output);
  }

  // optional uint32 column_count = 6;
  if (has_column_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->column_count(), output);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 7;
  if (has_undo_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->undo_transaction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MergeCellsCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference storage = 2;
  if (has_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->storage(), target);
  }

  // optional uint32 row = 3;
  if (has_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->row(), target);
  }

  // optional uint32 column = 4;
  if (has_column()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->column(), target);
  }

  // optional uint32 row_count = 5;
  if (has_row_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->row_count(), target);
  }

  // optional uint32 column_count = 6;
  if (has_column_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->column_count(), target);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 7;
  if (has_undo_transaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->undo_transaction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MergeCellsCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference storage = 2;
    if (has_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->storage());
    }

    // optional uint32 row = 3;
    if (has_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->row());
    }

    // optional uint32 column = 4;
    if (has_column()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->column());
    }

    // optional uint32 row_count = 5;
    if (has_row_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->row_count());
    }

    // optional uint32 column_count = 6;
    if (has_column_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->column_count());
    }

    // optional .TSWP.UndoTransaction undo_transaction = 7;
    if (has_undo_transaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_transaction());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MergeCellsCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MergeCellsCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MergeCellsCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MergeCellsCommandArchive::MergeFrom(const MergeCellsCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_storage()) {
      mutable_storage()->::TSP::Reference::MergeFrom(from.storage());
    }
    if (from.has_row()) {
      set_row(from.row());
    }
    if (from.has_column()) {
      set_column(from.column());
    }
    if (from.has_row_count()) {
      set_row_count(from.row_count());
    }
    if (from.has_column_count()) {
      set_column_count(from.column_count());
    }
    if (from.has_undo_transaction()) {
      mutable_undo_transaction()->::TSWP::UndoTransaction::MergeFrom(from.undo_transaction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MergeCellsCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MergeCellsCommandArchive::CopyFrom(const MergeCellsCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MergeCellsCommandArchive::IsInitialized() const {

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_storage()) {
    if (!this->storage().IsInitialized()) return false;
  }
  if (has_undo_transaction()) {
    if (!this->undo_transaction().IsInitialized()) return false;
  }
  return true;
}

void MergeCellsCommandArchive::Swap(MergeCellsCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(storage_, other->storage_);
    std::swap(row_, other->row_);
    std::swap(column_, other->column_);
    std::swap(row_count_, other->row_count_);
    std::swap(column_count_, other->column_count_);
    std::swap(undo_transaction_, other->undo_transaction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MergeCellsCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MergeCellsCommandArchive_descriptor_;
  metadata.reflection = MergeCellsCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplyPlaceholderTextCommandArchive::kSuperFieldNumber;
const int ApplyPlaceholderTextCommandArchive::kStorageFieldNumber;
const int ApplyPlaceholderTextCommandArchive::kSelectionRangeLocationFieldNumber;
const int ApplyPlaceholderTextCommandArchive::kSelectionRangeLengthFieldNumber;
const int ApplyPlaceholderTextCommandArchive::kUndoTransactionFieldNumber;
#endif  // !_MSC_VER

ApplyPlaceholderTextCommandArchive::ApplyPlaceholderTextCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplyPlaceholderTextCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  storage_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  undo_transaction_ = const_cast< ::TSWP::UndoTransaction*>(&::TSWP::UndoTransaction::default_instance());
}

ApplyPlaceholderTextCommandArchive::ApplyPlaceholderTextCommandArchive(const ApplyPlaceholderTextCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplyPlaceholderTextCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  storage_ = NULL;
  selection_range_location_ = 0u;
  selection_range_length_ = 0u;
  undo_transaction_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyPlaceholderTextCommandArchive::~ApplyPlaceholderTextCommandArchive() {
  SharedDtor();
}

void ApplyPlaceholderTextCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete storage_;
    delete undo_transaction_;
  }
}

void ApplyPlaceholderTextCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyPlaceholderTextCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyPlaceholderTextCommandArchive_descriptor_;
}

const ApplyPlaceholderTextCommandArchive& ApplyPlaceholderTextCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPCommandArchives_2eproto();
  return *default_instance_;
}

ApplyPlaceholderTextCommandArchive* ApplyPlaceholderTextCommandArchive::default_instance_ = NULL;

ApplyPlaceholderTextCommandArchive* ApplyPlaceholderTextCommandArchive::New() const {
  return new ApplyPlaceholderTextCommandArchive;
}

void ApplyPlaceholderTextCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_storage()) {
      if (storage_ != NULL) storage_->::TSP::Reference::Clear();
    }
    selection_range_location_ = 0u;
    selection_range_length_ = 0u;
    if (has_undo_transaction()) {
      if (undo_transaction_ != NULL) undo_transaction_->::TSWP::UndoTransaction::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplyPlaceholderTextCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_storage;
        break;
      }

      // optional .TSP.Reference storage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_selection_range_location;
        break;
      }

      // optional uint32 selection_range_location = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selection_range_location:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selection_range_location_)));
          set_has_selection_range_location();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_selection_range_length;
        break;
      }

      // optional uint32 selection_range_length = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selection_range_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selection_range_length_)));
          set_has_selection_range_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_undo_transaction;
        break;
      }

      // optional .TSWP.UndoTransaction undo_transaction = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_transaction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_transaction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ApplyPlaceholderTextCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference storage = 2;
  if (has_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->storage(), output);
  }

  // optional uint32 selection_range_location = 3;
  if (has_selection_range_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->selection_range_location(), output);
  }

  // optional uint32 selection_range_length = 4;
  if (has_selection_range_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->selection_range_length(), output);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 5;
  if (has_undo_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->undo_transaction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ApplyPlaceholderTextCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference storage = 2;
  if (has_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->storage(), target);
  }

  // optional uint32 selection_range_location = 3;
  if (has_selection_range_location()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->selection_range_location(), target);
  }

  // optional uint32 selection_range_length = 4;
  if (has_selection_range_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->selection_range_length(), target);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 5;
  if (has_undo_transaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->undo_transaction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ApplyPlaceholderTextCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference storage = 2;
    if (has_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->storage());
    }

    // optional uint32 selection_range_location = 3;
    if (has_selection_range_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selection_range_location());
    }

    // optional uint32 selection_range_length = 4;
    if (has_selection_range_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selection_range_length());
    }

    // optional .TSWP.UndoTransaction undo_transaction = 5;
    if (has_undo_transaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_transaction());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyPlaceholderTextCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplyPlaceholderTextCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplyPlaceholderTextCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplyPlaceholderTextCommandArchive::MergeFrom(const ApplyPlaceholderTextCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_storage()) {
      mutable_storage()->::TSP::Reference::MergeFrom(from.storage());
    }
    if (from.has_selection_range_location()) {
      set_selection_range_location(from.selection_range_location());
    }
    if (from.has_selection_range_length()) {
      set_selection_range_length(from.selection_range_length());
    }
    if (from.has_undo_transaction()) {
      mutable_undo_transaction()->::TSWP::UndoTransaction::MergeFrom(from.undo_transaction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplyPlaceholderTextCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyPlaceholderTextCommandArchive::CopyFrom(const ApplyPlaceholderTextCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyPlaceholderTextCommandArchive::IsInitialized() const {

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_storage()) {
    if (!this->storage().IsInitialized()) return false;
  }
  if (has_undo_transaction()) {
    if (!this->undo_transaction().IsInitialized()) return false;
  }
  return true;
}

void ApplyPlaceholderTextCommandArchive::Swap(ApplyPlaceholderTextCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(storage_, other->storage_);
    std::swap(selection_range_location_, other->selection_range_location_);
    std::swap(selection_range_length_, other->selection_range_length_);
    std::swap(undo_transaction_, other->undo_transaction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplyPlaceholderTextCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyPlaceholderTextCommandArchive_descriptor_;
  metadata.reflection = ApplyPlaceholderTextCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplyHighlightTextCommandArchive::kSuperFieldNumber;
const int ApplyHighlightTextCommandArchive::kStorageFieldNumber;
const int ApplyHighlightTextCommandArchive::kSelectionRangeLocationFieldNumber;
const int ApplyHighlightTextCommandArchive::kSelectionRangeLengthFieldNumber;
const int ApplyHighlightTextCommandArchive::kUndoTransactionFieldNumber;
const int ApplyHighlightTextCommandArchive::kRemoveFieldNumber;
#endif  // !_MSC_VER

ApplyHighlightTextCommandArchive::ApplyHighlightTextCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplyHighlightTextCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  storage_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  undo_transaction_ = const_cast< ::TSWP::UndoTransaction*>(&::TSWP::UndoTransaction::default_instance());
}

ApplyHighlightTextCommandArchive::ApplyHighlightTextCommandArchive(const ApplyHighlightTextCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplyHighlightTextCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  storage_ = NULL;
  selection_range_location_ = 0u;
  selection_range_length_ = 0u;
  undo_transaction_ = NULL;
  remove_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyHighlightTextCommandArchive::~ApplyHighlightTextCommandArchive() {
  SharedDtor();
}

void ApplyHighlightTextCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete storage_;
    delete undo_transaction_;
  }
}

void ApplyHighlightTextCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyHighlightTextCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyHighlightTextCommandArchive_descriptor_;
}

const ApplyHighlightTextCommandArchive& ApplyHighlightTextCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPCommandArchives_2eproto();
  return *default_instance_;
}

ApplyHighlightTextCommandArchive* ApplyHighlightTextCommandArchive::default_instance_ = NULL;

ApplyHighlightTextCommandArchive* ApplyHighlightTextCommandArchive::New() const {
  return new ApplyHighlightTextCommandArchive;
}

void ApplyHighlightTextCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_storage()) {
      if (storage_ != NULL) storage_->::TSP::Reference::Clear();
    }
    selection_range_location_ = 0u;
    selection_range_length_ = 0u;
    if (has_undo_transaction()) {
      if (undo_transaction_ != NULL) undo_transaction_->::TSWP::UndoTransaction::Clear();
    }
    remove_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplyHighlightTextCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_storage;
        break;
      }

      // optional .TSP.Reference storage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_selection_range_location;
        break;
      }

      // optional uint32 selection_range_location = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selection_range_location:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selection_range_location_)));
          set_has_selection_range_location();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_selection_range_length;
        break;
      }

      // optional uint32 selection_range_length = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selection_range_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selection_range_length_)));
          set_has_selection_range_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_undo_transaction;
        break;
      }

      // optional .TSWP.UndoTransaction undo_transaction = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_transaction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_transaction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_remove;
        break;
      }

      // optional bool remove = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remove:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &remove_)));
          set_has_remove();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ApplyHighlightTextCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference storage = 2;
  if (has_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->storage(), output);
  }

  // optional uint32 selection_range_location = 3;
  if (has_selection_range_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->selection_range_location(), output);
  }

  // optional uint32 selection_range_length = 4;
  if (has_selection_range_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->selection_range_length(), output);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 5;
  if (has_undo_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->undo_transaction(), output);
  }

  // optional bool remove = 6;
  if (has_remove()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->remove(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ApplyHighlightTextCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference storage = 2;
  if (has_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->storage(), target);
  }

  // optional uint32 selection_range_location = 3;
  if (has_selection_range_location()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->selection_range_location(), target);
  }

  // optional uint32 selection_range_length = 4;
  if (has_selection_range_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->selection_range_length(), target);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 5;
  if (has_undo_transaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->undo_transaction(), target);
  }

  // optional bool remove = 6;
  if (has_remove()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->remove(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ApplyHighlightTextCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference storage = 2;
    if (has_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->storage());
    }

    // optional uint32 selection_range_location = 3;
    if (has_selection_range_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selection_range_location());
    }

    // optional uint32 selection_range_length = 4;
    if (has_selection_range_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selection_range_length());
    }

    // optional .TSWP.UndoTransaction undo_transaction = 5;
    if (has_undo_transaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_transaction());
    }

    // optional bool remove = 6;
    if (has_remove()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyHighlightTextCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplyHighlightTextCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplyHighlightTextCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplyHighlightTextCommandArchive::MergeFrom(const ApplyHighlightTextCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_storage()) {
      mutable_storage()->::TSP::Reference::MergeFrom(from.storage());
    }
    if (from.has_selection_range_location()) {
      set_selection_range_location(from.selection_range_location());
    }
    if (from.has_selection_range_length()) {
      set_selection_range_length(from.selection_range_length());
    }
    if (from.has_undo_transaction()) {
      mutable_undo_transaction()->::TSWP::UndoTransaction::MergeFrom(from.undo_transaction());
    }
    if (from.has_remove()) {
      set_remove(from.remove());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplyHighlightTextCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyHighlightTextCommandArchive::CopyFrom(const ApplyHighlightTextCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyHighlightTextCommandArchive::IsInitialized() const {

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_storage()) {
    if (!this->storage().IsInitialized()) return false;
  }
  if (has_undo_transaction()) {
    if (!this->undo_transaction().IsInitialized()) return false;
  }
  return true;
}

void ApplyHighlightTextCommandArchive::Swap(ApplyHighlightTextCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(storage_, other->storage_);
    std::swap(selection_range_location_, other->selection_range_location_);
    std::swap(selection_range_length_, other->selection_range_length_);
    std::swap(undo_transaction_, other->undo_transaction_);
    std::swap(remove_, other->remove_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplyHighlightTextCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyHighlightTextCommandArchive_descriptor_;
  metadata.reflection = ApplyHighlightTextCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateHyperlinkCommandArchive::kSuperFieldNumber;
const int CreateHyperlinkCommandArchive::kStorageFieldNumber;
const int CreateHyperlinkCommandArchive::kSelectionRangeLocationFieldNumber;
const int CreateHyperlinkCommandArchive::kSelectionRangeLengthFieldNumber;
const int CreateHyperlinkCommandArchive::kUrlRefFieldNumber;
const int CreateHyperlinkCommandArchive::kUndoTransactionFieldNumber;
#endif  // !_MSC_VER

CreateHyperlinkCommandArchive::CreateHyperlinkCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateHyperlinkCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  storage_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  undo_transaction_ = const_cast< ::TSWP::UndoTransaction*>(&::TSWP::UndoTransaction::default_instance());
}

CreateHyperlinkCommandArchive::CreateHyperlinkCommandArchive(const CreateHyperlinkCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateHyperlinkCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  storage_ = NULL;
  selection_range_location_ = 0u;
  selection_range_length_ = 0u;
  url_ref_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  undo_transaction_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateHyperlinkCommandArchive::~CreateHyperlinkCommandArchive() {
  SharedDtor();
}

void CreateHyperlinkCommandArchive::SharedDtor() {
  if (url_ref_ != &::google::protobuf::internal::kEmptyString) {
    delete url_ref_;
  }
  if (this != default_instance_) {
    delete super_;
    delete storage_;
    delete undo_transaction_;
  }
}

void CreateHyperlinkCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateHyperlinkCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateHyperlinkCommandArchive_descriptor_;
}

const CreateHyperlinkCommandArchive& CreateHyperlinkCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPCommandArchives_2eproto();
  return *default_instance_;
}

CreateHyperlinkCommandArchive* CreateHyperlinkCommandArchive::default_instance_ = NULL;

CreateHyperlinkCommandArchive* CreateHyperlinkCommandArchive::New() const {
  return new CreateHyperlinkCommandArchive;
}

void CreateHyperlinkCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_storage()) {
      if (storage_ != NULL) storage_->::TSP::Reference::Clear();
    }
    selection_range_location_ = 0u;
    selection_range_length_ = 0u;
    if (has_url_ref()) {
      if (url_ref_ != &::google::protobuf::internal::kEmptyString) {
        url_ref_->clear();
      }
    }
    if (has_undo_transaction()) {
      if (undo_transaction_ != NULL) undo_transaction_->::TSWP::UndoTransaction::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateHyperlinkCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_storage;
        break;
      }

      // optional .TSP.Reference storage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_selection_range_location;
        break;
      }

      // optional uint32 selection_range_location = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selection_range_location:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selection_range_location_)));
          set_has_selection_range_location();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_selection_range_length;
        break;
      }

      // optional uint32 selection_range_length = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selection_range_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selection_range_length_)));
          set_has_selection_range_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_url_ref;
        break;
      }

      // optional string url_ref = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url_ref:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url_ref()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url_ref().data(), this->url_ref().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_undo_transaction;
        break;
      }

      // optional .TSWP.UndoTransaction undo_transaction = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_transaction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_transaction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateHyperlinkCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference storage = 2;
  if (has_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->storage(), output);
  }

  // optional uint32 selection_range_location = 3;
  if (has_selection_range_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->selection_range_location(), output);
  }

  // optional uint32 selection_range_length = 4;
  if (has_selection_range_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->selection_range_length(), output);
  }

  // optional string url_ref = 5;
  if (has_url_ref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url_ref().data(), this->url_ref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->url_ref(), output);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 6;
  if (has_undo_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->undo_transaction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateHyperlinkCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference storage = 2;
  if (has_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->storage(), target);
  }

  // optional uint32 selection_range_location = 3;
  if (has_selection_range_location()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->selection_range_location(), target);
  }

  // optional uint32 selection_range_length = 4;
  if (has_selection_range_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->selection_range_length(), target);
  }

  // optional string url_ref = 5;
  if (has_url_ref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url_ref().data(), this->url_ref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->url_ref(), target);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 6;
  if (has_undo_transaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->undo_transaction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateHyperlinkCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference storage = 2;
    if (has_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->storage());
    }

    // optional uint32 selection_range_location = 3;
    if (has_selection_range_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selection_range_location());
    }

    // optional uint32 selection_range_length = 4;
    if (has_selection_range_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selection_range_length());
    }

    // optional string url_ref = 5;
    if (has_url_ref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url_ref());
    }

    // optional .TSWP.UndoTransaction undo_transaction = 6;
    if (has_undo_transaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_transaction());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateHyperlinkCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateHyperlinkCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateHyperlinkCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateHyperlinkCommandArchive::MergeFrom(const CreateHyperlinkCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_storage()) {
      mutable_storage()->::TSP::Reference::MergeFrom(from.storage());
    }
    if (from.has_selection_range_location()) {
      set_selection_range_location(from.selection_range_location());
    }
    if (from.has_selection_range_length()) {
      set_selection_range_length(from.selection_range_length());
    }
    if (from.has_url_ref()) {
      set_url_ref(from.url_ref());
    }
    if (from.has_undo_transaction()) {
      mutable_undo_transaction()->::TSWP::UndoTransaction::MergeFrom(from.undo_transaction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateHyperlinkCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateHyperlinkCommandArchive::CopyFrom(const CreateHyperlinkCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateHyperlinkCommandArchive::IsInitialized() const {

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_storage()) {
    if (!this->storage().IsInitialized()) return false;
  }
  if (has_undo_transaction()) {
    if (!this->undo_transaction().IsInitialized()) return false;
  }
  return true;
}

void CreateHyperlinkCommandArchive::Swap(CreateHyperlinkCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(storage_, other->storage_);
    std::swap(selection_range_location_, other->selection_range_location_);
    std::swap(selection_range_length_, other->selection_range_length_);
    std::swap(url_ref_, other->url_ref_);
    std::swap(undo_transaction_, other->undo_transaction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateHyperlinkCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateHyperlinkCommandArchive_descriptor_;
  metadata.reflection = CreateHyperlinkCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveHyperlinkCommandArchive::kSuperFieldNumber;
const int RemoveHyperlinkCommandArchive::kStorageFieldNumber;
const int RemoveHyperlinkCommandArchive::kSelectionRangeLocationFieldNumber;
const int RemoveHyperlinkCommandArchive::kSelectionRangeLengthFieldNumber;
const int RemoveHyperlinkCommandArchive::kUndoTransactionFieldNumber;
const int RemoveHyperlinkCommandArchive::kIsRemoveCharacterStyleFieldNumber;
#endif  // !_MSC_VER

RemoveHyperlinkCommandArchive::RemoveHyperlinkCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveHyperlinkCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  storage_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  undo_transaction_ = const_cast< ::TSWP::UndoTransaction*>(&::TSWP::UndoTransaction::default_instance());
}

RemoveHyperlinkCommandArchive::RemoveHyperlinkCommandArchive(const RemoveHyperlinkCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveHyperlinkCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  storage_ = NULL;
  selection_range_location_ = 0u;
  selection_range_length_ = 0u;
  undo_transaction_ = NULL;
  is_remove_character_style_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveHyperlinkCommandArchive::~RemoveHyperlinkCommandArchive() {
  SharedDtor();
}

void RemoveHyperlinkCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete storage_;
    delete undo_transaction_;
  }
}

void RemoveHyperlinkCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveHyperlinkCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveHyperlinkCommandArchive_descriptor_;
}

const RemoveHyperlinkCommandArchive& RemoveHyperlinkCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPCommandArchives_2eproto();
  return *default_instance_;
}

RemoveHyperlinkCommandArchive* RemoveHyperlinkCommandArchive::default_instance_ = NULL;

RemoveHyperlinkCommandArchive* RemoveHyperlinkCommandArchive::New() const {
  return new RemoveHyperlinkCommandArchive;
}

void RemoveHyperlinkCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_storage()) {
      if (storage_ != NULL) storage_->::TSP::Reference::Clear();
    }
    selection_range_location_ = 0u;
    selection_range_length_ = 0u;
    if (has_undo_transaction()) {
      if (undo_transaction_ != NULL) undo_transaction_->::TSWP::UndoTransaction::Clear();
    }
    is_remove_character_style_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveHyperlinkCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_storage;
        break;
      }

      // optional .TSP.Reference storage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_selection_range_location;
        break;
      }

      // optional uint32 selection_range_location = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selection_range_location:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selection_range_location_)));
          set_has_selection_range_location();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_selection_range_length;
        break;
      }

      // optional uint32 selection_range_length = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selection_range_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selection_range_length_)));
          set_has_selection_range_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_undo_transaction;
        break;
      }

      // optional .TSWP.UndoTransaction undo_transaction = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_transaction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_transaction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_remove_character_style;
        break;
      }

      // optional bool is_remove_character_style = 6 [default = true];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_remove_character_style:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_remove_character_style_)));
          set_has_is_remove_character_style();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveHyperlinkCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference storage = 2;
  if (has_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->storage(), output);
  }

  // optional uint32 selection_range_location = 3;
  if (has_selection_range_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->selection_range_location(), output);
  }

  // optional uint32 selection_range_length = 4;
  if (has_selection_range_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->selection_range_length(), output);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 5;
  if (has_undo_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->undo_transaction(), output);
  }

  // optional bool is_remove_character_style = 6 [default = true];
  if (has_is_remove_character_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_remove_character_style(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveHyperlinkCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference storage = 2;
  if (has_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->storage(), target);
  }

  // optional uint32 selection_range_location = 3;
  if (has_selection_range_location()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->selection_range_location(), target);
  }

  // optional uint32 selection_range_length = 4;
  if (has_selection_range_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->selection_range_length(), target);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 5;
  if (has_undo_transaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->undo_transaction(), target);
  }

  // optional bool is_remove_character_style = 6 [default = true];
  if (has_is_remove_character_style()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_remove_character_style(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveHyperlinkCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference storage = 2;
    if (has_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->storage());
    }

    // optional uint32 selection_range_location = 3;
    if (has_selection_range_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selection_range_location());
    }

    // optional uint32 selection_range_length = 4;
    if (has_selection_range_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selection_range_length());
    }

    // optional .TSWP.UndoTransaction undo_transaction = 5;
    if (has_undo_transaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_transaction());
    }

    // optional bool is_remove_character_style = 6 [default = true];
    if (has_is_remove_character_style()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveHyperlinkCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveHyperlinkCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveHyperlinkCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveHyperlinkCommandArchive::MergeFrom(const RemoveHyperlinkCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_storage()) {
      mutable_storage()->::TSP::Reference::MergeFrom(from.storage());
    }
    if (from.has_selection_range_location()) {
      set_selection_range_location(from.selection_range_location());
    }
    if (from.has_selection_range_length()) {
      set_selection_range_length(from.selection_range_length());
    }
    if (from.has_undo_transaction()) {
      mutable_undo_transaction()->::TSWP::UndoTransaction::MergeFrom(from.undo_transaction());
    }
    if (from.has_is_remove_character_style()) {
      set_is_remove_character_style(from.is_remove_character_style());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveHyperlinkCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveHyperlinkCommandArchive::CopyFrom(const RemoveHyperlinkCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveHyperlinkCommandArchive::IsInitialized() const {

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_storage()) {
    if (!this->storage().IsInitialized()) return false;
  }
  if (has_undo_transaction()) {
    if (!this->undo_transaction().IsInitialized()) return false;
  }
  return true;
}

void RemoveHyperlinkCommandArchive::Swap(RemoveHyperlinkCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(storage_, other->storage_);
    std::swap(selection_range_location_, other->selection_range_location_);
    std::swap(selection_range_length_, other->selection_range_length_);
    std::swap(undo_transaction_, other->undo_transaction_);
    std::swap(is_remove_character_style_, other->is_remove_character_style_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveHyperlinkCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveHyperlinkCommandArchive_descriptor_;
  metadata.reflection = RemoveHyperlinkCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModifyHyperlinkCommandArchive::kSuperFieldNumber;
const int ModifyHyperlinkCommandArchive::kHyperlinkFieldNumber;
const int ModifyHyperlinkCommandArchive::kDisplayTextFieldNumber;
const int ModifyHyperlinkCommandArchive::kUrlRefFieldNumber;
const int ModifyHyperlinkCommandArchive::kUndoTransactionFieldNumber;
#endif  // !_MSC_VER

ModifyHyperlinkCommandArchive::ModifyHyperlinkCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModifyHyperlinkCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  hyperlink_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  undo_transaction_ = const_cast< ::TSWP::UndoTransaction*>(&::TSWP::UndoTransaction::default_instance());
}

ModifyHyperlinkCommandArchive::ModifyHyperlinkCommandArchive(const ModifyHyperlinkCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModifyHyperlinkCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  hyperlink_ = NULL;
  display_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  url_ref_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  undo_transaction_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyHyperlinkCommandArchive::~ModifyHyperlinkCommandArchive() {
  SharedDtor();
}

void ModifyHyperlinkCommandArchive::SharedDtor() {
  if (display_text_ != &::google::protobuf::internal::kEmptyString) {
    delete display_text_;
  }
  if (url_ref_ != &::google::protobuf::internal::kEmptyString) {
    delete url_ref_;
  }
  if (this != default_instance_) {
    delete super_;
    delete hyperlink_;
    delete undo_transaction_;
  }
}

void ModifyHyperlinkCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyHyperlinkCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyHyperlinkCommandArchive_descriptor_;
}

const ModifyHyperlinkCommandArchive& ModifyHyperlinkCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPCommandArchives_2eproto();
  return *default_instance_;
}

ModifyHyperlinkCommandArchive* ModifyHyperlinkCommandArchive::default_instance_ = NULL;

ModifyHyperlinkCommandArchive* ModifyHyperlinkCommandArchive::New() const {
  return new ModifyHyperlinkCommandArchive;
}

void ModifyHyperlinkCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_hyperlink()) {
      if (hyperlink_ != NULL) hyperlink_->::TSP::Reference::Clear();
    }
    if (has_display_text()) {
      if (display_text_ != &::google::protobuf::internal::kEmptyString) {
        display_text_->clear();
      }
    }
    if (has_url_ref()) {
      if (url_ref_ != &::google::protobuf::internal::kEmptyString) {
        url_ref_->clear();
      }
    }
    if (has_undo_transaction()) {
      if (undo_transaction_ != NULL) undo_transaction_->::TSWP::UndoTransaction::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyHyperlinkCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hyperlink;
        break;
      }

      // optional .TSP.Reference hyperlink = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hyperlink:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hyperlink()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_display_text;
        break;
      }

      // optional string display_text = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_display_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->display_text().data(), this->display_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_url_ref;
        break;
      }

      // optional string url_ref = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url_ref:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url_ref()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url_ref().data(), this->url_ref().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_undo_transaction;
        break;
      }

      // optional .TSWP.UndoTransaction undo_transaction = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_transaction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_transaction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyHyperlinkCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference hyperlink = 2;
  if (has_hyperlink()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hyperlink(), output);
  }

  // optional string display_text = 3;
  if (has_display_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->display_text().data(), this->display_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->display_text(), output);
  }

  // optional string url_ref = 4;
  if (has_url_ref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url_ref().data(), this->url_ref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->url_ref(), output);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 5;
  if (has_undo_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->undo_transaction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyHyperlinkCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference hyperlink = 2;
  if (has_hyperlink()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->hyperlink(), target);
  }

  // optional string display_text = 3;
  if (has_display_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->display_text().data(), this->display_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->display_text(), target);
  }

  // optional string url_ref = 4;
  if (has_url_ref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url_ref().data(), this->url_ref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->url_ref(), target);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 5;
  if (has_undo_transaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->undo_transaction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyHyperlinkCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference hyperlink = 2;
    if (has_hyperlink()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hyperlink());
    }

    // optional string display_text = 3;
    if (has_display_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->display_text());
    }

    // optional string url_ref = 4;
    if (has_url_ref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url_ref());
    }

    // optional .TSWP.UndoTransaction undo_transaction = 5;
    if (has_undo_transaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_transaction());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyHyperlinkCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyHyperlinkCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyHyperlinkCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyHyperlinkCommandArchive::MergeFrom(const ModifyHyperlinkCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_hyperlink()) {
      mutable_hyperlink()->::TSP::Reference::MergeFrom(from.hyperlink());
    }
    if (from.has_display_text()) {
      set_display_text(from.display_text());
    }
    if (from.has_url_ref()) {
      set_url_ref(from.url_ref());
    }
    if (from.has_undo_transaction()) {
      mutable_undo_transaction()->::TSWP::UndoTransaction::MergeFrom(from.undo_transaction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyHyperlinkCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyHyperlinkCommandArchive::CopyFrom(const ModifyHyperlinkCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyHyperlinkCommandArchive::IsInitialized() const {

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_hyperlink()) {
    if (!this->hyperlink().IsInitialized()) return false;
  }
  if (has_undo_transaction()) {
    if (!this->undo_transaction().IsInitialized()) return false;
  }
  return true;
}

void ModifyHyperlinkCommandArchive::Swap(ModifyHyperlinkCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(hyperlink_, other->hyperlink_);
    std::swap(display_text_, other->display_text_);
    std::swap(url_ref_, other->url_ref_);
    std::swap(undo_transaction_, other->undo_transaction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModifyHyperlinkCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyHyperlinkCommandArchive_descriptor_;
  metadata.reflection = ModifyHyperlinkCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateDateTimeFieldCommandArchive::kSuperFieldNumber;
const int UpdateDateTimeFieldCommandArchive::kDateTimeFieldFieldNumber;
const int UpdateDateTimeFieldCommandArchive::kDateFieldNumber;
const int UpdateDateTimeFieldCommandArchive::kDateStyleFieldNumber;
const int UpdateDateTimeFieldCommandArchive::kTimeStyleFieldNumber;
#endif  // !_MSC_VER

UpdateDateTimeFieldCommandArchive::UpdateDateTimeFieldCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateDateTimeFieldCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSWP::TextCommandArchive*>(&::TSWP::TextCommandArchive::default_instance());
  date_time_field_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  date_ = const_cast< ::TSP::Date*>(&::TSP::Date::default_instance());
}

UpdateDateTimeFieldCommandArchive::UpdateDateTimeFieldCommandArchive(const UpdateDateTimeFieldCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateDateTimeFieldCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  date_time_field_ = NULL;
  date_ = NULL;
  date_style_ = 0;
  time_style_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateDateTimeFieldCommandArchive::~UpdateDateTimeFieldCommandArchive() {
  SharedDtor();
}

void UpdateDateTimeFieldCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete date_time_field_;
    delete date_;
  }
}

void UpdateDateTimeFieldCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateDateTimeFieldCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateDateTimeFieldCommandArchive_descriptor_;
}

const UpdateDateTimeFieldCommandArchive& UpdateDateTimeFieldCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPCommandArchives_2eproto();
  return *default_instance_;
}

UpdateDateTimeFieldCommandArchive* UpdateDateTimeFieldCommandArchive::default_instance_ = NULL;

UpdateDateTimeFieldCommandArchive* UpdateDateTimeFieldCommandArchive::New() const {
  return new UpdateDateTimeFieldCommandArchive;
}

void UpdateDateTimeFieldCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSWP::TextCommandArchive::Clear();
    }
    if (has_date_time_field()) {
      if (date_time_field_ != NULL) date_time_field_->::TSP::Reference::Clear();
    }
    if (has_date()) {
      if (date_ != NULL) date_->::TSP::Date::Clear();
    }
    date_style_ = 0;
    time_style_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateDateTimeFieldCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSWP.TextCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_date_time_field;
        break;
      }

      // optional .TSP.Reference date_time_field = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_date_time_field:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_date_time_field()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_date;
        break;
      }

      // optional .TSP.Date date = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_date()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_date_style;
        break;
      }

      // optional .TSWP.DateTimeSmartFieldArchive.DateTimeFormatterStyle date_style = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_date_style:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle_IsValid(value)) {
            set_date_style(static_cast< ::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time_style;
        break;
      }

      // optional .TSWP.DateTimeSmartFieldArchive.DateTimeFormatterStyle time_style = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_style:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle_IsValid(value)) {
            set_time_style(static_cast< ::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateDateTimeFieldCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSWP.TextCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference date_time_field = 2;
  if (has_date_time_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->date_time_field(), output);
  }

  // optional .TSP.Date date = 3;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->date(), output);
  }

  // optional .TSWP.DateTimeSmartFieldArchive.DateTimeFormatterStyle date_style = 4;
  if (has_date_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->date_style(), output);
  }

  // optional .TSWP.DateTimeSmartFieldArchive.DateTimeFormatterStyle time_style = 5;
  if (has_time_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->time_style(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateDateTimeFieldCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSWP.TextCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference date_time_field = 2;
  if (has_date_time_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->date_time_field(), target);
  }

  // optional .TSP.Date date = 3;
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->date(), target);
  }

  // optional .TSWP.DateTimeSmartFieldArchive.DateTimeFormatterStyle date_style = 4;
  if (has_date_style()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->date_style(), target);
  }

  // optional .TSWP.DateTimeSmartFieldArchive.DateTimeFormatterStyle time_style = 5;
  if (has_time_style()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->time_style(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateDateTimeFieldCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSWP.TextCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference date_time_field = 2;
    if (has_date_time_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->date_time_field());
    }

    // optional .TSP.Date date = 3;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->date());
    }

    // optional .TSWP.DateTimeSmartFieldArchive.DateTimeFormatterStyle date_style = 4;
    if (has_date_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->date_style());
    }

    // optional .TSWP.DateTimeSmartFieldArchive.DateTimeFormatterStyle time_style = 5;
    if (has_time_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->time_style());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateDateTimeFieldCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateDateTimeFieldCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateDateTimeFieldCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateDateTimeFieldCommandArchive::MergeFrom(const UpdateDateTimeFieldCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSWP::TextCommandArchive::MergeFrom(from.super());
    }
    if (from.has_date_time_field()) {
      mutable_date_time_field()->::TSP::Reference::MergeFrom(from.date_time_field());
    }
    if (from.has_date()) {
      mutable_date()->::TSP::Date::MergeFrom(from.date());
    }
    if (from.has_date_style()) {
      set_date_style(from.date_style());
    }
    if (from.has_time_style()) {
      set_time_style(from.time_style());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateDateTimeFieldCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateDateTimeFieldCommandArchive::CopyFrom(const UpdateDateTimeFieldCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDateTimeFieldCommandArchive::IsInitialized() const {

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_date_time_field()) {
    if (!this->date_time_field().IsInitialized()) return false;
  }
  if (has_date()) {
    if (!this->date().IsInitialized()) return false;
  }
  return true;
}

void UpdateDateTimeFieldCommandArchive::Swap(UpdateDateTimeFieldCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(date_time_field_, other->date_time_field_);
    std::swap(date_, other->date_);
    std::swap(date_style_, other->date_style_);
    std::swap(time_style_, other->time_style_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateDateTimeFieldCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateDateTimeFieldCommandArchive_descriptor_;
  metadata.reflection = UpdateDateTimeFieldCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplyRubyTextCommandArchive::kSuperFieldNumber;
const int ApplyRubyTextCommandArchive::kStorageFieldNumber;
const int ApplyRubyTextCommandArchive::kSelectionRangeLocationFieldNumber;
const int ApplyRubyTextCommandArchive::kSelectionRangeLengthFieldNumber;
const int ApplyRubyTextCommandArchive::kRubyTextFieldNumber;
const int ApplyRubyTextCommandArchive::kUndoTransactionFieldNumber;
#endif  // !_MSC_VER

ApplyRubyTextCommandArchive::ApplyRubyTextCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplyRubyTextCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  storage_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  undo_transaction_ = const_cast< ::TSWP::UndoTransaction*>(&::TSWP::UndoTransaction::default_instance());
}

ApplyRubyTextCommandArchive::ApplyRubyTextCommandArchive(const ApplyRubyTextCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplyRubyTextCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  storage_ = NULL;
  selection_range_location_ = 0u;
  selection_range_length_ = 0u;
  ruby_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  undo_transaction_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyRubyTextCommandArchive::~ApplyRubyTextCommandArchive() {
  SharedDtor();
}

void ApplyRubyTextCommandArchive::SharedDtor() {
  if (ruby_text_ != &::google::protobuf::internal::kEmptyString) {
    delete ruby_text_;
  }
  if (this != default_instance_) {
    delete super_;
    delete storage_;
    delete undo_transaction_;
  }
}

void ApplyRubyTextCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyRubyTextCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyRubyTextCommandArchive_descriptor_;
}

const ApplyRubyTextCommandArchive& ApplyRubyTextCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPCommandArchives_2eproto();
  return *default_instance_;
}

ApplyRubyTextCommandArchive* ApplyRubyTextCommandArchive::default_instance_ = NULL;

ApplyRubyTextCommandArchive* ApplyRubyTextCommandArchive::New() const {
  return new ApplyRubyTextCommandArchive;
}

void ApplyRubyTextCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_storage()) {
      if (storage_ != NULL) storage_->::TSP::Reference::Clear();
    }
    selection_range_location_ = 0u;
    selection_range_length_ = 0u;
    if (has_ruby_text()) {
      if (ruby_text_ != &::google::protobuf::internal::kEmptyString) {
        ruby_text_->clear();
      }
    }
    if (has_undo_transaction()) {
      if (undo_transaction_ != NULL) undo_transaction_->::TSWP::UndoTransaction::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplyRubyTextCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_storage;
        break;
      }

      // optional .TSP.Reference storage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_selection_range_location;
        break;
      }

      // optional uint32 selection_range_location = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selection_range_location:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selection_range_location_)));
          set_has_selection_range_location();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_selection_range_length;
        break;
      }

      // optional uint32 selection_range_length = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selection_range_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selection_range_length_)));
          set_has_selection_range_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ruby_text;
        break;
      }

      // optional string ruby_text = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ruby_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ruby_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ruby_text().data(), this->ruby_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_undo_transaction;
        break;
      }

      // optional .TSWP.UndoTransaction undo_transaction = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_transaction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_transaction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ApplyRubyTextCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference storage = 2;
  if (has_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->storage(), output);
  }

  // optional uint32 selection_range_location = 3;
  if (has_selection_range_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->selection_range_location(), output);
  }

  // optional uint32 selection_range_length = 4;
  if (has_selection_range_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->selection_range_length(), output);
  }

  // optional string ruby_text = 5;
  if (has_ruby_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ruby_text().data(), this->ruby_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->ruby_text(), output);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 6;
  if (has_undo_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->undo_transaction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ApplyRubyTextCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference storage = 2;
  if (has_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->storage(), target);
  }

  // optional uint32 selection_range_location = 3;
  if (has_selection_range_location()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->selection_range_location(), target);
  }

  // optional uint32 selection_range_length = 4;
  if (has_selection_range_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->selection_range_length(), target);
  }

  // optional string ruby_text = 5;
  if (has_ruby_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ruby_text().data(), this->ruby_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ruby_text(), target);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 6;
  if (has_undo_transaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->undo_transaction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ApplyRubyTextCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference storage = 2;
    if (has_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->storage());
    }

    // optional uint32 selection_range_location = 3;
    if (has_selection_range_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selection_range_location());
    }

    // optional uint32 selection_range_length = 4;
    if (has_selection_range_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selection_range_length());
    }

    // optional string ruby_text = 5;
    if (has_ruby_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ruby_text());
    }

    // optional .TSWP.UndoTransaction undo_transaction = 6;
    if (has_undo_transaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_transaction());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyRubyTextCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplyRubyTextCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplyRubyTextCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplyRubyTextCommandArchive::MergeFrom(const ApplyRubyTextCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_storage()) {
      mutable_storage()->::TSP::Reference::MergeFrom(from.storage());
    }
    if (from.has_selection_range_location()) {
      set_selection_range_location(from.selection_range_location());
    }
    if (from.has_selection_range_length()) {
      set_selection_range_length(from.selection_range_length());
    }
    if (from.has_ruby_text()) {
      set_ruby_text(from.ruby_text());
    }
    if (from.has_undo_transaction()) {
      mutable_undo_transaction()->::TSWP::UndoTransaction::MergeFrom(from.undo_transaction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplyRubyTextCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyRubyTextCommandArchive::CopyFrom(const ApplyRubyTextCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyRubyTextCommandArchive::IsInitialized() const {

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_storage()) {
    if (!this->storage().IsInitialized()) return false;
  }
  if (has_undo_transaction()) {
    if (!this->undo_transaction().IsInitialized()) return false;
  }
  return true;
}

void ApplyRubyTextCommandArchive::Swap(ApplyRubyTextCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(storage_, other->storage_);
    std::swap(selection_range_location_, other->selection_range_location_);
    std::swap(selection_range_length_, other->selection_range_length_);
    std::swap(ruby_text_, other->ruby_text_);
    std::swap(undo_transaction_, other->undo_transaction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplyRubyTextCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyRubyTextCommandArchive_descriptor_;
  metadata.reflection = ApplyRubyTextCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveRubyTextCommandArchive::kSuperFieldNumber;
const int RemoveRubyTextCommandArchive::kStorageFieldNumber;
const int RemoveRubyTextCommandArchive::kSelectionRangeLocationFieldNumber;
const int RemoveRubyTextCommandArchive::kSelectionRangeLengthFieldNumber;
const int RemoveRubyTextCommandArchive::kUndoTransactionFieldNumber;
#endif  // !_MSC_VER

RemoveRubyTextCommandArchive::RemoveRubyTextCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveRubyTextCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  storage_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  undo_transaction_ = const_cast< ::TSWP::UndoTransaction*>(&::TSWP::UndoTransaction::default_instance());
}

RemoveRubyTextCommandArchive::RemoveRubyTextCommandArchive(const RemoveRubyTextCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveRubyTextCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  storage_ = NULL;
  selection_range_location_ = 0u;
  selection_range_length_ = 0u;
  undo_transaction_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveRubyTextCommandArchive::~RemoveRubyTextCommandArchive() {
  SharedDtor();
}

void RemoveRubyTextCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete storage_;
    delete undo_transaction_;
  }
}

void RemoveRubyTextCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveRubyTextCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveRubyTextCommandArchive_descriptor_;
}

const RemoveRubyTextCommandArchive& RemoveRubyTextCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPCommandArchives_2eproto();
  return *default_instance_;
}

RemoveRubyTextCommandArchive* RemoveRubyTextCommandArchive::default_instance_ = NULL;

RemoveRubyTextCommandArchive* RemoveRubyTextCommandArchive::New() const {
  return new RemoveRubyTextCommandArchive;
}

void RemoveRubyTextCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_storage()) {
      if (storage_ != NULL) storage_->::TSP::Reference::Clear();
    }
    selection_range_location_ = 0u;
    selection_range_length_ = 0u;
    if (has_undo_transaction()) {
      if (undo_transaction_ != NULL) undo_transaction_->::TSWP::UndoTransaction::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveRubyTextCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_storage;
        break;
      }

      // optional .TSP.Reference storage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_selection_range_location;
        break;
      }

      // optional uint32 selection_range_location = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selection_range_location:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selection_range_location_)));
          set_has_selection_range_location();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_selection_range_length;
        break;
      }

      // optional uint32 selection_range_length = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selection_range_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selection_range_length_)));
          set_has_selection_range_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_undo_transaction;
        break;
      }

      // optional .TSWP.UndoTransaction undo_transaction = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_transaction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_transaction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveRubyTextCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference storage = 2;
  if (has_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->storage(), output);
  }

  // optional uint32 selection_range_location = 3;
  if (has_selection_range_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->selection_range_location(), output);
  }

  // optional uint32 selection_range_length = 4;
  if (has_selection_range_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->selection_range_length(), output);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 5;
  if (has_undo_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->undo_transaction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveRubyTextCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference storage = 2;
  if (has_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->storage(), target);
  }

  // optional uint32 selection_range_location = 3;
  if (has_selection_range_location()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->selection_range_location(), target);
  }

  // optional uint32 selection_range_length = 4;
  if (has_selection_range_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->selection_range_length(), target);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 5;
  if (has_undo_transaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->undo_transaction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveRubyTextCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference storage = 2;
    if (has_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->storage());
    }

    // optional uint32 selection_range_location = 3;
    if (has_selection_range_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selection_range_location());
    }

    // optional uint32 selection_range_length = 4;
    if (has_selection_range_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selection_range_length());
    }

    // optional .TSWP.UndoTransaction undo_transaction = 5;
    if (has_undo_transaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_transaction());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveRubyTextCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveRubyTextCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveRubyTextCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveRubyTextCommandArchive::MergeFrom(const RemoveRubyTextCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_storage()) {
      mutable_storage()->::TSP::Reference::MergeFrom(from.storage());
    }
    if (from.has_selection_range_location()) {
      set_selection_range_location(from.selection_range_location());
    }
    if (from.has_selection_range_length()) {
      set_selection_range_length(from.selection_range_length());
    }
    if (from.has_undo_transaction()) {
      mutable_undo_transaction()->::TSWP::UndoTransaction::MergeFrom(from.undo_transaction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveRubyTextCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveRubyTextCommandArchive::CopyFrom(const RemoveRubyTextCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveRubyTextCommandArchive::IsInitialized() const {

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_storage()) {
    if (!this->storage().IsInitialized()) return false;
  }
  if (has_undo_transaction()) {
    if (!this->undo_transaction().IsInitialized()) return false;
  }
  return true;
}

void RemoveRubyTextCommandArchive::Swap(RemoveRubyTextCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(storage_, other->storage_);
    std::swap(selection_range_location_, other->selection_range_location_);
    std::swap(selection_range_length_, other->selection_range_length_);
    std::swap(undo_transaction_, other->undo_transaction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveRubyTextCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveRubyTextCommandArchive_descriptor_;
  metadata.reflection = RemoveRubyTextCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModifyRubyTextCommandArchive::kSuperFieldNumber;
const int ModifyRubyTextCommandArchive::kRubyFieldFieldNumber;
const int ModifyRubyTextCommandArchive::kRubyTextFieldNumber;
const int ModifyRubyTextCommandArchive::kBaseTextFieldNumber;
const int ModifyRubyTextCommandArchive::kUndoTransactionFieldNumber;
#endif  // !_MSC_VER

ModifyRubyTextCommandArchive::ModifyRubyTextCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModifyRubyTextCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  ruby_field_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  undo_transaction_ = const_cast< ::TSWP::UndoTransaction*>(&::TSWP::UndoTransaction::default_instance());
}

ModifyRubyTextCommandArchive::ModifyRubyTextCommandArchive(const ModifyRubyTextCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModifyRubyTextCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  ruby_field_ = NULL;
  ruby_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  base_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  undo_transaction_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyRubyTextCommandArchive::~ModifyRubyTextCommandArchive() {
  SharedDtor();
}

void ModifyRubyTextCommandArchive::SharedDtor() {
  if (ruby_text_ != &::google::protobuf::internal::kEmptyString) {
    delete ruby_text_;
  }
  if (base_text_ != &::google::protobuf::internal::kEmptyString) {
    delete base_text_;
  }
  if (this != default_instance_) {
    delete super_;
    delete ruby_field_;
    delete undo_transaction_;
  }
}

void ModifyRubyTextCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyRubyTextCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyRubyTextCommandArchive_descriptor_;
}

const ModifyRubyTextCommandArchive& ModifyRubyTextCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPCommandArchives_2eproto();
  return *default_instance_;
}

ModifyRubyTextCommandArchive* ModifyRubyTextCommandArchive::default_instance_ = NULL;

ModifyRubyTextCommandArchive* ModifyRubyTextCommandArchive::New() const {
  return new ModifyRubyTextCommandArchive;
}

void ModifyRubyTextCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_ruby_field()) {
      if (ruby_field_ != NULL) ruby_field_->::TSP::Reference::Clear();
    }
    if (has_ruby_text()) {
      if (ruby_text_ != &::google::protobuf::internal::kEmptyString) {
        ruby_text_->clear();
      }
    }
    if (has_base_text()) {
      if (base_text_ != &::google::protobuf::internal::kEmptyString) {
        base_text_->clear();
      }
    }
    if (has_undo_transaction()) {
      if (undo_transaction_ != NULL) undo_transaction_->::TSWP::UndoTransaction::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyRubyTextCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ruby_field;
        break;
      }

      // optional .TSP.Reference ruby_field = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ruby_field:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ruby_field()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ruby_text;
        break;
      }

      // optional string ruby_text = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ruby_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ruby_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ruby_text().data(), this->ruby_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_base_text;
        break;
      }

      // optional string base_text = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_base_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->base_text().data(), this->base_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_undo_transaction;
        break;
      }

      // optional .TSWP.UndoTransaction undo_transaction = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_transaction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_transaction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyRubyTextCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference ruby_field = 2;
  if (has_ruby_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ruby_field(), output);
  }

  // optional string ruby_text = 3;
  if (has_ruby_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ruby_text().data(), this->ruby_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ruby_text(), output);
  }

  // optional string base_text = 4;
  if (has_base_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->base_text().data(), this->base_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->base_text(), output);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 5;
  if (has_undo_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->undo_transaction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyRubyTextCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference ruby_field = 2;
  if (has_ruby_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ruby_field(), target);
  }

  // optional string ruby_text = 3;
  if (has_ruby_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ruby_text().data(), this->ruby_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ruby_text(), target);
  }

  // optional string base_text = 4;
  if (has_base_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->base_text().data(), this->base_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->base_text(), target);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 5;
  if (has_undo_transaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->undo_transaction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyRubyTextCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference ruby_field = 2;
    if (has_ruby_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ruby_field());
    }

    // optional string ruby_text = 3;
    if (has_ruby_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ruby_text());
    }

    // optional string base_text = 4;
    if (has_base_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->base_text());
    }

    // optional .TSWP.UndoTransaction undo_transaction = 5;
    if (has_undo_transaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_transaction());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyRubyTextCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyRubyTextCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyRubyTextCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyRubyTextCommandArchive::MergeFrom(const ModifyRubyTextCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_ruby_field()) {
      mutable_ruby_field()->::TSP::Reference::MergeFrom(from.ruby_field());
    }
    if (from.has_ruby_text()) {
      set_ruby_text(from.ruby_text());
    }
    if (from.has_base_text()) {
      set_base_text(from.base_text());
    }
    if (from.has_undo_transaction()) {
      mutable_undo_transaction()->::TSWP::UndoTransaction::MergeFrom(from.undo_transaction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyRubyTextCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyRubyTextCommandArchive::CopyFrom(const ModifyRubyTextCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyRubyTextCommandArchive::IsInitialized() const {

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_ruby_field()) {
    if (!this->ruby_field().IsInitialized()) return false;
  }
  if (has_undo_transaction()) {
    if (!this->undo_transaction().IsInitialized()) return false;
  }
  return true;
}

void ModifyRubyTextCommandArchive::Swap(ModifyRubyTextCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(ruby_field_, other->ruby_field_);
    std::swap(ruby_text_, other->ruby_text_);
    std::swap(base_text_, other->base_text_);
    std::swap(undo_transaction_, other->undo_transaction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModifyRubyTextCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyRubyTextCommandArchive_descriptor_;
  metadata.reflection = ModifyRubyTextCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModifyTOCSettingsBaseCommandArchive::kSuperFieldNumber;
const int ModifyTOCSettingsBaseCommandArchive::kOldTocSettingsFieldNumber;
const int ModifyTOCSettingsBaseCommandArchive::kNewTocSettingsFieldNumber;
#endif  // !_MSC_VER

ModifyTOCSettingsBaseCommandArchive::ModifyTOCSettingsBaseCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModifyTOCSettingsBaseCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  old_toc_settings_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  new_toc_settings_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

ModifyTOCSettingsBaseCommandArchive::ModifyTOCSettingsBaseCommandArchive(const ModifyTOCSettingsBaseCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModifyTOCSettingsBaseCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  old_toc_settings_ = NULL;
  new_toc_settings_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyTOCSettingsBaseCommandArchive::~ModifyTOCSettingsBaseCommandArchive() {
  SharedDtor();
}

void ModifyTOCSettingsBaseCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete old_toc_settings_;
    delete new_toc_settings_;
  }
}

void ModifyTOCSettingsBaseCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyTOCSettingsBaseCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyTOCSettingsBaseCommandArchive_descriptor_;
}

const ModifyTOCSettingsBaseCommandArchive& ModifyTOCSettingsBaseCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPCommandArchives_2eproto();
  return *default_instance_;
}

ModifyTOCSettingsBaseCommandArchive* ModifyTOCSettingsBaseCommandArchive::default_instance_ = NULL;

ModifyTOCSettingsBaseCommandArchive* ModifyTOCSettingsBaseCommandArchive::New() const {
  return new ModifyTOCSettingsBaseCommandArchive;
}

void ModifyTOCSettingsBaseCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_old_toc_settings()) {
      if (old_toc_settings_ != NULL) old_toc_settings_->::TSP::Reference::Clear();
    }
    if (has_new_toc_settings()) {
      if (new_toc_settings_ != NULL) new_toc_settings_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyTOCSettingsBaseCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_old_toc_settings;
        break;
      }

      // optional .TSP.Reference old_toc_settings = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_toc_settings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_toc_settings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_new_toc_settings;
        break;
      }

      // optional .TSP.Reference new_toc_settings = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_toc_settings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_toc_settings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyTOCSettingsBaseCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference old_toc_settings = 2;
  if (has_old_toc_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->old_toc_settings(), output);
  }

  // optional .TSP.Reference new_toc_settings = 3;
  if (has_new_toc_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->new_toc_settings(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyTOCSettingsBaseCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference old_toc_settings = 2;
  if (has_old_toc_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->old_toc_settings(), target);
  }

  // optional .TSP.Reference new_toc_settings = 3;
  if (has_new_toc_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->new_toc_settings(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyTOCSettingsBaseCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference old_toc_settings = 2;
    if (has_old_toc_settings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_toc_settings());
    }

    // optional .TSP.Reference new_toc_settings = 3;
    if (has_new_toc_settings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_toc_settings());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyTOCSettingsBaseCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyTOCSettingsBaseCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyTOCSettingsBaseCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyTOCSettingsBaseCommandArchive::MergeFrom(const ModifyTOCSettingsBaseCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_old_toc_settings()) {
      mutable_old_toc_settings()->::TSP::Reference::MergeFrom(from.old_toc_settings());
    }
    if (from.has_new_toc_settings()) {
      mutable_new_toc_settings()->::TSP::Reference::MergeFrom(from.new_toc_settings());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyTOCSettingsBaseCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyTOCSettingsBaseCommandArchive::CopyFrom(const ModifyTOCSettingsBaseCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyTOCSettingsBaseCommandArchive::IsInitialized() const {

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_old_toc_settings()) {
    if (!this->old_toc_settings().IsInitialized()) return false;
  }
  if (has_new_toc_settings()) {
    if (!this->new_toc_settings().IsInitialized()) return false;
  }
  return true;
}

void ModifyTOCSettingsBaseCommandArchive::Swap(ModifyTOCSettingsBaseCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(old_toc_settings_, other->old_toc_settings_);
    std::swap(new_toc_settings_, other->new_toc_settings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModifyTOCSettingsBaseCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyTOCSettingsBaseCommandArchive_descriptor_;
  metadata.reflection = ModifyTOCSettingsBaseCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModifyTOCSettingsForTOCInfoCommandArchive::kSuperFieldNumber;
const int ModifyTOCSettingsForTOCInfoCommandArchive::kTocInfoFieldNumber;
#endif  // !_MSC_VER

ModifyTOCSettingsForTOCInfoCommandArchive::ModifyTOCSettingsForTOCInfoCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModifyTOCSettingsForTOCInfoCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSWP::ModifyTOCSettingsBaseCommandArchive*>(&::TSWP::ModifyTOCSettingsBaseCommandArchive::default_instance());
  toc_info_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

ModifyTOCSettingsForTOCInfoCommandArchive::ModifyTOCSettingsForTOCInfoCommandArchive(const ModifyTOCSettingsForTOCInfoCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModifyTOCSettingsForTOCInfoCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  toc_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyTOCSettingsForTOCInfoCommandArchive::~ModifyTOCSettingsForTOCInfoCommandArchive() {
  SharedDtor();
}

void ModifyTOCSettingsForTOCInfoCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete toc_info_;
  }
}

void ModifyTOCSettingsForTOCInfoCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyTOCSettingsForTOCInfoCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyTOCSettingsForTOCInfoCommandArchive_descriptor_;
}

const ModifyTOCSettingsForTOCInfoCommandArchive& ModifyTOCSettingsForTOCInfoCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPCommandArchives_2eproto();
  return *default_instance_;
}

ModifyTOCSettingsForTOCInfoCommandArchive* ModifyTOCSettingsForTOCInfoCommandArchive::default_instance_ = NULL;

ModifyTOCSettingsForTOCInfoCommandArchive* ModifyTOCSettingsForTOCInfoCommandArchive::New() const {
  return new ModifyTOCSettingsForTOCInfoCommandArchive;
}

void ModifyTOCSettingsForTOCInfoCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSWP::ModifyTOCSettingsBaseCommandArchive::Clear();
    }
    if (has_toc_info()) {
      if (toc_info_ != NULL) toc_info_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyTOCSettingsForTOCInfoCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSWP.ModifyTOCSettingsBaseCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_toc_info;
        break;
      }

      // optional .TSP.Reference toc_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_toc_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_toc_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyTOCSettingsForTOCInfoCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSWP.ModifyTOCSettingsBaseCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference toc_info = 2;
  if (has_toc_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->toc_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyTOCSettingsForTOCInfoCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSWP.ModifyTOCSettingsBaseCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference toc_info = 2;
  if (has_toc_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->toc_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyTOCSettingsForTOCInfoCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSWP.ModifyTOCSettingsBaseCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference toc_info = 2;
    if (has_toc_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->toc_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyTOCSettingsForTOCInfoCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyTOCSettingsForTOCInfoCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyTOCSettingsForTOCInfoCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyTOCSettingsForTOCInfoCommandArchive::MergeFrom(const ModifyTOCSettingsForTOCInfoCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSWP::ModifyTOCSettingsBaseCommandArchive::MergeFrom(from.super());
    }
    if (from.has_toc_info()) {
      mutable_toc_info()->::TSP::Reference::MergeFrom(from.toc_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyTOCSettingsForTOCInfoCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyTOCSettingsForTOCInfoCommandArchive::CopyFrom(const ModifyTOCSettingsForTOCInfoCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyTOCSettingsForTOCInfoCommandArchive::IsInitialized() const {

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_toc_info()) {
    if (!this->toc_info().IsInitialized()) return false;
  }
  return true;
}

void ModifyTOCSettingsForTOCInfoCommandArchive::Swap(ModifyTOCSettingsForTOCInfoCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(toc_info_, other->toc_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModifyTOCSettingsForTOCInfoCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyTOCSettingsForTOCInfoCommandArchive_descriptor_;
  metadata.reflection = ModifyTOCSettingsForTOCInfoCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModifyTOCSettingsPresetForThemeCommandArchive::kSuperFieldNumber;
const int ModifyTOCSettingsPresetForThemeCommandArchive::kThemeFieldNumber;
const int ModifyTOCSettingsPresetForThemeCommandArchive::kPresetIndexFieldNumber;
#endif  // !_MSC_VER

ModifyTOCSettingsPresetForThemeCommandArchive::ModifyTOCSettingsPresetForThemeCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModifyTOCSettingsPresetForThemeCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSWP::ModifyTOCSettingsBaseCommandArchive*>(&::TSWP::ModifyTOCSettingsBaseCommandArchive::default_instance());
  theme_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

ModifyTOCSettingsPresetForThemeCommandArchive::ModifyTOCSettingsPresetForThemeCommandArchive(const ModifyTOCSettingsPresetForThemeCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModifyTOCSettingsPresetForThemeCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  theme_ = NULL;
  preset_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyTOCSettingsPresetForThemeCommandArchive::~ModifyTOCSettingsPresetForThemeCommandArchive() {
  SharedDtor();
}

void ModifyTOCSettingsPresetForThemeCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete theme_;
  }
}

void ModifyTOCSettingsPresetForThemeCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyTOCSettingsPresetForThemeCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyTOCSettingsPresetForThemeCommandArchive_descriptor_;
}

const ModifyTOCSettingsPresetForThemeCommandArchive& ModifyTOCSettingsPresetForThemeCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPCommandArchives_2eproto();
  return *default_instance_;
}

ModifyTOCSettingsPresetForThemeCommandArchive* ModifyTOCSettingsPresetForThemeCommandArchive::default_instance_ = NULL;

ModifyTOCSettingsPresetForThemeCommandArchive* ModifyTOCSettingsPresetForThemeCommandArchive::New() const {
  return new ModifyTOCSettingsPresetForThemeCommandArchive;
}

void ModifyTOCSettingsPresetForThemeCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSWP::ModifyTOCSettingsBaseCommandArchive::Clear();
    }
    if (has_theme()) {
      if (theme_ != NULL) theme_->::TSP::Reference::Clear();
    }
    preset_index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyTOCSettingsPresetForThemeCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSWP.ModifyTOCSettingsBaseCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_theme;
        break;
      }

      // optional .TSP.Reference theme = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_theme:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_theme()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_preset_index;
        break;
      }

      // optional uint32 preset_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preset_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &preset_index_)));
          set_has_preset_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyTOCSettingsPresetForThemeCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSWP.ModifyTOCSettingsBaseCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference theme = 2;
  if (has_theme()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->theme(), output);
  }

  // optional uint32 preset_index = 3;
  if (has_preset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->preset_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyTOCSettingsPresetForThemeCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSWP.ModifyTOCSettingsBaseCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference theme = 2;
  if (has_theme()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->theme(), target);
  }

  // optional uint32 preset_index = 3;
  if (has_preset_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->preset_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyTOCSettingsPresetForThemeCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSWP.ModifyTOCSettingsBaseCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference theme = 2;
    if (has_theme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->theme());
    }

    // optional uint32 preset_index = 3;
    if (has_preset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->preset_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyTOCSettingsPresetForThemeCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyTOCSettingsPresetForThemeCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyTOCSettingsPresetForThemeCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyTOCSettingsPresetForThemeCommandArchive::MergeFrom(const ModifyTOCSettingsPresetForThemeCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSWP::ModifyTOCSettingsBaseCommandArchive::MergeFrom(from.super());
    }
    if (from.has_theme()) {
      mutable_theme()->::TSP::Reference::MergeFrom(from.theme());
    }
    if (from.has_preset_index()) {
      set_preset_index(from.preset_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyTOCSettingsPresetForThemeCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyTOCSettingsPresetForThemeCommandArchive::CopyFrom(const ModifyTOCSettingsPresetForThemeCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyTOCSettingsPresetForThemeCommandArchive::IsInitialized() const {

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_theme()) {
    if (!this->theme().IsInitialized()) return false;
  }
  return true;
}

void ModifyTOCSettingsPresetForThemeCommandArchive::Swap(ModifyTOCSettingsPresetForThemeCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(theme_, other->theme_);
    std::swap(preset_index_, other->preset_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModifyTOCSettingsPresetForThemeCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyTOCSettingsPresetForThemeCommandArchive_descriptor_;
  metadata.reflection = ModifyTOCSettingsPresetForThemeCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AnchorAttachmentCommandArchive::kSuperFieldNumber;
const int AnchorAttachmentCommandArchive::kStorageFieldNumber;
const int AnchorAttachmentCommandArchive::kAttachmentFieldNumber;
const int AnchorAttachmentCommandArchive::kHOffsetTypeFieldNumber;
const int AnchorAttachmentCommandArchive::kHOffsetFieldNumber;
const int AnchorAttachmentCommandArchive::kVOffsetTypeFieldNumber;
const int AnchorAttachmentCommandArchive::kVOffsetFieldNumber;
const int AnchorAttachmentCommandArchive::kUndoTransactionFieldNumber;
const int AnchorAttachmentCommandArchive::kIsHtmlWrapFieldNumber;
#endif  // !_MSC_VER

AnchorAttachmentCommandArchive::AnchorAttachmentCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AnchorAttachmentCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  storage_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  attachment_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  undo_transaction_ = const_cast< ::TSWP::UndoTransaction*>(&::TSWP::UndoTransaction::default_instance());
}

AnchorAttachmentCommandArchive::AnchorAttachmentCommandArchive(const AnchorAttachmentCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AnchorAttachmentCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  storage_ = NULL;
  attachment_ = NULL;
  h_offset_type_ = 0u;
  h_offset_ = 0;
  v_offset_type_ = 0u;
  v_offset_ = 0;
  undo_transaction_ = NULL;
  is_html_wrap_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnchorAttachmentCommandArchive::~AnchorAttachmentCommandArchive() {
  SharedDtor();
}

void AnchorAttachmentCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete storage_;
    delete attachment_;
    delete undo_transaction_;
  }
}

void AnchorAttachmentCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnchorAttachmentCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnchorAttachmentCommandArchive_descriptor_;
}

const AnchorAttachmentCommandArchive& AnchorAttachmentCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPCommandArchives_2eproto();
  return *default_instance_;
}

AnchorAttachmentCommandArchive* AnchorAttachmentCommandArchive::default_instance_ = NULL;

AnchorAttachmentCommandArchive* AnchorAttachmentCommandArchive::New() const {
  return new AnchorAttachmentCommandArchive;
}

void AnchorAttachmentCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_storage()) {
      if (storage_ != NULL) storage_->::TSP::Reference::Clear();
    }
    if (has_attachment()) {
      if (attachment_ != NULL) attachment_->::TSP::Reference::Clear();
    }
    h_offset_type_ = 0u;
    h_offset_ = 0;
    v_offset_type_ = 0u;
    v_offset_ = 0;
    if (has_undo_transaction()) {
      if (undo_transaction_ != NULL) undo_transaction_->::TSWP::UndoTransaction::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    is_html_wrap_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnchorAttachmentCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_storage;
        break;
      }

      // optional .TSP.Reference storage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attachment;
        break;
      }

      // optional .TSP.Reference attachment = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attachment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attachment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_h_offset_type;
        break;
      }

      // optional uint32 h_offset_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_h_offset_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &h_offset_type_)));
          set_has_h_offset_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_h_offset;
        break;
      }

      // optional float h_offset = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_h_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &h_offset_)));
          set_has_h_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_v_offset_type;
        break;
      }

      // optional uint32 v_offset_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_v_offset_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &v_offset_type_)));
          set_has_v_offset_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_v_offset;
        break;
      }

      // optional float v_offset = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_v_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v_offset_)));
          set_has_v_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_undo_transaction;
        break;
      }

      // optional .TSWP.UndoTransaction undo_transaction = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_transaction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_transaction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_is_html_wrap;
        break;
      }

      // optional bool is_html_wrap = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_html_wrap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_html_wrap_)));
          set_has_is_html_wrap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AnchorAttachmentCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference storage = 2;
  if (has_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->storage(), output);
  }

  // optional .TSP.Reference attachment = 3;
  if (has_attachment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attachment(), output);
  }

  // optional uint32 h_offset_type = 4;
  if (has_h_offset_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->h_offset_type(), output);
  }

  // optional float h_offset = 5;
  if (has_h_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->h_offset(), output);
  }

  // optional uint32 v_offset_type = 6;
  if (has_v_offset_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->v_offset_type(), output);
  }

  // optional float v_offset = 7;
  if (has_v_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->v_offset(), output);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 8;
  if (has_undo_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->undo_transaction(), output);
  }

  // optional bool is_html_wrap = 9;
  if (has_is_html_wrap()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_html_wrap(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AnchorAttachmentCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference storage = 2;
  if (has_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->storage(), target);
  }

  // optional .TSP.Reference attachment = 3;
  if (has_attachment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attachment(), target);
  }

  // optional uint32 h_offset_type = 4;
  if (has_h_offset_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->h_offset_type(), target);
  }

  // optional float h_offset = 5;
  if (has_h_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->h_offset(), target);
  }

  // optional uint32 v_offset_type = 6;
  if (has_v_offset_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->v_offset_type(), target);
  }

  // optional float v_offset = 7;
  if (has_v_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->v_offset(), target);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 8;
  if (has_undo_transaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->undo_transaction(), target);
  }

  // optional bool is_html_wrap = 9;
  if (has_is_html_wrap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_html_wrap(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AnchorAttachmentCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference storage = 2;
    if (has_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->storage());
    }

    // optional .TSP.Reference attachment = 3;
    if (has_attachment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attachment());
    }

    // optional uint32 h_offset_type = 4;
    if (has_h_offset_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->h_offset_type());
    }

    // optional float h_offset = 5;
    if (has_h_offset()) {
      total_size += 1 + 4;
    }

    // optional uint32 v_offset_type = 6;
    if (has_v_offset_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->v_offset_type());
    }

    // optional float v_offset = 7;
    if (has_v_offset()) {
      total_size += 1 + 4;
    }

    // optional .TSWP.UndoTransaction undo_transaction = 8;
    if (has_undo_transaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_transaction());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool is_html_wrap = 9;
    if (has_is_html_wrap()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnchorAttachmentCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnchorAttachmentCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnchorAttachmentCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnchorAttachmentCommandArchive::MergeFrom(const AnchorAttachmentCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_storage()) {
      mutable_storage()->::TSP::Reference::MergeFrom(from.storage());
    }
    if (from.has_attachment()) {
      mutable_attachment()->::TSP::Reference::MergeFrom(from.attachment());
    }
    if (from.has_h_offset_type()) {
      set_h_offset_type(from.h_offset_type());
    }
    if (from.has_h_offset()) {
      set_h_offset(from.h_offset());
    }
    if (from.has_v_offset_type()) {
      set_v_offset_type(from.v_offset_type());
    }
    if (from.has_v_offset()) {
      set_v_offset(from.v_offset());
    }
    if (from.has_undo_transaction()) {
      mutable_undo_transaction()->::TSWP::UndoTransaction::MergeFrom(from.undo_transaction());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_is_html_wrap()) {
      set_is_html_wrap(from.is_html_wrap());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnchorAttachmentCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnchorAttachmentCommandArchive::CopyFrom(const AnchorAttachmentCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnchorAttachmentCommandArchive::IsInitialized() const {

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_storage()) {
    if (!this->storage().IsInitialized()) return false;
  }
  if (has_attachment()) {
    if (!this->attachment().IsInitialized()) return false;
  }
  if (has_undo_transaction()) {
    if (!this->undo_transaction().IsInitialized()) return false;
  }
  return true;
}

void AnchorAttachmentCommandArchive::Swap(AnchorAttachmentCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(storage_, other->storage_);
    std::swap(attachment_, other->attachment_);
    std::swap(h_offset_type_, other->h_offset_type_);
    std::swap(h_offset_, other->h_offset_);
    std::swap(v_offset_type_, other->v_offset_type_);
    std::swap(v_offset_, other->v_offset_);
    std::swap(undo_transaction_, other->undo_transaction_);
    std::swap(is_html_wrap_, other->is_html_wrap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnchorAttachmentCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnchorAttachmentCommandArchive_descriptor_;
  metadata.reflection = AnchorAttachmentCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TextApplyThemeCommandArchive::kSuperFieldNumber;
const int TextApplyThemeCommandArchive::kStorageFieldNumber;
const int TextApplyThemeCommandArchive::kUndoTransactionFieldNumber;
#endif  // !_MSC_VER

TextApplyThemeCommandArchive::TextApplyThemeCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TextApplyThemeCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSS::ApplyThemeChildCommandArchive*>(&::TSS::ApplyThemeChildCommandArchive::default_instance());
  storage_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  undo_transaction_ = const_cast< ::TSWP::UndoTransaction*>(&::TSWP::UndoTransaction::default_instance());
}

TextApplyThemeCommandArchive::TextApplyThemeCommandArchive(const TextApplyThemeCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TextApplyThemeCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  storage_ = NULL;
  undo_transaction_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TextApplyThemeCommandArchive::~TextApplyThemeCommandArchive() {
  SharedDtor();
}

void TextApplyThemeCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete storage_;
    delete undo_transaction_;
  }
}

void TextApplyThemeCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TextApplyThemeCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TextApplyThemeCommandArchive_descriptor_;
}

const TextApplyThemeCommandArchive& TextApplyThemeCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPCommandArchives_2eproto();
  return *default_instance_;
}

TextApplyThemeCommandArchive* TextApplyThemeCommandArchive::default_instance_ = NULL;

TextApplyThemeCommandArchive* TextApplyThemeCommandArchive::New() const {
  return new TextApplyThemeCommandArchive;
}

void TextApplyThemeCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSS::ApplyThemeChildCommandArchive::Clear();
    }
    if (has_storage()) {
      if (storage_ != NULL) storage_->::TSP::Reference::Clear();
    }
    if (has_undo_transaction()) {
      if (undo_transaction_ != NULL) undo_transaction_->::TSWP::UndoTransaction::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TextApplyThemeCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSS.ApplyThemeChildCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_storage;
        break;
      }

      // optional .TSP.Reference storage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_undo_transaction;
        break;
      }

      // optional .TSWP.UndoTransaction undo_transaction = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_transaction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_transaction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TextApplyThemeCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSS.ApplyThemeChildCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference storage = 2;
  if (has_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->storage(), output);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 6;
  if (has_undo_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->undo_transaction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TextApplyThemeCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSS.ApplyThemeChildCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference storage = 2;
  if (has_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->storage(), target);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 6;
  if (has_undo_transaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->undo_transaction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TextApplyThemeCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSS.ApplyThemeChildCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference storage = 2;
    if (has_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->storage());
    }

    // optional .TSWP.UndoTransaction undo_transaction = 6;
    if (has_undo_transaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_transaction());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TextApplyThemeCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TextApplyThemeCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TextApplyThemeCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TextApplyThemeCommandArchive::MergeFrom(const TextApplyThemeCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSS::ApplyThemeChildCommandArchive::MergeFrom(from.super());
    }
    if (from.has_storage()) {
      mutable_storage()->::TSP::Reference::MergeFrom(from.storage());
    }
    if (from.has_undo_transaction()) {
      mutable_undo_transaction()->::TSWP::UndoTransaction::MergeFrom(from.undo_transaction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TextApplyThemeCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextApplyThemeCommandArchive::CopyFrom(const TextApplyThemeCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextApplyThemeCommandArchive::IsInitialized() const {

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_storage()) {
    if (!this->storage().IsInitialized()) return false;
  }
  if (has_undo_transaction()) {
    if (!this->undo_transaction().IsInitialized()) return false;
  }
  return true;
}

void TextApplyThemeCommandArchive::Swap(TextApplyThemeCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(storage_, other->storage_);
    std::swap(undo_transaction_, other->undo_transaction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TextApplyThemeCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TextApplyThemeCommandArchive_descriptor_;
  metadata.reflection = TextApplyThemeCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoveColumnsCommandArchive::kSuperFieldNumber;
const int MoveColumnsCommandArchive::kStorageFieldNumber;
const int MoveColumnsCommandArchive::kSrcIndexFieldNumber;
const int MoveColumnsCommandArchive::kDstIndexFieldNumber;
const int MoveColumnsCommandArchive::kCountFieldNumber;
const int MoveColumnsCommandArchive::kUndoTransactionFieldNumber;
#endif  // !_MSC_VER

MoveColumnsCommandArchive::MoveColumnsCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoveColumnsCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  storage_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  undo_transaction_ = const_cast< ::TSWP::UndoTransaction*>(&::TSWP::UndoTransaction::default_instance());
}

MoveColumnsCommandArchive::MoveColumnsCommandArchive(const MoveColumnsCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoveColumnsCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  storage_ = NULL;
  src_index_ = 0u;
  dst_index_ = 0u;
  count_ = 0u;
  undo_transaction_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveColumnsCommandArchive::~MoveColumnsCommandArchive() {
  SharedDtor();
}

void MoveColumnsCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete storage_;
    delete undo_transaction_;
  }
}

void MoveColumnsCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveColumnsCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveColumnsCommandArchive_descriptor_;
}

const MoveColumnsCommandArchive& MoveColumnsCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPCommandArchives_2eproto();
  return *default_instance_;
}

MoveColumnsCommandArchive* MoveColumnsCommandArchive::default_instance_ = NULL;

MoveColumnsCommandArchive* MoveColumnsCommandArchive::New() const {
  return new MoveColumnsCommandArchive;
}

void MoveColumnsCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_storage()) {
      if (storage_ != NULL) storage_->::TSP::Reference::Clear();
    }
    src_index_ = 0u;
    dst_index_ = 0u;
    count_ = 0u;
    if (has_undo_transaction()) {
      if (undo_transaction_ != NULL) undo_transaction_->::TSWP::UndoTransaction::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoveColumnsCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_storage;
        break;
      }

      // optional .TSP.Reference storage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_src_index;
        break;
      }

      // optional uint32 src_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_index_)));
          set_has_src_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dst_index;
        break;
      }

      // optional uint32 dst_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dst_index_)));
          set_has_dst_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_count;
        break;
      }

      // optional uint32 count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_undo_transaction;
        break;
      }

      // optional .TSWP.UndoTransaction undo_transaction = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_transaction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_transaction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoveColumnsCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference storage = 2;
  if (has_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->storage(), output);
  }

  // optional uint32 src_index = 3;
  if (has_src_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->src_index(), output);
  }

  // optional uint32 dst_index = 4;
  if (has_dst_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dst_index(), output);
  }

  // optional uint32 count = 5;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->count(), output);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 6;
  if (has_undo_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->undo_transaction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoveColumnsCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference storage = 2;
  if (has_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->storage(), target);
  }

  // optional uint32 src_index = 3;
  if (has_src_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->src_index(), target);
  }

  // optional uint32 dst_index = 4;
  if (has_dst_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dst_index(), target);
  }

  // optional uint32 count = 5;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->count(), target);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 6;
  if (has_undo_transaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->undo_transaction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoveColumnsCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference storage = 2;
    if (has_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->storage());
    }

    // optional uint32 src_index = 3;
    if (has_src_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->src_index());
    }

    // optional uint32 dst_index = 4;
    if (has_dst_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dst_index());
    }

    // optional uint32 count = 5;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional .TSWP.UndoTransaction undo_transaction = 6;
    if (has_undo_transaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_transaction());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveColumnsCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoveColumnsCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoveColumnsCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoveColumnsCommandArchive::MergeFrom(const MoveColumnsCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_storage()) {
      mutable_storage()->::TSP::Reference::MergeFrom(from.storage());
    }
    if (from.has_src_index()) {
      set_src_index(from.src_index());
    }
    if (from.has_dst_index()) {
      set_dst_index(from.dst_index());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_undo_transaction()) {
      mutable_undo_transaction()->::TSWP::UndoTransaction::MergeFrom(from.undo_transaction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoveColumnsCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveColumnsCommandArchive::CopyFrom(const MoveColumnsCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveColumnsCommandArchive::IsInitialized() const {

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_storage()) {
    if (!this->storage().IsInitialized()) return false;
  }
  if (has_undo_transaction()) {
    if (!this->undo_transaction().IsInitialized()) return false;
  }
  return true;
}

void MoveColumnsCommandArchive::Swap(MoveColumnsCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(storage_, other->storage_);
    std::swap(src_index_, other->src_index_);
    std::swap(dst_index_, other->dst_index_);
    std::swap(count_, other->count_);
    std::swap(undo_transaction_, other->undo_transaction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoveColumnsCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveColumnsCommandArchive_descriptor_;
  metadata.reflection = MoveColumnsCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoveRowsCommandArchive::kSuperFieldNumber;
const int MoveRowsCommandArchive::kStorageFieldNumber;
const int MoveRowsCommandArchive::kSrcIndexFieldNumber;
const int MoveRowsCommandArchive::kDstIndexFieldNumber;
const int MoveRowsCommandArchive::kCountFieldNumber;
const int MoveRowsCommandArchive::kUndoTransactionFieldNumber;
#endif  // !_MSC_VER

MoveRowsCommandArchive::MoveRowsCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoveRowsCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  storage_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  undo_transaction_ = const_cast< ::TSWP::UndoTransaction*>(&::TSWP::UndoTransaction::default_instance());
}

MoveRowsCommandArchive::MoveRowsCommandArchive(const MoveRowsCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoveRowsCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  storage_ = NULL;
  src_index_ = 0u;
  dst_index_ = 0u;
  count_ = 0u;
  undo_transaction_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveRowsCommandArchive::~MoveRowsCommandArchive() {
  SharedDtor();
}

void MoveRowsCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete storage_;
    delete undo_transaction_;
  }
}

void MoveRowsCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveRowsCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveRowsCommandArchive_descriptor_;
}

const MoveRowsCommandArchive& MoveRowsCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPCommandArchives_2eproto();
  return *default_instance_;
}

MoveRowsCommandArchive* MoveRowsCommandArchive::default_instance_ = NULL;

MoveRowsCommandArchive* MoveRowsCommandArchive::New() const {
  return new MoveRowsCommandArchive;
}

void MoveRowsCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_storage()) {
      if (storage_ != NULL) storage_->::TSP::Reference::Clear();
    }
    src_index_ = 0u;
    dst_index_ = 0u;
    count_ = 0u;
    if (has_undo_transaction()) {
      if (undo_transaction_ != NULL) undo_transaction_->::TSWP::UndoTransaction::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoveRowsCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_storage;
        break;
      }

      // optional .TSP.Reference storage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_src_index;
        break;
      }

      // optional uint32 src_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_index_)));
          set_has_src_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dst_index;
        break;
      }

      // optional uint32 dst_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dst_index_)));
          set_has_dst_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_count;
        break;
      }

      // optional uint32 count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_undo_transaction;
        break;
      }

      // optional .TSWP.UndoTransaction undo_transaction = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_transaction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_transaction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoveRowsCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference storage = 2;
  if (has_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->storage(), output);
  }

  // optional uint32 src_index = 3;
  if (has_src_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->src_index(), output);
  }

  // optional uint32 dst_index = 4;
  if (has_dst_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dst_index(), output);
  }

  // optional uint32 count = 5;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->count(), output);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 6;
  if (has_undo_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->undo_transaction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoveRowsCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference storage = 2;
  if (has_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->storage(), target);
  }

  // optional uint32 src_index = 3;
  if (has_src_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->src_index(), target);
  }

  // optional uint32 dst_index = 4;
  if (has_dst_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dst_index(), target);
  }

  // optional uint32 count = 5;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->count(), target);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 6;
  if (has_undo_transaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->undo_transaction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoveRowsCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference storage = 2;
    if (has_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->storage());
    }

    // optional uint32 src_index = 3;
    if (has_src_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->src_index());
    }

    // optional uint32 dst_index = 4;
    if (has_dst_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dst_index());
    }

    // optional uint32 count = 5;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional .TSWP.UndoTransaction undo_transaction = 6;
    if (has_undo_transaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_transaction());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveRowsCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoveRowsCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoveRowsCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoveRowsCommandArchive::MergeFrom(const MoveRowsCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_storage()) {
      mutable_storage()->::TSP::Reference::MergeFrom(from.storage());
    }
    if (from.has_src_index()) {
      set_src_index(from.src_index());
    }
    if (from.has_dst_index()) {
      set_dst_index(from.dst_index());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_undo_transaction()) {
      mutable_undo_transaction()->::TSWP::UndoTransaction::MergeFrom(from.undo_transaction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoveRowsCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveRowsCommandArchive::CopyFrom(const MoveRowsCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveRowsCommandArchive::IsInitialized() const {

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_storage()) {
    if (!this->storage().IsInitialized()) return false;
  }
  if (has_undo_transaction()) {
    if (!this->undo_transaction().IsInitialized()) return false;
  }
  return true;
}

void MoveRowsCommandArchive::Swap(MoveRowsCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(storage_, other->storage_);
    std::swap(src_index_, other->src_index_);
    std::swap(dst_index_, other->dst_index_);
    std::swap(count_, other->count_);
    std::swap(undo_transaction_, other->undo_transaction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoveRowsCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveRowsCommandArchive_descriptor_;
  metadata.reflection = MoveRowsCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShapeApplyPresetCommandArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

ShapeApplyPresetCommandArchive::ShapeApplyPresetCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShapeApplyPresetCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSD::ShapeApplyPresetCommandArchive*>(&::TSD::ShapeApplyPresetCommandArchive::default_instance());
}

ShapeApplyPresetCommandArchive::ShapeApplyPresetCommandArchive(const ShapeApplyPresetCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShapeApplyPresetCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShapeApplyPresetCommandArchive::~ShapeApplyPresetCommandArchive() {
  SharedDtor();
}

void ShapeApplyPresetCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void ShapeApplyPresetCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShapeApplyPresetCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShapeApplyPresetCommandArchive_descriptor_;
}

const ShapeApplyPresetCommandArchive& ShapeApplyPresetCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPCommandArchives_2eproto();
  return *default_instance_;
}

ShapeApplyPresetCommandArchive* ShapeApplyPresetCommandArchive::default_instance_ = NULL;

ShapeApplyPresetCommandArchive* ShapeApplyPresetCommandArchive::New() const {
  return new ShapeApplyPresetCommandArchive;
}

void ShapeApplyPresetCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSD::ShapeApplyPresetCommandArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShapeApplyPresetCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSD.ShapeApplyPresetCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShapeApplyPresetCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSD.ShapeApplyPresetCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShapeApplyPresetCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSD.ShapeApplyPresetCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShapeApplyPresetCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSD.ShapeApplyPresetCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShapeApplyPresetCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShapeApplyPresetCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShapeApplyPresetCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShapeApplyPresetCommandArchive::MergeFrom(const ShapeApplyPresetCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSD::ShapeApplyPresetCommandArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShapeApplyPresetCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShapeApplyPresetCommandArchive::CopyFrom(const ShapeApplyPresetCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShapeApplyPresetCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void ShapeApplyPresetCommandArchive::Swap(ShapeApplyPresetCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShapeApplyPresetCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShapeApplyPresetCommandArchive_descriptor_;
  metadata.reflection = ShapeApplyPresetCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShapePasteStyleCommandArchive::kSuperFieldNumber;
const int ShapePasteStyleCommandArchive::kParagraphStyleFieldNumber;
const int ShapePasteStyleCommandArchive::kListStyleFieldNumber;
const int ShapePasteStyleCommandArchive::kCharacterStyleFieldNumber;
#endif  // !_MSC_VER

ShapePasteStyleCommandArchive::ShapePasteStyleCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShapePasteStyleCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSD::PasteStyleCommandArchive*>(&::TSD::PasteStyleCommandArchive::default_instance());
  paragraph_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  list_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  character_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

ShapePasteStyleCommandArchive::ShapePasteStyleCommandArchive(const ShapePasteStyleCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShapePasteStyleCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  paragraph_style_ = NULL;
  list_style_ = NULL;
  character_style_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShapePasteStyleCommandArchive::~ShapePasteStyleCommandArchive() {
  SharedDtor();
}

void ShapePasteStyleCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete paragraph_style_;
    delete list_style_;
    delete character_style_;
  }
}

void ShapePasteStyleCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShapePasteStyleCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShapePasteStyleCommandArchive_descriptor_;
}

const ShapePasteStyleCommandArchive& ShapePasteStyleCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPCommandArchives_2eproto();
  return *default_instance_;
}

ShapePasteStyleCommandArchive* ShapePasteStyleCommandArchive::default_instance_ = NULL;

ShapePasteStyleCommandArchive* ShapePasteStyleCommandArchive::New() const {
  return new ShapePasteStyleCommandArchive;
}

void ShapePasteStyleCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSD::PasteStyleCommandArchive::Clear();
    }
    if (has_paragraph_style()) {
      if (paragraph_style_ != NULL) paragraph_style_->::TSP::Reference::Clear();
    }
    if (has_list_style()) {
      if (list_style_ != NULL) list_style_->::TSP::Reference::Clear();
    }
    if (has_character_style()) {
      if (character_style_ != NULL) character_style_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShapePasteStyleCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSD.PasteStyleCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_paragraph_style;
        break;
      }

      // optional .TSP.Reference paragraph_style = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_paragraph_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_paragraph_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_list_style;
        break;
      }

      // optional .TSP.Reference list_style = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_list_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_character_style;
        break;
      }

      // optional .TSP.Reference character_style = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_character_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_character_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShapePasteStyleCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSD.PasteStyleCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference paragraph_style = 2;
  if (has_paragraph_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->paragraph_style(), output);
  }

  // optional .TSP.Reference list_style = 3;
  if (has_list_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->list_style(), output);
  }

  // optional .TSP.Reference character_style = 4;
  if (has_character_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->character_style(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShapePasteStyleCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSD.PasteStyleCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference paragraph_style = 2;
  if (has_paragraph_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->paragraph_style(), target);
  }

  // optional .TSP.Reference list_style = 3;
  if (has_list_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->list_style(), target);
  }

  // optional .TSP.Reference character_style = 4;
  if (has_character_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->character_style(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShapePasteStyleCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSD.PasteStyleCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference paragraph_style = 2;
    if (has_paragraph_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->paragraph_style());
    }

    // optional .TSP.Reference list_style = 3;
    if (has_list_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list_style());
    }

    // optional .TSP.Reference character_style = 4;
    if (has_character_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->character_style());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShapePasteStyleCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShapePasteStyleCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShapePasteStyleCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShapePasteStyleCommandArchive::MergeFrom(const ShapePasteStyleCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSD::PasteStyleCommandArchive::MergeFrom(from.super());
    }
    if (from.has_paragraph_style()) {
      mutable_paragraph_style()->::TSP::Reference::MergeFrom(from.paragraph_style());
    }
    if (from.has_list_style()) {
      mutable_list_style()->::TSP::Reference::MergeFrom(from.list_style());
    }
    if (from.has_character_style()) {
      mutable_character_style()->::TSP::Reference::MergeFrom(from.character_style());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShapePasteStyleCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShapePasteStyleCommandArchive::CopyFrom(const ShapePasteStyleCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShapePasteStyleCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_paragraph_style()) {
    if (!this->paragraph_style().IsInitialized()) return false;
  }
  if (has_list_style()) {
    if (!this->list_style().IsInitialized()) return false;
  }
  if (has_character_style()) {
    if (!this->character_style().IsInitialized()) return false;
  }
  return true;
}

void ShapePasteStyleCommandArchive::Swap(ShapePasteStyleCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(paragraph_style_, other->paragraph_style_);
    std::swap(list_style_, other->list_style_);
    std::swap(character_style_, other->character_style_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShapePasteStyleCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShapePasteStyleCommandArchive_descriptor_;
  metadata.reflection = ShapePasteStyleCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StyleBaseCommandArchive::kSuperFieldNumber;
const int StyleBaseCommandArchive::kThemeFieldNumber;
const int StyleBaseCommandArchive::kStyleFieldNumber;
#endif  // !_MSC_VER

StyleBaseCommandArchive::StyleBaseCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StyleBaseCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  theme_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

StyleBaseCommandArchive::StyleBaseCommandArchive(const StyleBaseCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StyleBaseCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  theme_ = NULL;
  style_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StyleBaseCommandArchive::~StyleBaseCommandArchive() {
  SharedDtor();
}

void StyleBaseCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete theme_;
    delete style_;
  }
}

void StyleBaseCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StyleBaseCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StyleBaseCommandArchive_descriptor_;
}

const StyleBaseCommandArchive& StyleBaseCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPCommandArchives_2eproto();
  return *default_instance_;
}

StyleBaseCommandArchive* StyleBaseCommandArchive::default_instance_ = NULL;

StyleBaseCommandArchive* StyleBaseCommandArchive::New() const {
  return new StyleBaseCommandArchive;
}

void StyleBaseCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_theme()) {
      if (theme_ != NULL) theme_->::TSP::Reference::Clear();
    }
    if (has_style()) {
      if (style_ != NULL) style_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StyleBaseCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_theme;
        break;
      }

      // optional .TSP.Reference theme = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_theme:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_theme()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_style;
        break;
      }

      // optional .TSP.Reference style = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StyleBaseCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference theme = 2;
  if (has_theme()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->theme(), output);
  }

  // optional .TSP.Reference style = 3;
  if (has_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->style(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StyleBaseCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference theme = 2;
  if (has_theme()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->theme(), target);
  }

  // optional .TSP.Reference style = 3;
  if (has_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->style(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StyleBaseCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference theme = 2;
    if (has_theme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->theme());
    }

    // optional .TSP.Reference style = 3;
    if (has_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->style());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StyleBaseCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StyleBaseCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StyleBaseCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StyleBaseCommandArchive::MergeFrom(const StyleBaseCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_theme()) {
      mutable_theme()->::TSP::Reference::MergeFrom(from.theme());
    }
    if (from.has_style()) {
      mutable_style()->::TSP::Reference::MergeFrom(from.style());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StyleBaseCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StyleBaseCommandArchive::CopyFrom(const StyleBaseCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StyleBaseCommandArchive::IsInitialized() const {

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_theme()) {
    if (!this->theme().IsInitialized()) return false;
  }
  if (has_style()) {
    if (!this->style().IsInitialized()) return false;
  }
  return true;
}

void StyleBaseCommandArchive::Swap(StyleBaseCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(theme_, other->theme_);
    std::swap(style_, other->style_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StyleBaseCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StyleBaseCommandArchive_descriptor_;
  metadata.reflection = StyleBaseCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StyleCreateCommandArchive::kSuperFieldNumber;
const int StyleCreateCommandArchive::kPresetIndexFieldNumber;
#endif  // !_MSC_VER

StyleCreateCommandArchive::StyleCreateCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StyleCreateCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSWP::StyleBaseCommandArchive*>(&::TSWP::StyleBaseCommandArchive::default_instance());
}

StyleCreateCommandArchive::StyleCreateCommandArchive(const StyleCreateCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StyleCreateCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  preset_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StyleCreateCommandArchive::~StyleCreateCommandArchive() {
  SharedDtor();
}

void StyleCreateCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void StyleCreateCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StyleCreateCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StyleCreateCommandArchive_descriptor_;
}

const StyleCreateCommandArchive& StyleCreateCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPCommandArchives_2eproto();
  return *default_instance_;
}

StyleCreateCommandArchive* StyleCreateCommandArchive::default_instance_ = NULL;

StyleCreateCommandArchive* StyleCreateCommandArchive::New() const {
  return new StyleCreateCommandArchive;
}

void StyleCreateCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSWP::StyleBaseCommandArchive::Clear();
    }
    preset_index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StyleCreateCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSWP.StyleBaseCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_preset_index;
        break;
      }

      // optional uint32 preset_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preset_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &preset_index_)));
          set_has_preset_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StyleCreateCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSWP.StyleBaseCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional uint32 preset_index = 2;
  if (has_preset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->preset_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StyleCreateCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSWP.StyleBaseCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional uint32 preset_index = 2;
  if (has_preset_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->preset_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StyleCreateCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSWP.StyleBaseCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional uint32 preset_index = 2;
    if (has_preset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->preset_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StyleCreateCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StyleCreateCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StyleCreateCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StyleCreateCommandArchive::MergeFrom(const StyleCreateCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSWP::StyleBaseCommandArchive::MergeFrom(from.super());
    }
    if (from.has_preset_index()) {
      set_preset_index(from.preset_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StyleCreateCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StyleCreateCommandArchive::CopyFrom(const StyleCreateCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StyleCreateCommandArchive::IsInitialized() const {

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void StyleCreateCommandArchive::Swap(StyleCreateCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(preset_index_, other->preset_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StyleCreateCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StyleCreateCommandArchive_descriptor_;
  metadata.reflection = StyleCreateCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StyleRenameCommandArchive::kSuperFieldNumber;
const int StyleRenameCommandArchive::kUpdatedNameFieldNumber;
const int StyleRenameCommandArchive::kOldNameFieldNumber;
#endif  // !_MSC_VER

StyleRenameCommandArchive::StyleRenameCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StyleRenameCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSWP::StyleBaseCommandArchive*>(&::TSWP::StyleBaseCommandArchive::default_instance());
}

StyleRenameCommandArchive::StyleRenameCommandArchive(const StyleRenameCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StyleRenameCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  updated_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  old_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StyleRenameCommandArchive::~StyleRenameCommandArchive() {
  SharedDtor();
}

void StyleRenameCommandArchive::SharedDtor() {
  if (updated_name_ != &::google::protobuf::internal::kEmptyString) {
    delete updated_name_;
  }
  if (old_name_ != &::google::protobuf::internal::kEmptyString) {
    delete old_name_;
  }
  if (this != default_instance_) {
    delete super_;
  }
}

void StyleRenameCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StyleRenameCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StyleRenameCommandArchive_descriptor_;
}

const StyleRenameCommandArchive& StyleRenameCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPCommandArchives_2eproto();
  return *default_instance_;
}

StyleRenameCommandArchive* StyleRenameCommandArchive::default_instance_ = NULL;

StyleRenameCommandArchive* StyleRenameCommandArchive::New() const {
  return new StyleRenameCommandArchive;
}

void StyleRenameCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSWP::StyleBaseCommandArchive::Clear();
    }
    if (has_updated_name()) {
      if (updated_name_ != &::google::protobuf::internal::kEmptyString) {
        updated_name_->clear();
      }
    }
    if (has_old_name()) {
      if (old_name_ != &::google::protobuf::internal::kEmptyString) {
        old_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StyleRenameCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSWP.StyleBaseCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_updated_name;
        break;
      }

      // optional string updated_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_updated_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_updated_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->updated_name().data(), this->updated_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_old_name;
        break;
      }

      // optional string old_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_old_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->old_name().data(), this->old_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StyleRenameCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSWP.StyleBaseCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional string updated_name = 2;
  if (has_updated_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updated_name().data(), this->updated_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->updated_name(), output);
  }

  // optional string old_name = 3;
  if (has_old_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->old_name().data(), this->old_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->old_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StyleRenameCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSWP.StyleBaseCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional string updated_name = 2;
  if (has_updated_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updated_name().data(), this->updated_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->updated_name(), target);
  }

  // optional string old_name = 3;
  if (has_old_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->old_name().data(), this->old_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->old_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StyleRenameCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSWP.StyleBaseCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional string updated_name = 2;
    if (has_updated_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->updated_name());
    }

    // optional string old_name = 3;
    if (has_old_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->old_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StyleRenameCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StyleRenameCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StyleRenameCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StyleRenameCommandArchive::MergeFrom(const StyleRenameCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSWP::StyleBaseCommandArchive::MergeFrom(from.super());
    }
    if (from.has_updated_name()) {
      set_updated_name(from.updated_name());
    }
    if (from.has_old_name()) {
      set_old_name(from.old_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StyleRenameCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StyleRenameCommandArchive::CopyFrom(const StyleRenameCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StyleRenameCommandArchive::IsInitialized() const {

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void StyleRenameCommandArchive::Swap(StyleRenameCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(updated_name_, other->updated_name_);
    std::swap(old_name_, other->old_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StyleRenameCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StyleRenameCommandArchive_descriptor_;
  metadata.reflection = StyleRenameCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StyleUpdateCommandArchive::kSuperFieldNumber;
const int StyleUpdateCommandArchive::kOriginalStyleFieldNumber;
const int StyleUpdateCommandArchive::kUpdatedStyleFieldNumber;
#endif  // !_MSC_VER

StyleUpdateCommandArchive::StyleUpdateCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StyleUpdateCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSWP::StyleBaseCommandArchive*>(&::TSWP::StyleBaseCommandArchive::default_instance());
  original_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  updated_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

StyleUpdateCommandArchive::StyleUpdateCommandArchive(const StyleUpdateCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StyleUpdateCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  original_style_ = NULL;
  updated_style_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StyleUpdateCommandArchive::~StyleUpdateCommandArchive() {
  SharedDtor();
}

void StyleUpdateCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete original_style_;
    delete updated_style_;
  }
}

void StyleUpdateCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StyleUpdateCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StyleUpdateCommandArchive_descriptor_;
}

const StyleUpdateCommandArchive& StyleUpdateCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPCommandArchives_2eproto();
  return *default_instance_;
}

StyleUpdateCommandArchive* StyleUpdateCommandArchive::default_instance_ = NULL;

StyleUpdateCommandArchive* StyleUpdateCommandArchive::New() const {
  return new StyleUpdateCommandArchive;
}

void StyleUpdateCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSWP::StyleBaseCommandArchive::Clear();
    }
    if (has_original_style()) {
      if (original_style_ != NULL) original_style_->::TSP::Reference::Clear();
    }
    if (has_updated_style()) {
      if (updated_style_ != NULL) updated_style_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StyleUpdateCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSWP.StyleBaseCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_original_style;
        break;
      }

      // optional .TSP.Reference original_style = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_original_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_original_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_updated_style;
        break;
      }

      // optional .TSP.Reference updated_style = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_updated_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_updated_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StyleUpdateCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSWP.StyleBaseCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference original_style = 2;
  if (has_original_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->original_style(), output);
  }

  // optional .TSP.Reference updated_style = 3;
  if (has_updated_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->updated_style(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StyleUpdateCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSWP.StyleBaseCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference original_style = 2;
  if (has_original_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->original_style(), target);
  }

  // optional .TSP.Reference updated_style = 3;
  if (has_updated_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->updated_style(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StyleUpdateCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSWP.StyleBaseCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference original_style = 2;
    if (has_original_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->original_style());
    }

    // optional .TSP.Reference updated_style = 3;
    if (has_updated_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->updated_style());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StyleUpdateCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StyleUpdateCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StyleUpdateCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StyleUpdateCommandArchive::MergeFrom(const StyleUpdateCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSWP::StyleBaseCommandArchive::MergeFrom(from.super());
    }
    if (from.has_original_style()) {
      mutable_original_style()->::TSP::Reference::MergeFrom(from.original_style());
    }
    if (from.has_updated_style()) {
      mutable_updated_style()->::TSP::Reference::MergeFrom(from.updated_style());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StyleUpdateCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StyleUpdateCommandArchive::CopyFrom(const StyleUpdateCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StyleUpdateCommandArchive::IsInitialized() const {

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_original_style()) {
    if (!this->original_style().IsInitialized()) return false;
  }
  if (has_updated_style()) {
    if (!this->updated_style().IsInitialized()) return false;
  }
  return true;
}

void StyleUpdateCommandArchive::Swap(StyleUpdateCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(original_style_, other->original_style_);
    std::swap(updated_style_, other->updated_style_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StyleUpdateCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StyleUpdateCommandArchive_descriptor_;
  metadata.reflection = StyleUpdateCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StyleDeleteCommandArchive::kSuperFieldNumber;
const int StyleDeleteCommandArchive::kOldPresetIndexFieldNumber;
#endif  // !_MSC_VER

StyleDeleteCommandArchive::StyleDeleteCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StyleDeleteCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSWP::StyleBaseCommandArchive*>(&::TSWP::StyleBaseCommandArchive::default_instance());
}

StyleDeleteCommandArchive::StyleDeleteCommandArchive(const StyleDeleteCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StyleDeleteCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  old_preset_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StyleDeleteCommandArchive::~StyleDeleteCommandArchive() {
  SharedDtor();
}

void StyleDeleteCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void StyleDeleteCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StyleDeleteCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StyleDeleteCommandArchive_descriptor_;
}

const StyleDeleteCommandArchive& StyleDeleteCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPCommandArchives_2eproto();
  return *default_instance_;
}

StyleDeleteCommandArchive* StyleDeleteCommandArchive::default_instance_ = NULL;

StyleDeleteCommandArchive* StyleDeleteCommandArchive::New() const {
  return new StyleDeleteCommandArchive;
}

void StyleDeleteCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSWP::StyleBaseCommandArchive::Clear();
    }
    old_preset_index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StyleDeleteCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSWP.StyleBaseCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_old_preset_index;
        break;
      }

      // optional uint32 old_preset_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_preset_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_preset_index_)));
          set_has_old_preset_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StyleDeleteCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSWP.StyleBaseCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional uint32 old_preset_index = 2;
  if (has_old_preset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->old_preset_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StyleDeleteCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSWP.StyleBaseCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional uint32 old_preset_index = 2;
  if (has_old_preset_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->old_preset_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StyleDeleteCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSWP.StyleBaseCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional uint32 old_preset_index = 2;
    if (has_old_preset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_preset_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StyleDeleteCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StyleDeleteCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StyleDeleteCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StyleDeleteCommandArchive::MergeFrom(const StyleDeleteCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSWP::StyleBaseCommandArchive::MergeFrom(from.super());
    }
    if (from.has_old_preset_index()) {
      set_old_preset_index(from.old_preset_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StyleDeleteCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StyleDeleteCommandArchive::CopyFrom(const StyleDeleteCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StyleDeleteCommandArchive::IsInitialized() const {

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void StyleDeleteCommandArchive::Swap(StyleDeleteCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(old_preset_index_, other->old_preset_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StyleDeleteCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StyleDeleteCommandArchive_descriptor_;
  metadata.reflection = StyleDeleteCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StyleReorderCommandArchive::kSuperFieldNumber;
const int StyleReorderCommandArchive::kOldPresetIndexFieldNumber;
const int StyleReorderCommandArchive::kNewPresetIndexFieldNumber;
#endif  // !_MSC_VER

StyleReorderCommandArchive::StyleReorderCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StyleReorderCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSWP::StyleBaseCommandArchive*>(&::TSWP::StyleBaseCommandArchive::default_instance());
}

StyleReorderCommandArchive::StyleReorderCommandArchive(const StyleReorderCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StyleReorderCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  old_preset_index_ = 0u;
  new_preset_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StyleReorderCommandArchive::~StyleReorderCommandArchive() {
  SharedDtor();
}

void StyleReorderCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void StyleReorderCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StyleReorderCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StyleReorderCommandArchive_descriptor_;
}

const StyleReorderCommandArchive& StyleReorderCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPCommandArchives_2eproto();
  return *default_instance_;
}

StyleReorderCommandArchive* StyleReorderCommandArchive::default_instance_ = NULL;

StyleReorderCommandArchive* StyleReorderCommandArchive::New() const {
  return new StyleReorderCommandArchive;
}

void StyleReorderCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSWP::StyleBaseCommandArchive::Clear();
    }
    old_preset_index_ = 0u;
    new_preset_index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StyleReorderCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSWP.StyleBaseCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_old_preset_index;
        break;
      }

      // optional uint32 old_preset_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_preset_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_preset_index_)));
          set_has_old_preset_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_new_preset_index;
        break;
      }

      // optional uint32 new_preset_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_preset_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_preset_index_)));
          set_has_new_preset_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StyleReorderCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSWP.StyleBaseCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional uint32 old_preset_index = 2;
  if (has_old_preset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->old_preset_index(), output);
  }

  // optional uint32 new_preset_index = 3;
  if (has_new_preset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->new_preset_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StyleReorderCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSWP.StyleBaseCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional uint32 old_preset_index = 2;
  if (has_old_preset_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->old_preset_index(), target);
  }

  // optional uint32 new_preset_index = 3;
  if (has_new_preset_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->new_preset_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StyleReorderCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSWP.StyleBaseCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional uint32 old_preset_index = 2;
    if (has_old_preset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_preset_index());
    }

    // optional uint32 new_preset_index = 3;
    if (has_new_preset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_preset_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StyleReorderCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StyleReorderCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StyleReorderCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StyleReorderCommandArchive::MergeFrom(const StyleReorderCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSWP::StyleBaseCommandArchive::MergeFrom(from.super());
    }
    if (from.has_old_preset_index()) {
      set_old_preset_index(from.old_preset_index());
    }
    if (from.has_new_preset_index()) {
      set_new_preset_index(from.new_preset_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StyleReorderCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StyleReorderCommandArchive::CopyFrom(const StyleReorderCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StyleReorderCommandArchive::IsInitialized() const {

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void StyleReorderCommandArchive::Swap(StyleReorderCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(old_preset_index_, other->old_preset_index_);
    std::swap(new_preset_index_, other->new_preset_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StyleReorderCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StyleReorderCommandArchive_descriptor_;
  metadata.reflection = StyleReorderCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StyleUpdatePropertyMapCommandArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

StyleUpdatePropertyMapCommandArchive::StyleUpdatePropertyMapCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StyleUpdatePropertyMapCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSS::StyleUpdatePropertyMapCommandArchive*>(&::TSS::StyleUpdatePropertyMapCommandArchive::default_instance());
}

StyleUpdatePropertyMapCommandArchive::StyleUpdatePropertyMapCommandArchive(const StyleUpdatePropertyMapCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StyleUpdatePropertyMapCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StyleUpdatePropertyMapCommandArchive::~StyleUpdatePropertyMapCommandArchive() {
  SharedDtor();
}

void StyleUpdatePropertyMapCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void StyleUpdatePropertyMapCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StyleUpdatePropertyMapCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StyleUpdatePropertyMapCommandArchive_descriptor_;
}

const StyleUpdatePropertyMapCommandArchive& StyleUpdatePropertyMapCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPCommandArchives_2eproto();
  return *default_instance_;
}

StyleUpdatePropertyMapCommandArchive* StyleUpdatePropertyMapCommandArchive::default_instance_ = NULL;

StyleUpdatePropertyMapCommandArchive* StyleUpdatePropertyMapCommandArchive::New() const {
  return new StyleUpdatePropertyMapCommandArchive;
}

void StyleUpdatePropertyMapCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSS::StyleUpdatePropertyMapCommandArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StyleUpdatePropertyMapCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSS.StyleUpdatePropertyMapCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StyleUpdatePropertyMapCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSS.StyleUpdatePropertyMapCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StyleUpdatePropertyMapCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSS.StyleUpdatePropertyMapCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StyleUpdatePropertyMapCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSS.StyleUpdatePropertyMapCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StyleUpdatePropertyMapCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StyleUpdatePropertyMapCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StyleUpdatePropertyMapCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StyleUpdatePropertyMapCommandArchive::MergeFrom(const StyleUpdatePropertyMapCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSS::StyleUpdatePropertyMapCommandArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StyleUpdatePropertyMapCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StyleUpdatePropertyMapCommandArchive::CopyFrom(const StyleUpdatePropertyMapCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StyleUpdatePropertyMapCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void StyleUpdatePropertyMapCommandArchive::Swap(StyleUpdatePropertyMapCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StyleUpdatePropertyMapCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StyleUpdatePropertyMapCommandArchive_descriptor_;
  metadata.reflection = StyleUpdatePropertyMapCommandArchive_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TSWP

// @@protoc_insertion_point(global_scope)
