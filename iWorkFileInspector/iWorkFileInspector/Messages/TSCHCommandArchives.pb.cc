// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSCHCommandArchives.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TSCHCommandArchives.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace TSCH {

namespace {

const ::google::protobuf::Descriptor* CommandSetChartTypeArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetChartTypeArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* PropertyMutationUndoTupleArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PropertyMutationUndoTupleArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* StyleSwapUndoTupleArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StyleSwapUndoTupleArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandStyleSwapArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandStyleSwapArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetSeriesNameArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetSeriesNameArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetCategoryNameArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetCategoryNameArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandAddGridRowsArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandAddGridRowsArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandAddGridColumnsArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandAddGridColumnsArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandMoveGridRowsArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandMoveGridRowsArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandMoveGridColumnsArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandMoveGridColumnsArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandDeleteGridRowsArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandDeleteGridRowsArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandDeleteGridRowsArchive_ValueRow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandDeleteGridRowsArchive_ValueRow_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandDeleteGridColumnsArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandDeleteGridColumnsArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandDeleteGridColumnsArchive_ValueRow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandDeleteGridColumnsArchive_ValueRow_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetPreviewLocArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetPreviewLocArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetGridValueArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetGridValueArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetGridDirectionArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetGridDirectionArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetSeriesTypeArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetSeriesTypeArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetScatterFormatArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetScatterFormatArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetMultiDataSetIndexArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetMultiDataSetIndexArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetLegendFrameArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetLegendFrameArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetPieWedgeExplosion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetPieWedgeExplosion_reflection_ = NULL;
const ::google::protobuf::Descriptor* SynchronousCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SynchronousCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandReplaceAllArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandReplaceAllArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandChartApplyTheme_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandChartApplyTheme_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandChartApplyPreset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandChartApplyPreset_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandCleanupGeometryArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandCleanupGeometryArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChartCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandReplaceGridValuesArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandReplaceGridValuesArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandReplaceGridValuesArchive_ValueRow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandReplaceGridValuesArchive_ValueRow_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandReplaceThemePresetArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandReplaceThemePresetArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandReplaceThemePresetArchive_StyleAndIdentifierPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandReplaceThemePresetArchive_StyleAndIdentifierPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandInvalidateWPCaches_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandInvalidateWPCaches_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StyleOwnerType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* StyleSwapType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ApplyPresetBehavior_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_TSCHCommandArchives_2eproto() {
  protobuf_AddDesc_TSCHCommandArchives_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TSCHCommandArchives.proto");
  GOOGLE_CHECK(file != NULL);
  CommandSetChartTypeArchive_descriptor_ = file->message_type(0);
  static const int CommandSetChartTypeArchive_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetChartTypeArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetChartTypeArchive, oldcharttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetChartTypeArchive, newcharttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetChartTypeArchive, info_geometry_command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetChartTypeArchive, anchor_attachment_command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetChartTypeArchive, original_legend_rect_),
  };
  CommandSetChartTypeArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetChartTypeArchive_descriptor_,
      CommandSetChartTypeArchive::default_instance_,
      CommandSetChartTypeArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetChartTypeArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetChartTypeArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetChartTypeArchive));
  PropertyMutationUndoTupleArchive_descriptor_ = file->message_type(1);
  static const int PropertyMutationUndoTupleArchive_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyMutationUndoTupleArchive, chart_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyMutationUndoTupleArchive, style_owner_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyMutationUndoTupleArchive, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyMutationUndoTupleArchive, old_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyMutationUndoTupleArchive, new_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyMutationUndoTupleArchive, old_non_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyMutationUndoTupleArchive, new_non_style_),
  };
  PropertyMutationUndoTupleArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PropertyMutationUndoTupleArchive_descriptor_,
      PropertyMutationUndoTupleArchive::default_instance_,
      PropertyMutationUndoTupleArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyMutationUndoTupleArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyMutationUndoTupleArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PropertyMutationUndoTupleArchive));
  StyleSwapUndoTupleArchive_descriptor_ = file->message_type(2);
  static const int StyleSwapUndoTupleArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleSwapUndoTupleArchive, chart_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleSwapUndoTupleArchive, swap_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleSwapUndoTupleArchive, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleSwapUndoTupleArchive, old_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleSwapUndoTupleArchive, new_value_),
  };
  StyleSwapUndoTupleArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StyleSwapUndoTupleArchive_descriptor_,
      StyleSwapUndoTupleArchive::default_instance_,
      StyleSwapUndoTupleArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleSwapUndoTupleArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleSwapUndoTupleArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StyleSwapUndoTupleArchive));
  CommandStyleSwapArchive_descriptor_ = file->message_type(3);
  static const int CommandStyleSwapArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandStyleSwapArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandStyleSwapArchive, undo_tuples_),
  };
  CommandStyleSwapArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandStyleSwapArchive_descriptor_,
      CommandStyleSwapArchive::default_instance_,
      CommandStyleSwapArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandStyleSwapArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandStyleSwapArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandStyleSwapArchive));
  CommandSetSeriesNameArchive_descriptor_ = file->message_type(4);
  static const int CommandSetSeriesNameArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetSeriesNameArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetSeriesNameArchive, seriesindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetSeriesNameArchive, oldname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetSeriesNameArchive, newname_),
  };
  CommandSetSeriesNameArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetSeriesNameArchive_descriptor_,
      CommandSetSeriesNameArchive::default_instance_,
      CommandSetSeriesNameArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetSeriesNameArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetSeriesNameArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetSeriesNameArchive));
  CommandSetCategoryNameArchive_descriptor_ = file->message_type(5);
  static const int CommandSetCategoryNameArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetCategoryNameArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetCategoryNameArchive, categoryindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetCategoryNameArchive, oldname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetCategoryNameArchive, newname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetCategoryNameArchive, ismultidataindex_),
  };
  CommandSetCategoryNameArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetCategoryNameArchive_descriptor_,
      CommandSetCategoryNameArchive::default_instance_,
      CommandSetCategoryNameArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetCategoryNameArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetCategoryNameArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetCategoryNameArchive));
  CommandAddGridRowsArchive_descriptor_ = file->message_type(6);
  static const int CommandAddGridRowsArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandAddGridRowsArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandAddGridRowsArchive, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandAddGridRowsArchive, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandAddGridRowsArchive, name_),
  };
  CommandAddGridRowsArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandAddGridRowsArchive_descriptor_,
      CommandAddGridRowsArchive::default_instance_,
      CommandAddGridRowsArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandAddGridRowsArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandAddGridRowsArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandAddGridRowsArchive));
  CommandAddGridColumnsArchive_descriptor_ = file->message_type(7);
  static const int CommandAddGridColumnsArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandAddGridColumnsArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandAddGridColumnsArchive, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandAddGridColumnsArchive, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandAddGridColumnsArchive, name_),
  };
  CommandAddGridColumnsArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandAddGridColumnsArchive_descriptor_,
      CommandAddGridColumnsArchive::default_instance_,
      CommandAddGridColumnsArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandAddGridColumnsArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandAddGridColumnsArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandAddGridColumnsArchive));
  CommandMoveGridRowsArchive_descriptor_ = file->message_type(8);
  static const int CommandMoveGridRowsArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMoveGridRowsArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMoveGridRowsArchive, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMoveGridRowsArchive, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMoveGridRowsArchive, afterrow_),
  };
  CommandMoveGridRowsArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandMoveGridRowsArchive_descriptor_,
      CommandMoveGridRowsArchive::default_instance_,
      CommandMoveGridRowsArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMoveGridRowsArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMoveGridRowsArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandMoveGridRowsArchive));
  CommandMoveGridColumnsArchive_descriptor_ = file->message_type(9);
  static const int CommandMoveGridColumnsArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMoveGridColumnsArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMoveGridColumnsArchive, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMoveGridColumnsArchive, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMoveGridColumnsArchive, aftercolumn_),
  };
  CommandMoveGridColumnsArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandMoveGridColumnsArchive_descriptor_,
      CommandMoveGridColumnsArchive::default_instance_,
      CommandMoveGridColumnsArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMoveGridColumnsArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMoveGridColumnsArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandMoveGridColumnsArchive));
  CommandDeleteGridRowsArchive_descriptor_ = file->message_type(10);
  static const int CommandDeleteGridRowsArchive_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDeleteGridRowsArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDeleteGridRowsArchive, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDeleteGridRowsArchive, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDeleteGridRowsArchive, names_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDeleteGridRowsArchive, value_row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDeleteGridRowsArchive, removed_all_rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDeleteGridRowsArchive, column_names_),
  };
  CommandDeleteGridRowsArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandDeleteGridRowsArchive_descriptor_,
      CommandDeleteGridRowsArchive::default_instance_,
      CommandDeleteGridRowsArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDeleteGridRowsArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDeleteGridRowsArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandDeleteGridRowsArchive));
  CommandDeleteGridRowsArchive_ValueRow_descriptor_ = CommandDeleteGridRowsArchive_descriptor_->nested_type(0);
  static const int CommandDeleteGridRowsArchive_ValueRow_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDeleteGridRowsArchive_ValueRow, value_),
  };
  CommandDeleteGridRowsArchive_ValueRow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandDeleteGridRowsArchive_ValueRow_descriptor_,
      CommandDeleteGridRowsArchive_ValueRow::default_instance_,
      CommandDeleteGridRowsArchive_ValueRow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDeleteGridRowsArchive_ValueRow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDeleteGridRowsArchive_ValueRow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandDeleteGridRowsArchive_ValueRow));
  CommandDeleteGridColumnsArchive_descriptor_ = file->message_type(11);
  static const int CommandDeleteGridColumnsArchive_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDeleteGridColumnsArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDeleteGridColumnsArchive, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDeleteGridColumnsArchive, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDeleteGridColumnsArchive, names_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDeleteGridColumnsArchive, value_row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDeleteGridColumnsArchive, removed_all_columns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDeleteGridColumnsArchive, row_names_),
  };
  CommandDeleteGridColumnsArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandDeleteGridColumnsArchive_descriptor_,
      CommandDeleteGridColumnsArchive::default_instance_,
      CommandDeleteGridColumnsArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDeleteGridColumnsArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDeleteGridColumnsArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandDeleteGridColumnsArchive));
  CommandDeleteGridColumnsArchive_ValueRow_descriptor_ = CommandDeleteGridColumnsArchive_descriptor_->nested_type(0);
  static const int CommandDeleteGridColumnsArchive_ValueRow_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDeleteGridColumnsArchive_ValueRow, value_),
  };
  CommandDeleteGridColumnsArchive_ValueRow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandDeleteGridColumnsArchive_ValueRow_descriptor_,
      CommandDeleteGridColumnsArchive_ValueRow::default_instance_,
      CommandDeleteGridColumnsArchive_ValueRow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDeleteGridColumnsArchive_ValueRow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDeleteGridColumnsArchive_ValueRow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandDeleteGridColumnsArchive_ValueRow));
  CommandSetPreviewLocArchive_descriptor_ = file->message_type(12);
  static const int CommandSetPreviewLocArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetPreviewLocArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetPreviewLocArchive, old_loc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetPreviewLocArchive, new_loc_),
  };
  CommandSetPreviewLocArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetPreviewLocArchive_descriptor_,
      CommandSetPreviewLocArchive::default_instance_,
      CommandSetPreviewLocArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetPreviewLocArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetPreviewLocArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetPreviewLocArchive));
  CommandSetGridValueArchive_descriptor_ = file->message_type(13);
  static const int CommandSetGridValueArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetGridValueArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetGridValueArchive, rowindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetGridValueArchive, columnindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetGridValueArchive, oldvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetGridValueArchive, newvalue_),
  };
  CommandSetGridValueArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetGridValueArchive_descriptor_,
      CommandSetGridValueArchive::default_instance_,
      CommandSetGridValueArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetGridValueArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetGridValueArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetGridValueArchive));
  CommandSetGridDirectionArchive_descriptor_ = file->message_type(14);
  static const int CommandSetGridDirectionArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetGridDirectionArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetGridDirectionArchive, old_direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetGridDirectionArchive, new_direction_),
  };
  CommandSetGridDirectionArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetGridDirectionArchive_descriptor_,
      CommandSetGridDirectionArchive::default_instance_,
      CommandSetGridDirectionArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetGridDirectionArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetGridDirectionArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetGridDirectionArchive));
  CommandSetSeriesTypeArchive_descriptor_ = file->message_type(15);
  static const int CommandSetSeriesTypeArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetSeriesTypeArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetSeriesTypeArchive, seriesindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetSeriesTypeArchive, oldtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetSeriesTypeArchive, newtype_),
  };
  CommandSetSeriesTypeArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetSeriesTypeArchive_descriptor_,
      CommandSetSeriesTypeArchive::default_instance_,
      CommandSetSeriesTypeArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetSeriesTypeArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetSeriesTypeArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetSeriesTypeArchive));
  CommandSetScatterFormatArchive_descriptor_ = file->message_type(16);
  static const int CommandSetScatterFormatArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetScatterFormatArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetScatterFormatArchive, oldformat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetScatterFormatArchive, newformat_),
  };
  CommandSetScatterFormatArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetScatterFormatArchive_descriptor_,
      CommandSetScatterFormatArchive::default_instance_,
      CommandSetScatterFormatArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetScatterFormatArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetScatterFormatArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetScatterFormatArchive));
  CommandSetMultiDataSetIndexArchive_descriptor_ = file->message_type(17);
  static const int CommandSetMultiDataSetIndexArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetMultiDataSetIndexArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetMultiDataSetIndexArchive, oldindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetMultiDataSetIndexArchive, newindex_),
  };
  CommandSetMultiDataSetIndexArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetMultiDataSetIndexArchive_descriptor_,
      CommandSetMultiDataSetIndexArchive::default_instance_,
      CommandSetMultiDataSetIndexArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetMultiDataSetIndexArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetMultiDataSetIndexArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetMultiDataSetIndexArchive));
  CommandSetLegendFrameArchive_descriptor_ = file->message_type(18);
  static const int CommandSetLegendFrameArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetLegendFrameArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetLegendFrameArchive, old_legend_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetLegendFrameArchive, new_legend_frame_),
  };
  CommandSetLegendFrameArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetLegendFrameArchive_descriptor_,
      CommandSetLegendFrameArchive::default_instance_,
      CommandSetLegendFrameArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetLegendFrameArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetLegendFrameArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetLegendFrameArchive));
  CommandSetPieWedgeExplosion_descriptor_ = file->message_type(19);
  static const int CommandSetPieWedgeExplosion_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetPieWedgeExplosion, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetPieWedgeExplosion, info_geometry_command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetPieWedgeExplosion, style_mutation_command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetPieWedgeExplosion, anchor_attachment_command_),
  };
  CommandSetPieWedgeExplosion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetPieWedgeExplosion_descriptor_,
      CommandSetPieWedgeExplosion::default_instance_,
      CommandSetPieWedgeExplosion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetPieWedgeExplosion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetPieWedgeExplosion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetPieWedgeExplosion));
  SynchronousCommandArchive_descriptor_ = file->message_type(20);
  static const int SynchronousCommandArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchronousCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchronousCommandArchive, command_),
  };
  SynchronousCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SynchronousCommandArchive_descriptor_,
      SynchronousCommandArchive::default_instance_,
      SynchronousCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchronousCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchronousCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SynchronousCommandArchive));
  CommandReplaceAllArchive_descriptor_ = file->message_type(21);
  static const int CommandReplaceAllArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceAllArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceAllArchive, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceAllArchive, commands_),
  };
  CommandReplaceAllArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandReplaceAllArchive_descriptor_,
      CommandReplaceAllArchive::default_instance_,
      CommandReplaceAllArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceAllArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceAllArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandReplaceAllArchive));
  CommandChartApplyTheme_descriptor_ = file->message_type(22);
  static const int CommandChartApplyTheme_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandChartApplyTheme, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandChartApplyTheme, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandChartApplyTheme, swap_command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandChartApplyTheme, preset_),
  };
  CommandChartApplyTheme_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandChartApplyTheme_descriptor_,
      CommandChartApplyTheme::default_instance_,
      CommandChartApplyTheme_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandChartApplyTheme, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandChartApplyTheme, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandChartApplyTheme));
  CommandChartApplyPreset_descriptor_ = file->message_type(23);
  static const int CommandChartApplyPreset_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandChartApplyPreset, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandChartApplyPreset, swap_command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandChartApplyPreset, preset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandChartApplyPreset, behavior_),
  };
  CommandChartApplyPreset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandChartApplyPreset_descriptor_,
      CommandChartApplyPreset::default_instance_,
      CommandChartApplyPreset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandChartApplyPreset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandChartApplyPreset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandChartApplyPreset));
  CommandCleanupGeometryArchive_descriptor_ = file->message_type(24);
  static const int CommandCleanupGeometryArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandCleanupGeometryArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandCleanupGeometryArchive, info_geometry_command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandCleanupGeometryArchive, anchor_attachment_command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandCleanupGeometryArchive, original_legend_rect_),
  };
  CommandCleanupGeometryArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandCleanupGeometryArchive_descriptor_,
      CommandCleanupGeometryArchive::default_instance_,
      CommandCleanupGeometryArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandCleanupGeometryArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandCleanupGeometryArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandCleanupGeometryArchive));
  ChartCommandArchive_descriptor_ = file->message_type(25);
  static const int ChartCommandArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartCommandArchive, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartCommandArchive, original_dirty_state_),
  };
  ChartCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartCommandArchive_descriptor_,
      ChartCommandArchive::default_instance_,
      ChartCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartCommandArchive));
  CommandReplaceGridValuesArchive_descriptor_ = file->message_type(26);
  static const int CommandReplaceGridValuesArchive_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceGridValuesArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceGridValuesArchive, rowindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceGridValuesArchive, columnindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceGridValuesArchive, old_data_rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceGridValuesArchive, new_data_rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceGridValuesArchive, old_row_names_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceGridValuesArchive, new_row_names_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceGridValuesArchive, old_col_names_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceGridValuesArchive, new_col_names_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceGridValuesArchive, rows_to_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceGridValuesArchive, cols_to_add_),
  };
  CommandReplaceGridValuesArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandReplaceGridValuesArchive_descriptor_,
      CommandReplaceGridValuesArchive::default_instance_,
      CommandReplaceGridValuesArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceGridValuesArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceGridValuesArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandReplaceGridValuesArchive));
  CommandReplaceGridValuesArchive_ValueRow_descriptor_ = CommandReplaceGridValuesArchive_descriptor_->nested_type(0);
  static const int CommandReplaceGridValuesArchive_ValueRow_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceGridValuesArchive_ValueRow, value_),
  };
  CommandReplaceGridValuesArchive_ValueRow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandReplaceGridValuesArchive_ValueRow_descriptor_,
      CommandReplaceGridValuesArchive_ValueRow::default_instance_,
      CommandReplaceGridValuesArchive_ValueRow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceGridValuesArchive_ValueRow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceGridValuesArchive_ValueRow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandReplaceGridValuesArchive_ValueRow));
  CommandReplaceThemePresetArchive_descriptor_ = file->message_type(27);
  static const int CommandReplaceThemePresetArchive_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceThemePresetArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceThemePresetArchive, theme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceThemePresetArchive, old_preset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceThemePresetArchive, new_preset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceThemePresetArchive, identifiers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceThemePresetArchive, old_preset_index_),
  };
  CommandReplaceThemePresetArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandReplaceThemePresetArchive_descriptor_,
      CommandReplaceThemePresetArchive::default_instance_,
      CommandReplaceThemePresetArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceThemePresetArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceThemePresetArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandReplaceThemePresetArchive));
  CommandReplaceThemePresetArchive_StyleAndIdentifierPair_descriptor_ = CommandReplaceThemePresetArchive_descriptor_->nested_type(0);
  static const int CommandReplaceThemePresetArchive_StyleAndIdentifierPair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceThemePresetArchive_StyleAndIdentifierPair, style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceThemePresetArchive_StyleAndIdentifierPair, identifier_),
  };
  CommandReplaceThemePresetArchive_StyleAndIdentifierPair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandReplaceThemePresetArchive_StyleAndIdentifierPair_descriptor_,
      CommandReplaceThemePresetArchive_StyleAndIdentifierPair::default_instance_,
      CommandReplaceThemePresetArchive_StyleAndIdentifierPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceThemePresetArchive_StyleAndIdentifierPair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceThemePresetArchive_StyleAndIdentifierPair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandReplaceThemePresetArchive_StyleAndIdentifierPair));
  CommandInvalidateWPCaches_descriptor_ = file->message_type(28);
  static const int CommandInvalidateWPCaches_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInvalidateWPCaches, super_),
  };
  CommandInvalidateWPCaches_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandInvalidateWPCaches_descriptor_,
      CommandInvalidateWPCaches::default_instance_,
      CommandInvalidateWPCaches_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInvalidateWPCaches, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInvalidateWPCaches, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandInvalidateWPCaches));
  StyleOwnerType_descriptor_ = file->enum_type(0);
  StyleSwapType_descriptor_ = file->enum_type(1);
  ApplyPresetBehavior_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TSCHCommandArchives_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetChartTypeArchive_descriptor_, &CommandSetChartTypeArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PropertyMutationUndoTupleArchive_descriptor_, &PropertyMutationUndoTupleArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StyleSwapUndoTupleArchive_descriptor_, &StyleSwapUndoTupleArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandStyleSwapArchive_descriptor_, &CommandStyleSwapArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetSeriesNameArchive_descriptor_, &CommandSetSeriesNameArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetCategoryNameArchive_descriptor_, &CommandSetCategoryNameArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandAddGridRowsArchive_descriptor_, &CommandAddGridRowsArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandAddGridColumnsArchive_descriptor_, &CommandAddGridColumnsArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandMoveGridRowsArchive_descriptor_, &CommandMoveGridRowsArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandMoveGridColumnsArchive_descriptor_, &CommandMoveGridColumnsArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandDeleteGridRowsArchive_descriptor_, &CommandDeleteGridRowsArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandDeleteGridRowsArchive_ValueRow_descriptor_, &CommandDeleteGridRowsArchive_ValueRow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandDeleteGridColumnsArchive_descriptor_, &CommandDeleteGridColumnsArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandDeleteGridColumnsArchive_ValueRow_descriptor_, &CommandDeleteGridColumnsArchive_ValueRow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetPreviewLocArchive_descriptor_, &CommandSetPreviewLocArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetGridValueArchive_descriptor_, &CommandSetGridValueArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetGridDirectionArchive_descriptor_, &CommandSetGridDirectionArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetSeriesTypeArchive_descriptor_, &CommandSetSeriesTypeArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetScatterFormatArchive_descriptor_, &CommandSetScatterFormatArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetMultiDataSetIndexArchive_descriptor_, &CommandSetMultiDataSetIndexArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetLegendFrameArchive_descriptor_, &CommandSetLegendFrameArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetPieWedgeExplosion_descriptor_, &CommandSetPieWedgeExplosion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SynchronousCommandArchive_descriptor_, &SynchronousCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandReplaceAllArchive_descriptor_, &CommandReplaceAllArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandChartApplyTheme_descriptor_, &CommandChartApplyTheme::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandChartApplyPreset_descriptor_, &CommandChartApplyPreset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandCleanupGeometryArchive_descriptor_, &CommandCleanupGeometryArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartCommandArchive_descriptor_, &ChartCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandReplaceGridValuesArchive_descriptor_, &CommandReplaceGridValuesArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandReplaceGridValuesArchive_ValueRow_descriptor_, &CommandReplaceGridValuesArchive_ValueRow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandReplaceThemePresetArchive_descriptor_, &CommandReplaceThemePresetArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandReplaceThemePresetArchive_StyleAndIdentifierPair_descriptor_, &CommandReplaceThemePresetArchive_StyleAndIdentifierPair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandInvalidateWPCaches_descriptor_, &CommandInvalidateWPCaches::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TSCHCommandArchives_2eproto() {
  delete CommandSetChartTypeArchive::default_instance_;
  delete CommandSetChartTypeArchive_reflection_;
  delete PropertyMutationUndoTupleArchive::default_instance_;
  delete PropertyMutationUndoTupleArchive_reflection_;
  delete StyleSwapUndoTupleArchive::default_instance_;
  delete StyleSwapUndoTupleArchive_reflection_;
  delete CommandStyleSwapArchive::default_instance_;
  delete CommandStyleSwapArchive_reflection_;
  delete CommandSetSeriesNameArchive::default_instance_;
  delete CommandSetSeriesNameArchive_reflection_;
  delete CommandSetCategoryNameArchive::default_instance_;
  delete CommandSetCategoryNameArchive_reflection_;
  delete CommandAddGridRowsArchive::default_instance_;
  delete CommandAddGridRowsArchive_reflection_;
  delete CommandAddGridColumnsArchive::default_instance_;
  delete CommandAddGridColumnsArchive_reflection_;
  delete CommandMoveGridRowsArchive::default_instance_;
  delete CommandMoveGridRowsArchive_reflection_;
  delete CommandMoveGridColumnsArchive::default_instance_;
  delete CommandMoveGridColumnsArchive_reflection_;
  delete CommandDeleteGridRowsArchive::default_instance_;
  delete CommandDeleteGridRowsArchive_reflection_;
  delete CommandDeleteGridRowsArchive_ValueRow::default_instance_;
  delete CommandDeleteGridRowsArchive_ValueRow_reflection_;
  delete CommandDeleteGridColumnsArchive::default_instance_;
  delete CommandDeleteGridColumnsArchive_reflection_;
  delete CommandDeleteGridColumnsArchive_ValueRow::default_instance_;
  delete CommandDeleteGridColumnsArchive_ValueRow_reflection_;
  delete CommandSetPreviewLocArchive::default_instance_;
  delete CommandSetPreviewLocArchive_reflection_;
  delete CommandSetGridValueArchive::default_instance_;
  delete CommandSetGridValueArchive_reflection_;
  delete CommandSetGridDirectionArchive::default_instance_;
  delete CommandSetGridDirectionArchive_reflection_;
  delete CommandSetSeriesTypeArchive::default_instance_;
  delete CommandSetSeriesTypeArchive_reflection_;
  delete CommandSetScatterFormatArchive::default_instance_;
  delete CommandSetScatterFormatArchive_reflection_;
  delete CommandSetMultiDataSetIndexArchive::default_instance_;
  delete CommandSetMultiDataSetIndexArchive_reflection_;
  delete CommandSetLegendFrameArchive::default_instance_;
  delete CommandSetLegendFrameArchive_reflection_;
  delete CommandSetPieWedgeExplosion::default_instance_;
  delete CommandSetPieWedgeExplosion_reflection_;
  delete SynchronousCommandArchive::default_instance_;
  delete SynchronousCommandArchive_reflection_;
  delete CommandReplaceAllArchive::default_instance_;
  delete CommandReplaceAllArchive_reflection_;
  delete CommandChartApplyTheme::default_instance_;
  delete CommandChartApplyTheme_reflection_;
  delete CommandChartApplyPreset::default_instance_;
  delete CommandChartApplyPreset_reflection_;
  delete CommandCleanupGeometryArchive::default_instance_;
  delete CommandCleanupGeometryArchive_reflection_;
  delete ChartCommandArchive::default_instance_;
  delete ChartCommandArchive_reflection_;
  delete CommandReplaceGridValuesArchive::default_instance_;
  delete CommandReplaceGridValuesArchive_reflection_;
  delete CommandReplaceGridValuesArchive_ValueRow::default_instance_;
  delete CommandReplaceGridValuesArchive_ValueRow_reflection_;
  delete CommandReplaceThemePresetArchive::default_instance_;
  delete CommandReplaceThemePresetArchive_reflection_;
  delete CommandReplaceThemePresetArchive_StyleAndIdentifierPair::default_instance_;
  delete CommandReplaceThemePresetArchive_StyleAndIdentifierPair_reflection_;
  delete CommandInvalidateWPCaches::default_instance_;
  delete CommandInvalidateWPCaches_reflection_;
}

void protobuf_AddDesc_TSCHCommandArchives_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::TSP::protobuf_AddDesc_TSPMessages_2eproto();
  ::TSK::protobuf_AddDesc_TSKArchives_2eproto();
  ::TSS::protobuf_AddDesc_TSSArchives_2eproto();
  ::TSD::protobuf_AddDesc_TSDArchives_2eproto();
  ::TSCH::protobuf_AddDesc_TSCHArchives_2eCommon_2eproto();
  ::TSCH::Generated::protobuf_AddDesc_TSCHArchives_2eGEN_2eproto();
  ::TSCH::protobuf_AddDesc_TSCH3DArchives_2eproto();
  ::TSCH::protobuf_AddDesc_TSCHArchives_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031TSCHCommandArchives.proto\022\004TSCH\032\021TSPMe"
    "ssages.proto\032\021TSKArchives.proto\032\021TSSArch"
    "ives.proto\032\021TSDArchives.proto\032\031TSCHArchi"
    "ves.Common.proto\032\026TSCHArchives.GEN.proto"
    "\032\024TSCH3DArchives.proto\032\022TSCHArchives.pro"
    "to\"\247\002\n\032CommandSetChartTypeArchive\022(\n\005sup"
    "er\030\001 \002(\0132\031.TSCH.ChartCommandArchive\022%\n\014o"
    "ldChartType\030\002 \002(\0162\017.TSCH.ChartType\022%\n\014ne"
    "wChartType\030\003 \002(\0162\017.TSCH.ChartType\022-\n\025inf"
    "o_geometry_command\030\005 \001(\0132\016.TSP.Reference"
    "\0221\n\031anchor_attachment_command\030\006 \001(\0132\016.TS"
    "P.Reference\022/\n\024original_legend_rect\030\007 \001("
    "\0132\021.TSCH.RectArchive\"\231\002\n PropertyMutatio"
    "nUndoTupleArchive\022\"\n\nchart_info\030\001 \001(\0132\016."
    "TSP.Reference\022.\n\020style_owner_type\030\002 \001(\0162"
    "\024.TSCH.StyleOwnerType\022\r\n\005index\030\003 \001(\r\022!\n\t"
    "old_style\030\004 \001(\0132\016.TSP.Reference\022!\n\tnew_s"
    "tyle\030\005 \001(\0132\016.TSP.Reference\022%\n\rold_non_st"
    "yle\030\006 \001(\0132\016.TSP.Reference\022%\n\rnew_non_sty"
    "le\030\007 \001(\0132\016.TSP.Reference\"\274\001\n\031StyleSwapUn"
    "doTupleArchive\022\"\n\nchart_info\030\001 \001(\0132\016.TSP"
    ".Reference\022&\n\tswap_type\030\002 \001(\0162\023.TSCH.Sty"
    "leSwapType\022\r\n\005index\030\003 \001(\r\022!\n\told_value\030\004"
    " \001(\0132\016.TSP.Reference\022!\n\tnew_value\030\005 \001(\0132"
    "\016.TSP.Reference\"y\n\027CommandStyleSwapArchi"
    "ve\022(\n\005super\030\001 \002(\0132\031.TSCH.ChartCommandArc"
    "hive\0224\n\013undo_tuples\030\002 \003(\0132\037.TSCH.StyleSw"
    "apUndoTupleArchive\"~\n\033CommandSetSeriesNa"
    "meArchive\022(\n\005super\030\001 \002(\0132\031.TSCH.ChartCom"
    "mandArchive\022\023\n\013seriesIndex\030\002 \002(\r\022\017\n\007oldN"
    "ame\030\003 \002(\t\022\017\n\007newName\030\004 \002(\t\"\234\001\n\035CommandSe"
    "tCategoryNameArchive\022(\n\005super\030\001 \002(\0132\031.TS"
    "CH.ChartCommandArchive\022\025\n\rcategoryIndex\030"
    "\002 \002(\r\022\017\n\007oldName\030\003 \002(\t\022\017\n\007newName\030\004 \002(\t\022"
    "\030\n\020isMultiDataIndex\030\005 \001(\010\"u\n\031CommandAddG"
    "ridRowsArchive\022(\n\005super\030\001 \002(\0132\031.TSCH.Cha"
    "rtCommandArchive\022\020\n\010location\030\002 \002(\r\022\016\n\006le"
    "ngth\030\003 \001(\r\022\014\n\004name\030\004 \003(\t\"x\n\034CommandAddGr"
    "idColumnsArchive\022(\n\005super\030\001 \002(\0132\031.TSCH.C"
    "hartCommandArchive\022\020\n\010location\030\002 \002(\r\022\016\n\006"
    "length\030\003 \001(\r\022\014\n\004name\030\004 \003(\t\"z\n\032CommandMov"
    "eGridRowsArchive\022(\n\005super\030\001 \002(\0132\031.TSCH.C"
    "hartCommandArchive\022\020\n\010location\030\002 \002(\r\022\016\n\006"
    "length\030\003 \002(\r\022\020\n\010afterrow\030\004 \002(\005\"\200\001\n\035Comma"
    "ndMoveGridColumnsArchive\022(\n\005super\030\001 \002(\0132"
    "\031.TSCH.ChartCommandArchive\022\020\n\010location\030\002"
    " \002(\r\022\016\n\006length\030\003 \002(\r\022\023\n\013aftercolumn\030\004 \002("
    "\005\"\204\002\n\034CommandDeleteGridRowsArchive\022(\n\005su"
    "per\030\001 \002(\0132\031.TSCH.ChartCommandArchive\022\020\n\010"
    "location\030\002 \002(\r\022\016\n\006length\030\003 \002(\r\022\r\n\005names\030"
    "\004 \003(\t\022>\n\tvalue_row\030\006 \003(\0132+.TSCH.CommandD"
    "eleteGridRowsArchive.ValueRow\022\030\n\020removed"
    "_all_rows\030\007 \001(\010\022\024\n\014column_names\030\010 \003(\t\032\031\n"
    "\010ValueRow\022\r\n\005value\030\005 \003(\001\"\212\002\n\037CommandDele"
    "teGridColumnsArchive\022(\n\005super\030\001 \002(\0132\031.TS"
    "CH.ChartCommandArchive\022\020\n\010location\030\002 \002(\r"
    "\022\016\n\006length\030\003 \002(\r\022\r\n\005names\030\004 \003(\t\022A\n\tvalue"
    "_row\030\006 \003(\0132..TSCH.CommandDeleteGridColum"
    "nsArchive.ValueRow\022\033\n\023removed_all_column"
    "s\030\007 \001(\010\022\021\n\trow_names\030\010 \003(\t\032\031\n\010ValueRow\022\r"
    "\n\005value\030\005 \003(\001\"\201\001\n\033CommandSetPreviewLocAr"
    "chive\022(\n\005super\030\001 \002(\0132\031.TSCH.ChartCommand"
    "Archive\022\033\n\007old_loc\030\002 \002(\0132\n.TSP.Point\022\033\n\007"
    "new_loc\030\003 \002(\0132\n.TSP.Point\"\221\001\n\032CommandSet"
    "GridValueArchive\022(\n\005super\030\001 \002(\0132\031.TSCH.C"
    "hartCommandArchive\022\020\n\010rowindex\030\002 \002(\r\022\023\n\013"
    "columnindex\030\003 \002(\r\022\020\n\010oldvalue\030\004 \002(\001\022\020\n\010n"
    "ewvalue\030\005 \002(\001\"x\n\036CommandSetGridDirection"
    "Archive\022(\n\005super\030\001 \002(\0132\031.TSCH.ChartComma"
    "ndArchive\022\025\n\rold_direction\030\002 \002(\r\022\025\n\rnew_"
    "direction\030\003 \002(\r\"~\n\033CommandSetSeriesTypeA"
    "rchive\022(\n\005super\030\001 \002(\0132\031.TSCH.ChartComman"
    "dArchive\022\023\n\013seriesindex\030\002 \002(\r\022\017\n\007oldtype"
    "\030\003 \002(\r\022\017\n\007newtype\030\004 \002(\r\"p\n\036CommandSetSca"
    "tterFormatArchive\022(\n\005super\030\001 \002(\0132\031.TSCH."
    "ChartCommandArchive\022\021\n\toldformat\030\003 \002(\r\022\021"
    "\n\tnewformat\030\004 \002(\r\"r\n\"CommandSetMultiData"
    "SetIndexArchive\022(\n\005super\030\001 \002(\0132\031.TSCH.Ch"
    "artCommandArchive\022\020\n\010oldindex\030\002 \002(\r\022\020\n\010n"
    "ewindex\030\003 \002(\r\"\242\001\n\034CommandSetLegendFrameA"
    "rchive\022(\n\005super\030\001 \002(\0132\031.TSCH.ChartComman"
    "dArchive\022+\n\020old_legend_frame\030\002 \002(\0132\021.TSC"
    "H.RectArchive\022+\n\020new_legend_frame\030\003 \002(\0132"
    "\021.TSCH.RectArchive\"\331\001\n\033CommandSetPieWedg"
    "eExplosion\022(\n\005super\030\001 \002(\0132\031.TSCH.ChartCo"
    "mmandArchive\022-\n\025info_geometry_command\030\002 "
    "\001(\0132\016.TSP.Reference\022.\n\026style_mutation_co"
    "mmand\030\003 \001(\0132\016.TSP.Reference\0221\n\031anchor_at"
    "tachment_command\030\004 \001(\0132\016.TSP.Reference\"`"
    "\n\031SynchronousCommandArchive\022\"\n\005super\030\001 \002"
    "(\0132\023.TSK.CommandArchive\022\037\n\007command\030\002 \002(\013"
    "2\016.TSP.Reference\"\215\001\n\030CommandReplaceAllAr"
    "chive\0221\n\005super\030\001 \002(\0132\".TSK.ReplaceAllChi"
    "ldCommandArchive\022\034\n\004info\030\002 \002(\0132\016.TSP.Ref"
    "erence\022 \n\010commands\030\003 \003(\0132\016.TSP.Reference"
    "\"\257\001\n\026CommandChartApplyTheme\0221\n\005super\030\001 \002"
    "(\0132\".TSS.ApplyThemeChildCommandArchive\022\034"
    "\n\004info\030\002 \002(\0132\016.TSP.Reference\022$\n\014swap_com"
    "mand\030\003 \001(\0132\016.TSP.Reference\022\036\n\006preset\030\004 \001"
    "(\0132\016.TSP.Reference\"\310\001\n\027CommandChartApply"
    "Preset\022(\n\005super\030\001 \002(\0132\031.TSCH.ChartComman"
    "dArchive\022$\n\014swap_command\030\002 \001(\0132\016.TSP.Ref"
    "erence\022\036\n\006preset\030\003 \001(\0132\016.TSP.Reference\022="
    "\n\010behavior\030\004 \001(\0162\031.TSCH.ApplyPresetBehav"
    "ior:\020remove_overrides\"\334\001\n\035CommandCleanup"
    "GeometryArchive\022(\n\005super\030\001 \002(\0132\031.TSCH.Ch"
    "artCommandArchive\022-\n\025info_geometry_comma"
    "nd\030\002 \001(\0132\016.TSP.Reference\0221\n\031anchor_attac"
    "hment_command\030\003 \001(\0132\016.TSP.Reference\022/\n\024o"
    "riginal_legend_rect\030\004 \001(\0132\021.TSCH.RectArc"
    "hive\"u\n\023ChartCommandArchive\022\"\n\005super\030\001 \002"
    "(\0132\023.TSK.CommandArchive\022\034\n\004info\030\002 \002(\0132\016."
    "TSP.Reference\022\034\n\024original_dirty_state\030\003 "
    "\001(\010\"\241\003\n\037CommandReplaceGridValuesArchive\022"
    "(\n\005super\030\001 \002(\0132\031.TSCH.ChartCommandArchiv"
    "e\022\020\n\010rowindex\030\002 \002(\r\022\023\n\013columnindex\030\003 \002(\r"
    "\022E\n\rold_data_rows\030\004 \003(\0132..TSCH.CommandRe"
    "placeGridValuesArchive.ValueRow\022E\n\rnew_d"
    "ata_rows\030\005 \003(\0132..TSCH.CommandReplaceGrid"
    "ValuesArchive.ValueRow\022\025\n\rold_row_names\030"
    "\006 \003(\t\022\025\n\rnew_row_names\030\007 \003(\t\022\025\n\rold_col_"
    "names\030\010 \003(\t\022\025\n\rnew_col_names\030\t \003(\t\022\023\n\013ro"
    "ws_to_add\030\n \001(\r\022\023\n\013cols_to_add\030\013 \001(\r\032\031\n\010"
    "ValueRow\022\r\n\005value\030\001 \003(\001\"\350\002\n CommandRepla"
    "ceThemePresetArchive\022\"\n\005super\030\001 \002(\0132\023.TS"
    "K.CommandArchive\022\035\n\005theme\030\002 \002(\0132\016.TSP.Re"
    "ference\022\"\n\nold_preset\030\003 \001(\0132\016.TSP.Refere"
    "nce\022\"\n\nnew_preset\030\004 \001(\0132\016.TSP.Reference\022"
    "R\n\013identifiers\030\005 \003(\0132=.TSCH.CommandRepla"
    "ceThemePresetArchive.StyleAndIdentifierP"
    "air\022\030\n\020old_preset_index\030\006 \001(\004\032K\n\026StyleAn"
    "dIdentifierPair\022\035\n\005style\030\001 \002(\0132\016.TSP.Ref"
    "erence\022\022\n\nidentifier\030\002 \002(\t\"\?\n\031CommandInv"
    "alidateWPCaches\022\"\n\005super\030\001 \002(\0132\023.TSK.Com"
    "mandArchive*T\n\016StyleOwnerType\022\016\n\nchart_i"
    "nfo\020\001\022\020\n\014legend_model\020\002\022\016\n\nchart_axis\020\003\022"
    "\020\n\014chart_series\020\004*\240\002\n\rStyleSwapType\022\017\n\013c"
    "hart_style\020\001\022\023\n\017chart_non_style\020\002\022\020\n\014leg"
    "end_style\020\003\022\024\n\020legend_non_style\020\004\022\024\n\020val"
    "ue_axis_style\020\005\022\030\n\024value_axis_non_style\020"
    "\006\022\027\n\023category_axis_style\020\007\022\033\n\027category_a"
    "xis_non_style\020\010\022\026\n\022series_theme_style\020\t\022"
    "\030\n\024series_private_style\020\n\022\024\n\020series_non_"
    "style\020\013\022\023\n\017paragraph_style\020\014*\\\n\023ApplyPre"
    "setBehavior\022\024\n\020remove_overrides\020\001\022\026\n\022pre"
    "serve_overrides\020\002\022\027\n\023preserve_appearance"
    "\020\003", 5842);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TSCHCommandArchives.proto", &protobuf_RegisterTypes);
  CommandSetChartTypeArchive::default_instance_ = new CommandSetChartTypeArchive();
  PropertyMutationUndoTupleArchive::default_instance_ = new PropertyMutationUndoTupleArchive();
  StyleSwapUndoTupleArchive::default_instance_ = new StyleSwapUndoTupleArchive();
  CommandStyleSwapArchive::default_instance_ = new CommandStyleSwapArchive();
  CommandSetSeriesNameArchive::default_instance_ = new CommandSetSeriesNameArchive();
  CommandSetCategoryNameArchive::default_instance_ = new CommandSetCategoryNameArchive();
  CommandAddGridRowsArchive::default_instance_ = new CommandAddGridRowsArchive();
  CommandAddGridColumnsArchive::default_instance_ = new CommandAddGridColumnsArchive();
  CommandMoveGridRowsArchive::default_instance_ = new CommandMoveGridRowsArchive();
  CommandMoveGridColumnsArchive::default_instance_ = new CommandMoveGridColumnsArchive();
  CommandDeleteGridRowsArchive::default_instance_ = new CommandDeleteGridRowsArchive();
  CommandDeleteGridRowsArchive_ValueRow::default_instance_ = new CommandDeleteGridRowsArchive_ValueRow();
  CommandDeleteGridColumnsArchive::default_instance_ = new CommandDeleteGridColumnsArchive();
  CommandDeleteGridColumnsArchive_ValueRow::default_instance_ = new CommandDeleteGridColumnsArchive_ValueRow();
  CommandSetPreviewLocArchive::default_instance_ = new CommandSetPreviewLocArchive();
  CommandSetGridValueArchive::default_instance_ = new CommandSetGridValueArchive();
  CommandSetGridDirectionArchive::default_instance_ = new CommandSetGridDirectionArchive();
  CommandSetSeriesTypeArchive::default_instance_ = new CommandSetSeriesTypeArchive();
  CommandSetScatterFormatArchive::default_instance_ = new CommandSetScatterFormatArchive();
  CommandSetMultiDataSetIndexArchive::default_instance_ = new CommandSetMultiDataSetIndexArchive();
  CommandSetLegendFrameArchive::default_instance_ = new CommandSetLegendFrameArchive();
  CommandSetPieWedgeExplosion::default_instance_ = new CommandSetPieWedgeExplosion();
  SynchronousCommandArchive::default_instance_ = new SynchronousCommandArchive();
  CommandReplaceAllArchive::default_instance_ = new CommandReplaceAllArchive();
  CommandChartApplyTheme::default_instance_ = new CommandChartApplyTheme();
  CommandChartApplyPreset::default_instance_ = new CommandChartApplyPreset();
  CommandCleanupGeometryArchive::default_instance_ = new CommandCleanupGeometryArchive();
  ChartCommandArchive::default_instance_ = new ChartCommandArchive();
  CommandReplaceGridValuesArchive::default_instance_ = new CommandReplaceGridValuesArchive();
  CommandReplaceGridValuesArchive_ValueRow::default_instance_ = new CommandReplaceGridValuesArchive_ValueRow();
  CommandReplaceThemePresetArchive::default_instance_ = new CommandReplaceThemePresetArchive();
  CommandReplaceThemePresetArchive_StyleAndIdentifierPair::default_instance_ = new CommandReplaceThemePresetArchive_StyleAndIdentifierPair();
  CommandInvalidateWPCaches::default_instance_ = new CommandInvalidateWPCaches();
  CommandSetChartTypeArchive::default_instance_->InitAsDefaultInstance();
  PropertyMutationUndoTupleArchive::default_instance_->InitAsDefaultInstance();
  StyleSwapUndoTupleArchive::default_instance_->InitAsDefaultInstance();
  CommandStyleSwapArchive::default_instance_->InitAsDefaultInstance();
  CommandSetSeriesNameArchive::default_instance_->InitAsDefaultInstance();
  CommandSetCategoryNameArchive::default_instance_->InitAsDefaultInstance();
  CommandAddGridRowsArchive::default_instance_->InitAsDefaultInstance();
  CommandAddGridColumnsArchive::default_instance_->InitAsDefaultInstance();
  CommandMoveGridRowsArchive::default_instance_->InitAsDefaultInstance();
  CommandMoveGridColumnsArchive::default_instance_->InitAsDefaultInstance();
  CommandDeleteGridRowsArchive::default_instance_->InitAsDefaultInstance();
  CommandDeleteGridRowsArchive_ValueRow::default_instance_->InitAsDefaultInstance();
  CommandDeleteGridColumnsArchive::default_instance_->InitAsDefaultInstance();
  CommandDeleteGridColumnsArchive_ValueRow::default_instance_->InitAsDefaultInstance();
  CommandSetPreviewLocArchive::default_instance_->InitAsDefaultInstance();
  CommandSetGridValueArchive::default_instance_->InitAsDefaultInstance();
  CommandSetGridDirectionArchive::default_instance_->InitAsDefaultInstance();
  CommandSetSeriesTypeArchive::default_instance_->InitAsDefaultInstance();
  CommandSetScatterFormatArchive::default_instance_->InitAsDefaultInstance();
  CommandSetMultiDataSetIndexArchive::default_instance_->InitAsDefaultInstance();
  CommandSetLegendFrameArchive::default_instance_->InitAsDefaultInstance();
  CommandSetPieWedgeExplosion::default_instance_->InitAsDefaultInstance();
  SynchronousCommandArchive::default_instance_->InitAsDefaultInstance();
  CommandReplaceAllArchive::default_instance_->InitAsDefaultInstance();
  CommandChartApplyTheme::default_instance_->InitAsDefaultInstance();
  CommandChartApplyPreset::default_instance_->InitAsDefaultInstance();
  CommandCleanupGeometryArchive::default_instance_->InitAsDefaultInstance();
  ChartCommandArchive::default_instance_->InitAsDefaultInstance();
  CommandReplaceGridValuesArchive::default_instance_->InitAsDefaultInstance();
  CommandReplaceGridValuesArchive_ValueRow::default_instance_->InitAsDefaultInstance();
  CommandReplaceThemePresetArchive::default_instance_->InitAsDefaultInstance();
  CommandReplaceThemePresetArchive_StyleAndIdentifierPair::default_instance_->InitAsDefaultInstance();
  CommandInvalidateWPCaches::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TSCHCommandArchives_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TSCHCommandArchives_2eproto {
  StaticDescriptorInitializer_TSCHCommandArchives_2eproto() {
    protobuf_AddDesc_TSCHCommandArchives_2eproto();
  }
} static_descriptor_initializer_TSCHCommandArchives_2eproto_;
const ::google::protobuf::EnumDescriptor* StyleOwnerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StyleOwnerType_descriptor_;
}
bool StyleOwnerType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StyleSwapType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StyleSwapType_descriptor_;
}
bool StyleSwapType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ApplyPresetBehavior_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyPresetBehavior_descriptor_;
}
bool ApplyPresetBehavior_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetChartTypeArchive::kSuperFieldNumber;
const int CommandSetChartTypeArchive::kOldChartTypeFieldNumber;
const int CommandSetChartTypeArchive::kNewChartTypeFieldNumber;
const int CommandSetChartTypeArchive::kInfoGeometryCommandFieldNumber;
const int CommandSetChartTypeArchive::kAnchorAttachmentCommandFieldNumber;
const int CommandSetChartTypeArchive::kOriginalLegendRectFieldNumber;
#endif  // !_MSC_VER

CommandSetChartTypeArchive::CommandSetChartTypeArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetChartTypeArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSCH::ChartCommandArchive*>(&::TSCH::ChartCommandArchive::default_instance());
  info_geometry_command_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  anchor_attachment_command_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  original_legend_rect_ = const_cast< ::TSCH::RectArchive*>(&::TSCH::RectArchive::default_instance());
}

CommandSetChartTypeArchive::CommandSetChartTypeArchive(const CommandSetChartTypeArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetChartTypeArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  oldcharttype_ = 0;
  newcharttype_ = 0;
  info_geometry_command_ = NULL;
  anchor_attachment_command_ = NULL;
  original_legend_rect_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetChartTypeArchive::~CommandSetChartTypeArchive() {
  SharedDtor();
}

void CommandSetChartTypeArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete info_geometry_command_;
    delete anchor_attachment_command_;
    delete original_legend_rect_;
  }
}

void CommandSetChartTypeArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetChartTypeArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetChartTypeArchive_descriptor_;
}

const CommandSetChartTypeArchive& CommandSetChartTypeArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetChartTypeArchive* CommandSetChartTypeArchive::default_instance_ = NULL;

CommandSetChartTypeArchive* CommandSetChartTypeArchive::New() const {
  return new CommandSetChartTypeArchive;
}

void CommandSetChartTypeArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSCH::ChartCommandArchive::Clear();
    }
    oldcharttype_ = 0;
    newcharttype_ = 0;
    if (has_info_geometry_command()) {
      if (info_geometry_command_ != NULL) info_geometry_command_->::TSP::Reference::Clear();
    }
    if (has_anchor_attachment_command()) {
      if (anchor_attachment_command_ != NULL) anchor_attachment_command_->::TSP::Reference::Clear();
    }
    if (has_original_legend_rect()) {
      if (original_legend_rect_ != NULL) original_legend_rect_->::TSCH::RectArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetChartTypeArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_oldChartType;
        break;
      }

      // required .TSCH.ChartType oldChartType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oldChartType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSCH::ChartType_IsValid(value)) {
            set_oldcharttype(static_cast< ::TSCH::ChartType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_newChartType;
        break;
      }

      // required .TSCH.ChartType newChartType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newChartType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSCH::ChartType_IsValid(value)) {
            set_newcharttype(static_cast< ::TSCH::ChartType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_info_geometry_command;
        break;
      }

      // optional .TSP.Reference info_geometry_command = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info_geometry_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info_geometry_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_anchor_attachment_command;
        break;
      }

      // optional .TSP.Reference anchor_attachment_command = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_anchor_attachment_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_anchor_attachment_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_original_legend_rect;
        break;
      }

      // optional .TSCH.RectArchive original_legend_rect = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_original_legend_rect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_original_legend_rect()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetChartTypeArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSCH.ChartCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSCH.ChartType oldChartType = 2;
  if (has_oldcharttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->oldcharttype(), output);
  }

  // required .TSCH.ChartType newChartType = 3;
  if (has_newcharttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->newcharttype(), output);
  }

  // optional .TSP.Reference info_geometry_command = 5;
  if (has_info_geometry_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->info_geometry_command(), output);
  }

  // optional .TSP.Reference anchor_attachment_command = 6;
  if (has_anchor_attachment_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->anchor_attachment_command(), output);
  }

  // optional .TSCH.RectArchive original_legend_rect = 7;
  if (has_original_legend_rect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->original_legend_rect(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetChartTypeArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSCH.ChartCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSCH.ChartType oldChartType = 2;
  if (has_oldcharttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->oldcharttype(), target);
  }

  // required .TSCH.ChartType newChartType = 3;
  if (has_newcharttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->newcharttype(), target);
  }

  // optional .TSP.Reference info_geometry_command = 5;
  if (has_info_geometry_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->info_geometry_command(), target);
  }

  // optional .TSP.Reference anchor_attachment_command = 6;
  if (has_anchor_attachment_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->anchor_attachment_command(), target);
  }

  // optional .TSCH.RectArchive original_legend_rect = 7;
  if (has_original_legend_rect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->original_legend_rect(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetChartTypeArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSCH.ChartCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSCH.ChartType oldChartType = 2;
    if (has_oldcharttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->oldcharttype());
    }

    // required .TSCH.ChartType newChartType = 3;
    if (has_newcharttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->newcharttype());
    }

    // optional .TSP.Reference info_geometry_command = 5;
    if (has_info_geometry_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info_geometry_command());
    }

    // optional .TSP.Reference anchor_attachment_command = 6;
    if (has_anchor_attachment_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->anchor_attachment_command());
    }

    // optional .TSCH.RectArchive original_legend_rect = 7;
    if (has_original_legend_rect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->original_legend_rect());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetChartTypeArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetChartTypeArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetChartTypeArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetChartTypeArchive::MergeFrom(const CommandSetChartTypeArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from.super());
    }
    if (from.has_oldcharttype()) {
      set_oldcharttype(from.oldcharttype());
    }
    if (from.has_newcharttype()) {
      set_newcharttype(from.newcharttype());
    }
    if (from.has_info_geometry_command()) {
      mutable_info_geometry_command()->::TSP::Reference::MergeFrom(from.info_geometry_command());
    }
    if (from.has_anchor_attachment_command()) {
      mutable_anchor_attachment_command()->::TSP::Reference::MergeFrom(from.anchor_attachment_command());
    }
    if (from.has_original_legend_rect()) {
      mutable_original_legend_rect()->::TSCH::RectArchive::MergeFrom(from.original_legend_rect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetChartTypeArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetChartTypeArchive::CopyFrom(const CommandSetChartTypeArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetChartTypeArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_info_geometry_command()) {
    if (!this->info_geometry_command().IsInitialized()) return false;
  }
  if (has_anchor_attachment_command()) {
    if (!this->anchor_attachment_command().IsInitialized()) return false;
  }
  if (has_original_legend_rect()) {
    if (!this->original_legend_rect().IsInitialized()) return false;
  }
  return true;
}

void CommandSetChartTypeArchive::Swap(CommandSetChartTypeArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(oldcharttype_, other->oldcharttype_);
    std::swap(newcharttype_, other->newcharttype_);
    std::swap(info_geometry_command_, other->info_geometry_command_);
    std::swap(anchor_attachment_command_, other->anchor_attachment_command_);
    std::swap(original_legend_rect_, other->original_legend_rect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetChartTypeArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetChartTypeArchive_descriptor_;
  metadata.reflection = CommandSetChartTypeArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PropertyMutationUndoTupleArchive::kChartInfoFieldNumber;
const int PropertyMutationUndoTupleArchive::kStyleOwnerTypeFieldNumber;
const int PropertyMutationUndoTupleArchive::kIndexFieldNumber;
const int PropertyMutationUndoTupleArchive::kOldStyleFieldNumber;
const int PropertyMutationUndoTupleArchive::kNewStyleFieldNumber;
const int PropertyMutationUndoTupleArchive::kOldNonStyleFieldNumber;
const int PropertyMutationUndoTupleArchive::kNewNonStyleFieldNumber;
#endif  // !_MSC_VER

PropertyMutationUndoTupleArchive::PropertyMutationUndoTupleArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PropertyMutationUndoTupleArchive::InitAsDefaultInstance() {
  chart_info_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  old_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  new_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  old_non_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  new_non_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

PropertyMutationUndoTupleArchive::PropertyMutationUndoTupleArchive(const PropertyMutationUndoTupleArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PropertyMutationUndoTupleArchive::SharedCtor() {
  _cached_size_ = 0;
  chart_info_ = NULL;
  style_owner_type_ = 1;
  index_ = 0u;
  old_style_ = NULL;
  new_style_ = NULL;
  old_non_style_ = NULL;
  new_non_style_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropertyMutationUndoTupleArchive::~PropertyMutationUndoTupleArchive() {
  SharedDtor();
}

void PropertyMutationUndoTupleArchive::SharedDtor() {
  if (this != default_instance_) {
    delete chart_info_;
    delete old_style_;
    delete new_style_;
    delete old_non_style_;
    delete new_non_style_;
  }
}

void PropertyMutationUndoTupleArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropertyMutationUndoTupleArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PropertyMutationUndoTupleArchive_descriptor_;
}

const PropertyMutationUndoTupleArchive& PropertyMutationUndoTupleArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHCommandArchives_2eproto();
  return *default_instance_;
}

PropertyMutationUndoTupleArchive* PropertyMutationUndoTupleArchive::default_instance_ = NULL;

PropertyMutationUndoTupleArchive* PropertyMutationUndoTupleArchive::New() const {
  return new PropertyMutationUndoTupleArchive;
}

void PropertyMutationUndoTupleArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_chart_info()) {
      if (chart_info_ != NULL) chart_info_->::TSP::Reference::Clear();
    }
    style_owner_type_ = 1;
    index_ = 0u;
    if (has_old_style()) {
      if (old_style_ != NULL) old_style_->::TSP::Reference::Clear();
    }
    if (has_new_style()) {
      if (new_style_ != NULL) new_style_->::TSP::Reference::Clear();
    }
    if (has_old_non_style()) {
      if (old_non_style_ != NULL) old_non_style_->::TSP::Reference::Clear();
    }
    if (has_new_non_style()) {
      if (new_non_style_ != NULL) new_non_style_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PropertyMutationUndoTupleArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Reference chart_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chart_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_style_owner_type;
        break;
      }

      // optional .TSCH.StyleOwnerType style_owner_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_style_owner_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSCH::StyleOwnerType_IsValid(value)) {
            set_style_owner_type(static_cast< ::TSCH::StyleOwnerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // optional uint32 index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_old_style;
        break;
      }

      // optional .TSP.Reference old_style = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_new_style;
        break;
      }

      // optional .TSP.Reference new_style = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_old_non_style;
        break;
      }

      // optional .TSP.Reference old_non_style = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_non_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_non_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_new_non_style;
        break;
      }

      // optional .TSP.Reference new_non_style = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_non_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_non_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PropertyMutationUndoTupleArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Reference chart_info = 1;
  if (has_chart_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->chart_info(), output);
  }

  // optional .TSCH.StyleOwnerType style_owner_type = 2;
  if (has_style_owner_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->style_owner_type(), output);
  }

  // optional uint32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->index(), output);
  }

  // optional .TSP.Reference old_style = 4;
  if (has_old_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->old_style(), output);
  }

  // optional .TSP.Reference new_style = 5;
  if (has_new_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->new_style(), output);
  }

  // optional .TSP.Reference old_non_style = 6;
  if (has_old_non_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->old_non_style(), output);
  }

  // optional .TSP.Reference new_non_style = 7;
  if (has_new_non_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->new_non_style(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PropertyMutationUndoTupleArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Reference chart_info = 1;
  if (has_chart_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->chart_info(), target);
  }

  // optional .TSCH.StyleOwnerType style_owner_type = 2;
  if (has_style_owner_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->style_owner_type(), target);
  }

  // optional uint32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->index(), target);
  }

  // optional .TSP.Reference old_style = 4;
  if (has_old_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->old_style(), target);
  }

  // optional .TSP.Reference new_style = 5;
  if (has_new_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->new_style(), target);
  }

  // optional .TSP.Reference old_non_style = 6;
  if (has_old_non_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->old_non_style(), target);
  }

  // optional .TSP.Reference new_non_style = 7;
  if (has_new_non_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->new_non_style(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PropertyMutationUndoTupleArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.Reference chart_info = 1;
    if (has_chart_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chart_info());
    }

    // optional .TSCH.StyleOwnerType style_owner_type = 2;
    if (has_style_owner_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->style_owner_type());
    }

    // optional uint32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional .TSP.Reference old_style = 4;
    if (has_old_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_style());
    }

    // optional .TSP.Reference new_style = 5;
    if (has_new_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_style());
    }

    // optional .TSP.Reference old_non_style = 6;
    if (has_old_non_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_non_style());
    }

    // optional .TSP.Reference new_non_style = 7;
    if (has_new_non_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_non_style());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropertyMutationUndoTupleArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PropertyMutationUndoTupleArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PropertyMutationUndoTupleArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PropertyMutationUndoTupleArchive::MergeFrom(const PropertyMutationUndoTupleArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chart_info()) {
      mutable_chart_info()->::TSP::Reference::MergeFrom(from.chart_info());
    }
    if (from.has_style_owner_type()) {
      set_style_owner_type(from.style_owner_type());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_old_style()) {
      mutable_old_style()->::TSP::Reference::MergeFrom(from.old_style());
    }
    if (from.has_new_style()) {
      mutable_new_style()->::TSP::Reference::MergeFrom(from.new_style());
    }
    if (from.has_old_non_style()) {
      mutable_old_non_style()->::TSP::Reference::MergeFrom(from.old_non_style());
    }
    if (from.has_new_non_style()) {
      mutable_new_non_style()->::TSP::Reference::MergeFrom(from.new_non_style());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PropertyMutationUndoTupleArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyMutationUndoTupleArchive::CopyFrom(const PropertyMutationUndoTupleArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyMutationUndoTupleArchive::IsInitialized() const {

  if (has_chart_info()) {
    if (!this->chart_info().IsInitialized()) return false;
  }
  if (has_old_style()) {
    if (!this->old_style().IsInitialized()) return false;
  }
  if (has_new_style()) {
    if (!this->new_style().IsInitialized()) return false;
  }
  if (has_old_non_style()) {
    if (!this->old_non_style().IsInitialized()) return false;
  }
  if (has_new_non_style()) {
    if (!this->new_non_style().IsInitialized()) return false;
  }
  return true;
}

void PropertyMutationUndoTupleArchive::Swap(PropertyMutationUndoTupleArchive* other) {
  if (other != this) {
    std::swap(chart_info_, other->chart_info_);
    std::swap(style_owner_type_, other->style_owner_type_);
    std::swap(index_, other->index_);
    std::swap(old_style_, other->old_style_);
    std::swap(new_style_, other->new_style_);
    std::swap(old_non_style_, other->old_non_style_);
    std::swap(new_non_style_, other->new_non_style_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PropertyMutationUndoTupleArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PropertyMutationUndoTupleArchive_descriptor_;
  metadata.reflection = PropertyMutationUndoTupleArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StyleSwapUndoTupleArchive::kChartInfoFieldNumber;
const int StyleSwapUndoTupleArchive::kSwapTypeFieldNumber;
const int StyleSwapUndoTupleArchive::kIndexFieldNumber;
const int StyleSwapUndoTupleArchive::kOldValueFieldNumber;
const int StyleSwapUndoTupleArchive::kNewValueFieldNumber;
#endif  // !_MSC_VER

StyleSwapUndoTupleArchive::StyleSwapUndoTupleArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StyleSwapUndoTupleArchive::InitAsDefaultInstance() {
  chart_info_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  old_value_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  new_value_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

StyleSwapUndoTupleArchive::StyleSwapUndoTupleArchive(const StyleSwapUndoTupleArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StyleSwapUndoTupleArchive::SharedCtor() {
  _cached_size_ = 0;
  chart_info_ = NULL;
  swap_type_ = 1;
  index_ = 0u;
  old_value_ = NULL;
  new_value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StyleSwapUndoTupleArchive::~StyleSwapUndoTupleArchive() {
  SharedDtor();
}

void StyleSwapUndoTupleArchive::SharedDtor() {
  if (this != default_instance_) {
    delete chart_info_;
    delete old_value_;
    delete new_value_;
  }
}

void StyleSwapUndoTupleArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StyleSwapUndoTupleArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StyleSwapUndoTupleArchive_descriptor_;
}

const StyleSwapUndoTupleArchive& StyleSwapUndoTupleArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHCommandArchives_2eproto();
  return *default_instance_;
}

StyleSwapUndoTupleArchive* StyleSwapUndoTupleArchive::default_instance_ = NULL;

StyleSwapUndoTupleArchive* StyleSwapUndoTupleArchive::New() const {
  return new StyleSwapUndoTupleArchive;
}

void StyleSwapUndoTupleArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_chart_info()) {
      if (chart_info_ != NULL) chart_info_->::TSP::Reference::Clear();
    }
    swap_type_ = 1;
    index_ = 0u;
    if (has_old_value()) {
      if (old_value_ != NULL) old_value_->::TSP::Reference::Clear();
    }
    if (has_new_value()) {
      if (new_value_ != NULL) new_value_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StyleSwapUndoTupleArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Reference chart_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chart_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_swap_type;
        break;
      }

      // optional .TSCH.StyleSwapType swap_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_swap_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSCH::StyleSwapType_IsValid(value)) {
            set_swap_type(static_cast< ::TSCH::StyleSwapType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // optional uint32 index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_old_value;
        break;
      }

      // optional .TSP.Reference old_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_new_value;
        break;
      }

      // optional .TSP.Reference new_value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StyleSwapUndoTupleArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Reference chart_info = 1;
  if (has_chart_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->chart_info(), output);
  }

  // optional .TSCH.StyleSwapType swap_type = 2;
  if (has_swap_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->swap_type(), output);
  }

  // optional uint32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->index(), output);
  }

  // optional .TSP.Reference old_value = 4;
  if (has_old_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->old_value(), output);
  }

  // optional .TSP.Reference new_value = 5;
  if (has_new_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->new_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StyleSwapUndoTupleArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Reference chart_info = 1;
  if (has_chart_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->chart_info(), target);
  }

  // optional .TSCH.StyleSwapType swap_type = 2;
  if (has_swap_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->swap_type(), target);
  }

  // optional uint32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->index(), target);
  }

  // optional .TSP.Reference old_value = 4;
  if (has_old_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->old_value(), target);
  }

  // optional .TSP.Reference new_value = 5;
  if (has_new_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->new_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StyleSwapUndoTupleArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.Reference chart_info = 1;
    if (has_chart_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chart_info());
    }

    // optional .TSCH.StyleSwapType swap_type = 2;
    if (has_swap_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->swap_type());
    }

    // optional uint32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional .TSP.Reference old_value = 4;
    if (has_old_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_value());
    }

    // optional .TSP.Reference new_value = 5;
    if (has_new_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StyleSwapUndoTupleArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StyleSwapUndoTupleArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StyleSwapUndoTupleArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StyleSwapUndoTupleArchive::MergeFrom(const StyleSwapUndoTupleArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chart_info()) {
      mutable_chart_info()->::TSP::Reference::MergeFrom(from.chart_info());
    }
    if (from.has_swap_type()) {
      set_swap_type(from.swap_type());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_old_value()) {
      mutable_old_value()->::TSP::Reference::MergeFrom(from.old_value());
    }
    if (from.has_new_value()) {
      mutable_new_value()->::TSP::Reference::MergeFrom(from.new_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StyleSwapUndoTupleArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StyleSwapUndoTupleArchive::CopyFrom(const StyleSwapUndoTupleArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StyleSwapUndoTupleArchive::IsInitialized() const {

  if (has_chart_info()) {
    if (!this->chart_info().IsInitialized()) return false;
  }
  if (has_old_value()) {
    if (!this->old_value().IsInitialized()) return false;
  }
  if (has_new_value()) {
    if (!this->new_value().IsInitialized()) return false;
  }
  return true;
}

void StyleSwapUndoTupleArchive::Swap(StyleSwapUndoTupleArchive* other) {
  if (other != this) {
    std::swap(chart_info_, other->chart_info_);
    std::swap(swap_type_, other->swap_type_);
    std::swap(index_, other->index_);
    std::swap(old_value_, other->old_value_);
    std::swap(new_value_, other->new_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StyleSwapUndoTupleArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StyleSwapUndoTupleArchive_descriptor_;
  metadata.reflection = StyleSwapUndoTupleArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandStyleSwapArchive::kSuperFieldNumber;
const int CommandStyleSwapArchive::kUndoTuplesFieldNumber;
#endif  // !_MSC_VER

CommandStyleSwapArchive::CommandStyleSwapArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandStyleSwapArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSCH::ChartCommandArchive*>(&::TSCH::ChartCommandArchive::default_instance());
}

CommandStyleSwapArchive::CommandStyleSwapArchive(const CommandStyleSwapArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandStyleSwapArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandStyleSwapArchive::~CommandStyleSwapArchive() {
  SharedDtor();
}

void CommandStyleSwapArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void CommandStyleSwapArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandStyleSwapArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandStyleSwapArchive_descriptor_;
}

const CommandStyleSwapArchive& CommandStyleSwapArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHCommandArchives_2eproto();
  return *default_instance_;
}

CommandStyleSwapArchive* CommandStyleSwapArchive::default_instance_ = NULL;

CommandStyleSwapArchive* CommandStyleSwapArchive::New() const {
  return new CommandStyleSwapArchive;
}

void CommandStyleSwapArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSCH::ChartCommandArchive::Clear();
    }
  }
  undo_tuples_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandStyleSwapArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_undo_tuples;
        break;
      }

      // repeated .TSCH.StyleSwapUndoTupleArchive undo_tuples = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_tuples:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_undo_tuples()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_undo_tuples;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandStyleSwapArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSCH.ChartCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // repeated .TSCH.StyleSwapUndoTupleArchive undo_tuples = 2;
  for (int i = 0; i < this->undo_tuples_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->undo_tuples(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandStyleSwapArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSCH.ChartCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // repeated .TSCH.StyleSwapUndoTupleArchive undo_tuples = 2;
  for (int i = 0; i < this->undo_tuples_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->undo_tuples(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandStyleSwapArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSCH.ChartCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  // repeated .TSCH.StyleSwapUndoTupleArchive undo_tuples = 2;
  total_size += 1 * this->undo_tuples_size();
  for (int i = 0; i < this->undo_tuples_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->undo_tuples(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandStyleSwapArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandStyleSwapArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandStyleSwapArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandStyleSwapArchive::MergeFrom(const CommandStyleSwapArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  undo_tuples_.MergeFrom(from.undo_tuples_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandStyleSwapArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandStyleSwapArchive::CopyFrom(const CommandStyleSwapArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandStyleSwapArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  for (int i = 0; i < undo_tuples_size(); i++) {
    if (!this->undo_tuples(i).IsInitialized()) return false;
  }
  return true;
}

void CommandStyleSwapArchive::Swap(CommandStyleSwapArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    undo_tuples_.Swap(&other->undo_tuples_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandStyleSwapArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandStyleSwapArchive_descriptor_;
  metadata.reflection = CommandStyleSwapArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetSeriesNameArchive::kSuperFieldNumber;
const int CommandSetSeriesNameArchive::kSeriesIndexFieldNumber;
const int CommandSetSeriesNameArchive::kOldNameFieldNumber;
const int CommandSetSeriesNameArchive::kNewNameFieldNumber;
#endif  // !_MSC_VER

CommandSetSeriesNameArchive::CommandSetSeriesNameArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetSeriesNameArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSCH::ChartCommandArchive*>(&::TSCH::ChartCommandArchive::default_instance());
}

CommandSetSeriesNameArchive::CommandSetSeriesNameArchive(const CommandSetSeriesNameArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetSeriesNameArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  seriesindex_ = 0u;
  oldname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  newname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetSeriesNameArchive::~CommandSetSeriesNameArchive() {
  SharedDtor();
}

void CommandSetSeriesNameArchive::SharedDtor() {
  if (oldname_ != &::google::protobuf::internal::kEmptyString) {
    delete oldname_;
  }
  if (newname_ != &::google::protobuf::internal::kEmptyString) {
    delete newname_;
  }
  if (this != default_instance_) {
    delete super_;
  }
}

void CommandSetSeriesNameArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetSeriesNameArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetSeriesNameArchive_descriptor_;
}

const CommandSetSeriesNameArchive& CommandSetSeriesNameArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetSeriesNameArchive* CommandSetSeriesNameArchive::default_instance_ = NULL;

CommandSetSeriesNameArchive* CommandSetSeriesNameArchive::New() const {
  return new CommandSetSeriesNameArchive;
}

void CommandSetSeriesNameArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSCH::ChartCommandArchive::Clear();
    }
    seriesindex_ = 0u;
    if (has_oldname()) {
      if (oldname_ != &::google::protobuf::internal::kEmptyString) {
        oldname_->clear();
      }
    }
    if (has_newname()) {
      if (newname_ != &::google::protobuf::internal::kEmptyString) {
        newname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetSeriesNameArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seriesIndex;
        break;
      }

      // required uint32 seriesIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seriesIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seriesindex_)));
          set_has_seriesindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_oldName;
        break;
      }

      // required string oldName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oldName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oldname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->oldname().data(), this->oldname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_newName;
        break;
      }

      // required string newName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->newname().data(), this->newname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetSeriesNameArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSCH.ChartCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required uint32 seriesIndex = 2;
  if (has_seriesindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->seriesindex(), output);
  }

  // required string oldName = 3;
  if (has_oldname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oldname().data(), this->oldname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->oldname(), output);
  }

  // required string newName = 4;
  if (has_newname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newname().data(), this->newname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->newname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetSeriesNameArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSCH.ChartCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required uint32 seriesIndex = 2;
  if (has_seriesindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->seriesindex(), target);
  }

  // required string oldName = 3;
  if (has_oldname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oldname().data(), this->oldname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->oldname(), target);
  }

  // required string newName = 4;
  if (has_newname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newname().data(), this->newname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->newname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetSeriesNameArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSCH.ChartCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required uint32 seriesIndex = 2;
    if (has_seriesindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seriesindex());
    }

    // required string oldName = 3;
    if (has_oldname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oldname());
    }

    // required string newName = 4;
    if (has_newname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetSeriesNameArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetSeriesNameArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetSeriesNameArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetSeriesNameArchive::MergeFrom(const CommandSetSeriesNameArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from.super());
    }
    if (from.has_seriesindex()) {
      set_seriesindex(from.seriesindex());
    }
    if (from.has_oldname()) {
      set_oldname(from.oldname());
    }
    if (from.has_newname()) {
      set_newname(from.newname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetSeriesNameArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetSeriesNameArchive::CopyFrom(const CommandSetSeriesNameArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetSeriesNameArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandSetSeriesNameArchive::Swap(CommandSetSeriesNameArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(seriesindex_, other->seriesindex_);
    std::swap(oldname_, other->oldname_);
    std::swap(newname_, other->newname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetSeriesNameArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetSeriesNameArchive_descriptor_;
  metadata.reflection = CommandSetSeriesNameArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetCategoryNameArchive::kSuperFieldNumber;
const int CommandSetCategoryNameArchive::kCategoryIndexFieldNumber;
const int CommandSetCategoryNameArchive::kOldNameFieldNumber;
const int CommandSetCategoryNameArchive::kNewNameFieldNumber;
const int CommandSetCategoryNameArchive::kIsMultiDataIndexFieldNumber;
#endif  // !_MSC_VER

CommandSetCategoryNameArchive::CommandSetCategoryNameArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetCategoryNameArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSCH::ChartCommandArchive*>(&::TSCH::ChartCommandArchive::default_instance());
}

CommandSetCategoryNameArchive::CommandSetCategoryNameArchive(const CommandSetCategoryNameArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetCategoryNameArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  categoryindex_ = 0u;
  oldname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  newname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ismultidataindex_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetCategoryNameArchive::~CommandSetCategoryNameArchive() {
  SharedDtor();
}

void CommandSetCategoryNameArchive::SharedDtor() {
  if (oldname_ != &::google::protobuf::internal::kEmptyString) {
    delete oldname_;
  }
  if (newname_ != &::google::protobuf::internal::kEmptyString) {
    delete newname_;
  }
  if (this != default_instance_) {
    delete super_;
  }
}

void CommandSetCategoryNameArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetCategoryNameArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetCategoryNameArchive_descriptor_;
}

const CommandSetCategoryNameArchive& CommandSetCategoryNameArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetCategoryNameArchive* CommandSetCategoryNameArchive::default_instance_ = NULL;

CommandSetCategoryNameArchive* CommandSetCategoryNameArchive::New() const {
  return new CommandSetCategoryNameArchive;
}

void CommandSetCategoryNameArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSCH::ChartCommandArchive::Clear();
    }
    categoryindex_ = 0u;
    if (has_oldname()) {
      if (oldname_ != &::google::protobuf::internal::kEmptyString) {
        oldname_->clear();
      }
    }
    if (has_newname()) {
      if (newname_ != &::google::protobuf::internal::kEmptyString) {
        newname_->clear();
      }
    }
    ismultidataindex_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetCategoryNameArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_categoryIndex;
        break;
      }

      // required uint32 categoryIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_categoryIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &categoryindex_)));
          set_has_categoryindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_oldName;
        break;
      }

      // required string oldName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oldName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oldname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->oldname().data(), this->oldname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_newName;
        break;
      }

      // required string newName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->newname().data(), this->newname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isMultiDataIndex;
        break;
      }

      // optional bool isMultiDataIndex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isMultiDataIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismultidataindex_)));
          set_has_ismultidataindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetCategoryNameArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSCH.ChartCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required uint32 categoryIndex = 2;
  if (has_categoryindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->categoryindex(), output);
  }

  // required string oldName = 3;
  if (has_oldname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oldname().data(), this->oldname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->oldname(), output);
  }

  // required string newName = 4;
  if (has_newname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newname().data(), this->newname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->newname(), output);
  }

  // optional bool isMultiDataIndex = 5;
  if (has_ismultidataindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->ismultidataindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetCategoryNameArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSCH.ChartCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required uint32 categoryIndex = 2;
  if (has_categoryindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->categoryindex(), target);
  }

  // required string oldName = 3;
  if (has_oldname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oldname().data(), this->oldname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->oldname(), target);
  }

  // required string newName = 4;
  if (has_newname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newname().data(), this->newname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->newname(), target);
  }

  // optional bool isMultiDataIndex = 5;
  if (has_ismultidataindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->ismultidataindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetCategoryNameArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSCH.ChartCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required uint32 categoryIndex = 2;
    if (has_categoryindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->categoryindex());
    }

    // required string oldName = 3;
    if (has_oldname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oldname());
    }

    // required string newName = 4;
    if (has_newname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newname());
    }

    // optional bool isMultiDataIndex = 5;
    if (has_ismultidataindex()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetCategoryNameArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetCategoryNameArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetCategoryNameArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetCategoryNameArchive::MergeFrom(const CommandSetCategoryNameArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from.super());
    }
    if (from.has_categoryindex()) {
      set_categoryindex(from.categoryindex());
    }
    if (from.has_oldname()) {
      set_oldname(from.oldname());
    }
    if (from.has_newname()) {
      set_newname(from.newname());
    }
    if (from.has_ismultidataindex()) {
      set_ismultidataindex(from.ismultidataindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetCategoryNameArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetCategoryNameArchive::CopyFrom(const CommandSetCategoryNameArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetCategoryNameArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandSetCategoryNameArchive::Swap(CommandSetCategoryNameArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(categoryindex_, other->categoryindex_);
    std::swap(oldname_, other->oldname_);
    std::swap(newname_, other->newname_);
    std::swap(ismultidataindex_, other->ismultidataindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetCategoryNameArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetCategoryNameArchive_descriptor_;
  metadata.reflection = CommandSetCategoryNameArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandAddGridRowsArchive::kSuperFieldNumber;
const int CommandAddGridRowsArchive::kLocationFieldNumber;
const int CommandAddGridRowsArchive::kLengthFieldNumber;
const int CommandAddGridRowsArchive::kNameFieldNumber;
#endif  // !_MSC_VER

CommandAddGridRowsArchive::CommandAddGridRowsArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandAddGridRowsArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSCH::ChartCommandArchive*>(&::TSCH::ChartCommandArchive::default_instance());
}

CommandAddGridRowsArchive::CommandAddGridRowsArchive(const CommandAddGridRowsArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandAddGridRowsArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  location_ = 0u;
  length_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandAddGridRowsArchive::~CommandAddGridRowsArchive() {
  SharedDtor();
}

void CommandAddGridRowsArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void CommandAddGridRowsArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandAddGridRowsArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandAddGridRowsArchive_descriptor_;
}

const CommandAddGridRowsArchive& CommandAddGridRowsArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHCommandArchives_2eproto();
  return *default_instance_;
}

CommandAddGridRowsArchive* CommandAddGridRowsArchive::default_instance_ = NULL;

CommandAddGridRowsArchive* CommandAddGridRowsArchive::New() const {
  return new CommandAddGridRowsArchive;
}

void CommandAddGridRowsArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSCH::ChartCommandArchive::Clear();
    }
    location_ = 0u;
    length_ = 0u;
  }
  name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandAddGridRowsArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_location;
        break;
      }

      // required uint32 location = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_location:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &location_)));
          set_has_location();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_length;
        break;
      }

      // optional uint32 length = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // repeated string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name(this->name_size() - 1).data(),
            this->name(this->name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandAddGridRowsArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSCH.ChartCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required uint32 location = 2;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->location(), output);
  }

  // optional uint32 length = 3;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->length(), output);
  }

  // repeated string name = 4;
  for (int i = 0; i < this->name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->name(i).data(), this->name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandAddGridRowsArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSCH.ChartCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required uint32 location = 2;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->location(), target);
  }

  // optional uint32 length = 3;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->length(), target);
  }

  // repeated string name = 4;
  for (int i = 0; i < this->name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name(i).data(), this->name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->name(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandAddGridRowsArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSCH.ChartCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required uint32 location = 2;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->location());
    }

    // optional uint32 length = 3;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->length());
    }

  }
  // repeated string name = 4;
  total_size += 1 * this->name_size();
  for (int i = 0; i < this->name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->name(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandAddGridRowsArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandAddGridRowsArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandAddGridRowsArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandAddGridRowsArchive::MergeFrom(const CommandAddGridRowsArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  name_.MergeFrom(from.name_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from.super());
    }
    if (from.has_location()) {
      set_location(from.location());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandAddGridRowsArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandAddGridRowsArchive::CopyFrom(const CommandAddGridRowsArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandAddGridRowsArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandAddGridRowsArchive::Swap(CommandAddGridRowsArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(location_, other->location_);
    std::swap(length_, other->length_);
    name_.Swap(&other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandAddGridRowsArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandAddGridRowsArchive_descriptor_;
  metadata.reflection = CommandAddGridRowsArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandAddGridColumnsArchive::kSuperFieldNumber;
const int CommandAddGridColumnsArchive::kLocationFieldNumber;
const int CommandAddGridColumnsArchive::kLengthFieldNumber;
const int CommandAddGridColumnsArchive::kNameFieldNumber;
#endif  // !_MSC_VER

CommandAddGridColumnsArchive::CommandAddGridColumnsArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandAddGridColumnsArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSCH::ChartCommandArchive*>(&::TSCH::ChartCommandArchive::default_instance());
}

CommandAddGridColumnsArchive::CommandAddGridColumnsArchive(const CommandAddGridColumnsArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandAddGridColumnsArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  location_ = 0u;
  length_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandAddGridColumnsArchive::~CommandAddGridColumnsArchive() {
  SharedDtor();
}

void CommandAddGridColumnsArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void CommandAddGridColumnsArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandAddGridColumnsArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandAddGridColumnsArchive_descriptor_;
}

const CommandAddGridColumnsArchive& CommandAddGridColumnsArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHCommandArchives_2eproto();
  return *default_instance_;
}

CommandAddGridColumnsArchive* CommandAddGridColumnsArchive::default_instance_ = NULL;

CommandAddGridColumnsArchive* CommandAddGridColumnsArchive::New() const {
  return new CommandAddGridColumnsArchive;
}

void CommandAddGridColumnsArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSCH::ChartCommandArchive::Clear();
    }
    location_ = 0u;
    length_ = 0u;
  }
  name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandAddGridColumnsArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_location;
        break;
      }

      // required uint32 location = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_location:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &location_)));
          set_has_location();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_length;
        break;
      }

      // optional uint32 length = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // repeated string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name(this->name_size() - 1).data(),
            this->name(this->name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandAddGridColumnsArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSCH.ChartCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required uint32 location = 2;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->location(), output);
  }

  // optional uint32 length = 3;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->length(), output);
  }

  // repeated string name = 4;
  for (int i = 0; i < this->name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->name(i).data(), this->name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandAddGridColumnsArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSCH.ChartCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required uint32 location = 2;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->location(), target);
  }

  // optional uint32 length = 3;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->length(), target);
  }

  // repeated string name = 4;
  for (int i = 0; i < this->name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name(i).data(), this->name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->name(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandAddGridColumnsArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSCH.ChartCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required uint32 location = 2;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->location());
    }

    // optional uint32 length = 3;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->length());
    }

  }
  // repeated string name = 4;
  total_size += 1 * this->name_size();
  for (int i = 0; i < this->name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->name(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandAddGridColumnsArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandAddGridColumnsArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandAddGridColumnsArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandAddGridColumnsArchive::MergeFrom(const CommandAddGridColumnsArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  name_.MergeFrom(from.name_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from.super());
    }
    if (from.has_location()) {
      set_location(from.location());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandAddGridColumnsArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandAddGridColumnsArchive::CopyFrom(const CommandAddGridColumnsArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandAddGridColumnsArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandAddGridColumnsArchive::Swap(CommandAddGridColumnsArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(location_, other->location_);
    std::swap(length_, other->length_);
    name_.Swap(&other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandAddGridColumnsArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandAddGridColumnsArchive_descriptor_;
  metadata.reflection = CommandAddGridColumnsArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandMoveGridRowsArchive::kSuperFieldNumber;
const int CommandMoveGridRowsArchive::kLocationFieldNumber;
const int CommandMoveGridRowsArchive::kLengthFieldNumber;
const int CommandMoveGridRowsArchive::kAfterrowFieldNumber;
#endif  // !_MSC_VER

CommandMoveGridRowsArchive::CommandMoveGridRowsArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandMoveGridRowsArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSCH::ChartCommandArchive*>(&::TSCH::ChartCommandArchive::default_instance());
}

CommandMoveGridRowsArchive::CommandMoveGridRowsArchive(const CommandMoveGridRowsArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandMoveGridRowsArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  location_ = 0u;
  length_ = 0u;
  afterrow_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandMoveGridRowsArchive::~CommandMoveGridRowsArchive() {
  SharedDtor();
}

void CommandMoveGridRowsArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void CommandMoveGridRowsArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandMoveGridRowsArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandMoveGridRowsArchive_descriptor_;
}

const CommandMoveGridRowsArchive& CommandMoveGridRowsArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHCommandArchives_2eproto();
  return *default_instance_;
}

CommandMoveGridRowsArchive* CommandMoveGridRowsArchive::default_instance_ = NULL;

CommandMoveGridRowsArchive* CommandMoveGridRowsArchive::New() const {
  return new CommandMoveGridRowsArchive;
}

void CommandMoveGridRowsArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSCH::ChartCommandArchive::Clear();
    }
    location_ = 0u;
    length_ = 0u;
    afterrow_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandMoveGridRowsArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_location;
        break;
      }

      // required uint32 location = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_location:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &location_)));
          set_has_location();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_length;
        break;
      }

      // required uint32 length = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_afterrow;
        break;
      }

      // required int32 afterrow = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_afterrow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &afterrow_)));
          set_has_afterrow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandMoveGridRowsArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSCH.ChartCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required uint32 location = 2;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->location(), output);
  }

  // required uint32 length = 3;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->length(), output);
  }

  // required int32 afterrow = 4;
  if (has_afterrow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->afterrow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandMoveGridRowsArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSCH.ChartCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required uint32 location = 2;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->location(), target);
  }

  // required uint32 length = 3;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->length(), target);
  }

  // required int32 afterrow = 4;
  if (has_afterrow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->afterrow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandMoveGridRowsArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSCH.ChartCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required uint32 location = 2;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->location());
    }

    // required uint32 length = 3;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->length());
    }

    // required int32 afterrow = 4;
    if (has_afterrow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->afterrow());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandMoveGridRowsArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandMoveGridRowsArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandMoveGridRowsArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandMoveGridRowsArchive::MergeFrom(const CommandMoveGridRowsArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from.super());
    }
    if (from.has_location()) {
      set_location(from.location());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_afterrow()) {
      set_afterrow(from.afterrow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandMoveGridRowsArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandMoveGridRowsArchive::CopyFrom(const CommandMoveGridRowsArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandMoveGridRowsArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandMoveGridRowsArchive::Swap(CommandMoveGridRowsArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(location_, other->location_);
    std::swap(length_, other->length_);
    std::swap(afterrow_, other->afterrow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandMoveGridRowsArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandMoveGridRowsArchive_descriptor_;
  metadata.reflection = CommandMoveGridRowsArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandMoveGridColumnsArchive::kSuperFieldNumber;
const int CommandMoveGridColumnsArchive::kLocationFieldNumber;
const int CommandMoveGridColumnsArchive::kLengthFieldNumber;
const int CommandMoveGridColumnsArchive::kAftercolumnFieldNumber;
#endif  // !_MSC_VER

CommandMoveGridColumnsArchive::CommandMoveGridColumnsArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandMoveGridColumnsArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSCH::ChartCommandArchive*>(&::TSCH::ChartCommandArchive::default_instance());
}

CommandMoveGridColumnsArchive::CommandMoveGridColumnsArchive(const CommandMoveGridColumnsArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandMoveGridColumnsArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  location_ = 0u;
  length_ = 0u;
  aftercolumn_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandMoveGridColumnsArchive::~CommandMoveGridColumnsArchive() {
  SharedDtor();
}

void CommandMoveGridColumnsArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void CommandMoveGridColumnsArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandMoveGridColumnsArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandMoveGridColumnsArchive_descriptor_;
}

const CommandMoveGridColumnsArchive& CommandMoveGridColumnsArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHCommandArchives_2eproto();
  return *default_instance_;
}

CommandMoveGridColumnsArchive* CommandMoveGridColumnsArchive::default_instance_ = NULL;

CommandMoveGridColumnsArchive* CommandMoveGridColumnsArchive::New() const {
  return new CommandMoveGridColumnsArchive;
}

void CommandMoveGridColumnsArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSCH::ChartCommandArchive::Clear();
    }
    location_ = 0u;
    length_ = 0u;
    aftercolumn_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandMoveGridColumnsArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_location;
        break;
      }

      // required uint32 location = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_location:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &location_)));
          set_has_location();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_length;
        break;
      }

      // required uint32 length = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_aftercolumn;
        break;
      }

      // required int32 aftercolumn = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aftercolumn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &aftercolumn_)));
          set_has_aftercolumn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandMoveGridColumnsArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSCH.ChartCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required uint32 location = 2;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->location(), output);
  }

  // required uint32 length = 3;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->length(), output);
  }

  // required int32 aftercolumn = 4;
  if (has_aftercolumn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->aftercolumn(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandMoveGridColumnsArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSCH.ChartCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required uint32 location = 2;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->location(), target);
  }

  // required uint32 length = 3;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->length(), target);
  }

  // required int32 aftercolumn = 4;
  if (has_aftercolumn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->aftercolumn(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandMoveGridColumnsArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSCH.ChartCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required uint32 location = 2;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->location());
    }

    // required uint32 length = 3;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->length());
    }

    // required int32 aftercolumn = 4;
    if (has_aftercolumn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->aftercolumn());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandMoveGridColumnsArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandMoveGridColumnsArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandMoveGridColumnsArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandMoveGridColumnsArchive::MergeFrom(const CommandMoveGridColumnsArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from.super());
    }
    if (from.has_location()) {
      set_location(from.location());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_aftercolumn()) {
      set_aftercolumn(from.aftercolumn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandMoveGridColumnsArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandMoveGridColumnsArchive::CopyFrom(const CommandMoveGridColumnsArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandMoveGridColumnsArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandMoveGridColumnsArchive::Swap(CommandMoveGridColumnsArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(location_, other->location_);
    std::swap(length_, other->length_);
    std::swap(aftercolumn_, other->aftercolumn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandMoveGridColumnsArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandMoveGridColumnsArchive_descriptor_;
  metadata.reflection = CommandMoveGridColumnsArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandDeleteGridRowsArchive_ValueRow::kValueFieldNumber;
#endif  // !_MSC_VER

CommandDeleteGridRowsArchive_ValueRow::CommandDeleteGridRowsArchive_ValueRow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandDeleteGridRowsArchive_ValueRow::InitAsDefaultInstance() {
}

CommandDeleteGridRowsArchive_ValueRow::CommandDeleteGridRowsArchive_ValueRow(const CommandDeleteGridRowsArchive_ValueRow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandDeleteGridRowsArchive_ValueRow::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandDeleteGridRowsArchive_ValueRow::~CommandDeleteGridRowsArchive_ValueRow() {
  SharedDtor();
}

void CommandDeleteGridRowsArchive_ValueRow::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommandDeleteGridRowsArchive_ValueRow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandDeleteGridRowsArchive_ValueRow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandDeleteGridRowsArchive_ValueRow_descriptor_;
}

const CommandDeleteGridRowsArchive_ValueRow& CommandDeleteGridRowsArchive_ValueRow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHCommandArchives_2eproto();
  return *default_instance_;
}

CommandDeleteGridRowsArchive_ValueRow* CommandDeleteGridRowsArchive_ValueRow::default_instance_ = NULL;

CommandDeleteGridRowsArchive_ValueRow* CommandDeleteGridRowsArchive_ValueRow::New() const {
  return new CommandDeleteGridRowsArchive_ValueRow;
}

void CommandDeleteGridRowsArchive_ValueRow::Clear() {
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandDeleteGridRowsArchive_ValueRow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 41, input, this->mutable_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandDeleteGridRowsArchive_ValueRow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated double value = 5;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      5, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandDeleteGridRowsArchive_ValueRow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated double value = 5;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(5, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandDeleteGridRowsArchive_ValueRow::ByteSize() const {
  int total_size = 0;

  // repeated double value = 5;
  {
    int data_size = 0;
    data_size = 8 * this->value_size();
    total_size += 1 * this->value_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandDeleteGridRowsArchive_ValueRow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandDeleteGridRowsArchive_ValueRow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandDeleteGridRowsArchive_ValueRow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandDeleteGridRowsArchive_ValueRow::MergeFrom(const CommandDeleteGridRowsArchive_ValueRow& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandDeleteGridRowsArchive_ValueRow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandDeleteGridRowsArchive_ValueRow::CopyFrom(const CommandDeleteGridRowsArchive_ValueRow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandDeleteGridRowsArchive_ValueRow::IsInitialized() const {

  return true;
}

void CommandDeleteGridRowsArchive_ValueRow::Swap(CommandDeleteGridRowsArchive_ValueRow* other) {
  if (other != this) {
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandDeleteGridRowsArchive_ValueRow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandDeleteGridRowsArchive_ValueRow_descriptor_;
  metadata.reflection = CommandDeleteGridRowsArchive_ValueRow_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CommandDeleteGridRowsArchive::kSuperFieldNumber;
const int CommandDeleteGridRowsArchive::kLocationFieldNumber;
const int CommandDeleteGridRowsArchive::kLengthFieldNumber;
const int CommandDeleteGridRowsArchive::kNamesFieldNumber;
const int CommandDeleteGridRowsArchive::kValueRowFieldNumber;
const int CommandDeleteGridRowsArchive::kRemovedAllRowsFieldNumber;
const int CommandDeleteGridRowsArchive::kColumnNamesFieldNumber;
#endif  // !_MSC_VER

CommandDeleteGridRowsArchive::CommandDeleteGridRowsArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandDeleteGridRowsArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSCH::ChartCommandArchive*>(&::TSCH::ChartCommandArchive::default_instance());
}

CommandDeleteGridRowsArchive::CommandDeleteGridRowsArchive(const CommandDeleteGridRowsArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandDeleteGridRowsArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  location_ = 0u;
  length_ = 0u;
  removed_all_rows_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandDeleteGridRowsArchive::~CommandDeleteGridRowsArchive() {
  SharedDtor();
}

void CommandDeleteGridRowsArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void CommandDeleteGridRowsArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandDeleteGridRowsArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandDeleteGridRowsArchive_descriptor_;
}

const CommandDeleteGridRowsArchive& CommandDeleteGridRowsArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHCommandArchives_2eproto();
  return *default_instance_;
}

CommandDeleteGridRowsArchive* CommandDeleteGridRowsArchive::default_instance_ = NULL;

CommandDeleteGridRowsArchive* CommandDeleteGridRowsArchive::New() const {
  return new CommandDeleteGridRowsArchive;
}

void CommandDeleteGridRowsArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSCH::ChartCommandArchive::Clear();
    }
    location_ = 0u;
    length_ = 0u;
    removed_all_rows_ = false;
  }
  names_.Clear();
  value_row_.Clear();
  column_names_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandDeleteGridRowsArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_location;
        break;
      }

      // required uint32 location = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_location:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &location_)));
          set_has_location();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_length;
        break;
      }

      // required uint32 length = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_names;
        break;
      }

      // repeated string names = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->names(this->names_size() - 1).data(),
            this->names(this->names_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_names;
        if (input->ExpectTag(50)) goto parse_value_row;
        break;
      }

      // repeated .TSCH.CommandDeleteGridRowsArchive.ValueRow value_row = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value_row:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_value_row()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_value_row;
        if (input->ExpectTag(56)) goto parse_removed_all_rows;
        break;
      }

      // optional bool removed_all_rows = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_removed_all_rows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &removed_all_rows_)));
          set_has_removed_all_rows();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_column_names;
        break;
      }

      // repeated string column_names = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_column_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_column_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->column_names(this->column_names_size() - 1).data(),
            this->column_names(this->column_names_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_column_names;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandDeleteGridRowsArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSCH.ChartCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required uint32 location = 2;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->location(), output);
  }

  // required uint32 length = 3;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->length(), output);
  }

  // repeated string names = 4;
  for (int i = 0; i < this->names_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->names(i).data(), this->names(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->names(i), output);
  }

  // repeated .TSCH.CommandDeleteGridRowsArchive.ValueRow value_row = 6;
  for (int i = 0; i < this->value_row_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->value_row(i), output);
  }

  // optional bool removed_all_rows = 7;
  if (has_removed_all_rows()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->removed_all_rows(), output);
  }

  // repeated string column_names = 8;
  for (int i = 0; i < this->column_names_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->column_names(i).data(), this->column_names(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->column_names(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandDeleteGridRowsArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSCH.ChartCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required uint32 location = 2;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->location(), target);
  }

  // required uint32 length = 3;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->length(), target);
  }

  // repeated string names = 4;
  for (int i = 0; i < this->names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->names(i).data(), this->names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->names(i), target);
  }

  // repeated .TSCH.CommandDeleteGridRowsArchive.ValueRow value_row = 6;
  for (int i = 0; i < this->value_row_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->value_row(i), target);
  }

  // optional bool removed_all_rows = 7;
  if (has_removed_all_rows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->removed_all_rows(), target);
  }

  // repeated string column_names = 8;
  for (int i = 0; i < this->column_names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->column_names(i).data(), this->column_names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->column_names(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandDeleteGridRowsArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSCH.ChartCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required uint32 location = 2;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->location());
    }

    // required uint32 length = 3;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->length());
    }

    // optional bool removed_all_rows = 7;
    if (has_removed_all_rows()) {
      total_size += 1 + 1;
    }

  }
  // repeated string names = 4;
  total_size += 1 * this->names_size();
  for (int i = 0; i < this->names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->names(i));
  }

  // repeated .TSCH.CommandDeleteGridRowsArchive.ValueRow value_row = 6;
  total_size += 1 * this->value_row_size();
  for (int i = 0; i < this->value_row_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->value_row(i));
  }

  // repeated string column_names = 8;
  total_size += 1 * this->column_names_size();
  for (int i = 0; i < this->column_names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->column_names(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandDeleteGridRowsArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandDeleteGridRowsArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandDeleteGridRowsArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandDeleteGridRowsArchive::MergeFrom(const CommandDeleteGridRowsArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  names_.MergeFrom(from.names_);
  value_row_.MergeFrom(from.value_row_);
  column_names_.MergeFrom(from.column_names_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from.super());
    }
    if (from.has_location()) {
      set_location(from.location());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_removed_all_rows()) {
      set_removed_all_rows(from.removed_all_rows());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandDeleteGridRowsArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandDeleteGridRowsArchive::CopyFrom(const CommandDeleteGridRowsArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandDeleteGridRowsArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandDeleteGridRowsArchive::Swap(CommandDeleteGridRowsArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(location_, other->location_);
    std::swap(length_, other->length_);
    names_.Swap(&other->names_);
    value_row_.Swap(&other->value_row_);
    std::swap(removed_all_rows_, other->removed_all_rows_);
    column_names_.Swap(&other->column_names_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandDeleteGridRowsArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandDeleteGridRowsArchive_descriptor_;
  metadata.reflection = CommandDeleteGridRowsArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandDeleteGridColumnsArchive_ValueRow::kValueFieldNumber;
#endif  // !_MSC_VER

CommandDeleteGridColumnsArchive_ValueRow::CommandDeleteGridColumnsArchive_ValueRow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandDeleteGridColumnsArchive_ValueRow::InitAsDefaultInstance() {
}

CommandDeleteGridColumnsArchive_ValueRow::CommandDeleteGridColumnsArchive_ValueRow(const CommandDeleteGridColumnsArchive_ValueRow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandDeleteGridColumnsArchive_ValueRow::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandDeleteGridColumnsArchive_ValueRow::~CommandDeleteGridColumnsArchive_ValueRow() {
  SharedDtor();
}

void CommandDeleteGridColumnsArchive_ValueRow::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommandDeleteGridColumnsArchive_ValueRow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandDeleteGridColumnsArchive_ValueRow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandDeleteGridColumnsArchive_ValueRow_descriptor_;
}

const CommandDeleteGridColumnsArchive_ValueRow& CommandDeleteGridColumnsArchive_ValueRow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHCommandArchives_2eproto();
  return *default_instance_;
}

CommandDeleteGridColumnsArchive_ValueRow* CommandDeleteGridColumnsArchive_ValueRow::default_instance_ = NULL;

CommandDeleteGridColumnsArchive_ValueRow* CommandDeleteGridColumnsArchive_ValueRow::New() const {
  return new CommandDeleteGridColumnsArchive_ValueRow;
}

void CommandDeleteGridColumnsArchive_ValueRow::Clear() {
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandDeleteGridColumnsArchive_ValueRow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 41, input, this->mutable_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandDeleteGridColumnsArchive_ValueRow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated double value = 5;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      5, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandDeleteGridColumnsArchive_ValueRow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated double value = 5;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(5, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandDeleteGridColumnsArchive_ValueRow::ByteSize() const {
  int total_size = 0;

  // repeated double value = 5;
  {
    int data_size = 0;
    data_size = 8 * this->value_size();
    total_size += 1 * this->value_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandDeleteGridColumnsArchive_ValueRow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandDeleteGridColumnsArchive_ValueRow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandDeleteGridColumnsArchive_ValueRow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandDeleteGridColumnsArchive_ValueRow::MergeFrom(const CommandDeleteGridColumnsArchive_ValueRow& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandDeleteGridColumnsArchive_ValueRow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandDeleteGridColumnsArchive_ValueRow::CopyFrom(const CommandDeleteGridColumnsArchive_ValueRow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandDeleteGridColumnsArchive_ValueRow::IsInitialized() const {

  return true;
}

void CommandDeleteGridColumnsArchive_ValueRow::Swap(CommandDeleteGridColumnsArchive_ValueRow* other) {
  if (other != this) {
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandDeleteGridColumnsArchive_ValueRow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandDeleteGridColumnsArchive_ValueRow_descriptor_;
  metadata.reflection = CommandDeleteGridColumnsArchive_ValueRow_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CommandDeleteGridColumnsArchive::kSuperFieldNumber;
const int CommandDeleteGridColumnsArchive::kLocationFieldNumber;
const int CommandDeleteGridColumnsArchive::kLengthFieldNumber;
const int CommandDeleteGridColumnsArchive::kNamesFieldNumber;
const int CommandDeleteGridColumnsArchive::kValueRowFieldNumber;
const int CommandDeleteGridColumnsArchive::kRemovedAllColumnsFieldNumber;
const int CommandDeleteGridColumnsArchive::kRowNamesFieldNumber;
#endif  // !_MSC_VER

CommandDeleteGridColumnsArchive::CommandDeleteGridColumnsArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandDeleteGridColumnsArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSCH::ChartCommandArchive*>(&::TSCH::ChartCommandArchive::default_instance());
}

CommandDeleteGridColumnsArchive::CommandDeleteGridColumnsArchive(const CommandDeleteGridColumnsArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandDeleteGridColumnsArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  location_ = 0u;
  length_ = 0u;
  removed_all_columns_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandDeleteGridColumnsArchive::~CommandDeleteGridColumnsArchive() {
  SharedDtor();
}

void CommandDeleteGridColumnsArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void CommandDeleteGridColumnsArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandDeleteGridColumnsArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandDeleteGridColumnsArchive_descriptor_;
}

const CommandDeleteGridColumnsArchive& CommandDeleteGridColumnsArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHCommandArchives_2eproto();
  return *default_instance_;
}

CommandDeleteGridColumnsArchive* CommandDeleteGridColumnsArchive::default_instance_ = NULL;

CommandDeleteGridColumnsArchive* CommandDeleteGridColumnsArchive::New() const {
  return new CommandDeleteGridColumnsArchive;
}

void CommandDeleteGridColumnsArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSCH::ChartCommandArchive::Clear();
    }
    location_ = 0u;
    length_ = 0u;
    removed_all_columns_ = false;
  }
  names_.Clear();
  value_row_.Clear();
  row_names_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandDeleteGridColumnsArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_location;
        break;
      }

      // required uint32 location = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_location:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &location_)));
          set_has_location();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_length;
        break;
      }

      // required uint32 length = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_names;
        break;
      }

      // repeated string names = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->names(this->names_size() - 1).data(),
            this->names(this->names_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_names;
        if (input->ExpectTag(50)) goto parse_value_row;
        break;
      }

      // repeated .TSCH.CommandDeleteGridColumnsArchive.ValueRow value_row = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value_row:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_value_row()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_value_row;
        if (input->ExpectTag(56)) goto parse_removed_all_columns;
        break;
      }

      // optional bool removed_all_columns = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_removed_all_columns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &removed_all_columns_)));
          set_has_removed_all_columns();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_row_names;
        break;
      }

      // repeated string row_names = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_row_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_row_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->row_names(this->row_names_size() - 1).data(),
            this->row_names(this->row_names_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_row_names;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandDeleteGridColumnsArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSCH.ChartCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required uint32 location = 2;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->location(), output);
  }

  // required uint32 length = 3;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->length(), output);
  }

  // repeated string names = 4;
  for (int i = 0; i < this->names_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->names(i).data(), this->names(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->names(i), output);
  }

  // repeated .TSCH.CommandDeleteGridColumnsArchive.ValueRow value_row = 6;
  for (int i = 0; i < this->value_row_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->value_row(i), output);
  }

  // optional bool removed_all_columns = 7;
  if (has_removed_all_columns()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->removed_all_columns(), output);
  }

  // repeated string row_names = 8;
  for (int i = 0; i < this->row_names_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->row_names(i).data(), this->row_names(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->row_names(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandDeleteGridColumnsArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSCH.ChartCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required uint32 location = 2;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->location(), target);
  }

  // required uint32 length = 3;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->length(), target);
  }

  // repeated string names = 4;
  for (int i = 0; i < this->names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->names(i).data(), this->names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->names(i), target);
  }

  // repeated .TSCH.CommandDeleteGridColumnsArchive.ValueRow value_row = 6;
  for (int i = 0; i < this->value_row_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->value_row(i), target);
  }

  // optional bool removed_all_columns = 7;
  if (has_removed_all_columns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->removed_all_columns(), target);
  }

  // repeated string row_names = 8;
  for (int i = 0; i < this->row_names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->row_names(i).data(), this->row_names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->row_names(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandDeleteGridColumnsArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSCH.ChartCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required uint32 location = 2;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->location());
    }

    // required uint32 length = 3;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->length());
    }

    // optional bool removed_all_columns = 7;
    if (has_removed_all_columns()) {
      total_size += 1 + 1;
    }

  }
  // repeated string names = 4;
  total_size += 1 * this->names_size();
  for (int i = 0; i < this->names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->names(i));
  }

  // repeated .TSCH.CommandDeleteGridColumnsArchive.ValueRow value_row = 6;
  total_size += 1 * this->value_row_size();
  for (int i = 0; i < this->value_row_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->value_row(i));
  }

  // repeated string row_names = 8;
  total_size += 1 * this->row_names_size();
  for (int i = 0; i < this->row_names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->row_names(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandDeleteGridColumnsArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandDeleteGridColumnsArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandDeleteGridColumnsArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandDeleteGridColumnsArchive::MergeFrom(const CommandDeleteGridColumnsArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  names_.MergeFrom(from.names_);
  value_row_.MergeFrom(from.value_row_);
  row_names_.MergeFrom(from.row_names_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from.super());
    }
    if (from.has_location()) {
      set_location(from.location());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_removed_all_columns()) {
      set_removed_all_columns(from.removed_all_columns());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandDeleteGridColumnsArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandDeleteGridColumnsArchive::CopyFrom(const CommandDeleteGridColumnsArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandDeleteGridColumnsArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandDeleteGridColumnsArchive::Swap(CommandDeleteGridColumnsArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(location_, other->location_);
    std::swap(length_, other->length_);
    names_.Swap(&other->names_);
    value_row_.Swap(&other->value_row_);
    std::swap(removed_all_columns_, other->removed_all_columns_);
    row_names_.Swap(&other->row_names_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandDeleteGridColumnsArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandDeleteGridColumnsArchive_descriptor_;
  metadata.reflection = CommandDeleteGridColumnsArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetPreviewLocArchive::kSuperFieldNumber;
const int CommandSetPreviewLocArchive::kOldLocFieldNumber;
const int CommandSetPreviewLocArchive::kNewLocFieldNumber;
#endif  // !_MSC_VER

CommandSetPreviewLocArchive::CommandSetPreviewLocArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetPreviewLocArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSCH::ChartCommandArchive*>(&::TSCH::ChartCommandArchive::default_instance());
  old_loc_ = const_cast< ::TSP::Point*>(&::TSP::Point::default_instance());
  new_loc_ = const_cast< ::TSP::Point*>(&::TSP::Point::default_instance());
}

CommandSetPreviewLocArchive::CommandSetPreviewLocArchive(const CommandSetPreviewLocArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetPreviewLocArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  old_loc_ = NULL;
  new_loc_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetPreviewLocArchive::~CommandSetPreviewLocArchive() {
  SharedDtor();
}

void CommandSetPreviewLocArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete old_loc_;
    delete new_loc_;
  }
}

void CommandSetPreviewLocArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetPreviewLocArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetPreviewLocArchive_descriptor_;
}

const CommandSetPreviewLocArchive& CommandSetPreviewLocArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetPreviewLocArchive* CommandSetPreviewLocArchive::default_instance_ = NULL;

CommandSetPreviewLocArchive* CommandSetPreviewLocArchive::New() const {
  return new CommandSetPreviewLocArchive;
}

void CommandSetPreviewLocArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSCH::ChartCommandArchive::Clear();
    }
    if (has_old_loc()) {
      if (old_loc_ != NULL) old_loc_->::TSP::Point::Clear();
    }
    if (has_new_loc()) {
      if (new_loc_ != NULL) new_loc_->::TSP::Point::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetPreviewLocArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_old_loc;
        break;
      }

      // required .TSP.Point old_loc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_loc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_loc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_new_loc;
        break;
      }

      // required .TSP.Point new_loc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_loc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_loc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetPreviewLocArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSCH.ChartCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Point old_loc = 2;
  if (has_old_loc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->old_loc(), output);
  }

  // required .TSP.Point new_loc = 3;
  if (has_new_loc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->new_loc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetPreviewLocArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSCH.ChartCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Point old_loc = 2;
  if (has_old_loc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->old_loc(), target);
  }

  // required .TSP.Point new_loc = 3;
  if (has_new_loc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->new_loc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetPreviewLocArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSCH.ChartCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Point old_loc = 2;
    if (has_old_loc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_loc());
    }

    // required .TSP.Point new_loc = 3;
    if (has_new_loc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_loc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetPreviewLocArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetPreviewLocArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetPreviewLocArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetPreviewLocArchive::MergeFrom(const CommandSetPreviewLocArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from.super());
    }
    if (from.has_old_loc()) {
      mutable_old_loc()->::TSP::Point::MergeFrom(from.old_loc());
    }
    if (from.has_new_loc()) {
      mutable_new_loc()->::TSP::Point::MergeFrom(from.new_loc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetPreviewLocArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetPreviewLocArchive::CopyFrom(const CommandSetPreviewLocArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetPreviewLocArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_old_loc()) {
    if (!this->old_loc().IsInitialized()) return false;
  }
  if (has_new_loc()) {
    if (!this->new_loc().IsInitialized()) return false;
  }
  return true;
}

void CommandSetPreviewLocArchive::Swap(CommandSetPreviewLocArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(old_loc_, other->old_loc_);
    std::swap(new_loc_, other->new_loc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetPreviewLocArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetPreviewLocArchive_descriptor_;
  metadata.reflection = CommandSetPreviewLocArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetGridValueArchive::kSuperFieldNumber;
const int CommandSetGridValueArchive::kRowindexFieldNumber;
const int CommandSetGridValueArchive::kColumnindexFieldNumber;
const int CommandSetGridValueArchive::kOldvalueFieldNumber;
const int CommandSetGridValueArchive::kNewvalueFieldNumber;
#endif  // !_MSC_VER

CommandSetGridValueArchive::CommandSetGridValueArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetGridValueArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSCH::ChartCommandArchive*>(&::TSCH::ChartCommandArchive::default_instance());
}

CommandSetGridValueArchive::CommandSetGridValueArchive(const CommandSetGridValueArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetGridValueArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  rowindex_ = 0u;
  columnindex_ = 0u;
  oldvalue_ = 0;
  newvalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetGridValueArchive::~CommandSetGridValueArchive() {
  SharedDtor();
}

void CommandSetGridValueArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void CommandSetGridValueArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetGridValueArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetGridValueArchive_descriptor_;
}

const CommandSetGridValueArchive& CommandSetGridValueArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetGridValueArchive* CommandSetGridValueArchive::default_instance_ = NULL;

CommandSetGridValueArchive* CommandSetGridValueArchive::New() const {
  return new CommandSetGridValueArchive;
}

void CommandSetGridValueArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSCH::ChartCommandArchive::Clear();
    }
    rowindex_ = 0u;
    columnindex_ = 0u;
    oldvalue_ = 0;
    newvalue_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetGridValueArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rowindex;
        break;
      }

      // required uint32 rowindex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rowindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rowindex_)));
          set_has_rowindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_columnindex;
        break;
      }

      // required uint32 columnindex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_columnindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &columnindex_)));
          set_has_columnindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_oldvalue;
        break;
      }

      // required double oldvalue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_oldvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &oldvalue_)));
          set_has_oldvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_newvalue;
        break;
      }

      // required double newvalue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_newvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &newvalue_)));
          set_has_newvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetGridValueArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSCH.ChartCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required uint32 rowindex = 2;
  if (has_rowindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rowindex(), output);
  }

  // required uint32 columnindex = 3;
  if (has_columnindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->columnindex(), output);
  }

  // required double oldvalue = 4;
  if (has_oldvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->oldvalue(), output);
  }

  // required double newvalue = 5;
  if (has_newvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->newvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetGridValueArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSCH.ChartCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required uint32 rowindex = 2;
  if (has_rowindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rowindex(), target);
  }

  // required uint32 columnindex = 3;
  if (has_columnindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->columnindex(), target);
  }

  // required double oldvalue = 4;
  if (has_oldvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->oldvalue(), target);
  }

  // required double newvalue = 5;
  if (has_newvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->newvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetGridValueArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSCH.ChartCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required uint32 rowindex = 2;
    if (has_rowindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rowindex());
    }

    // required uint32 columnindex = 3;
    if (has_columnindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->columnindex());
    }

    // required double oldvalue = 4;
    if (has_oldvalue()) {
      total_size += 1 + 8;
    }

    // required double newvalue = 5;
    if (has_newvalue()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetGridValueArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetGridValueArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetGridValueArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetGridValueArchive::MergeFrom(const CommandSetGridValueArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from.super());
    }
    if (from.has_rowindex()) {
      set_rowindex(from.rowindex());
    }
    if (from.has_columnindex()) {
      set_columnindex(from.columnindex());
    }
    if (from.has_oldvalue()) {
      set_oldvalue(from.oldvalue());
    }
    if (from.has_newvalue()) {
      set_newvalue(from.newvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetGridValueArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetGridValueArchive::CopyFrom(const CommandSetGridValueArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetGridValueArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandSetGridValueArchive::Swap(CommandSetGridValueArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(rowindex_, other->rowindex_);
    std::swap(columnindex_, other->columnindex_);
    std::swap(oldvalue_, other->oldvalue_);
    std::swap(newvalue_, other->newvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetGridValueArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetGridValueArchive_descriptor_;
  metadata.reflection = CommandSetGridValueArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetGridDirectionArchive::kSuperFieldNumber;
const int CommandSetGridDirectionArchive::kOldDirectionFieldNumber;
const int CommandSetGridDirectionArchive::kNewDirectionFieldNumber;
#endif  // !_MSC_VER

CommandSetGridDirectionArchive::CommandSetGridDirectionArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetGridDirectionArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSCH::ChartCommandArchive*>(&::TSCH::ChartCommandArchive::default_instance());
}

CommandSetGridDirectionArchive::CommandSetGridDirectionArchive(const CommandSetGridDirectionArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetGridDirectionArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  old_direction_ = 0u;
  new_direction_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetGridDirectionArchive::~CommandSetGridDirectionArchive() {
  SharedDtor();
}

void CommandSetGridDirectionArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void CommandSetGridDirectionArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetGridDirectionArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetGridDirectionArchive_descriptor_;
}

const CommandSetGridDirectionArchive& CommandSetGridDirectionArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetGridDirectionArchive* CommandSetGridDirectionArchive::default_instance_ = NULL;

CommandSetGridDirectionArchive* CommandSetGridDirectionArchive::New() const {
  return new CommandSetGridDirectionArchive;
}

void CommandSetGridDirectionArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSCH::ChartCommandArchive::Clear();
    }
    old_direction_ = 0u;
    new_direction_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetGridDirectionArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_old_direction;
        break;
      }

      // required uint32 old_direction = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_direction_)));
          set_has_old_direction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_new_direction;
        break;
      }

      // required uint32 new_direction = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_direction_)));
          set_has_new_direction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetGridDirectionArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSCH.ChartCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required uint32 old_direction = 2;
  if (has_old_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->old_direction(), output);
  }

  // required uint32 new_direction = 3;
  if (has_new_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->new_direction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetGridDirectionArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSCH.ChartCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required uint32 old_direction = 2;
  if (has_old_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->old_direction(), target);
  }

  // required uint32 new_direction = 3;
  if (has_new_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->new_direction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetGridDirectionArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSCH.ChartCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required uint32 old_direction = 2;
    if (has_old_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_direction());
    }

    // required uint32 new_direction = 3;
    if (has_new_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_direction());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetGridDirectionArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetGridDirectionArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetGridDirectionArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetGridDirectionArchive::MergeFrom(const CommandSetGridDirectionArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from.super());
    }
    if (from.has_old_direction()) {
      set_old_direction(from.old_direction());
    }
    if (from.has_new_direction()) {
      set_new_direction(from.new_direction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetGridDirectionArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetGridDirectionArchive::CopyFrom(const CommandSetGridDirectionArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetGridDirectionArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandSetGridDirectionArchive::Swap(CommandSetGridDirectionArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(old_direction_, other->old_direction_);
    std::swap(new_direction_, other->new_direction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetGridDirectionArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetGridDirectionArchive_descriptor_;
  metadata.reflection = CommandSetGridDirectionArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetSeriesTypeArchive::kSuperFieldNumber;
const int CommandSetSeriesTypeArchive::kSeriesindexFieldNumber;
const int CommandSetSeriesTypeArchive::kOldtypeFieldNumber;
const int CommandSetSeriesTypeArchive::kNewtypeFieldNumber;
#endif  // !_MSC_VER

CommandSetSeriesTypeArchive::CommandSetSeriesTypeArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetSeriesTypeArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSCH::ChartCommandArchive*>(&::TSCH::ChartCommandArchive::default_instance());
}

CommandSetSeriesTypeArchive::CommandSetSeriesTypeArchive(const CommandSetSeriesTypeArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetSeriesTypeArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  seriesindex_ = 0u;
  oldtype_ = 0u;
  newtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetSeriesTypeArchive::~CommandSetSeriesTypeArchive() {
  SharedDtor();
}

void CommandSetSeriesTypeArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void CommandSetSeriesTypeArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetSeriesTypeArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetSeriesTypeArchive_descriptor_;
}

const CommandSetSeriesTypeArchive& CommandSetSeriesTypeArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetSeriesTypeArchive* CommandSetSeriesTypeArchive::default_instance_ = NULL;

CommandSetSeriesTypeArchive* CommandSetSeriesTypeArchive::New() const {
  return new CommandSetSeriesTypeArchive;
}

void CommandSetSeriesTypeArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSCH::ChartCommandArchive::Clear();
    }
    seriesindex_ = 0u;
    oldtype_ = 0u;
    newtype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetSeriesTypeArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seriesindex;
        break;
      }

      // required uint32 seriesindex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seriesindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seriesindex_)));
          set_has_seriesindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_oldtype;
        break;
      }

      // required uint32 oldtype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oldtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oldtype_)));
          set_has_oldtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_newtype;
        break;
      }

      // required uint32 newtype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newtype_)));
          set_has_newtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetSeriesTypeArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSCH.ChartCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required uint32 seriesindex = 2;
  if (has_seriesindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->seriesindex(), output);
  }

  // required uint32 oldtype = 3;
  if (has_oldtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->oldtype(), output);
  }

  // required uint32 newtype = 4;
  if (has_newtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->newtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetSeriesTypeArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSCH.ChartCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required uint32 seriesindex = 2;
  if (has_seriesindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->seriesindex(), target);
  }

  // required uint32 oldtype = 3;
  if (has_oldtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->oldtype(), target);
  }

  // required uint32 newtype = 4;
  if (has_newtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->newtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetSeriesTypeArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSCH.ChartCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required uint32 seriesindex = 2;
    if (has_seriesindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seriesindex());
    }

    // required uint32 oldtype = 3;
    if (has_oldtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oldtype());
    }

    // required uint32 newtype = 4;
    if (has_newtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetSeriesTypeArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetSeriesTypeArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetSeriesTypeArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetSeriesTypeArchive::MergeFrom(const CommandSetSeriesTypeArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from.super());
    }
    if (from.has_seriesindex()) {
      set_seriesindex(from.seriesindex());
    }
    if (from.has_oldtype()) {
      set_oldtype(from.oldtype());
    }
    if (from.has_newtype()) {
      set_newtype(from.newtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetSeriesTypeArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetSeriesTypeArchive::CopyFrom(const CommandSetSeriesTypeArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetSeriesTypeArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandSetSeriesTypeArchive::Swap(CommandSetSeriesTypeArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(seriesindex_, other->seriesindex_);
    std::swap(oldtype_, other->oldtype_);
    std::swap(newtype_, other->newtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetSeriesTypeArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetSeriesTypeArchive_descriptor_;
  metadata.reflection = CommandSetSeriesTypeArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetScatterFormatArchive::kSuperFieldNumber;
const int CommandSetScatterFormatArchive::kOldformatFieldNumber;
const int CommandSetScatterFormatArchive::kNewformatFieldNumber;
#endif  // !_MSC_VER

CommandSetScatterFormatArchive::CommandSetScatterFormatArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetScatterFormatArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSCH::ChartCommandArchive*>(&::TSCH::ChartCommandArchive::default_instance());
}

CommandSetScatterFormatArchive::CommandSetScatterFormatArchive(const CommandSetScatterFormatArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetScatterFormatArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  oldformat_ = 0u;
  newformat_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetScatterFormatArchive::~CommandSetScatterFormatArchive() {
  SharedDtor();
}

void CommandSetScatterFormatArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void CommandSetScatterFormatArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetScatterFormatArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetScatterFormatArchive_descriptor_;
}

const CommandSetScatterFormatArchive& CommandSetScatterFormatArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetScatterFormatArchive* CommandSetScatterFormatArchive::default_instance_ = NULL;

CommandSetScatterFormatArchive* CommandSetScatterFormatArchive::New() const {
  return new CommandSetScatterFormatArchive;
}

void CommandSetScatterFormatArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSCH::ChartCommandArchive::Clear();
    }
    oldformat_ = 0u;
    newformat_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetScatterFormatArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_oldformat;
        break;
      }

      // required uint32 oldformat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oldformat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oldformat_)));
          set_has_oldformat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_newformat;
        break;
      }

      // required uint32 newformat = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newformat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newformat_)));
          set_has_newformat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetScatterFormatArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSCH.ChartCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required uint32 oldformat = 3;
  if (has_oldformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->oldformat(), output);
  }

  // required uint32 newformat = 4;
  if (has_newformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->newformat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetScatterFormatArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSCH.ChartCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required uint32 oldformat = 3;
  if (has_oldformat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->oldformat(), target);
  }

  // required uint32 newformat = 4;
  if (has_newformat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->newformat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetScatterFormatArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSCH.ChartCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required uint32 oldformat = 3;
    if (has_oldformat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oldformat());
    }

    // required uint32 newformat = 4;
    if (has_newformat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newformat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetScatterFormatArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetScatterFormatArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetScatterFormatArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetScatterFormatArchive::MergeFrom(const CommandSetScatterFormatArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from.super());
    }
    if (from.has_oldformat()) {
      set_oldformat(from.oldformat());
    }
    if (from.has_newformat()) {
      set_newformat(from.newformat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetScatterFormatArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetScatterFormatArchive::CopyFrom(const CommandSetScatterFormatArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetScatterFormatArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandSetScatterFormatArchive::Swap(CommandSetScatterFormatArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(oldformat_, other->oldformat_);
    std::swap(newformat_, other->newformat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetScatterFormatArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetScatterFormatArchive_descriptor_;
  metadata.reflection = CommandSetScatterFormatArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetMultiDataSetIndexArchive::kSuperFieldNumber;
const int CommandSetMultiDataSetIndexArchive::kOldindexFieldNumber;
const int CommandSetMultiDataSetIndexArchive::kNewindexFieldNumber;
#endif  // !_MSC_VER

CommandSetMultiDataSetIndexArchive::CommandSetMultiDataSetIndexArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetMultiDataSetIndexArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSCH::ChartCommandArchive*>(&::TSCH::ChartCommandArchive::default_instance());
}

CommandSetMultiDataSetIndexArchive::CommandSetMultiDataSetIndexArchive(const CommandSetMultiDataSetIndexArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetMultiDataSetIndexArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  oldindex_ = 0u;
  newindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetMultiDataSetIndexArchive::~CommandSetMultiDataSetIndexArchive() {
  SharedDtor();
}

void CommandSetMultiDataSetIndexArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void CommandSetMultiDataSetIndexArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetMultiDataSetIndexArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetMultiDataSetIndexArchive_descriptor_;
}

const CommandSetMultiDataSetIndexArchive& CommandSetMultiDataSetIndexArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetMultiDataSetIndexArchive* CommandSetMultiDataSetIndexArchive::default_instance_ = NULL;

CommandSetMultiDataSetIndexArchive* CommandSetMultiDataSetIndexArchive::New() const {
  return new CommandSetMultiDataSetIndexArchive;
}

void CommandSetMultiDataSetIndexArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSCH::ChartCommandArchive::Clear();
    }
    oldindex_ = 0u;
    newindex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetMultiDataSetIndexArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_oldindex;
        break;
      }

      // required uint32 oldindex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oldindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oldindex_)));
          set_has_oldindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_newindex;
        break;
      }

      // required uint32 newindex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newindex_)));
          set_has_newindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetMultiDataSetIndexArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSCH.ChartCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required uint32 oldindex = 2;
  if (has_oldindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->oldindex(), output);
  }

  // required uint32 newindex = 3;
  if (has_newindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->newindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetMultiDataSetIndexArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSCH.ChartCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required uint32 oldindex = 2;
  if (has_oldindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->oldindex(), target);
  }

  // required uint32 newindex = 3;
  if (has_newindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->newindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetMultiDataSetIndexArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSCH.ChartCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required uint32 oldindex = 2;
    if (has_oldindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oldindex());
    }

    // required uint32 newindex = 3;
    if (has_newindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetMultiDataSetIndexArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetMultiDataSetIndexArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetMultiDataSetIndexArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetMultiDataSetIndexArchive::MergeFrom(const CommandSetMultiDataSetIndexArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from.super());
    }
    if (from.has_oldindex()) {
      set_oldindex(from.oldindex());
    }
    if (from.has_newindex()) {
      set_newindex(from.newindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetMultiDataSetIndexArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetMultiDataSetIndexArchive::CopyFrom(const CommandSetMultiDataSetIndexArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetMultiDataSetIndexArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandSetMultiDataSetIndexArchive::Swap(CommandSetMultiDataSetIndexArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(oldindex_, other->oldindex_);
    std::swap(newindex_, other->newindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetMultiDataSetIndexArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetMultiDataSetIndexArchive_descriptor_;
  metadata.reflection = CommandSetMultiDataSetIndexArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetLegendFrameArchive::kSuperFieldNumber;
const int CommandSetLegendFrameArchive::kOldLegendFrameFieldNumber;
const int CommandSetLegendFrameArchive::kNewLegendFrameFieldNumber;
#endif  // !_MSC_VER

CommandSetLegendFrameArchive::CommandSetLegendFrameArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetLegendFrameArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSCH::ChartCommandArchive*>(&::TSCH::ChartCommandArchive::default_instance());
  old_legend_frame_ = const_cast< ::TSCH::RectArchive*>(&::TSCH::RectArchive::default_instance());
  new_legend_frame_ = const_cast< ::TSCH::RectArchive*>(&::TSCH::RectArchive::default_instance());
}

CommandSetLegendFrameArchive::CommandSetLegendFrameArchive(const CommandSetLegendFrameArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetLegendFrameArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  old_legend_frame_ = NULL;
  new_legend_frame_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetLegendFrameArchive::~CommandSetLegendFrameArchive() {
  SharedDtor();
}

void CommandSetLegendFrameArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete old_legend_frame_;
    delete new_legend_frame_;
  }
}

void CommandSetLegendFrameArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetLegendFrameArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetLegendFrameArchive_descriptor_;
}

const CommandSetLegendFrameArchive& CommandSetLegendFrameArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetLegendFrameArchive* CommandSetLegendFrameArchive::default_instance_ = NULL;

CommandSetLegendFrameArchive* CommandSetLegendFrameArchive::New() const {
  return new CommandSetLegendFrameArchive;
}

void CommandSetLegendFrameArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSCH::ChartCommandArchive::Clear();
    }
    if (has_old_legend_frame()) {
      if (old_legend_frame_ != NULL) old_legend_frame_->::TSCH::RectArchive::Clear();
    }
    if (has_new_legend_frame()) {
      if (new_legend_frame_ != NULL) new_legend_frame_->::TSCH::RectArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetLegendFrameArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_old_legend_frame;
        break;
      }

      // required .TSCH.RectArchive old_legend_frame = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_legend_frame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_legend_frame()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_new_legend_frame;
        break;
      }

      // required .TSCH.RectArchive new_legend_frame = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_legend_frame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_legend_frame()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetLegendFrameArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSCH.ChartCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSCH.RectArchive old_legend_frame = 2;
  if (has_old_legend_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->old_legend_frame(), output);
  }

  // required .TSCH.RectArchive new_legend_frame = 3;
  if (has_new_legend_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->new_legend_frame(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetLegendFrameArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSCH.ChartCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSCH.RectArchive old_legend_frame = 2;
  if (has_old_legend_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->old_legend_frame(), target);
  }

  // required .TSCH.RectArchive new_legend_frame = 3;
  if (has_new_legend_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->new_legend_frame(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetLegendFrameArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSCH.ChartCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSCH.RectArchive old_legend_frame = 2;
    if (has_old_legend_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_legend_frame());
    }

    // required .TSCH.RectArchive new_legend_frame = 3;
    if (has_new_legend_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_legend_frame());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetLegendFrameArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetLegendFrameArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetLegendFrameArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetLegendFrameArchive::MergeFrom(const CommandSetLegendFrameArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from.super());
    }
    if (from.has_old_legend_frame()) {
      mutable_old_legend_frame()->::TSCH::RectArchive::MergeFrom(from.old_legend_frame());
    }
    if (from.has_new_legend_frame()) {
      mutable_new_legend_frame()->::TSCH::RectArchive::MergeFrom(from.new_legend_frame());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetLegendFrameArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetLegendFrameArchive::CopyFrom(const CommandSetLegendFrameArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetLegendFrameArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_old_legend_frame()) {
    if (!this->old_legend_frame().IsInitialized()) return false;
  }
  if (has_new_legend_frame()) {
    if (!this->new_legend_frame().IsInitialized()) return false;
  }
  return true;
}

void CommandSetLegendFrameArchive::Swap(CommandSetLegendFrameArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(old_legend_frame_, other->old_legend_frame_);
    std::swap(new_legend_frame_, other->new_legend_frame_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetLegendFrameArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetLegendFrameArchive_descriptor_;
  metadata.reflection = CommandSetLegendFrameArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetPieWedgeExplosion::kSuperFieldNumber;
const int CommandSetPieWedgeExplosion::kInfoGeometryCommandFieldNumber;
const int CommandSetPieWedgeExplosion::kStyleMutationCommandFieldNumber;
const int CommandSetPieWedgeExplosion::kAnchorAttachmentCommandFieldNumber;
#endif  // !_MSC_VER

CommandSetPieWedgeExplosion::CommandSetPieWedgeExplosion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetPieWedgeExplosion::InitAsDefaultInstance() {
  super_ = const_cast< ::TSCH::ChartCommandArchive*>(&::TSCH::ChartCommandArchive::default_instance());
  info_geometry_command_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  style_mutation_command_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  anchor_attachment_command_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandSetPieWedgeExplosion::CommandSetPieWedgeExplosion(const CommandSetPieWedgeExplosion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetPieWedgeExplosion::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  info_geometry_command_ = NULL;
  style_mutation_command_ = NULL;
  anchor_attachment_command_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetPieWedgeExplosion::~CommandSetPieWedgeExplosion() {
  SharedDtor();
}

void CommandSetPieWedgeExplosion::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete info_geometry_command_;
    delete style_mutation_command_;
    delete anchor_attachment_command_;
  }
}

void CommandSetPieWedgeExplosion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetPieWedgeExplosion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetPieWedgeExplosion_descriptor_;
}

const CommandSetPieWedgeExplosion& CommandSetPieWedgeExplosion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetPieWedgeExplosion* CommandSetPieWedgeExplosion::default_instance_ = NULL;

CommandSetPieWedgeExplosion* CommandSetPieWedgeExplosion::New() const {
  return new CommandSetPieWedgeExplosion;
}

void CommandSetPieWedgeExplosion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSCH::ChartCommandArchive::Clear();
    }
    if (has_info_geometry_command()) {
      if (info_geometry_command_ != NULL) info_geometry_command_->::TSP::Reference::Clear();
    }
    if (has_style_mutation_command()) {
      if (style_mutation_command_ != NULL) style_mutation_command_->::TSP::Reference::Clear();
    }
    if (has_anchor_attachment_command()) {
      if (anchor_attachment_command_ != NULL) anchor_attachment_command_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetPieWedgeExplosion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info_geometry_command;
        break;
      }

      // optional .TSP.Reference info_geometry_command = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info_geometry_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info_geometry_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_style_mutation_command;
        break;
      }

      // optional .TSP.Reference style_mutation_command = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_style_mutation_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_style_mutation_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_anchor_attachment_command;
        break;
      }

      // optional .TSP.Reference anchor_attachment_command = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_anchor_attachment_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_anchor_attachment_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetPieWedgeExplosion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSCH.ChartCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference info_geometry_command = 2;
  if (has_info_geometry_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info_geometry_command(), output);
  }

  // optional .TSP.Reference style_mutation_command = 3;
  if (has_style_mutation_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->style_mutation_command(), output);
  }

  // optional .TSP.Reference anchor_attachment_command = 4;
  if (has_anchor_attachment_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->anchor_attachment_command(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetPieWedgeExplosion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSCH.ChartCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference info_geometry_command = 2;
  if (has_info_geometry_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info_geometry_command(), target);
  }

  // optional .TSP.Reference style_mutation_command = 3;
  if (has_style_mutation_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->style_mutation_command(), target);
  }

  // optional .TSP.Reference anchor_attachment_command = 4;
  if (has_anchor_attachment_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->anchor_attachment_command(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetPieWedgeExplosion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSCH.ChartCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference info_geometry_command = 2;
    if (has_info_geometry_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info_geometry_command());
    }

    // optional .TSP.Reference style_mutation_command = 3;
    if (has_style_mutation_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->style_mutation_command());
    }

    // optional .TSP.Reference anchor_attachment_command = 4;
    if (has_anchor_attachment_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->anchor_attachment_command());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetPieWedgeExplosion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetPieWedgeExplosion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetPieWedgeExplosion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetPieWedgeExplosion::MergeFrom(const CommandSetPieWedgeExplosion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from.super());
    }
    if (from.has_info_geometry_command()) {
      mutable_info_geometry_command()->::TSP::Reference::MergeFrom(from.info_geometry_command());
    }
    if (from.has_style_mutation_command()) {
      mutable_style_mutation_command()->::TSP::Reference::MergeFrom(from.style_mutation_command());
    }
    if (from.has_anchor_attachment_command()) {
      mutable_anchor_attachment_command()->::TSP::Reference::MergeFrom(from.anchor_attachment_command());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetPieWedgeExplosion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetPieWedgeExplosion::CopyFrom(const CommandSetPieWedgeExplosion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetPieWedgeExplosion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_info_geometry_command()) {
    if (!this->info_geometry_command().IsInitialized()) return false;
  }
  if (has_style_mutation_command()) {
    if (!this->style_mutation_command().IsInitialized()) return false;
  }
  if (has_anchor_attachment_command()) {
    if (!this->anchor_attachment_command().IsInitialized()) return false;
  }
  return true;
}

void CommandSetPieWedgeExplosion::Swap(CommandSetPieWedgeExplosion* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(info_geometry_command_, other->info_geometry_command_);
    std::swap(style_mutation_command_, other->style_mutation_command_);
    std::swap(anchor_attachment_command_, other->anchor_attachment_command_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetPieWedgeExplosion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetPieWedgeExplosion_descriptor_;
  metadata.reflection = CommandSetPieWedgeExplosion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SynchronousCommandArchive::kSuperFieldNumber;
const int SynchronousCommandArchive::kCommandFieldNumber;
#endif  // !_MSC_VER

SynchronousCommandArchive::SynchronousCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SynchronousCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  command_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

SynchronousCommandArchive::SynchronousCommandArchive(const SynchronousCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SynchronousCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  command_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SynchronousCommandArchive::~SynchronousCommandArchive() {
  SharedDtor();
}

void SynchronousCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete command_;
  }
}

void SynchronousCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SynchronousCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SynchronousCommandArchive_descriptor_;
}

const SynchronousCommandArchive& SynchronousCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHCommandArchives_2eproto();
  return *default_instance_;
}

SynchronousCommandArchive* SynchronousCommandArchive::default_instance_ = NULL;

SynchronousCommandArchive* SynchronousCommandArchive::New() const {
  return new SynchronousCommandArchive;
}

void SynchronousCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_command()) {
      if (command_ != NULL) command_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SynchronousCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_command;
        break;
      }

      // required .TSP.Reference command = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SynchronousCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference command = 2;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->command(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SynchronousCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference command = 2;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->command(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SynchronousCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference command = 2;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->command());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SynchronousCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SynchronousCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SynchronousCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SynchronousCommandArchive::MergeFrom(const SynchronousCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_command()) {
      mutable_command()->::TSP::Reference::MergeFrom(from.command());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SynchronousCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SynchronousCommandArchive::CopyFrom(const SynchronousCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SynchronousCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_command()) {
    if (!this->command().IsInitialized()) return false;
  }
  return true;
}

void SynchronousCommandArchive::Swap(SynchronousCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(command_, other->command_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SynchronousCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SynchronousCommandArchive_descriptor_;
  metadata.reflection = SynchronousCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandReplaceAllArchive::kSuperFieldNumber;
const int CommandReplaceAllArchive::kInfoFieldNumber;
const int CommandReplaceAllArchive::kCommandsFieldNumber;
#endif  // !_MSC_VER

CommandReplaceAllArchive::CommandReplaceAllArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandReplaceAllArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::ReplaceAllChildCommandArchive*>(&::TSK::ReplaceAllChildCommandArchive::default_instance());
  info_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandReplaceAllArchive::CommandReplaceAllArchive(const CommandReplaceAllArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandReplaceAllArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandReplaceAllArchive::~CommandReplaceAllArchive() {
  SharedDtor();
}

void CommandReplaceAllArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete info_;
  }
}

void CommandReplaceAllArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandReplaceAllArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandReplaceAllArchive_descriptor_;
}

const CommandReplaceAllArchive& CommandReplaceAllArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHCommandArchives_2eproto();
  return *default_instance_;
}

CommandReplaceAllArchive* CommandReplaceAllArchive::default_instance_ = NULL;

CommandReplaceAllArchive* CommandReplaceAllArchive::New() const {
  return new CommandReplaceAllArchive;
}

void CommandReplaceAllArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::ReplaceAllChildCommandArchive::Clear();
    }
    if (has_info()) {
      if (info_ != NULL) info_->::TSP::Reference::Clear();
    }
  }
  commands_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandReplaceAllArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.ReplaceAllChildCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // required .TSP.Reference info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_commands;
        break;
      }

      // repeated .TSP.Reference commands = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commands:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_commands()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_commands;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandReplaceAllArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.ReplaceAllChildCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  // repeated .TSP.Reference commands = 3;
  for (int i = 0; i < this->commands_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->commands(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandReplaceAllArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.ReplaceAllChildCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  // repeated .TSP.Reference commands = 3;
  for (int i = 0; i < this->commands_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->commands(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandReplaceAllArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.ReplaceAllChildCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  // repeated .TSP.Reference commands = 3;
  total_size += 1 * this->commands_size();
  for (int i = 0; i < this->commands_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->commands(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandReplaceAllArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandReplaceAllArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandReplaceAllArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandReplaceAllArchive::MergeFrom(const CommandReplaceAllArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  commands_.MergeFrom(from.commands_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::ReplaceAllChildCommandArchive::MergeFrom(from.super());
    }
    if (from.has_info()) {
      mutable_info()->::TSP::Reference::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandReplaceAllArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandReplaceAllArchive::CopyFrom(const CommandReplaceAllArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandReplaceAllArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  for (int i = 0; i < commands_size(); i++) {
    if (!this->commands(i).IsInitialized()) return false;
  }
  return true;
}

void CommandReplaceAllArchive::Swap(CommandReplaceAllArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(info_, other->info_);
    commands_.Swap(&other->commands_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandReplaceAllArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandReplaceAllArchive_descriptor_;
  metadata.reflection = CommandReplaceAllArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandChartApplyTheme::kSuperFieldNumber;
const int CommandChartApplyTheme::kInfoFieldNumber;
const int CommandChartApplyTheme::kSwapCommandFieldNumber;
const int CommandChartApplyTheme::kPresetFieldNumber;
#endif  // !_MSC_VER

CommandChartApplyTheme::CommandChartApplyTheme()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandChartApplyTheme::InitAsDefaultInstance() {
  super_ = const_cast< ::TSS::ApplyThemeChildCommandArchive*>(&::TSS::ApplyThemeChildCommandArchive::default_instance());
  info_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  swap_command_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  preset_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandChartApplyTheme::CommandChartApplyTheme(const CommandChartApplyTheme& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandChartApplyTheme::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  info_ = NULL;
  swap_command_ = NULL;
  preset_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandChartApplyTheme::~CommandChartApplyTheme() {
  SharedDtor();
}

void CommandChartApplyTheme::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete info_;
    delete swap_command_;
    delete preset_;
  }
}

void CommandChartApplyTheme::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandChartApplyTheme::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandChartApplyTheme_descriptor_;
}

const CommandChartApplyTheme& CommandChartApplyTheme::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHCommandArchives_2eproto();
  return *default_instance_;
}

CommandChartApplyTheme* CommandChartApplyTheme::default_instance_ = NULL;

CommandChartApplyTheme* CommandChartApplyTheme::New() const {
  return new CommandChartApplyTheme;
}

void CommandChartApplyTheme::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSS::ApplyThemeChildCommandArchive::Clear();
    }
    if (has_info()) {
      if (info_ != NULL) info_->::TSP::Reference::Clear();
    }
    if (has_swap_command()) {
      if (swap_command_ != NULL) swap_command_->::TSP::Reference::Clear();
    }
    if (has_preset()) {
      if (preset_ != NULL) preset_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandChartApplyTheme::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSS.ApplyThemeChildCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // required .TSP.Reference info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_swap_command;
        break;
      }

      // optional .TSP.Reference swap_command = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_swap_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_swap_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_preset;
        break;
      }

      // optional .TSP.Reference preset = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_preset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_preset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandChartApplyTheme::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSS.ApplyThemeChildCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  // optional .TSP.Reference swap_command = 3;
  if (has_swap_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->swap_command(), output);
  }

  // optional .TSP.Reference preset = 4;
  if (has_preset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->preset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandChartApplyTheme::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSS.ApplyThemeChildCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  // optional .TSP.Reference swap_command = 3;
  if (has_swap_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->swap_command(), target);
  }

  // optional .TSP.Reference preset = 4;
  if (has_preset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->preset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandChartApplyTheme::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSS.ApplyThemeChildCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional .TSP.Reference swap_command = 3;
    if (has_swap_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->swap_command());
    }

    // optional .TSP.Reference preset = 4;
    if (has_preset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->preset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandChartApplyTheme::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandChartApplyTheme* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandChartApplyTheme*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandChartApplyTheme::MergeFrom(const CommandChartApplyTheme& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSS::ApplyThemeChildCommandArchive::MergeFrom(from.super());
    }
    if (from.has_info()) {
      mutable_info()->::TSP::Reference::MergeFrom(from.info());
    }
    if (from.has_swap_command()) {
      mutable_swap_command()->::TSP::Reference::MergeFrom(from.swap_command());
    }
    if (from.has_preset()) {
      mutable_preset()->::TSP::Reference::MergeFrom(from.preset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandChartApplyTheme::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandChartApplyTheme::CopyFrom(const CommandChartApplyTheme& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandChartApplyTheme::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  if (has_swap_command()) {
    if (!this->swap_command().IsInitialized()) return false;
  }
  if (has_preset()) {
    if (!this->preset().IsInitialized()) return false;
  }
  return true;
}

void CommandChartApplyTheme::Swap(CommandChartApplyTheme* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(info_, other->info_);
    std::swap(swap_command_, other->swap_command_);
    std::swap(preset_, other->preset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandChartApplyTheme::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandChartApplyTheme_descriptor_;
  metadata.reflection = CommandChartApplyTheme_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandChartApplyPreset::kSuperFieldNumber;
const int CommandChartApplyPreset::kSwapCommandFieldNumber;
const int CommandChartApplyPreset::kPresetFieldNumber;
const int CommandChartApplyPreset::kBehaviorFieldNumber;
#endif  // !_MSC_VER

CommandChartApplyPreset::CommandChartApplyPreset()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandChartApplyPreset::InitAsDefaultInstance() {
  super_ = const_cast< ::TSCH::ChartCommandArchive*>(&::TSCH::ChartCommandArchive::default_instance());
  swap_command_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  preset_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandChartApplyPreset::CommandChartApplyPreset(const CommandChartApplyPreset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandChartApplyPreset::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  swap_command_ = NULL;
  preset_ = NULL;
  behavior_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandChartApplyPreset::~CommandChartApplyPreset() {
  SharedDtor();
}

void CommandChartApplyPreset::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete swap_command_;
    delete preset_;
  }
}

void CommandChartApplyPreset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandChartApplyPreset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandChartApplyPreset_descriptor_;
}

const CommandChartApplyPreset& CommandChartApplyPreset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHCommandArchives_2eproto();
  return *default_instance_;
}

CommandChartApplyPreset* CommandChartApplyPreset::default_instance_ = NULL;

CommandChartApplyPreset* CommandChartApplyPreset::New() const {
  return new CommandChartApplyPreset;
}

void CommandChartApplyPreset::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSCH::ChartCommandArchive::Clear();
    }
    if (has_swap_command()) {
      if (swap_command_ != NULL) swap_command_->::TSP::Reference::Clear();
    }
    if (has_preset()) {
      if (preset_ != NULL) preset_->::TSP::Reference::Clear();
    }
    behavior_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandChartApplyPreset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_swap_command;
        break;
      }

      // optional .TSP.Reference swap_command = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_swap_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_swap_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_preset;
        break;
      }

      // optional .TSP.Reference preset = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_preset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_preset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_behavior;
        break;
      }

      // optional .TSCH.ApplyPresetBehavior behavior = 4 [default = remove_overrides];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_behavior:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSCH::ApplyPresetBehavior_IsValid(value)) {
            set_behavior(static_cast< ::TSCH::ApplyPresetBehavior >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandChartApplyPreset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSCH.ChartCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference swap_command = 2;
  if (has_swap_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->swap_command(), output);
  }

  // optional .TSP.Reference preset = 3;
  if (has_preset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->preset(), output);
  }

  // optional .TSCH.ApplyPresetBehavior behavior = 4 [default = remove_overrides];
  if (has_behavior()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->behavior(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandChartApplyPreset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSCH.ChartCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference swap_command = 2;
  if (has_swap_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->swap_command(), target);
  }

  // optional .TSP.Reference preset = 3;
  if (has_preset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->preset(), target);
  }

  // optional .TSCH.ApplyPresetBehavior behavior = 4 [default = remove_overrides];
  if (has_behavior()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->behavior(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandChartApplyPreset::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSCH.ChartCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference swap_command = 2;
    if (has_swap_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->swap_command());
    }

    // optional .TSP.Reference preset = 3;
    if (has_preset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->preset());
    }

    // optional .TSCH.ApplyPresetBehavior behavior = 4 [default = remove_overrides];
    if (has_behavior()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->behavior());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandChartApplyPreset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandChartApplyPreset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandChartApplyPreset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandChartApplyPreset::MergeFrom(const CommandChartApplyPreset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from.super());
    }
    if (from.has_swap_command()) {
      mutable_swap_command()->::TSP::Reference::MergeFrom(from.swap_command());
    }
    if (from.has_preset()) {
      mutable_preset()->::TSP::Reference::MergeFrom(from.preset());
    }
    if (from.has_behavior()) {
      set_behavior(from.behavior());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandChartApplyPreset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandChartApplyPreset::CopyFrom(const CommandChartApplyPreset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandChartApplyPreset::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_swap_command()) {
    if (!this->swap_command().IsInitialized()) return false;
  }
  if (has_preset()) {
    if (!this->preset().IsInitialized()) return false;
  }
  return true;
}

void CommandChartApplyPreset::Swap(CommandChartApplyPreset* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(swap_command_, other->swap_command_);
    std::swap(preset_, other->preset_);
    std::swap(behavior_, other->behavior_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandChartApplyPreset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandChartApplyPreset_descriptor_;
  metadata.reflection = CommandChartApplyPreset_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandCleanupGeometryArchive::kSuperFieldNumber;
const int CommandCleanupGeometryArchive::kInfoGeometryCommandFieldNumber;
const int CommandCleanupGeometryArchive::kAnchorAttachmentCommandFieldNumber;
const int CommandCleanupGeometryArchive::kOriginalLegendRectFieldNumber;
#endif  // !_MSC_VER

CommandCleanupGeometryArchive::CommandCleanupGeometryArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandCleanupGeometryArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSCH::ChartCommandArchive*>(&::TSCH::ChartCommandArchive::default_instance());
  info_geometry_command_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  anchor_attachment_command_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  original_legend_rect_ = const_cast< ::TSCH::RectArchive*>(&::TSCH::RectArchive::default_instance());
}

CommandCleanupGeometryArchive::CommandCleanupGeometryArchive(const CommandCleanupGeometryArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandCleanupGeometryArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  info_geometry_command_ = NULL;
  anchor_attachment_command_ = NULL;
  original_legend_rect_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandCleanupGeometryArchive::~CommandCleanupGeometryArchive() {
  SharedDtor();
}

void CommandCleanupGeometryArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete info_geometry_command_;
    delete anchor_attachment_command_;
    delete original_legend_rect_;
  }
}

void CommandCleanupGeometryArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandCleanupGeometryArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandCleanupGeometryArchive_descriptor_;
}

const CommandCleanupGeometryArchive& CommandCleanupGeometryArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHCommandArchives_2eproto();
  return *default_instance_;
}

CommandCleanupGeometryArchive* CommandCleanupGeometryArchive::default_instance_ = NULL;

CommandCleanupGeometryArchive* CommandCleanupGeometryArchive::New() const {
  return new CommandCleanupGeometryArchive;
}

void CommandCleanupGeometryArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSCH::ChartCommandArchive::Clear();
    }
    if (has_info_geometry_command()) {
      if (info_geometry_command_ != NULL) info_geometry_command_->::TSP::Reference::Clear();
    }
    if (has_anchor_attachment_command()) {
      if (anchor_attachment_command_ != NULL) anchor_attachment_command_->::TSP::Reference::Clear();
    }
    if (has_original_legend_rect()) {
      if (original_legend_rect_ != NULL) original_legend_rect_->::TSCH::RectArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandCleanupGeometryArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info_geometry_command;
        break;
      }

      // optional .TSP.Reference info_geometry_command = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info_geometry_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info_geometry_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_anchor_attachment_command;
        break;
      }

      // optional .TSP.Reference anchor_attachment_command = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_anchor_attachment_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_anchor_attachment_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_original_legend_rect;
        break;
      }

      // optional .TSCH.RectArchive original_legend_rect = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_original_legend_rect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_original_legend_rect()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandCleanupGeometryArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSCH.ChartCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference info_geometry_command = 2;
  if (has_info_geometry_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info_geometry_command(), output);
  }

  // optional .TSP.Reference anchor_attachment_command = 3;
  if (has_anchor_attachment_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->anchor_attachment_command(), output);
  }

  // optional .TSCH.RectArchive original_legend_rect = 4;
  if (has_original_legend_rect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->original_legend_rect(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandCleanupGeometryArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSCH.ChartCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference info_geometry_command = 2;
  if (has_info_geometry_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info_geometry_command(), target);
  }

  // optional .TSP.Reference anchor_attachment_command = 3;
  if (has_anchor_attachment_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->anchor_attachment_command(), target);
  }

  // optional .TSCH.RectArchive original_legend_rect = 4;
  if (has_original_legend_rect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->original_legend_rect(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandCleanupGeometryArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSCH.ChartCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference info_geometry_command = 2;
    if (has_info_geometry_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info_geometry_command());
    }

    // optional .TSP.Reference anchor_attachment_command = 3;
    if (has_anchor_attachment_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->anchor_attachment_command());
    }

    // optional .TSCH.RectArchive original_legend_rect = 4;
    if (has_original_legend_rect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->original_legend_rect());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandCleanupGeometryArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandCleanupGeometryArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandCleanupGeometryArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandCleanupGeometryArchive::MergeFrom(const CommandCleanupGeometryArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from.super());
    }
    if (from.has_info_geometry_command()) {
      mutable_info_geometry_command()->::TSP::Reference::MergeFrom(from.info_geometry_command());
    }
    if (from.has_anchor_attachment_command()) {
      mutable_anchor_attachment_command()->::TSP::Reference::MergeFrom(from.anchor_attachment_command());
    }
    if (from.has_original_legend_rect()) {
      mutable_original_legend_rect()->::TSCH::RectArchive::MergeFrom(from.original_legend_rect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandCleanupGeometryArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandCleanupGeometryArchive::CopyFrom(const CommandCleanupGeometryArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandCleanupGeometryArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_info_geometry_command()) {
    if (!this->info_geometry_command().IsInitialized()) return false;
  }
  if (has_anchor_attachment_command()) {
    if (!this->anchor_attachment_command().IsInitialized()) return false;
  }
  if (has_original_legend_rect()) {
    if (!this->original_legend_rect().IsInitialized()) return false;
  }
  return true;
}

void CommandCleanupGeometryArchive::Swap(CommandCleanupGeometryArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(info_geometry_command_, other->info_geometry_command_);
    std::swap(anchor_attachment_command_, other->anchor_attachment_command_);
    std::swap(original_legend_rect_, other->original_legend_rect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandCleanupGeometryArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandCleanupGeometryArchive_descriptor_;
  metadata.reflection = CommandCleanupGeometryArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChartCommandArchive::kSuperFieldNumber;
const int ChartCommandArchive::kInfoFieldNumber;
const int ChartCommandArchive::kOriginalDirtyStateFieldNumber;
#endif  // !_MSC_VER

ChartCommandArchive::ChartCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  info_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

ChartCommandArchive::ChartCommandArchive(const ChartCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  info_ = NULL;
  original_dirty_state_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartCommandArchive::~ChartCommandArchive() {
  SharedDtor();
}

void ChartCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete info_;
  }
}

void ChartCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartCommandArchive_descriptor_;
}

const ChartCommandArchive& ChartCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHCommandArchives_2eproto();
  return *default_instance_;
}

ChartCommandArchive* ChartCommandArchive::default_instance_ = NULL;

ChartCommandArchive* ChartCommandArchive::New() const {
  return new ChartCommandArchive;
}

void ChartCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_info()) {
      if (info_ != NULL) info_->::TSP::Reference::Clear();
    }
    original_dirty_state_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // required .TSP.Reference info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_original_dirty_state;
        break;
      }

      // optional bool original_dirty_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_original_dirty_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &original_dirty_state_)));
          set_has_original_dirty_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChartCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  // optional bool original_dirty_state = 3;
  if (has_original_dirty_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->original_dirty_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  // optional bool original_dirty_state = 3;
  if (has_original_dirty_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->original_dirty_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional bool original_dirty_state = 3;
    if (has_original_dirty_state()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartCommandArchive::MergeFrom(const ChartCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_info()) {
      mutable_info()->::TSP::Reference::MergeFrom(from.info());
    }
    if (from.has_original_dirty_state()) {
      set_original_dirty_state(from.original_dirty_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartCommandArchive::CopyFrom(const ChartCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void ChartCommandArchive::Swap(ChartCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(info_, other->info_);
    std::swap(original_dirty_state_, other->original_dirty_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChartCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartCommandArchive_descriptor_;
  metadata.reflection = ChartCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandReplaceGridValuesArchive_ValueRow::kValueFieldNumber;
#endif  // !_MSC_VER

CommandReplaceGridValuesArchive_ValueRow::CommandReplaceGridValuesArchive_ValueRow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandReplaceGridValuesArchive_ValueRow::InitAsDefaultInstance() {
}

CommandReplaceGridValuesArchive_ValueRow::CommandReplaceGridValuesArchive_ValueRow(const CommandReplaceGridValuesArchive_ValueRow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandReplaceGridValuesArchive_ValueRow::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandReplaceGridValuesArchive_ValueRow::~CommandReplaceGridValuesArchive_ValueRow() {
  SharedDtor();
}

void CommandReplaceGridValuesArchive_ValueRow::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommandReplaceGridValuesArchive_ValueRow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandReplaceGridValuesArchive_ValueRow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandReplaceGridValuesArchive_ValueRow_descriptor_;
}

const CommandReplaceGridValuesArchive_ValueRow& CommandReplaceGridValuesArchive_ValueRow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHCommandArchives_2eproto();
  return *default_instance_;
}

CommandReplaceGridValuesArchive_ValueRow* CommandReplaceGridValuesArchive_ValueRow::default_instance_ = NULL;

CommandReplaceGridValuesArchive_ValueRow* CommandReplaceGridValuesArchive_ValueRow::New() const {
  return new CommandReplaceGridValuesArchive_ValueRow;
}

void CommandReplaceGridValuesArchive_ValueRow::Clear() {
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandReplaceGridValuesArchive_ValueRow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(9)) goto parse_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandReplaceGridValuesArchive_ValueRow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated double value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandReplaceGridValuesArchive_ValueRow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated double value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandReplaceGridValuesArchive_ValueRow::ByteSize() const {
  int total_size = 0;

  // repeated double value = 1;
  {
    int data_size = 0;
    data_size = 8 * this->value_size();
    total_size += 1 * this->value_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandReplaceGridValuesArchive_ValueRow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandReplaceGridValuesArchive_ValueRow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandReplaceGridValuesArchive_ValueRow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandReplaceGridValuesArchive_ValueRow::MergeFrom(const CommandReplaceGridValuesArchive_ValueRow& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandReplaceGridValuesArchive_ValueRow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandReplaceGridValuesArchive_ValueRow::CopyFrom(const CommandReplaceGridValuesArchive_ValueRow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandReplaceGridValuesArchive_ValueRow::IsInitialized() const {

  return true;
}

void CommandReplaceGridValuesArchive_ValueRow::Swap(CommandReplaceGridValuesArchive_ValueRow* other) {
  if (other != this) {
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandReplaceGridValuesArchive_ValueRow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandReplaceGridValuesArchive_ValueRow_descriptor_;
  metadata.reflection = CommandReplaceGridValuesArchive_ValueRow_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CommandReplaceGridValuesArchive::kSuperFieldNumber;
const int CommandReplaceGridValuesArchive::kRowindexFieldNumber;
const int CommandReplaceGridValuesArchive::kColumnindexFieldNumber;
const int CommandReplaceGridValuesArchive::kOldDataRowsFieldNumber;
const int CommandReplaceGridValuesArchive::kNewDataRowsFieldNumber;
const int CommandReplaceGridValuesArchive::kOldRowNamesFieldNumber;
const int CommandReplaceGridValuesArchive::kNewRowNamesFieldNumber;
const int CommandReplaceGridValuesArchive::kOldColNamesFieldNumber;
const int CommandReplaceGridValuesArchive::kNewColNamesFieldNumber;
const int CommandReplaceGridValuesArchive::kRowsToAddFieldNumber;
const int CommandReplaceGridValuesArchive::kColsToAddFieldNumber;
#endif  // !_MSC_VER

CommandReplaceGridValuesArchive::CommandReplaceGridValuesArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandReplaceGridValuesArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSCH::ChartCommandArchive*>(&::TSCH::ChartCommandArchive::default_instance());
}

CommandReplaceGridValuesArchive::CommandReplaceGridValuesArchive(const CommandReplaceGridValuesArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandReplaceGridValuesArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  rowindex_ = 0u;
  columnindex_ = 0u;
  rows_to_add_ = 0u;
  cols_to_add_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandReplaceGridValuesArchive::~CommandReplaceGridValuesArchive() {
  SharedDtor();
}

void CommandReplaceGridValuesArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void CommandReplaceGridValuesArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandReplaceGridValuesArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandReplaceGridValuesArchive_descriptor_;
}

const CommandReplaceGridValuesArchive& CommandReplaceGridValuesArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHCommandArchives_2eproto();
  return *default_instance_;
}

CommandReplaceGridValuesArchive* CommandReplaceGridValuesArchive::default_instance_ = NULL;

CommandReplaceGridValuesArchive* CommandReplaceGridValuesArchive::New() const {
  return new CommandReplaceGridValuesArchive;
}

void CommandReplaceGridValuesArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSCH::ChartCommandArchive::Clear();
    }
    rowindex_ = 0u;
    columnindex_ = 0u;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    rows_to_add_ = 0u;
    cols_to_add_ = 0u;
  }
  old_data_rows_.Clear();
  new_data_rows_.Clear();
  old_row_names_.Clear();
  new_row_names_.Clear();
  old_col_names_.Clear();
  new_col_names_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandReplaceGridValuesArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rowindex;
        break;
      }

      // required uint32 rowindex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rowindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rowindex_)));
          set_has_rowindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_columnindex;
        break;
      }

      // required uint32 columnindex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_columnindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &columnindex_)));
          set_has_columnindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_old_data_rows;
        break;
      }

      // repeated .TSCH.CommandReplaceGridValuesArchive.ValueRow old_data_rows = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_data_rows:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_old_data_rows()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_old_data_rows;
        if (input->ExpectTag(42)) goto parse_new_data_rows;
        break;
      }

      // repeated .TSCH.CommandReplaceGridValuesArchive.ValueRow new_data_rows = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_data_rows:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_new_data_rows()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_new_data_rows;
        if (input->ExpectTag(50)) goto parse_old_row_names;
        break;
      }

      // repeated string old_row_names = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_row_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_old_row_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->old_row_names(this->old_row_names_size() - 1).data(),
            this->old_row_names(this->old_row_names_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_old_row_names;
        if (input->ExpectTag(58)) goto parse_new_row_names;
        break;
      }

      // repeated string new_row_names = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_row_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_new_row_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->new_row_names(this->new_row_names_size() - 1).data(),
            this->new_row_names(this->new_row_names_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_new_row_names;
        if (input->ExpectTag(66)) goto parse_old_col_names;
        break;
      }

      // repeated string old_col_names = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_col_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_old_col_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->old_col_names(this->old_col_names_size() - 1).data(),
            this->old_col_names(this->old_col_names_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_old_col_names;
        if (input->ExpectTag(74)) goto parse_new_col_names;
        break;
      }

      // repeated string new_col_names = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_col_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_new_col_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->new_col_names(this->new_col_names_size() - 1).data(),
            this->new_col_names(this->new_col_names_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_new_col_names;
        if (input->ExpectTag(80)) goto parse_rows_to_add;
        break;
      }

      // optional uint32 rows_to_add = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rows_to_add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rows_to_add_)));
          set_has_rows_to_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_cols_to_add;
        break;
      }

      // optional uint32 cols_to_add = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cols_to_add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cols_to_add_)));
          set_has_cols_to_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandReplaceGridValuesArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSCH.ChartCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required uint32 rowindex = 2;
  if (has_rowindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rowindex(), output);
  }

  // required uint32 columnindex = 3;
  if (has_columnindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->columnindex(), output);
  }

  // repeated .TSCH.CommandReplaceGridValuesArchive.ValueRow old_data_rows = 4;
  for (int i = 0; i < this->old_data_rows_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->old_data_rows(i), output);
  }

  // repeated .TSCH.CommandReplaceGridValuesArchive.ValueRow new_data_rows = 5;
  for (int i = 0; i < this->new_data_rows_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->new_data_rows(i), output);
  }

  // repeated string old_row_names = 6;
  for (int i = 0; i < this->old_row_names_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->old_row_names(i).data(), this->old_row_names(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->old_row_names(i), output);
  }

  // repeated string new_row_names = 7;
  for (int i = 0; i < this->new_row_names_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->new_row_names(i).data(), this->new_row_names(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->new_row_names(i), output);
  }

  // repeated string old_col_names = 8;
  for (int i = 0; i < this->old_col_names_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->old_col_names(i).data(), this->old_col_names(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->old_col_names(i), output);
  }

  // repeated string new_col_names = 9;
  for (int i = 0; i < this->new_col_names_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->new_col_names(i).data(), this->new_col_names(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->new_col_names(i), output);
  }

  // optional uint32 rows_to_add = 10;
  if (has_rows_to_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->rows_to_add(), output);
  }

  // optional uint32 cols_to_add = 11;
  if (has_cols_to_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->cols_to_add(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandReplaceGridValuesArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSCH.ChartCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required uint32 rowindex = 2;
  if (has_rowindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rowindex(), target);
  }

  // required uint32 columnindex = 3;
  if (has_columnindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->columnindex(), target);
  }

  // repeated .TSCH.CommandReplaceGridValuesArchive.ValueRow old_data_rows = 4;
  for (int i = 0; i < this->old_data_rows_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->old_data_rows(i), target);
  }

  // repeated .TSCH.CommandReplaceGridValuesArchive.ValueRow new_data_rows = 5;
  for (int i = 0; i < this->new_data_rows_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->new_data_rows(i), target);
  }

  // repeated string old_row_names = 6;
  for (int i = 0; i < this->old_row_names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->old_row_names(i).data(), this->old_row_names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->old_row_names(i), target);
  }

  // repeated string new_row_names = 7;
  for (int i = 0; i < this->new_row_names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_row_names(i).data(), this->new_row_names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->new_row_names(i), target);
  }

  // repeated string old_col_names = 8;
  for (int i = 0; i < this->old_col_names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->old_col_names(i).data(), this->old_col_names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->old_col_names(i), target);
  }

  // repeated string new_col_names = 9;
  for (int i = 0; i < this->new_col_names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_col_names(i).data(), this->new_col_names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->new_col_names(i), target);
  }

  // optional uint32 rows_to_add = 10;
  if (has_rows_to_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->rows_to_add(), target);
  }

  // optional uint32 cols_to_add = 11;
  if (has_cols_to_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->cols_to_add(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandReplaceGridValuesArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSCH.ChartCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required uint32 rowindex = 2;
    if (has_rowindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rowindex());
    }

    // required uint32 columnindex = 3;
    if (has_columnindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->columnindex());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional uint32 rows_to_add = 10;
    if (has_rows_to_add()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rows_to_add());
    }

    // optional uint32 cols_to_add = 11;
    if (has_cols_to_add()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cols_to_add());
    }

  }
  // repeated .TSCH.CommandReplaceGridValuesArchive.ValueRow old_data_rows = 4;
  total_size += 1 * this->old_data_rows_size();
  for (int i = 0; i < this->old_data_rows_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->old_data_rows(i));
  }

  // repeated .TSCH.CommandReplaceGridValuesArchive.ValueRow new_data_rows = 5;
  total_size += 1 * this->new_data_rows_size();
  for (int i = 0; i < this->new_data_rows_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->new_data_rows(i));
  }

  // repeated string old_row_names = 6;
  total_size += 1 * this->old_row_names_size();
  for (int i = 0; i < this->old_row_names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->old_row_names(i));
  }

  // repeated string new_row_names = 7;
  total_size += 1 * this->new_row_names_size();
  for (int i = 0; i < this->new_row_names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->new_row_names(i));
  }

  // repeated string old_col_names = 8;
  total_size += 1 * this->old_col_names_size();
  for (int i = 0; i < this->old_col_names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->old_col_names(i));
  }

  // repeated string new_col_names = 9;
  total_size += 1 * this->new_col_names_size();
  for (int i = 0; i < this->new_col_names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->new_col_names(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandReplaceGridValuesArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandReplaceGridValuesArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandReplaceGridValuesArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandReplaceGridValuesArchive::MergeFrom(const CommandReplaceGridValuesArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  old_data_rows_.MergeFrom(from.old_data_rows_);
  new_data_rows_.MergeFrom(from.new_data_rows_);
  old_row_names_.MergeFrom(from.old_row_names_);
  new_row_names_.MergeFrom(from.new_row_names_);
  old_col_names_.MergeFrom(from.old_col_names_);
  new_col_names_.MergeFrom(from.new_col_names_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from.super());
    }
    if (from.has_rowindex()) {
      set_rowindex(from.rowindex());
    }
    if (from.has_columnindex()) {
      set_columnindex(from.columnindex());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_rows_to_add()) {
      set_rows_to_add(from.rows_to_add());
    }
    if (from.has_cols_to_add()) {
      set_cols_to_add(from.cols_to_add());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandReplaceGridValuesArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandReplaceGridValuesArchive::CopyFrom(const CommandReplaceGridValuesArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandReplaceGridValuesArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandReplaceGridValuesArchive::Swap(CommandReplaceGridValuesArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(rowindex_, other->rowindex_);
    std::swap(columnindex_, other->columnindex_);
    old_data_rows_.Swap(&other->old_data_rows_);
    new_data_rows_.Swap(&other->new_data_rows_);
    old_row_names_.Swap(&other->old_row_names_);
    new_row_names_.Swap(&other->new_row_names_);
    old_col_names_.Swap(&other->old_col_names_);
    new_col_names_.Swap(&other->new_col_names_);
    std::swap(rows_to_add_, other->rows_to_add_);
    std::swap(cols_to_add_, other->cols_to_add_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandReplaceGridValuesArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandReplaceGridValuesArchive_descriptor_;
  metadata.reflection = CommandReplaceGridValuesArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandReplaceThemePresetArchive_StyleAndIdentifierPair::kStyleFieldNumber;
const int CommandReplaceThemePresetArchive_StyleAndIdentifierPair::kIdentifierFieldNumber;
#endif  // !_MSC_VER

CommandReplaceThemePresetArchive_StyleAndIdentifierPair::CommandReplaceThemePresetArchive_StyleAndIdentifierPair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::InitAsDefaultInstance() {
  style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandReplaceThemePresetArchive_StyleAndIdentifierPair::CommandReplaceThemePresetArchive_StyleAndIdentifierPair(const CommandReplaceThemePresetArchive_StyleAndIdentifierPair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::SharedCtor() {
  _cached_size_ = 0;
  style_ = NULL;
  identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandReplaceThemePresetArchive_StyleAndIdentifierPair::~CommandReplaceThemePresetArchive_StyleAndIdentifierPair() {
  SharedDtor();
}

void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::SharedDtor() {
  if (identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete identifier_;
  }
  if (this != default_instance_) {
    delete style_;
  }
}

void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandReplaceThemePresetArchive_StyleAndIdentifierPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandReplaceThemePresetArchive_StyleAndIdentifierPair_descriptor_;
}

const CommandReplaceThemePresetArchive_StyleAndIdentifierPair& CommandReplaceThemePresetArchive_StyleAndIdentifierPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHCommandArchives_2eproto();
  return *default_instance_;
}

CommandReplaceThemePresetArchive_StyleAndIdentifierPair* CommandReplaceThemePresetArchive_StyleAndIdentifierPair::default_instance_ = NULL;

CommandReplaceThemePresetArchive_StyleAndIdentifierPair* CommandReplaceThemePresetArchive_StyleAndIdentifierPair::New() const {
  return new CommandReplaceThemePresetArchive_StyleAndIdentifierPair;
}

void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_style()) {
      if (style_ != NULL) style_->::TSP::Reference::Clear();
    }
    if (has_identifier()) {
      if (identifier_ != &::google::protobuf::internal::kEmptyString) {
        identifier_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandReplaceThemePresetArchive_StyleAndIdentifierPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSP.Reference style = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_identifier;
        break;
      }

      // required string identifier = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_identifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->identifier().data(), this->identifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSP.Reference style = 1;
  if (has_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->style(), output);
  }

  // required string identifier = 2;
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->identifier().data(), this->identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->identifier(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandReplaceThemePresetArchive_StyleAndIdentifierPair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSP.Reference style = 1;
  if (has_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->style(), target);
  }

  // required string identifier = 2;
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->identifier().data(), this->identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->identifier(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandReplaceThemePresetArchive_StyleAndIdentifierPair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSP.Reference style = 1;
    if (has_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->style());
    }

    // required string identifier = 2;
    if (has_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->identifier());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandReplaceThemePresetArchive_StyleAndIdentifierPair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandReplaceThemePresetArchive_StyleAndIdentifierPair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::MergeFrom(const CommandReplaceThemePresetArchive_StyleAndIdentifierPair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_style()) {
      mutable_style()->::TSP::Reference::MergeFrom(from.style());
    }
    if (from.has_identifier()) {
      set_identifier(from.identifier());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::CopyFrom(const CommandReplaceThemePresetArchive_StyleAndIdentifierPair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandReplaceThemePresetArchive_StyleAndIdentifierPair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_style()) {
    if (!this->style().IsInitialized()) return false;
  }
  return true;
}

void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::Swap(CommandReplaceThemePresetArchive_StyleAndIdentifierPair* other) {
  if (other != this) {
    std::swap(style_, other->style_);
    std::swap(identifier_, other->identifier_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandReplaceThemePresetArchive_StyleAndIdentifierPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandReplaceThemePresetArchive_StyleAndIdentifierPair_descriptor_;
  metadata.reflection = CommandReplaceThemePresetArchive_StyleAndIdentifierPair_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CommandReplaceThemePresetArchive::kSuperFieldNumber;
const int CommandReplaceThemePresetArchive::kThemeFieldNumber;
const int CommandReplaceThemePresetArchive::kOldPresetFieldNumber;
const int CommandReplaceThemePresetArchive::kNewPresetFieldNumber;
const int CommandReplaceThemePresetArchive::kIdentifiersFieldNumber;
const int CommandReplaceThemePresetArchive::kOldPresetIndexFieldNumber;
#endif  // !_MSC_VER

CommandReplaceThemePresetArchive::CommandReplaceThemePresetArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandReplaceThemePresetArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  theme_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  old_preset_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  new_preset_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandReplaceThemePresetArchive::CommandReplaceThemePresetArchive(const CommandReplaceThemePresetArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandReplaceThemePresetArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  theme_ = NULL;
  old_preset_ = NULL;
  new_preset_ = NULL;
  old_preset_index_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandReplaceThemePresetArchive::~CommandReplaceThemePresetArchive() {
  SharedDtor();
}

void CommandReplaceThemePresetArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete theme_;
    delete old_preset_;
    delete new_preset_;
  }
}

void CommandReplaceThemePresetArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandReplaceThemePresetArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandReplaceThemePresetArchive_descriptor_;
}

const CommandReplaceThemePresetArchive& CommandReplaceThemePresetArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHCommandArchives_2eproto();
  return *default_instance_;
}

CommandReplaceThemePresetArchive* CommandReplaceThemePresetArchive::default_instance_ = NULL;

CommandReplaceThemePresetArchive* CommandReplaceThemePresetArchive::New() const {
  return new CommandReplaceThemePresetArchive;
}

void CommandReplaceThemePresetArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_theme()) {
      if (theme_ != NULL) theme_->::TSP::Reference::Clear();
    }
    if (has_old_preset()) {
      if (old_preset_ != NULL) old_preset_->::TSP::Reference::Clear();
    }
    if (has_new_preset()) {
      if (new_preset_ != NULL) new_preset_->::TSP::Reference::Clear();
    }
    old_preset_index_ = GOOGLE_ULONGLONG(0);
  }
  identifiers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandReplaceThemePresetArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_theme;
        break;
      }

      // required .TSP.Reference theme = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_theme:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_theme()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_old_preset;
        break;
      }

      // optional .TSP.Reference old_preset = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_preset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_preset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_new_preset;
        break;
      }

      // optional .TSP.Reference new_preset = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_preset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_preset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_identifiers;
        break;
      }

      // repeated .TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair identifiers = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_identifiers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_identifiers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_identifiers;
        if (input->ExpectTag(48)) goto parse_old_preset_index;
        break;
      }

      // optional uint64 old_preset_index = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_preset_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &old_preset_index_)));
          set_has_old_preset_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandReplaceThemePresetArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference theme = 2;
  if (has_theme()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->theme(), output);
  }

  // optional .TSP.Reference old_preset = 3;
  if (has_old_preset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->old_preset(), output);
  }

  // optional .TSP.Reference new_preset = 4;
  if (has_new_preset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->new_preset(), output);
  }

  // repeated .TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair identifiers = 5;
  for (int i = 0; i < this->identifiers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->identifiers(i), output);
  }

  // optional uint64 old_preset_index = 6;
  if (has_old_preset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->old_preset_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandReplaceThemePresetArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference theme = 2;
  if (has_theme()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->theme(), target);
  }

  // optional .TSP.Reference old_preset = 3;
  if (has_old_preset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->old_preset(), target);
  }

  // optional .TSP.Reference new_preset = 4;
  if (has_new_preset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->new_preset(), target);
  }

  // repeated .TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair identifiers = 5;
  for (int i = 0; i < this->identifiers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->identifiers(i), target);
  }

  // optional uint64 old_preset_index = 6;
  if (has_old_preset_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->old_preset_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandReplaceThemePresetArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference theme = 2;
    if (has_theme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->theme());
    }

    // optional .TSP.Reference old_preset = 3;
    if (has_old_preset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_preset());
    }

    // optional .TSP.Reference new_preset = 4;
    if (has_new_preset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_preset());
    }

    // optional uint64 old_preset_index = 6;
    if (has_old_preset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->old_preset_index());
    }

  }
  // repeated .TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair identifiers = 5;
  total_size += 1 * this->identifiers_size();
  for (int i = 0; i < this->identifiers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->identifiers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandReplaceThemePresetArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandReplaceThemePresetArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandReplaceThemePresetArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandReplaceThemePresetArchive::MergeFrom(const CommandReplaceThemePresetArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  identifiers_.MergeFrom(from.identifiers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_theme()) {
      mutable_theme()->::TSP::Reference::MergeFrom(from.theme());
    }
    if (from.has_old_preset()) {
      mutable_old_preset()->::TSP::Reference::MergeFrom(from.old_preset());
    }
    if (from.has_new_preset()) {
      mutable_new_preset()->::TSP::Reference::MergeFrom(from.new_preset());
    }
    if (from.has_old_preset_index()) {
      set_old_preset_index(from.old_preset_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandReplaceThemePresetArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandReplaceThemePresetArchive::CopyFrom(const CommandReplaceThemePresetArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandReplaceThemePresetArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_theme()) {
    if (!this->theme().IsInitialized()) return false;
  }
  if (has_old_preset()) {
    if (!this->old_preset().IsInitialized()) return false;
  }
  if (has_new_preset()) {
    if (!this->new_preset().IsInitialized()) return false;
  }
  for (int i = 0; i < identifiers_size(); i++) {
    if (!this->identifiers(i).IsInitialized()) return false;
  }
  return true;
}

void CommandReplaceThemePresetArchive::Swap(CommandReplaceThemePresetArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(theme_, other->theme_);
    std::swap(old_preset_, other->old_preset_);
    std::swap(new_preset_, other->new_preset_);
    identifiers_.Swap(&other->identifiers_);
    std::swap(old_preset_index_, other->old_preset_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandReplaceThemePresetArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandReplaceThemePresetArchive_descriptor_;
  metadata.reflection = CommandReplaceThemePresetArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandInvalidateWPCaches::kSuperFieldNumber;
#endif  // !_MSC_VER

CommandInvalidateWPCaches::CommandInvalidateWPCaches()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandInvalidateWPCaches::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
}

CommandInvalidateWPCaches::CommandInvalidateWPCaches(const CommandInvalidateWPCaches& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandInvalidateWPCaches::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandInvalidateWPCaches::~CommandInvalidateWPCaches() {
  SharedDtor();
}

void CommandInvalidateWPCaches::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void CommandInvalidateWPCaches::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandInvalidateWPCaches::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandInvalidateWPCaches_descriptor_;
}

const CommandInvalidateWPCaches& CommandInvalidateWPCaches::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHCommandArchives_2eproto();
  return *default_instance_;
}

CommandInvalidateWPCaches* CommandInvalidateWPCaches::default_instance_ = NULL;

CommandInvalidateWPCaches* CommandInvalidateWPCaches::New() const {
  return new CommandInvalidateWPCaches;
}

void CommandInvalidateWPCaches::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandInvalidateWPCaches::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandInvalidateWPCaches::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandInvalidateWPCaches::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandInvalidateWPCaches::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandInvalidateWPCaches::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandInvalidateWPCaches* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandInvalidateWPCaches*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandInvalidateWPCaches::MergeFrom(const CommandInvalidateWPCaches& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandInvalidateWPCaches::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandInvalidateWPCaches::CopyFrom(const CommandInvalidateWPCaches& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandInvalidateWPCaches::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandInvalidateWPCaches::Swap(CommandInvalidateWPCaches* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandInvalidateWPCaches::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandInvalidateWPCaches_descriptor_;
  metadata.reflection = CommandInvalidateWPCaches_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TSCH

// @@protoc_insertion_point(global_scope)
