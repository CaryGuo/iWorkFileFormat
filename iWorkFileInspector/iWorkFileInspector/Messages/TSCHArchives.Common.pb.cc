// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSCHArchives.Common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TSCHArchives.Common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace TSCH {

namespace {

const ::google::protobuf::Descriptor* SparseReferenceArrayArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SparseReferenceArrayArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* SparseReferenceArrayArchive_Entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SparseReferenceArrayArchive_Entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* RectArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RectArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChartsNSNumberDoubleArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartsNSNumberDoubleArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChartsNSArrayOfNSNumberDoubleArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartsNSArrayOfNSNumberDoubleArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* DEPRECATEDChart3DFillArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DEPRECATEDChart3DFillArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChartStyleArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartStyleArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChartNonStyleArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartNonStyleArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* LegendStyleArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LegendStyleArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* LegendNonStyleArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LegendNonStyleArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChartAxisStyleArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartAxisStyleArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChartAxisNonStyleArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartAxisNonStyleArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChartSeriesStyleArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartSeriesStyleArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChartSeriesNonStyleArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartSeriesNonStyleArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ChartType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AxisType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ScatterFormat_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SeriesDirection_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NumberValueType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NegativeNumberStyle_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FractionAccuracy_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_TSCHArchives_2eCommon_2eproto() {
  protobuf_AddDesc_TSCHArchives_2eCommon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TSCHArchives.Common.proto");
  GOOGLE_CHECK(file != NULL);
  SparseReferenceArrayArchive_descriptor_ = file->message_type(0);
  static const int SparseReferenceArrayArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseReferenceArrayArchive, num_entries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseReferenceArrayArchive, entries_),
  };
  SparseReferenceArrayArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SparseReferenceArrayArchive_descriptor_,
      SparseReferenceArrayArchive::default_instance_,
      SparseReferenceArrayArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseReferenceArrayArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseReferenceArrayArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SparseReferenceArrayArchive));
  SparseReferenceArrayArchive_Entry_descriptor_ = SparseReferenceArrayArchive_descriptor_->nested_type(0);
  static const int SparseReferenceArrayArchive_Entry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseReferenceArrayArchive_Entry, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseReferenceArrayArchive_Entry, value_),
  };
  SparseReferenceArrayArchive_Entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SparseReferenceArrayArchive_Entry_descriptor_,
      SparseReferenceArrayArchive_Entry::default_instance_,
      SparseReferenceArrayArchive_Entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseReferenceArrayArchive_Entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseReferenceArrayArchive_Entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SparseReferenceArrayArchive_Entry));
  RectArchive_descriptor_ = file->message_type(1);
  static const int RectArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RectArchive, origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RectArchive, size_),
  };
  RectArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RectArchive_descriptor_,
      RectArchive::default_instance_,
      RectArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RectArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RectArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RectArchive));
  ChartsNSNumberDoubleArchive_descriptor_ = file->message_type(2);
  static const int ChartsNSNumberDoubleArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartsNSNumberDoubleArchive, number_archive_),
  };
  ChartsNSNumberDoubleArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartsNSNumberDoubleArchive_descriptor_,
      ChartsNSNumberDoubleArchive::default_instance_,
      ChartsNSNumberDoubleArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartsNSNumberDoubleArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartsNSNumberDoubleArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartsNSNumberDoubleArchive));
  ChartsNSArrayOfNSNumberDoubleArchive_descriptor_ = file->message_type(3);
  static const int ChartsNSArrayOfNSNumberDoubleArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartsNSArrayOfNSNumberDoubleArchive, numbers_),
  };
  ChartsNSArrayOfNSNumberDoubleArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartsNSArrayOfNSNumberDoubleArchive_descriptor_,
      ChartsNSArrayOfNSNumberDoubleArchive::default_instance_,
      ChartsNSArrayOfNSNumberDoubleArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartsNSArrayOfNSNumberDoubleArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartsNSArrayOfNSNumberDoubleArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartsNSArrayOfNSNumberDoubleArchive));
  DEPRECATEDChart3DFillArchive_descriptor_ = file->message_type(4);
  static const int DEPRECATEDChart3DFillArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DEPRECATEDChart3DFillArchive, fill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DEPRECATEDChart3DFillArchive, lightingmodel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DEPRECATEDChart3DFillArchive, textureset_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DEPRECATEDChart3DFillArchive, fill_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DEPRECATEDChart3DFillArchive, series_index_),
  };
  DEPRECATEDChart3DFillArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DEPRECATEDChart3DFillArchive_descriptor_,
      DEPRECATEDChart3DFillArchive::default_instance_,
      DEPRECATEDChart3DFillArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DEPRECATEDChart3DFillArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DEPRECATEDChart3DFillArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DEPRECATEDChart3DFillArchive));
  ChartStyleArchive_descriptor_ = file->message_type(5);
  static const int ChartStyleArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, super_),
  };
  ChartStyleArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartStyleArchive_descriptor_,
      ChartStyleArchive::default_instance_,
      ChartStyleArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartStyleArchive));
  ChartNonStyleArchive_descriptor_ = file->message_type(6);
  static const int ChartNonStyleArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartNonStyleArchive, super_),
  };
  ChartNonStyleArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartNonStyleArchive_descriptor_,
      ChartNonStyleArchive::default_instance_,
      ChartNonStyleArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartNonStyleArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartNonStyleArchive, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartNonStyleArchive, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartNonStyleArchive));
  LegendStyleArchive_descriptor_ = file->message_type(7);
  static const int LegendStyleArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegendStyleArchive, super_),
  };
  LegendStyleArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LegendStyleArchive_descriptor_,
      LegendStyleArchive::default_instance_,
      LegendStyleArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegendStyleArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegendStyleArchive, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegendStyleArchive, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LegendStyleArchive));
  LegendNonStyleArchive_descriptor_ = file->message_type(8);
  static const int LegendNonStyleArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegendNonStyleArchive, super_),
  };
  LegendNonStyleArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LegendNonStyleArchive_descriptor_,
      LegendNonStyleArchive::default_instance_,
      LegendNonStyleArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegendNonStyleArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegendNonStyleArchive, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegendNonStyleArchive, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LegendNonStyleArchive));
  ChartAxisStyleArchive_descriptor_ = file->message_type(9);
  static const int ChartAxisStyleArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, super_),
  };
  ChartAxisStyleArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartAxisStyleArchive_descriptor_,
      ChartAxisStyleArchive::default_instance_,
      ChartAxisStyleArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartAxisStyleArchive));
  ChartAxisNonStyleArchive_descriptor_ = file->message_type(10);
  static const int ChartAxisNonStyleArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisNonStyleArchive, super_),
  };
  ChartAxisNonStyleArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartAxisNonStyleArchive_descriptor_,
      ChartAxisNonStyleArchive::default_instance_,
      ChartAxisNonStyleArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisNonStyleArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisNonStyleArchive, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisNonStyleArchive, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartAxisNonStyleArchive));
  ChartSeriesStyleArchive_descriptor_ = file->message_type(11);
  static const int ChartSeriesStyleArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, super_),
  };
  ChartSeriesStyleArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartSeriesStyleArchive_descriptor_,
      ChartSeriesStyleArchive::default_instance_,
      ChartSeriesStyleArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartSeriesStyleArchive));
  ChartSeriesNonStyleArchive_descriptor_ = file->message_type(12);
  static const int ChartSeriesNonStyleArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, super_),
  };
  ChartSeriesNonStyleArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartSeriesNonStyleArchive_descriptor_,
      ChartSeriesNonStyleArchive::default_instance_,
      ChartSeriesNonStyleArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartSeriesNonStyleArchive));
  ChartType_descriptor_ = file->enum_type(0);
  AxisType_descriptor_ = file->enum_type(1);
  ScatterFormat_descriptor_ = file->enum_type(2);
  SeriesDirection_descriptor_ = file->enum_type(3);
  NumberValueType_descriptor_ = file->enum_type(4);
  NegativeNumberStyle_descriptor_ = file->enum_type(5);
  FractionAccuracy_descriptor_ = file->enum_type(6);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TSCHArchives_2eCommon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SparseReferenceArrayArchive_descriptor_, &SparseReferenceArrayArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SparseReferenceArrayArchive_Entry_descriptor_, &SparseReferenceArrayArchive_Entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RectArchive_descriptor_, &RectArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartsNSNumberDoubleArchive_descriptor_, &ChartsNSNumberDoubleArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartsNSArrayOfNSNumberDoubleArchive_descriptor_, &ChartsNSArrayOfNSNumberDoubleArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DEPRECATEDChart3DFillArchive_descriptor_, &DEPRECATEDChart3DFillArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartStyleArchive_descriptor_, &ChartStyleArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartNonStyleArchive_descriptor_, &ChartNonStyleArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LegendStyleArchive_descriptor_, &LegendStyleArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LegendNonStyleArchive_descriptor_, &LegendNonStyleArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartAxisStyleArchive_descriptor_, &ChartAxisStyleArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartAxisNonStyleArchive_descriptor_, &ChartAxisNonStyleArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartSeriesStyleArchive_descriptor_, &ChartSeriesStyleArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartSeriesNonStyleArchive_descriptor_, &ChartSeriesNonStyleArchive::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TSCHArchives_2eCommon_2eproto() {
  delete SparseReferenceArrayArchive::default_instance_;
  delete SparseReferenceArrayArchive_reflection_;
  delete SparseReferenceArrayArchive_Entry::default_instance_;
  delete SparseReferenceArrayArchive_Entry_reflection_;
  delete RectArchive::default_instance_;
  delete RectArchive_reflection_;
  delete ChartsNSNumberDoubleArchive::default_instance_;
  delete ChartsNSNumberDoubleArchive_reflection_;
  delete ChartsNSArrayOfNSNumberDoubleArchive::default_instance_;
  delete ChartsNSArrayOfNSNumberDoubleArchive_reflection_;
  delete DEPRECATEDChart3DFillArchive::default_instance_;
  delete DEPRECATEDChart3DFillArchive_reflection_;
  delete ChartStyleArchive::default_instance_;
  delete ChartStyleArchive_reflection_;
  delete ChartNonStyleArchive::default_instance_;
  delete ChartNonStyleArchive_reflection_;
  delete LegendStyleArchive::default_instance_;
  delete LegendStyleArchive_reflection_;
  delete LegendNonStyleArchive::default_instance_;
  delete LegendNonStyleArchive_reflection_;
  delete ChartAxisStyleArchive::default_instance_;
  delete ChartAxisStyleArchive_reflection_;
  delete ChartAxisNonStyleArchive::default_instance_;
  delete ChartAxisNonStyleArchive_reflection_;
  delete ChartSeriesStyleArchive::default_instance_;
  delete ChartSeriesStyleArchive_reflection_;
  delete ChartSeriesNonStyleArchive::default_instance_;
  delete ChartSeriesNonStyleArchive_reflection_;
}

void protobuf_AddDesc_TSCHArchives_2eCommon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::TSP::protobuf_AddDesc_TSPMessages_2eproto();
  ::TSK::protobuf_AddDesc_TSKArchives_2eproto();
  ::TSD::protobuf_AddDesc_TSDArchives_2eproto();
  ::TSS::protobuf_AddDesc_TSSArchives_2eproto();
  ::TSCH::protobuf_AddDesc_TSCH3DArchives_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031TSCHArchives.Common.proto\022\004TSCH\032\021TSPMe"
    "ssages.proto\032\021TSKArchives.proto\032\021TSDArch"
    "ives.proto\032\021TSSArchives.proto\032\024TSCH3DArc"
    "hives.proto\"\243\001\n\033SparseReferenceArrayArch"
    "ive\022\023\n\013num_entries\030\001 \002(\r\0228\n\007entries\030\002 \003("
    "\0132\'.TSCH.SparseReferenceArrayArchive.Ent"
    "ry\0325\n\005Entry\022\r\n\005index\030\001 \002(\r\022\035\n\005value\030\002 \002("
    "\0132\016.TSP.Reference\"B\n\013RectArchive\022\032\n\006orig"
    "in\030\001 \002(\0132\n.TSP.Point\022\027\n\004size\030\002 \002(\0132\t.TSP"
    ".Size\"5\n\033ChartsNSNumberDoubleArchive\022\026\n\016"
    "number_archive\030\001 \001(\001\"7\n$ChartsNSArrayOfN"
    "SNumberDoubleArchive\022\017\n\007numbers\030\001 \003(\001\"\320\001"
    "\n\034DEPRECATEDChart3DFillArchive\022\036\n\004fill\030\001"
    " \001(\0132\020.TSD.FillArchive\0228\n\rlightingmodel\030"
    "\002 \001(\0132!.TSCH.Chart3DLightingModelArchive"
    "\022\025\n\rtextureset_id\030\003 \001(\t\022)\n\tfill_type\030\004 \001"
    "(\0162\026.TSCH.FillPropertyType\022\024\n\014series_ind"
    "ex\030\005 \001(\r\"@\n\021ChartStyleArchive\022 \n\005super\030\001"
    " \001(\0132\021.TSS.StyleArchive*\t\010\220N\020\200\200\200\200\002\"C\n\024Ch"
    "artNonStyleArchive\022 \n\005super\030\001 \001(\0132\021.TSS."
    "StyleArchive*\t\010\220N\020\200\200\200\200\002\"A\n\022LegendStyleAr"
    "chive\022 \n\005super\030\001 \001(\0132\021.TSS.StyleArchive*"
    "\t\010\220N\020\200\200\200\200\002\"D\n\025LegendNonStyleArchive\022 \n\005s"
    "uper\030\001 \001(\0132\021.TSS.StyleArchive*\t\010\220N\020\200\200\200\200\002"
    "\"D\n\025ChartAxisStyleArchive\022 \n\005super\030\001 \001(\013"
    "2\021.TSS.StyleArchive*\t\010\220N\020\200\200\200\200\002\"G\n\030ChartA"
    "xisNonStyleArchive\022 \n\005super\030\001 \001(\0132\021.TSS."
    "StyleArchive*\t\010\220N\020\200\200\200\200\002\"F\n\027ChartSeriesSt"
    "yleArchive\022 \n\005super\030\001 \001(\0132\021.TSS.StyleArc"
    "hive*\t\010\220N\020\200\200\200\200\002\"I\n\032ChartSeriesNonStyleAr"
    "chive\022 \n\005super\030\001 \001(\0132\021.TSS.StyleArchive*"
    "\t\010\220N\020\200\200\200\200\002*\372\004\n\tChartType\022\026\n\022undefinedCha"
    "rtType\020\000\022\025\n\021columnChartType2D\020\001\022\022\n\016barCh"
    "artType2D\020\002\022\023\n\017lineChartType2D\020\003\022\023\n\017area"
    "ChartType2D\020\004\022\022\n\016pieChartType2D\020\005\022\034\n\030sta"
    "ckedColumnChartType2D\020\006\022\031\n\025stackedBarCha"
    "rtType2D\020\007\022\032\n\026stackedAreaChartType2D\020\010\022\026"
    "\n\022scatterChartType2D\020\t\022\024\n\020mixedChartType"
    "2D\020\n\022\026\n\022twoAxisChartType2D\020\013\022\025\n\021columnCh"
    "artType3D\020\014\022\022\n\016barChartType3D\020\r\022\023\n\017lineC"
    "hartType3D\020\016\022\023\n\017areaChartType3D\020\017\022\022\n\016pie"
    "ChartType3D\020\020\022\034\n\030stackedColumnChartType3"
    "D\020\021\022\031\n\025stackedBarChartType3D\020\022\022\032\n\026stacke"
    "dAreaChartType3D\020\023\022\036\n\032multiDataColumnCha"
    "rtType2D\020\024\022\033\n\027multiDataBarChartType2D\020\025\022"
    "\025\n\021bubbleChartType2D\020\026\022\037\n\033multiDataScatt"
    "erChartType2D\020\027\022\036\n\032multiDataBubbleChartT"
    "ype2D\020\030*j\n\010AxisType\022\025\n\021axis_type_unknown"
    "\020\000\022\017\n\013axis_type_x\020\001\022\017\n\013axis_type_y\020\002\022\021\n\r"
    "axis_type_pie\020\003\022\022\n\016axis_type_size\020\004*g\n\rS"
    "catterFormat\022\032\n\026scatter_format_unknown\020\000"
    "\022\035\n\031scatter_format_separate_x\020\001\022\033\n\027scatt"
    "er_format_shared_x\020\002*l\n\017SeriesDirection\022"
    "\034\n\030series_direction_unknown\020\000\022\033\n\027series_"
    "direction_by_row\020\001\022\036\n\032series_direction_b"
    "y_column\020\002*\343\001\n\017NumberValueType\022\032\n\026number"
    "ValueTypeDecimal\020\000\022\033\n\027numberValueTypeCur"
    "rency\020\001\022\035\n\031numberValueTypePercentage\020\002\022\035"
    "\n\031numberValueTypeScientific\020\003\022\033\n\027numberV"
    "alueTypeFraction\020\004\022\027\n\023numberValueTypeBas"
    "e\020\005\022#\n\026numberValueTypeUnknown\020\231\370\377\377\377\377\377\377\377\001"
    "*\272\001\n\023NegativeNumberStyle\022\034\n\030negativeNumb"
    "erStyleMinus\020\000\022\032\n\026negativeNumberStyleRed"
    "\020\001\022\"\n\036negativeNumberStyleParentheses\020\002\022("
    "\n$negativeNumberStyleRedAndParentheses\020\003"
    "\022\033\n\027negativeNumberStyleNone\020\004*\353\002\n\020Fracti"
    "onAccuracy\022\037\n\033fractionAccuracyConflictin"
    "g\020\000\022)\n\034fractionAccuracyUpToOneDigit\020\377\377\377\377"
    "\377\377\377\377\377\001\022*\n\035fractionAccuracyUpToTwoDigits\020"
    "\376\377\377\377\377\377\377\377\377\001\022,\n\037fractionAccuracyUpToThreeD"
    "igits\020\375\377\377\377\377\377\377\377\377\001\022\032\n\026fractionAccuracyHalv"
    "es\020\002\022\034\n\030fractionAccuracyQuarters\020\004\022\033\n\027fr"
    "actionAccuracyEighths\020\010\022\036\n\032fractionAccur"
    "acySixteenths\020\020\022\032\n\026fractionAccuracyTenth"
    "s\020\n\022\036\n\032fractionAccuracyHundredths\020d", 2995);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TSCHArchives.Common.proto", &protobuf_RegisterTypes);
  SparseReferenceArrayArchive::default_instance_ = new SparseReferenceArrayArchive();
  SparseReferenceArrayArchive_Entry::default_instance_ = new SparseReferenceArrayArchive_Entry();
  RectArchive::default_instance_ = new RectArchive();
  ChartsNSNumberDoubleArchive::default_instance_ = new ChartsNSNumberDoubleArchive();
  ChartsNSArrayOfNSNumberDoubleArchive::default_instance_ = new ChartsNSArrayOfNSNumberDoubleArchive();
  DEPRECATEDChart3DFillArchive::default_instance_ = new DEPRECATEDChart3DFillArchive();
  ChartStyleArchive::default_instance_ = new ChartStyleArchive();
  ChartNonStyleArchive::default_instance_ = new ChartNonStyleArchive();
  LegendStyleArchive::default_instance_ = new LegendStyleArchive();
  LegendNonStyleArchive::default_instance_ = new LegendNonStyleArchive();
  ChartAxisStyleArchive::default_instance_ = new ChartAxisStyleArchive();
  ChartAxisNonStyleArchive::default_instance_ = new ChartAxisNonStyleArchive();
  ChartSeriesStyleArchive::default_instance_ = new ChartSeriesStyleArchive();
  ChartSeriesNonStyleArchive::default_instance_ = new ChartSeriesNonStyleArchive();
  SparseReferenceArrayArchive::default_instance_->InitAsDefaultInstance();
  SparseReferenceArrayArchive_Entry::default_instance_->InitAsDefaultInstance();
  RectArchive::default_instance_->InitAsDefaultInstance();
  ChartsNSNumberDoubleArchive::default_instance_->InitAsDefaultInstance();
  ChartsNSArrayOfNSNumberDoubleArchive::default_instance_->InitAsDefaultInstance();
  DEPRECATEDChart3DFillArchive::default_instance_->InitAsDefaultInstance();
  ChartStyleArchive::default_instance_->InitAsDefaultInstance();
  ChartNonStyleArchive::default_instance_->InitAsDefaultInstance();
  LegendStyleArchive::default_instance_->InitAsDefaultInstance();
  LegendNonStyleArchive::default_instance_->InitAsDefaultInstance();
  ChartAxisStyleArchive::default_instance_->InitAsDefaultInstance();
  ChartAxisNonStyleArchive::default_instance_->InitAsDefaultInstance();
  ChartSeriesStyleArchive::default_instance_->InitAsDefaultInstance();
  ChartSeriesNonStyleArchive::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TSCHArchives_2eCommon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TSCHArchives_2eCommon_2eproto {
  StaticDescriptorInitializer_TSCHArchives_2eCommon_2eproto() {
    protobuf_AddDesc_TSCHArchives_2eCommon_2eproto();
  }
} static_descriptor_initializer_TSCHArchives_2eCommon_2eproto_;
const ::google::protobuf::EnumDescriptor* ChartType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartType_descriptor_;
}
bool ChartType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AxisType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AxisType_descriptor_;
}
bool AxisType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ScatterFormat_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScatterFormat_descriptor_;
}
bool ScatterFormat_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SeriesDirection_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeriesDirection_descriptor_;
}
bool SeriesDirection_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NumberValueType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NumberValueType_descriptor_;
}
bool NumberValueType_IsValid(int value) {
  switch(value) {
    case -999:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NegativeNumberStyle_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NegativeNumberStyle_descriptor_;
}
bool NegativeNumberStyle_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FractionAccuracy_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FractionAccuracy_descriptor_;
}
bool FractionAccuracy_IsValid(int value) {
  switch(value) {
    case -3:
    case -2:
    case -1:
    case 0:
    case 2:
    case 4:
    case 8:
    case 10:
    case 16:
    case 100:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int SparseReferenceArrayArchive_Entry::kIndexFieldNumber;
const int SparseReferenceArrayArchive_Entry::kValueFieldNumber;
#endif  // !_MSC_VER

SparseReferenceArrayArchive_Entry::SparseReferenceArrayArchive_Entry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SparseReferenceArrayArchive_Entry::InitAsDefaultInstance() {
  value_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

SparseReferenceArrayArchive_Entry::SparseReferenceArrayArchive_Entry(const SparseReferenceArrayArchive_Entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SparseReferenceArrayArchive_Entry::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SparseReferenceArrayArchive_Entry::~SparseReferenceArrayArchive_Entry() {
  SharedDtor();
}

void SparseReferenceArrayArchive_Entry::SharedDtor() {
  if (this != default_instance_) {
    delete value_;
  }
}

void SparseReferenceArrayArchive_Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SparseReferenceArrayArchive_Entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SparseReferenceArrayArchive_Entry_descriptor_;
}

const SparseReferenceArrayArchive_Entry& SparseReferenceArrayArchive_Entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHArchives_2eCommon_2eproto();
  return *default_instance_;
}

SparseReferenceArrayArchive_Entry* SparseReferenceArrayArchive_Entry::default_instance_ = NULL;

SparseReferenceArrayArchive_Entry* SparseReferenceArrayArchive_Entry::New() const {
  return new SparseReferenceArrayArchive_Entry;
}

void SparseReferenceArrayArchive_Entry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
    if (has_value()) {
      if (value_ != NULL) value_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SparseReferenceArrayArchive_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required .TSP.Reference value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SparseReferenceArrayArchive_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // required .TSP.Reference value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SparseReferenceArrayArchive_Entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // required .TSP.Reference value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SparseReferenceArrayArchive_Entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // required .TSP.Reference value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SparseReferenceArrayArchive_Entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SparseReferenceArrayArchive_Entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SparseReferenceArrayArchive_Entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SparseReferenceArrayArchive_Entry::MergeFrom(const SparseReferenceArrayArchive_Entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_value()) {
      mutable_value()->::TSP::Reference::MergeFrom(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SparseReferenceArrayArchive_Entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SparseReferenceArrayArchive_Entry::CopyFrom(const SparseReferenceArrayArchive_Entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparseReferenceArrayArchive_Entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_value()) {
    if (!this->value().IsInitialized()) return false;
  }
  return true;
}

void SparseReferenceArrayArchive_Entry::Swap(SparseReferenceArrayArchive_Entry* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SparseReferenceArrayArchive_Entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SparseReferenceArrayArchive_Entry_descriptor_;
  metadata.reflection = SparseReferenceArrayArchive_Entry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SparseReferenceArrayArchive::kNumEntriesFieldNumber;
const int SparseReferenceArrayArchive::kEntriesFieldNumber;
#endif  // !_MSC_VER

SparseReferenceArrayArchive::SparseReferenceArrayArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SparseReferenceArrayArchive::InitAsDefaultInstance() {
}

SparseReferenceArrayArchive::SparseReferenceArrayArchive(const SparseReferenceArrayArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SparseReferenceArrayArchive::SharedCtor() {
  _cached_size_ = 0;
  num_entries_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SparseReferenceArrayArchive::~SparseReferenceArrayArchive() {
  SharedDtor();
}

void SparseReferenceArrayArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SparseReferenceArrayArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SparseReferenceArrayArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SparseReferenceArrayArchive_descriptor_;
}

const SparseReferenceArrayArchive& SparseReferenceArrayArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHArchives_2eCommon_2eproto();
  return *default_instance_;
}

SparseReferenceArrayArchive* SparseReferenceArrayArchive::default_instance_ = NULL;

SparseReferenceArrayArchive* SparseReferenceArrayArchive::New() const {
  return new SparseReferenceArrayArchive;
}

void SparseReferenceArrayArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_entries_ = 0u;
  }
  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SparseReferenceArrayArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 num_entries = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_entries_)));
          set_has_num_entries();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entries;
        break;
      }

      // repeated .TSCH.SparseReferenceArrayArchive.Entry entries = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entries;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SparseReferenceArrayArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 num_entries = 1;
  if (has_num_entries()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_entries(), output);
  }

  // repeated .TSCH.SparseReferenceArrayArchive.Entry entries = 2;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->entries(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SparseReferenceArrayArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 num_entries = 1;
  if (has_num_entries()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_entries(), target);
  }

  // repeated .TSCH.SparseReferenceArrayArchive.Entry entries = 2;
  for (int i = 0; i < this->entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->entries(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SparseReferenceArrayArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 num_entries = 1;
    if (has_num_entries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_entries());
    }

  }
  // repeated .TSCH.SparseReferenceArrayArchive.Entry entries = 2;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SparseReferenceArrayArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SparseReferenceArrayArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SparseReferenceArrayArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SparseReferenceArrayArchive::MergeFrom(const SparseReferenceArrayArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_entries()) {
      set_num_entries(from.num_entries());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SparseReferenceArrayArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SparseReferenceArrayArchive::CopyFrom(const SparseReferenceArrayArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparseReferenceArrayArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < entries_size(); i++) {
    if (!this->entries(i).IsInitialized()) return false;
  }
  return true;
}

void SparseReferenceArrayArchive::Swap(SparseReferenceArrayArchive* other) {
  if (other != this) {
    std::swap(num_entries_, other->num_entries_);
    entries_.Swap(&other->entries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SparseReferenceArrayArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SparseReferenceArrayArchive_descriptor_;
  metadata.reflection = SparseReferenceArrayArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RectArchive::kOriginFieldNumber;
const int RectArchive::kSizeFieldNumber;
#endif  // !_MSC_VER

RectArchive::RectArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RectArchive::InitAsDefaultInstance() {
  origin_ = const_cast< ::TSP::Point*>(&::TSP::Point::default_instance());
  size_ = const_cast< ::TSP::Size*>(&::TSP::Size::default_instance());
}

RectArchive::RectArchive(const RectArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RectArchive::SharedCtor() {
  _cached_size_ = 0;
  origin_ = NULL;
  size_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RectArchive::~RectArchive() {
  SharedDtor();
}

void RectArchive::SharedDtor() {
  if (this != default_instance_) {
    delete origin_;
    delete size_;
  }
}

void RectArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RectArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RectArchive_descriptor_;
}

const RectArchive& RectArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHArchives_2eCommon_2eproto();
  return *default_instance_;
}

RectArchive* RectArchive::default_instance_ = NULL;

RectArchive* RectArchive::New() const {
  return new RectArchive;
}

void RectArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_origin()) {
      if (origin_ != NULL) origin_->::TSP::Point::Clear();
    }
    if (has_size()) {
      if (size_ != NULL) size_->::TSP::Size::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RectArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSP.Point origin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_size;
        break;
      }

      // required .TSP.Size size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_size()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RectArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSP.Point origin = 1;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->origin(), output);
  }

  // required .TSP.Size size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RectArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSP.Point origin = 1;
  if (has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->origin(), target);
  }

  // required .TSP.Size size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RectArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSP.Point origin = 1;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->origin());
    }

    // required .TSP.Size size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RectArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RectArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RectArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RectArchive::MergeFrom(const RectArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_origin()) {
      mutable_origin()->::TSP::Point::MergeFrom(from.origin());
    }
    if (from.has_size()) {
      mutable_size()->::TSP::Size::MergeFrom(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RectArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RectArchive::CopyFrom(const RectArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RectArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_origin()) {
    if (!this->origin().IsInitialized()) return false;
  }
  if (has_size()) {
    if (!this->size().IsInitialized()) return false;
  }
  return true;
}

void RectArchive::Swap(RectArchive* other) {
  if (other != this) {
    std::swap(origin_, other->origin_);
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RectArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RectArchive_descriptor_;
  metadata.reflection = RectArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChartsNSNumberDoubleArchive::kNumberArchiveFieldNumber;
#endif  // !_MSC_VER

ChartsNSNumberDoubleArchive::ChartsNSNumberDoubleArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartsNSNumberDoubleArchive::InitAsDefaultInstance() {
}

ChartsNSNumberDoubleArchive::ChartsNSNumberDoubleArchive(const ChartsNSNumberDoubleArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartsNSNumberDoubleArchive::SharedCtor() {
  _cached_size_ = 0;
  number_archive_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartsNSNumberDoubleArchive::~ChartsNSNumberDoubleArchive() {
  SharedDtor();
}

void ChartsNSNumberDoubleArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChartsNSNumberDoubleArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartsNSNumberDoubleArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartsNSNumberDoubleArchive_descriptor_;
}

const ChartsNSNumberDoubleArchive& ChartsNSNumberDoubleArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHArchives_2eCommon_2eproto();
  return *default_instance_;
}

ChartsNSNumberDoubleArchive* ChartsNSNumberDoubleArchive::default_instance_ = NULL;

ChartsNSNumberDoubleArchive* ChartsNSNumberDoubleArchive::New() const {
  return new ChartsNSNumberDoubleArchive;
}

void ChartsNSNumberDoubleArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    number_archive_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartsNSNumberDoubleArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double number_archive = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &number_archive_)));
          set_has_number_archive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChartsNSNumberDoubleArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double number_archive = 1;
  if (has_number_archive()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->number_archive(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartsNSNumberDoubleArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double number_archive = 1;
  if (has_number_archive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->number_archive(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartsNSNumberDoubleArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double number_archive = 1;
    if (has_number_archive()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartsNSNumberDoubleArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartsNSNumberDoubleArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartsNSNumberDoubleArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartsNSNumberDoubleArchive::MergeFrom(const ChartsNSNumberDoubleArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number_archive()) {
      set_number_archive(from.number_archive());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartsNSNumberDoubleArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartsNSNumberDoubleArchive::CopyFrom(const ChartsNSNumberDoubleArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartsNSNumberDoubleArchive::IsInitialized() const {

  return true;
}

void ChartsNSNumberDoubleArchive::Swap(ChartsNSNumberDoubleArchive* other) {
  if (other != this) {
    std::swap(number_archive_, other->number_archive_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChartsNSNumberDoubleArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartsNSNumberDoubleArchive_descriptor_;
  metadata.reflection = ChartsNSNumberDoubleArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChartsNSArrayOfNSNumberDoubleArchive::kNumbersFieldNumber;
#endif  // !_MSC_VER

ChartsNSArrayOfNSNumberDoubleArchive::ChartsNSArrayOfNSNumberDoubleArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartsNSArrayOfNSNumberDoubleArchive::InitAsDefaultInstance() {
}

ChartsNSArrayOfNSNumberDoubleArchive::ChartsNSArrayOfNSNumberDoubleArchive(const ChartsNSArrayOfNSNumberDoubleArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartsNSArrayOfNSNumberDoubleArchive::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartsNSArrayOfNSNumberDoubleArchive::~ChartsNSArrayOfNSNumberDoubleArchive() {
  SharedDtor();
}

void ChartsNSArrayOfNSNumberDoubleArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChartsNSArrayOfNSNumberDoubleArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartsNSArrayOfNSNumberDoubleArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartsNSArrayOfNSNumberDoubleArchive_descriptor_;
}

const ChartsNSArrayOfNSNumberDoubleArchive& ChartsNSArrayOfNSNumberDoubleArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHArchives_2eCommon_2eproto();
  return *default_instance_;
}

ChartsNSArrayOfNSNumberDoubleArchive* ChartsNSArrayOfNSNumberDoubleArchive::default_instance_ = NULL;

ChartsNSArrayOfNSNumberDoubleArchive* ChartsNSArrayOfNSNumberDoubleArchive::New() const {
  return new ChartsNSArrayOfNSNumberDoubleArchive;
}

void ChartsNSArrayOfNSNumberDoubleArchive::Clear() {
  numbers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartsNSArrayOfNSNumberDoubleArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double numbers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_numbers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_numbers())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_numbers())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(9)) goto parse_numbers;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChartsNSArrayOfNSNumberDoubleArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated double numbers = 1;
  for (int i = 0; i < this->numbers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->numbers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartsNSArrayOfNSNumberDoubleArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated double numbers = 1;
  for (int i = 0; i < this->numbers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->numbers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartsNSArrayOfNSNumberDoubleArchive::ByteSize() const {
  int total_size = 0;

  // repeated double numbers = 1;
  {
    int data_size = 0;
    data_size = 8 * this->numbers_size();
    total_size += 1 * this->numbers_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartsNSArrayOfNSNumberDoubleArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartsNSArrayOfNSNumberDoubleArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartsNSArrayOfNSNumberDoubleArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartsNSArrayOfNSNumberDoubleArchive::MergeFrom(const ChartsNSArrayOfNSNumberDoubleArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  numbers_.MergeFrom(from.numbers_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartsNSArrayOfNSNumberDoubleArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartsNSArrayOfNSNumberDoubleArchive::CopyFrom(const ChartsNSArrayOfNSNumberDoubleArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartsNSArrayOfNSNumberDoubleArchive::IsInitialized() const {

  return true;
}

void ChartsNSArrayOfNSNumberDoubleArchive::Swap(ChartsNSArrayOfNSNumberDoubleArchive* other) {
  if (other != this) {
    numbers_.Swap(&other->numbers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChartsNSArrayOfNSNumberDoubleArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartsNSArrayOfNSNumberDoubleArchive_descriptor_;
  metadata.reflection = ChartsNSArrayOfNSNumberDoubleArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DEPRECATEDChart3DFillArchive::kFillFieldNumber;
const int DEPRECATEDChart3DFillArchive::kLightingmodelFieldNumber;
const int DEPRECATEDChart3DFillArchive::kTexturesetIdFieldNumber;
const int DEPRECATEDChart3DFillArchive::kFillTypeFieldNumber;
const int DEPRECATEDChart3DFillArchive::kSeriesIndexFieldNumber;
#endif  // !_MSC_VER

DEPRECATEDChart3DFillArchive::DEPRECATEDChart3DFillArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DEPRECATEDChart3DFillArchive::InitAsDefaultInstance() {
  fill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  lightingmodel_ = const_cast< ::TSCH::Chart3DLightingModelArchive*>(&::TSCH::Chart3DLightingModelArchive::default_instance());
}

DEPRECATEDChart3DFillArchive::DEPRECATEDChart3DFillArchive(const DEPRECATEDChart3DFillArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DEPRECATEDChart3DFillArchive::SharedCtor() {
  _cached_size_ = 0;
  fill_ = NULL;
  lightingmodel_ = NULL;
  textureset_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fill_type_ = 0;
  series_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DEPRECATEDChart3DFillArchive::~DEPRECATEDChart3DFillArchive() {
  SharedDtor();
}

void DEPRECATEDChart3DFillArchive::SharedDtor() {
  if (textureset_id_ != &::google::protobuf::internal::kEmptyString) {
    delete textureset_id_;
  }
  if (this != default_instance_) {
    delete fill_;
    delete lightingmodel_;
  }
}

void DEPRECATEDChart3DFillArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DEPRECATEDChart3DFillArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DEPRECATEDChart3DFillArchive_descriptor_;
}

const DEPRECATEDChart3DFillArchive& DEPRECATEDChart3DFillArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHArchives_2eCommon_2eproto();
  return *default_instance_;
}

DEPRECATEDChart3DFillArchive* DEPRECATEDChart3DFillArchive::default_instance_ = NULL;

DEPRECATEDChart3DFillArchive* DEPRECATEDChart3DFillArchive::New() const {
  return new DEPRECATEDChart3DFillArchive;
}

void DEPRECATEDChart3DFillArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fill()) {
      if (fill_ != NULL) fill_->::TSD::FillArchive::Clear();
    }
    if (has_lightingmodel()) {
      if (lightingmodel_ != NULL) lightingmodel_->::TSCH::Chart3DLightingModelArchive::Clear();
    }
    if (has_textureset_id()) {
      if (textureset_id_ != &::google::protobuf::internal::kEmptyString) {
        textureset_id_->clear();
      }
    }
    fill_type_ = 0;
    series_index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DEPRECATEDChart3DFillArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSD.FillArchive fill = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lightingmodel;
        break;
      }

      // optional .TSCH.Chart3DLightingModelArchive lightingmodel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lightingmodel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lightingmodel()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_textureset_id;
        break;
      }

      // optional string textureset_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_textureset_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_textureset_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->textureset_id().data(), this->textureset_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fill_type;
        break;
      }

      // optional .TSCH.FillPropertyType fill_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fill_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSCH::FillPropertyType_IsValid(value)) {
            set_fill_type(static_cast< ::TSCH::FillPropertyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_series_index;
        break;
      }

      // optional uint32 series_index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_series_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_index_)));
          set_has_series_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DEPRECATEDChart3DFillArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSD.FillArchive fill = 1;
  if (has_fill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fill(), output);
  }

  // optional .TSCH.Chart3DLightingModelArchive lightingmodel = 2;
  if (has_lightingmodel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lightingmodel(), output);
  }

  // optional string textureset_id = 3;
  if (has_textureset_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->textureset_id().data(), this->textureset_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->textureset_id(), output);
  }

  // optional .TSCH.FillPropertyType fill_type = 4;
  if (has_fill_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->fill_type(), output);
  }

  // optional uint32 series_index = 5;
  if (has_series_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->series_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DEPRECATEDChart3DFillArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSD.FillArchive fill = 1;
  if (has_fill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fill(), target);
  }

  // optional .TSCH.Chart3DLightingModelArchive lightingmodel = 2;
  if (has_lightingmodel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->lightingmodel(), target);
  }

  // optional string textureset_id = 3;
  if (has_textureset_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->textureset_id().data(), this->textureset_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->textureset_id(), target);
  }

  // optional .TSCH.FillPropertyType fill_type = 4;
  if (has_fill_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->fill_type(), target);
  }

  // optional uint32 series_index = 5;
  if (has_series_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->series_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DEPRECATEDChart3DFillArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSD.FillArchive fill = 1;
    if (has_fill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fill());
    }

    // optional .TSCH.Chart3DLightingModelArchive lightingmodel = 2;
    if (has_lightingmodel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lightingmodel());
    }

    // optional string textureset_id = 3;
    if (has_textureset_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->textureset_id());
    }

    // optional .TSCH.FillPropertyType fill_type = 4;
    if (has_fill_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fill_type());
    }

    // optional uint32 series_index = 5;
    if (has_series_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DEPRECATEDChart3DFillArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DEPRECATEDChart3DFillArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DEPRECATEDChart3DFillArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DEPRECATEDChart3DFillArchive::MergeFrom(const DEPRECATEDChart3DFillArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fill()) {
      mutable_fill()->::TSD::FillArchive::MergeFrom(from.fill());
    }
    if (from.has_lightingmodel()) {
      mutable_lightingmodel()->::TSCH::Chart3DLightingModelArchive::MergeFrom(from.lightingmodel());
    }
    if (from.has_textureset_id()) {
      set_textureset_id(from.textureset_id());
    }
    if (from.has_fill_type()) {
      set_fill_type(from.fill_type());
    }
    if (from.has_series_index()) {
      set_series_index(from.series_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DEPRECATEDChart3DFillArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DEPRECATEDChart3DFillArchive::CopyFrom(const DEPRECATEDChart3DFillArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DEPRECATEDChart3DFillArchive::IsInitialized() const {

  if (has_fill()) {
    if (!this->fill().IsInitialized()) return false;
  }
  if (has_lightingmodel()) {
    if (!this->lightingmodel().IsInitialized()) return false;
  }
  return true;
}

void DEPRECATEDChart3DFillArchive::Swap(DEPRECATEDChart3DFillArchive* other) {
  if (other != this) {
    std::swap(fill_, other->fill_);
    std::swap(lightingmodel_, other->lightingmodel_);
    std::swap(textureset_id_, other->textureset_id_);
    std::swap(fill_type_, other->fill_type_);
    std::swap(series_index_, other->series_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DEPRECATEDChart3DFillArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DEPRECATEDChart3DFillArchive_descriptor_;
  metadata.reflection = DEPRECATEDChart3DFillArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChartStyleArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

ChartStyleArchive::ChartStyleArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartStyleArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSS::StyleArchive*>(&::TSS::StyleArchive::default_instance());
}

ChartStyleArchive::ChartStyleArchive(const ChartStyleArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartStyleArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartStyleArchive::~ChartStyleArchive() {
  SharedDtor();
}

void ChartStyleArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void ChartStyleArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartStyleArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartStyleArchive_descriptor_;
}

const ChartStyleArchive& ChartStyleArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHArchives_2eCommon_2eproto();
  return *default_instance_;
}

ChartStyleArchive* ChartStyleArchive::default_instance_ = NULL;

ChartStyleArchive* ChartStyleArchive::New() const {
  return new ChartStyleArchive;
}

void ChartStyleArchive::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSS::StyleArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartStyleArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSS.StyleArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((80000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChartStyleArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSS.StyleArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // Extension range [10000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      10000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartStyleArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSS.StyleArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // Extension range [10000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      10000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartStyleArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSS.StyleArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartStyleArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartStyleArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartStyleArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartStyleArchive::MergeFrom(const ChartStyleArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSS::StyleArchive::MergeFrom(from.super());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartStyleArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartStyleArchive::CopyFrom(const ChartStyleArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartStyleArchive::IsInitialized() const {

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void ChartStyleArchive::Swap(ChartStyleArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata ChartStyleArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartStyleArchive_descriptor_;
  metadata.reflection = ChartStyleArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChartNonStyleArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

ChartNonStyleArchive::ChartNonStyleArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartNonStyleArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSS::StyleArchive*>(&::TSS::StyleArchive::default_instance());
}

ChartNonStyleArchive::ChartNonStyleArchive(const ChartNonStyleArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartNonStyleArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartNonStyleArchive::~ChartNonStyleArchive() {
  SharedDtor();
}

void ChartNonStyleArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void ChartNonStyleArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartNonStyleArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartNonStyleArchive_descriptor_;
}

const ChartNonStyleArchive& ChartNonStyleArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHArchives_2eCommon_2eproto();
  return *default_instance_;
}

ChartNonStyleArchive* ChartNonStyleArchive::default_instance_ = NULL;

ChartNonStyleArchive* ChartNonStyleArchive::New() const {
  return new ChartNonStyleArchive;
}

void ChartNonStyleArchive::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSS::StyleArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartNonStyleArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSS.StyleArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((80000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChartNonStyleArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSS.StyleArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // Extension range [10000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      10000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartNonStyleArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSS.StyleArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // Extension range [10000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      10000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartNonStyleArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSS.StyleArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartNonStyleArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartNonStyleArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartNonStyleArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartNonStyleArchive::MergeFrom(const ChartNonStyleArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSS::StyleArchive::MergeFrom(from.super());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartNonStyleArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartNonStyleArchive::CopyFrom(const ChartNonStyleArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartNonStyleArchive::IsInitialized() const {

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void ChartNonStyleArchive::Swap(ChartNonStyleArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata ChartNonStyleArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartNonStyleArchive_descriptor_;
  metadata.reflection = ChartNonStyleArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LegendStyleArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

LegendStyleArchive::LegendStyleArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LegendStyleArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSS::StyleArchive*>(&::TSS::StyleArchive::default_instance());
}

LegendStyleArchive::LegendStyleArchive(const LegendStyleArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LegendStyleArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LegendStyleArchive::~LegendStyleArchive() {
  SharedDtor();
}

void LegendStyleArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void LegendStyleArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LegendStyleArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LegendStyleArchive_descriptor_;
}

const LegendStyleArchive& LegendStyleArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHArchives_2eCommon_2eproto();
  return *default_instance_;
}

LegendStyleArchive* LegendStyleArchive::default_instance_ = NULL;

LegendStyleArchive* LegendStyleArchive::New() const {
  return new LegendStyleArchive;
}

void LegendStyleArchive::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSS::StyleArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LegendStyleArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSS.StyleArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((80000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LegendStyleArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSS.StyleArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // Extension range [10000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      10000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LegendStyleArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSS.StyleArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // Extension range [10000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      10000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LegendStyleArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSS.StyleArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LegendStyleArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LegendStyleArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LegendStyleArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LegendStyleArchive::MergeFrom(const LegendStyleArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSS::StyleArchive::MergeFrom(from.super());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LegendStyleArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LegendStyleArchive::CopyFrom(const LegendStyleArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LegendStyleArchive::IsInitialized() const {

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void LegendStyleArchive::Swap(LegendStyleArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata LegendStyleArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LegendStyleArchive_descriptor_;
  metadata.reflection = LegendStyleArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LegendNonStyleArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

LegendNonStyleArchive::LegendNonStyleArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LegendNonStyleArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSS::StyleArchive*>(&::TSS::StyleArchive::default_instance());
}

LegendNonStyleArchive::LegendNonStyleArchive(const LegendNonStyleArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LegendNonStyleArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LegendNonStyleArchive::~LegendNonStyleArchive() {
  SharedDtor();
}

void LegendNonStyleArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void LegendNonStyleArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LegendNonStyleArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LegendNonStyleArchive_descriptor_;
}

const LegendNonStyleArchive& LegendNonStyleArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHArchives_2eCommon_2eproto();
  return *default_instance_;
}

LegendNonStyleArchive* LegendNonStyleArchive::default_instance_ = NULL;

LegendNonStyleArchive* LegendNonStyleArchive::New() const {
  return new LegendNonStyleArchive;
}

void LegendNonStyleArchive::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSS::StyleArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LegendNonStyleArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSS.StyleArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((80000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LegendNonStyleArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSS.StyleArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // Extension range [10000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      10000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LegendNonStyleArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSS.StyleArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // Extension range [10000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      10000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LegendNonStyleArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSS.StyleArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LegendNonStyleArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LegendNonStyleArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LegendNonStyleArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LegendNonStyleArchive::MergeFrom(const LegendNonStyleArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSS::StyleArchive::MergeFrom(from.super());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LegendNonStyleArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LegendNonStyleArchive::CopyFrom(const LegendNonStyleArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LegendNonStyleArchive::IsInitialized() const {

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void LegendNonStyleArchive::Swap(LegendNonStyleArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata LegendNonStyleArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LegendNonStyleArchive_descriptor_;
  metadata.reflection = LegendNonStyleArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChartAxisStyleArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

ChartAxisStyleArchive::ChartAxisStyleArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartAxisStyleArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSS::StyleArchive*>(&::TSS::StyleArchive::default_instance());
}

ChartAxisStyleArchive::ChartAxisStyleArchive(const ChartAxisStyleArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartAxisStyleArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartAxisStyleArchive::~ChartAxisStyleArchive() {
  SharedDtor();
}

void ChartAxisStyleArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void ChartAxisStyleArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartAxisStyleArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartAxisStyleArchive_descriptor_;
}

const ChartAxisStyleArchive& ChartAxisStyleArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHArchives_2eCommon_2eproto();
  return *default_instance_;
}

ChartAxisStyleArchive* ChartAxisStyleArchive::default_instance_ = NULL;

ChartAxisStyleArchive* ChartAxisStyleArchive::New() const {
  return new ChartAxisStyleArchive;
}

void ChartAxisStyleArchive::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSS::StyleArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartAxisStyleArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSS.StyleArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((80000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChartAxisStyleArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSS.StyleArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // Extension range [10000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      10000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartAxisStyleArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSS.StyleArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // Extension range [10000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      10000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartAxisStyleArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSS.StyleArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartAxisStyleArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartAxisStyleArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartAxisStyleArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartAxisStyleArchive::MergeFrom(const ChartAxisStyleArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSS::StyleArchive::MergeFrom(from.super());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartAxisStyleArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartAxisStyleArchive::CopyFrom(const ChartAxisStyleArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartAxisStyleArchive::IsInitialized() const {

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void ChartAxisStyleArchive::Swap(ChartAxisStyleArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata ChartAxisStyleArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartAxisStyleArchive_descriptor_;
  metadata.reflection = ChartAxisStyleArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChartAxisNonStyleArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

ChartAxisNonStyleArchive::ChartAxisNonStyleArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartAxisNonStyleArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSS::StyleArchive*>(&::TSS::StyleArchive::default_instance());
}

ChartAxisNonStyleArchive::ChartAxisNonStyleArchive(const ChartAxisNonStyleArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartAxisNonStyleArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartAxisNonStyleArchive::~ChartAxisNonStyleArchive() {
  SharedDtor();
}

void ChartAxisNonStyleArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void ChartAxisNonStyleArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartAxisNonStyleArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartAxisNonStyleArchive_descriptor_;
}

const ChartAxisNonStyleArchive& ChartAxisNonStyleArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHArchives_2eCommon_2eproto();
  return *default_instance_;
}

ChartAxisNonStyleArchive* ChartAxisNonStyleArchive::default_instance_ = NULL;

ChartAxisNonStyleArchive* ChartAxisNonStyleArchive::New() const {
  return new ChartAxisNonStyleArchive;
}

void ChartAxisNonStyleArchive::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSS::StyleArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartAxisNonStyleArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSS.StyleArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((80000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChartAxisNonStyleArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSS.StyleArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // Extension range [10000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      10000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartAxisNonStyleArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSS.StyleArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // Extension range [10000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      10000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartAxisNonStyleArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSS.StyleArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartAxisNonStyleArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartAxisNonStyleArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartAxisNonStyleArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartAxisNonStyleArchive::MergeFrom(const ChartAxisNonStyleArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSS::StyleArchive::MergeFrom(from.super());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartAxisNonStyleArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartAxisNonStyleArchive::CopyFrom(const ChartAxisNonStyleArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartAxisNonStyleArchive::IsInitialized() const {

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void ChartAxisNonStyleArchive::Swap(ChartAxisNonStyleArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata ChartAxisNonStyleArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartAxisNonStyleArchive_descriptor_;
  metadata.reflection = ChartAxisNonStyleArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChartSeriesStyleArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

ChartSeriesStyleArchive::ChartSeriesStyleArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartSeriesStyleArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSS::StyleArchive*>(&::TSS::StyleArchive::default_instance());
}

ChartSeriesStyleArchive::ChartSeriesStyleArchive(const ChartSeriesStyleArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartSeriesStyleArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartSeriesStyleArchive::~ChartSeriesStyleArchive() {
  SharedDtor();
}

void ChartSeriesStyleArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void ChartSeriesStyleArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartSeriesStyleArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartSeriesStyleArchive_descriptor_;
}

const ChartSeriesStyleArchive& ChartSeriesStyleArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHArchives_2eCommon_2eproto();
  return *default_instance_;
}

ChartSeriesStyleArchive* ChartSeriesStyleArchive::default_instance_ = NULL;

ChartSeriesStyleArchive* ChartSeriesStyleArchive::New() const {
  return new ChartSeriesStyleArchive;
}

void ChartSeriesStyleArchive::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSS::StyleArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartSeriesStyleArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSS.StyleArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((80000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChartSeriesStyleArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSS.StyleArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // Extension range [10000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      10000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartSeriesStyleArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSS.StyleArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // Extension range [10000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      10000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartSeriesStyleArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSS.StyleArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartSeriesStyleArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartSeriesStyleArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartSeriesStyleArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartSeriesStyleArchive::MergeFrom(const ChartSeriesStyleArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSS::StyleArchive::MergeFrom(from.super());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartSeriesStyleArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartSeriesStyleArchive::CopyFrom(const ChartSeriesStyleArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartSeriesStyleArchive::IsInitialized() const {

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void ChartSeriesStyleArchive::Swap(ChartSeriesStyleArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata ChartSeriesStyleArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartSeriesStyleArchive_descriptor_;
  metadata.reflection = ChartSeriesStyleArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChartSeriesNonStyleArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

ChartSeriesNonStyleArchive::ChartSeriesNonStyleArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartSeriesNonStyleArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSS::StyleArchive*>(&::TSS::StyleArchive::default_instance());
}

ChartSeriesNonStyleArchive::ChartSeriesNonStyleArchive(const ChartSeriesNonStyleArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartSeriesNonStyleArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartSeriesNonStyleArchive::~ChartSeriesNonStyleArchive() {
  SharedDtor();
}

void ChartSeriesNonStyleArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void ChartSeriesNonStyleArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartSeriesNonStyleArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartSeriesNonStyleArchive_descriptor_;
}

const ChartSeriesNonStyleArchive& ChartSeriesNonStyleArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHArchives_2eCommon_2eproto();
  return *default_instance_;
}

ChartSeriesNonStyleArchive* ChartSeriesNonStyleArchive::default_instance_ = NULL;

ChartSeriesNonStyleArchive* ChartSeriesNonStyleArchive::New() const {
  return new ChartSeriesNonStyleArchive;
}

void ChartSeriesNonStyleArchive::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSS::StyleArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartSeriesNonStyleArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSS.StyleArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((80000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChartSeriesNonStyleArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSS.StyleArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // Extension range [10000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      10000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartSeriesNonStyleArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSS.StyleArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // Extension range [10000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      10000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartSeriesNonStyleArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSS.StyleArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartSeriesNonStyleArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartSeriesNonStyleArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartSeriesNonStyleArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartSeriesNonStyleArchive::MergeFrom(const ChartSeriesNonStyleArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSS::StyleArchive::MergeFrom(from.super());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartSeriesNonStyleArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartSeriesNonStyleArchive::CopyFrom(const ChartSeriesNonStyleArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartSeriesNonStyleArchive::IsInitialized() const {

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void ChartSeriesNonStyleArchive::Swap(ChartSeriesNonStyleArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata ChartSeriesNonStyleArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartSeriesNonStyleArchive_descriptor_;
  metadata.reflection = ChartSeriesNonStyleArchive_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TSCH

// @@protoc_insertion_point(global_scope)
