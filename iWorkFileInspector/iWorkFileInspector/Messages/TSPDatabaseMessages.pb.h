// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSPDatabaseMessages.proto

#ifndef PROTOBUF_TSPDatabaseMessages_2eproto__INCLUDED
#define PROTOBUF_TSPDatabaseMessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "TSPMessages.pb.h"
// @@protoc_insertion_point(includes)

namespace TSP {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TSPDatabaseMessages_2eproto();
void protobuf_AssignDesc_TSPDatabaseMessages_2eproto();
void protobuf_ShutdownFile_TSPDatabaseMessages_2eproto();

class DatabaseData;
class DatabaseDataArchive;
class DatabaseImageDataArchive;

enum DatabaseImageDataArchive_ImageType {
  DatabaseImageDataArchive_ImageType_unknown = 0,
  DatabaseImageDataArchive_ImageType_bitmap = 1,
  DatabaseImageDataArchive_ImageType_pdf = 2
};
bool DatabaseImageDataArchive_ImageType_IsValid(int value);
const DatabaseImageDataArchive_ImageType DatabaseImageDataArchive_ImageType_ImageType_MIN = DatabaseImageDataArchive_ImageType_unknown;
const DatabaseImageDataArchive_ImageType DatabaseImageDataArchive_ImageType_ImageType_MAX = DatabaseImageDataArchive_ImageType_pdf;
const int DatabaseImageDataArchive_ImageType_ImageType_ARRAYSIZE = DatabaseImageDataArchive_ImageType_ImageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DatabaseImageDataArchive_ImageType_descriptor();
inline const ::std::string& DatabaseImageDataArchive_ImageType_Name(DatabaseImageDataArchive_ImageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DatabaseImageDataArchive_ImageType_descriptor(), value);
}
inline bool DatabaseImageDataArchive_ImageType_Parse(
    const ::std::string& name, DatabaseImageDataArchive_ImageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DatabaseImageDataArchive_ImageType>(
    DatabaseImageDataArchive_ImageType_descriptor(), name, value);
}
// ===================================================================

class DatabaseData : public ::google::protobuf::Message {
 public:
  DatabaseData();
  virtual ~DatabaseData();

  DatabaseData(const DatabaseData& from);

  inline DatabaseData& operator=(const DatabaseData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DatabaseData& default_instance();

  void Swap(DatabaseData* other);

  // implements Message ----------------------------------------------

  DatabaseData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DatabaseData& from);
  void MergeFrom(const DatabaseData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSP.DataReference data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::TSP::DataReference& data() const;
  inline ::TSP::DataReference* mutable_data();
  inline ::TSP::DataReference* release_data();
  inline void set_allocated_data(::TSP::DataReference* data);

  // @@protoc_insertion_point(class_scope:TSP.DatabaseData)
 private:
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSP::DataReference* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_TSPDatabaseMessages_2eproto();
  friend void protobuf_AssignDesc_TSPDatabaseMessages_2eproto();
  friend void protobuf_ShutdownFile_TSPDatabaseMessages_2eproto();

  void InitAsDefaultInstance();
  static DatabaseData* default_instance_;
};
// -------------------------------------------------------------------

class DatabaseDataArchive : public ::google::protobuf::Message {
 public:
  DatabaseDataArchive();
  virtual ~DatabaseDataArchive();

  DatabaseDataArchive(const DatabaseDataArchive& from);

  inline DatabaseDataArchive& operator=(const DatabaseDataArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DatabaseDataArchive& default_instance();

  void Swap(DatabaseDataArchive* other);

  // implements Message ----------------------------------------------

  DatabaseDataArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DatabaseDataArchive& from);
  void MergeFrom(const DatabaseDataArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .TSP.Reference data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::TSP::Reference& data() const;
  inline ::TSP::Reference* mutable_data();
  inline ::TSP::Reference* release_data();
  inline void set_allocated_data(::TSP::Reference* data);

  // optional string app_relative_path = 2;
  inline bool has_app_relative_path() const;
  inline void clear_app_relative_path();
  static const int kAppRelativePathFieldNumber = 2;
  inline const ::std::string& app_relative_path() const;
  inline void set_app_relative_path(const ::std::string& value);
  inline void set_app_relative_path(const char* value);
  inline void set_app_relative_path(const char* value, size_t size);
  inline ::std::string* mutable_app_relative_path();
  inline ::std::string* release_app_relative_path();
  inline void set_allocated_app_relative_path(::std::string* app_relative_path);

  // required string display_name = 3;
  inline bool has_display_name() const;
  inline void clear_display_name();
  static const int kDisplayNameFieldNumber = 3;
  inline const ::std::string& display_name() const;
  inline void set_display_name(const ::std::string& value);
  inline void set_display_name(const char* value);
  inline void set_display_name(const char* value, size_t size);
  inline ::std::string* mutable_display_name();
  inline ::std::string* release_display_name();
  inline void set_allocated_display_name(::std::string* display_name);

  // optional uint64 length = 4;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 4;
  inline ::google::protobuf::uint64 length() const;
  inline void set_length(::google::protobuf::uint64 value);

  // optional uint32 hash = 5;
  inline bool has_hash() const;
  inline void clear_hash();
  static const int kHashFieldNumber = 5;
  inline ::google::protobuf::uint32 hash() const;
  inline void set_hash(::google::protobuf::uint32 value);

  // required bool sharable = 6 [default = true];
  inline bool has_sharable() const;
  inline void clear_sharable();
  static const int kSharableFieldNumber = 6;
  inline bool sharable() const;
  inline void set_sharable(bool value);

  // @@protoc_insertion_point(class_scope:TSP.DatabaseDataArchive)
 private:
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_app_relative_path();
  inline void clear_has_app_relative_path();
  inline void set_has_display_name();
  inline void clear_has_display_name();
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_hash();
  inline void clear_has_hash();
  inline void set_has_sharable();
  inline void clear_has_sharable();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSP::Reference* data_;
  ::std::string* app_relative_path_;
  ::std::string* display_name_;
  ::google::protobuf::uint64 length_;
  ::google::protobuf::uint32 hash_;
  bool sharable_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_TSPDatabaseMessages_2eproto();
  friend void protobuf_AssignDesc_TSPDatabaseMessages_2eproto();
  friend void protobuf_ShutdownFile_TSPDatabaseMessages_2eproto();

  void InitAsDefaultInstance();
  static DatabaseDataArchive* default_instance_;
};
// -------------------------------------------------------------------

class DatabaseImageDataArchive : public ::google::protobuf::Message {
 public:
  DatabaseImageDataArchive();
  virtual ~DatabaseImageDataArchive();

  DatabaseImageDataArchive(const DatabaseImageDataArchive& from);

  inline DatabaseImageDataArchive& operator=(const DatabaseImageDataArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DatabaseImageDataArchive& default_instance();

  void Swap(DatabaseImageDataArchive* other);

  // implements Message ----------------------------------------------

  DatabaseImageDataArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DatabaseImageDataArchive& from);
  void MergeFrom(const DatabaseImageDataArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DatabaseImageDataArchive_ImageType ImageType;
  static const ImageType unknown = DatabaseImageDataArchive_ImageType_unknown;
  static const ImageType bitmap = DatabaseImageDataArchive_ImageType_bitmap;
  static const ImageType pdf = DatabaseImageDataArchive_ImageType_pdf;
  static inline bool ImageType_IsValid(int value) {
    return DatabaseImageDataArchive_ImageType_IsValid(value);
  }
  static const ImageType ImageType_MIN =
    DatabaseImageDataArchive_ImageType_ImageType_MIN;
  static const ImageType ImageType_MAX =
    DatabaseImageDataArchive_ImageType_ImageType_MAX;
  static const int ImageType_ARRAYSIZE =
    DatabaseImageDataArchive_ImageType_ImageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ImageType_descriptor() {
    return DatabaseImageDataArchive_ImageType_descriptor();
  }
  static inline const ::std::string& ImageType_Name(ImageType value) {
    return DatabaseImageDataArchive_ImageType_Name(value);
  }
  static inline bool ImageType_Parse(const ::std::string& name,
      ImageType* value) {
    return DatabaseImageDataArchive_ImageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .TSP.DatabaseDataArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSP::DatabaseDataArchive& super() const;
  inline ::TSP::DatabaseDataArchive* mutable_super();
  inline ::TSP::DatabaseDataArchive* release_super();
  inline void set_allocated_super(::TSP::DatabaseDataArchive* super);

  // required .TSP.DatabaseImageDataArchive.ImageType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::TSP::DatabaseImageDataArchive_ImageType type() const;
  inline void set_type(::TSP::DatabaseImageDataArchive_ImageType value);

  // @@protoc_insertion_point(class_scope:TSP.DatabaseImageDataArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSP::DatabaseDataArchive* super_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_TSPDatabaseMessages_2eproto();
  friend void protobuf_AssignDesc_TSPDatabaseMessages_2eproto();
  friend void protobuf_ShutdownFile_TSPDatabaseMessages_2eproto();

  void InitAsDefaultInstance();
  static DatabaseImageDataArchive* default_instance_;
};
// ===================================================================


// ===================================================================

// DatabaseData

// required .TSP.DataReference data = 1;
inline bool DatabaseData::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DatabaseData::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DatabaseData::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DatabaseData::clear_data() {
  if (data_ != NULL) data_->::TSP::DataReference::Clear();
  clear_has_data();
}
inline const ::TSP::DataReference& DatabaseData::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::TSP::DataReference* DatabaseData::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::TSP::DataReference;
  return data_;
}
inline ::TSP::DataReference* DatabaseData::release_data() {
  clear_has_data();
  ::TSP::DataReference* temp = data_;
  data_ = NULL;
  return temp;
}
inline void DatabaseData::set_allocated_data(::TSP::DataReference* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// DatabaseDataArchive

// optional .TSP.Reference data = 1;
inline bool DatabaseDataArchive::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DatabaseDataArchive::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DatabaseDataArchive::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DatabaseDataArchive::clear_data() {
  if (data_ != NULL) data_->::TSP::Reference::Clear();
  clear_has_data();
}
inline const ::TSP::Reference& DatabaseDataArchive::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::TSP::Reference* DatabaseDataArchive::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::TSP::Reference;
  return data_;
}
inline ::TSP::Reference* DatabaseDataArchive::release_data() {
  clear_has_data();
  ::TSP::Reference* temp = data_;
  data_ = NULL;
  return temp;
}
inline void DatabaseDataArchive::set_allocated_data(::TSP::Reference* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// optional string app_relative_path = 2;
inline bool DatabaseDataArchive::has_app_relative_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DatabaseDataArchive::set_has_app_relative_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DatabaseDataArchive::clear_has_app_relative_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DatabaseDataArchive::clear_app_relative_path() {
  if (app_relative_path_ != &::google::protobuf::internal::kEmptyString) {
    app_relative_path_->clear();
  }
  clear_has_app_relative_path();
}
inline const ::std::string& DatabaseDataArchive::app_relative_path() const {
  return *app_relative_path_;
}
inline void DatabaseDataArchive::set_app_relative_path(const ::std::string& value) {
  set_has_app_relative_path();
  if (app_relative_path_ == &::google::protobuf::internal::kEmptyString) {
    app_relative_path_ = new ::std::string;
  }
  app_relative_path_->assign(value);
}
inline void DatabaseDataArchive::set_app_relative_path(const char* value) {
  set_has_app_relative_path();
  if (app_relative_path_ == &::google::protobuf::internal::kEmptyString) {
    app_relative_path_ = new ::std::string;
  }
  app_relative_path_->assign(value);
}
inline void DatabaseDataArchive::set_app_relative_path(const char* value, size_t size) {
  set_has_app_relative_path();
  if (app_relative_path_ == &::google::protobuf::internal::kEmptyString) {
    app_relative_path_ = new ::std::string;
  }
  app_relative_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DatabaseDataArchive::mutable_app_relative_path() {
  set_has_app_relative_path();
  if (app_relative_path_ == &::google::protobuf::internal::kEmptyString) {
    app_relative_path_ = new ::std::string;
  }
  return app_relative_path_;
}
inline ::std::string* DatabaseDataArchive::release_app_relative_path() {
  clear_has_app_relative_path();
  if (app_relative_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = app_relative_path_;
    app_relative_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DatabaseDataArchive::set_allocated_app_relative_path(::std::string* app_relative_path) {
  if (app_relative_path_ != &::google::protobuf::internal::kEmptyString) {
    delete app_relative_path_;
  }
  if (app_relative_path) {
    set_has_app_relative_path();
    app_relative_path_ = app_relative_path;
  } else {
    clear_has_app_relative_path();
    app_relative_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string display_name = 3;
inline bool DatabaseDataArchive::has_display_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DatabaseDataArchive::set_has_display_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DatabaseDataArchive::clear_has_display_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DatabaseDataArchive::clear_display_name() {
  if (display_name_ != &::google::protobuf::internal::kEmptyString) {
    display_name_->clear();
  }
  clear_has_display_name();
}
inline const ::std::string& DatabaseDataArchive::display_name() const {
  return *display_name_;
}
inline void DatabaseDataArchive::set_display_name(const ::std::string& value) {
  set_has_display_name();
  if (display_name_ == &::google::protobuf::internal::kEmptyString) {
    display_name_ = new ::std::string;
  }
  display_name_->assign(value);
}
inline void DatabaseDataArchive::set_display_name(const char* value) {
  set_has_display_name();
  if (display_name_ == &::google::protobuf::internal::kEmptyString) {
    display_name_ = new ::std::string;
  }
  display_name_->assign(value);
}
inline void DatabaseDataArchive::set_display_name(const char* value, size_t size) {
  set_has_display_name();
  if (display_name_ == &::google::protobuf::internal::kEmptyString) {
    display_name_ = new ::std::string;
  }
  display_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DatabaseDataArchive::mutable_display_name() {
  set_has_display_name();
  if (display_name_ == &::google::protobuf::internal::kEmptyString) {
    display_name_ = new ::std::string;
  }
  return display_name_;
}
inline ::std::string* DatabaseDataArchive::release_display_name() {
  clear_has_display_name();
  if (display_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = display_name_;
    display_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DatabaseDataArchive::set_allocated_display_name(::std::string* display_name) {
  if (display_name_ != &::google::protobuf::internal::kEmptyString) {
    delete display_name_;
  }
  if (display_name) {
    set_has_display_name();
    display_name_ = display_name;
  } else {
    clear_has_display_name();
    display_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 length = 4;
inline bool DatabaseDataArchive::has_length() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DatabaseDataArchive::set_has_length() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DatabaseDataArchive::clear_has_length() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DatabaseDataArchive::clear_length() {
  length_ = GOOGLE_ULONGLONG(0);
  clear_has_length();
}
inline ::google::protobuf::uint64 DatabaseDataArchive::length() const {
  return length_;
}
inline void DatabaseDataArchive::set_length(::google::protobuf::uint64 value) {
  set_has_length();
  length_ = value;
}

// optional uint32 hash = 5;
inline bool DatabaseDataArchive::has_hash() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DatabaseDataArchive::set_has_hash() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DatabaseDataArchive::clear_has_hash() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DatabaseDataArchive::clear_hash() {
  hash_ = 0u;
  clear_has_hash();
}
inline ::google::protobuf::uint32 DatabaseDataArchive::hash() const {
  return hash_;
}
inline void DatabaseDataArchive::set_hash(::google::protobuf::uint32 value) {
  set_has_hash();
  hash_ = value;
}

// required bool sharable = 6 [default = true];
inline bool DatabaseDataArchive::has_sharable() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DatabaseDataArchive::set_has_sharable() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DatabaseDataArchive::clear_has_sharable() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DatabaseDataArchive::clear_sharable() {
  sharable_ = true;
  clear_has_sharable();
}
inline bool DatabaseDataArchive::sharable() const {
  return sharable_;
}
inline void DatabaseDataArchive::set_sharable(bool value) {
  set_has_sharable();
  sharable_ = value;
}

// -------------------------------------------------------------------

// DatabaseImageDataArchive

// required .TSP.DatabaseDataArchive super = 1;
inline bool DatabaseImageDataArchive::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DatabaseImageDataArchive::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DatabaseImageDataArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DatabaseImageDataArchive::clear_super() {
  if (super_ != NULL) super_->::TSP::DatabaseDataArchive::Clear();
  clear_has_super();
}
inline const ::TSP::DatabaseDataArchive& DatabaseImageDataArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSP::DatabaseDataArchive* DatabaseImageDataArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSP::DatabaseDataArchive;
  return super_;
}
inline ::TSP::DatabaseDataArchive* DatabaseImageDataArchive::release_super() {
  clear_has_super();
  ::TSP::DatabaseDataArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void DatabaseImageDataArchive::set_allocated_super(::TSP::DatabaseDataArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// required .TSP.DatabaseImageDataArchive.ImageType type = 2;
inline bool DatabaseImageDataArchive::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DatabaseImageDataArchive::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DatabaseImageDataArchive::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DatabaseImageDataArchive::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::TSP::DatabaseImageDataArchive_ImageType DatabaseImageDataArchive::type() const {
  return static_cast< ::TSP::DatabaseImageDataArchive_ImageType >(type_);
}
inline void DatabaseImageDataArchive::set_type(::TSP::DatabaseImageDataArchive_ImageType value) {
  assert(::TSP::DatabaseImageDataArchive_ImageType_IsValid(value));
  set_has_type();
  type_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TSP

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSP::DatabaseImageDataArchive_ImageType>() {
  return ::TSP::DatabaseImageDataArchive_ImageType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TSPDatabaseMessages_2eproto__INCLUDED
