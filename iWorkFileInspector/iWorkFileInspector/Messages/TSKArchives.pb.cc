// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSKArchives.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TSKArchives.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace TSK {

namespace {

const ::google::protobuf::Descriptor* TreeNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreeNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandHistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandHistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* DocumentArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DocumentArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* DocumentSupportArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DocumentSupportArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ViewStateArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ViewStateArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandGroupArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandGroupArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandContainerArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandContainerArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplaceAllChildCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplaceAllChildCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplaceAllCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplaceAllCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShuffleMappingArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShuffleMappingArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShuffleMappingArchive_Entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShuffleMappingArchive_Entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProgressiveCommandGroupArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProgressiveCommandGroupArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSelectionBehaviorHistoryArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSelectionBehaviorHistoryArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSelectionBehaviorHistoryArchive_Entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSelectionBehaviorHistoryArchive_Entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* UndoRedoStateCommandSelectionBehaviorArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UndoRedoStateCommandSelectionBehaviorArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* FormatStructArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FormatStructArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CustomFormatArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CustomFormatArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CustomFormatArchive_Condition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CustomFormatArchive_Condition_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnnotationAuthorArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnnotationAuthorArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeprecatedChangeAuthorArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeprecatedChangeAuthorArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnnotationAuthorStorageArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnnotationAuthorStorageArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddAnnotationAuthorCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddAnnotationAuthorCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetAnnotationAuthorColorCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetAnnotationAuthorColorCommandArchive_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TSKArchives_2eproto() {
  protobuf_AddDesc_TSKArchives_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TSKArchives.proto");
  GOOGLE_CHECK(file != NULL);
  TreeNode_descriptor_ = file->message_type(0);
  static const int TreeNode_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeNode, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeNode, children_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeNode, object_),
  };
  TreeNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TreeNode_descriptor_,
      TreeNode::default_instance_,
      TreeNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TreeNode));
  CommandHistory_descriptor_ = file->message_type(1);
  static const int CommandHistory_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandHistory, undo_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandHistory, commands_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandHistory, marked_redo_commands_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandHistory, pending_preflight_command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandHistory, fixed_radar_13365177_),
  };
  CommandHistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandHistory_descriptor_,
      CommandHistory::default_instance_,
      CommandHistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandHistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandHistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandHistory));
  DocumentArchive_descriptor_ = file->message_type(2);
  static const int DocumentArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, locale_identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, annotation_author_storage_),
  };
  DocumentArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DocumentArchive_descriptor_,
      DocumentArchive::default_instance_,
      DocumentArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DocumentArchive));
  DocumentSupportArchive_descriptor_ = file->message_type(3);
  static const int DocumentSupportArchive_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentSupportArchive, command_history_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentSupportArchive, command_selection_behavior_history_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentSupportArchive, undo_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentSupportArchive, redo_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentSupportArchive, undo_action_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentSupportArchive, redo_action_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentSupportArchive, web_state_),
  };
  DocumentSupportArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DocumentSupportArchive_descriptor_,
      DocumentSupportArchive::default_instance_,
      DocumentSupportArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentSupportArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentSupportArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DocumentSupportArchive));
  ViewStateArchive_descriptor_ = file->message_type(4);
  static const int ViewStateArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewStateArchive, view_state_root_),
  };
  ViewStateArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ViewStateArchive_descriptor_,
      ViewStateArchive::default_instance_,
      ViewStateArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewStateArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewStateArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ViewStateArchive));
  CommandArchive_descriptor_ = file->message_type(5);
  static const int CommandArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandArchive, undoredostate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandArchive, undocollection_),
  };
  CommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandArchive_descriptor_,
      CommandArchive::default_instance_,
      CommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandArchive));
  CommandGroupArchive_descriptor_ = file->message_type(6);
  static const int CommandGroupArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandGroupArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandGroupArchive, commands_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandGroupArchive, process_results_),
  };
  CommandGroupArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandGroupArchive_descriptor_,
      CommandGroupArchive::default_instance_,
      CommandGroupArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandGroupArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandGroupArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandGroupArchive));
  CommandContainerArchive_descriptor_ = file->message_type(7);
  static const int CommandContainerArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandContainerArchive, commands_),
  };
  CommandContainerArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandContainerArchive_descriptor_,
      CommandContainerArchive::default_instance_,
      CommandContainerArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandContainerArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandContainerArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandContainerArchive));
  ReplaceAllChildCommandArchive_descriptor_ = file->message_type(8);
  static const int ReplaceAllChildCommandArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplaceAllChildCommandArchive, super_),
  };
  ReplaceAllChildCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplaceAllChildCommandArchive_descriptor_,
      ReplaceAllChildCommandArchive::default_instance_,
      ReplaceAllChildCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplaceAllChildCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplaceAllChildCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplaceAllChildCommandArchive));
  ReplaceAllCommandArchive_descriptor_ = file->message_type(9);
  static const int ReplaceAllCommandArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplaceAllCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplaceAllCommandArchive, commands_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplaceAllCommandArchive, find_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplaceAllCommandArchive, replace_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplaceAllCommandArchive, options_),
  };
  ReplaceAllCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplaceAllCommandArchive_descriptor_,
      ReplaceAllCommandArchive::default_instance_,
      ReplaceAllCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplaceAllCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplaceAllCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplaceAllCommandArchive));
  ShuffleMappingArchive_descriptor_ = file->message_type(10);
  static const int ShuffleMappingArchive_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShuffleMappingArchive, start_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShuffleMappingArchive, end_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShuffleMappingArchive, entries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShuffleMappingArchive, is_vertical_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShuffleMappingArchive, is_move_operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShuffleMappingArchive, first_moved_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShuffleMappingArchive, destination_index_for_move_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShuffleMappingArchive, number_of_indices_moved_),
  };
  ShuffleMappingArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShuffleMappingArchive_descriptor_,
      ShuffleMappingArchive::default_instance_,
      ShuffleMappingArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShuffleMappingArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShuffleMappingArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShuffleMappingArchive));
  ShuffleMappingArchive_Entry_descriptor_ = ShuffleMappingArchive_descriptor_->nested_type(0);
  static const int ShuffleMappingArchive_Entry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShuffleMappingArchive_Entry, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShuffleMappingArchive_Entry, to_),
  };
  ShuffleMappingArchive_Entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShuffleMappingArchive_Entry_descriptor_,
      ShuffleMappingArchive_Entry::default_instance_,
      ShuffleMappingArchive_Entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShuffleMappingArchive_Entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShuffleMappingArchive_Entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShuffleMappingArchive_Entry));
  ProgressiveCommandGroupArchive_descriptor_ = file->message_type(11);
  static const int ProgressiveCommandGroupArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressiveCommandGroupArchive, super_),
  };
  ProgressiveCommandGroupArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProgressiveCommandGroupArchive_descriptor_,
      ProgressiveCommandGroupArchive::default_instance_,
      ProgressiveCommandGroupArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressiveCommandGroupArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressiveCommandGroupArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProgressiveCommandGroupArchive));
  CommandSelectionBehaviorHistoryArchive_descriptor_ = file->message_type(12);
  static const int CommandSelectionBehaviorHistoryArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSelectionBehaviorHistoryArchive, entries_),
  };
  CommandSelectionBehaviorHistoryArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSelectionBehaviorHistoryArchive_descriptor_,
      CommandSelectionBehaviorHistoryArchive::default_instance_,
      CommandSelectionBehaviorHistoryArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSelectionBehaviorHistoryArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSelectionBehaviorHistoryArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSelectionBehaviorHistoryArchive));
  CommandSelectionBehaviorHistoryArchive_Entry_descriptor_ = CommandSelectionBehaviorHistoryArchive_descriptor_->nested_type(0);
  static const int CommandSelectionBehaviorHistoryArchive_Entry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSelectionBehaviorHistoryArchive_Entry, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSelectionBehaviorHistoryArchive_Entry, command_selection_behavior_),
  };
  CommandSelectionBehaviorHistoryArchive_Entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSelectionBehaviorHistoryArchive_Entry_descriptor_,
      CommandSelectionBehaviorHistoryArchive_Entry::default_instance_,
      CommandSelectionBehaviorHistoryArchive_Entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSelectionBehaviorHistoryArchive_Entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSelectionBehaviorHistoryArchive_Entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSelectionBehaviorHistoryArchive_Entry));
  UndoRedoStateCommandSelectionBehaviorArchive_descriptor_ = file->message_type(13);
  static const int UndoRedoStateCommandSelectionBehaviorArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoRedoStateCommandSelectionBehaviorArchive, undo_redo_state_),
  };
  UndoRedoStateCommandSelectionBehaviorArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UndoRedoStateCommandSelectionBehaviorArchive_descriptor_,
      UndoRedoStateCommandSelectionBehaviorArchive::default_instance_,
      UndoRedoStateCommandSelectionBehaviorArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoRedoStateCommandSelectionBehaviorArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoRedoStateCommandSelectionBehaviorArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UndoRedoStateCommandSelectionBehaviorArchive));
  FormatStructArchive_descriptor_ = file->message_type(14);
  static const int FormatStructArchive_offsets_[40] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, format_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, decimal_places_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, currency_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, negative_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, show_thousands_separator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, use_accounting_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, duration_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, base_places_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, base_use_minus_sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, fraction_accuracy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, suppress_date_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, suppress_time_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, date_time_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, duration_unit_largest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, duration_unit_smallest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, custom_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, custom_format_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, scale_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, requires_fraction_replacement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, control_minimum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, control_maximum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, control_increment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, control_format_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, slider_orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, slider_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, decimal_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, min_integer_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, num_nonspace_integer_digits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, num_nonspace_decimal_digits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, index_from_right_last_integer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, interstitial_strings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, inters_str_insertion_indexes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, num_hash_decimal_digits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, total_num_decimal_digits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, is_complex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, contains_integer_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, multiple_choice_list_initial_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, multiple_choice_list_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, use_automatic_duration_units_),
  };
  FormatStructArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FormatStructArchive_descriptor_,
      FormatStructArchive::default_instance_,
      FormatStructArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FormatStructArchive));
  CustomFormatArchive_descriptor_ = file->message_type(15);
  static const int CustomFormatArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomFormatArchive, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomFormatArchive, format_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomFormatArchive, default_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomFormatArchive, conditions_),
  };
  CustomFormatArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CustomFormatArchive_descriptor_,
      CustomFormatArchive::default_instance_,
      CustomFormatArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomFormatArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomFormatArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CustomFormatArchive));
  CustomFormatArchive_Condition_descriptor_ = CustomFormatArchive_descriptor_->nested_type(0);
  static const int CustomFormatArchive_Condition_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomFormatArchive_Condition, condition_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomFormatArchive_Condition, condition_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomFormatArchive_Condition, condition_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomFormatArchive_Condition, condition_value_dbl_),
  };
  CustomFormatArchive_Condition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CustomFormatArchive_Condition_descriptor_,
      CustomFormatArchive_Condition::default_instance_,
      CustomFormatArchive_Condition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomFormatArchive_Condition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomFormatArchive_Condition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CustomFormatArchive_Condition));
  AnnotationAuthorArchive_descriptor_ = file->message_type(16);
  static const int AnnotationAuthorArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotationAuthorArchive, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotationAuthorArchive, color_),
  };
  AnnotationAuthorArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnnotationAuthorArchive_descriptor_,
      AnnotationAuthorArchive::default_instance_,
      AnnotationAuthorArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotationAuthorArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotationAuthorArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnnotationAuthorArchive));
  DeprecatedChangeAuthorArchive_descriptor_ = file->message_type(17);
  static const int DeprecatedChangeAuthorArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeprecatedChangeAuthorArchive, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeprecatedChangeAuthorArchive, change_color_),
  };
  DeprecatedChangeAuthorArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeprecatedChangeAuthorArchive_descriptor_,
      DeprecatedChangeAuthorArchive::default_instance_,
      DeprecatedChangeAuthorArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeprecatedChangeAuthorArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeprecatedChangeAuthorArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeprecatedChangeAuthorArchive));
  AnnotationAuthorStorageArchive_descriptor_ = file->message_type(18);
  static const int AnnotationAuthorStorageArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotationAuthorStorageArchive, annotation_author_),
  };
  AnnotationAuthorStorageArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnnotationAuthorStorageArchive_descriptor_,
      AnnotationAuthorStorageArchive::default_instance_,
      AnnotationAuthorStorageArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotationAuthorStorageArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotationAuthorStorageArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnnotationAuthorStorageArchive));
  AddAnnotationAuthorCommandArchive_descriptor_ = file->message_type(19);
  static const int AddAnnotationAuthorCommandArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddAnnotationAuthorCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddAnnotationAuthorCommandArchive, document_root_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddAnnotationAuthorCommandArchive, annotation_author_),
  };
  AddAnnotationAuthorCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddAnnotationAuthorCommandArchive_descriptor_,
      AddAnnotationAuthorCommandArchive::default_instance_,
      AddAnnotationAuthorCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddAnnotationAuthorCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddAnnotationAuthorCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddAnnotationAuthorCommandArchive));
  SetAnnotationAuthorColorCommandArchive_descriptor_ = file->message_type(20);
  static const int SetAnnotationAuthorColorCommandArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAnnotationAuthorColorCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAnnotationAuthorColorCommandArchive, annotation_author_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAnnotationAuthorColorCommandArchive, color_),
  };
  SetAnnotationAuthorColorCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetAnnotationAuthorColorCommandArchive_descriptor_,
      SetAnnotationAuthorColorCommandArchive::default_instance_,
      SetAnnotationAuthorColorCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAnnotationAuthorColorCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAnnotationAuthorColorCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetAnnotationAuthorColorCommandArchive));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TSKArchives_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TreeNode_descriptor_, &TreeNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandHistory_descriptor_, &CommandHistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DocumentArchive_descriptor_, &DocumentArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DocumentSupportArchive_descriptor_, &DocumentSupportArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ViewStateArchive_descriptor_, &ViewStateArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandArchive_descriptor_, &CommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandGroupArchive_descriptor_, &CommandGroupArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandContainerArchive_descriptor_, &CommandContainerArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplaceAllChildCommandArchive_descriptor_, &ReplaceAllChildCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplaceAllCommandArchive_descriptor_, &ReplaceAllCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShuffleMappingArchive_descriptor_, &ShuffleMappingArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShuffleMappingArchive_Entry_descriptor_, &ShuffleMappingArchive_Entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProgressiveCommandGroupArchive_descriptor_, &ProgressiveCommandGroupArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSelectionBehaviorHistoryArchive_descriptor_, &CommandSelectionBehaviorHistoryArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSelectionBehaviorHistoryArchive_Entry_descriptor_, &CommandSelectionBehaviorHistoryArchive_Entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UndoRedoStateCommandSelectionBehaviorArchive_descriptor_, &UndoRedoStateCommandSelectionBehaviorArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FormatStructArchive_descriptor_, &FormatStructArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CustomFormatArchive_descriptor_, &CustomFormatArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CustomFormatArchive_Condition_descriptor_, &CustomFormatArchive_Condition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnnotationAuthorArchive_descriptor_, &AnnotationAuthorArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeprecatedChangeAuthorArchive_descriptor_, &DeprecatedChangeAuthorArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnnotationAuthorStorageArchive_descriptor_, &AnnotationAuthorStorageArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddAnnotationAuthorCommandArchive_descriptor_, &AddAnnotationAuthorCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetAnnotationAuthorColorCommandArchive_descriptor_, &SetAnnotationAuthorColorCommandArchive::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TSKArchives_2eproto() {
  delete TreeNode::default_instance_;
  delete TreeNode_reflection_;
  delete CommandHistory::default_instance_;
  delete CommandHistory_reflection_;
  delete DocumentArchive::default_instance_;
  delete DocumentArchive_reflection_;
  delete DocumentSupportArchive::default_instance_;
  delete DocumentSupportArchive_reflection_;
  delete ViewStateArchive::default_instance_;
  delete ViewStateArchive_reflection_;
  delete CommandArchive::default_instance_;
  delete CommandArchive_reflection_;
  delete CommandGroupArchive::default_instance_;
  delete CommandGroupArchive_reflection_;
  delete CommandContainerArchive::default_instance_;
  delete CommandContainerArchive_reflection_;
  delete ReplaceAllChildCommandArchive::default_instance_;
  delete ReplaceAllChildCommandArchive_reflection_;
  delete ReplaceAllCommandArchive::default_instance_;
  delete ReplaceAllCommandArchive_reflection_;
  delete ShuffleMappingArchive::default_instance_;
  delete ShuffleMappingArchive_reflection_;
  delete ShuffleMappingArchive_Entry::default_instance_;
  delete ShuffleMappingArchive_Entry_reflection_;
  delete ProgressiveCommandGroupArchive::default_instance_;
  delete ProgressiveCommandGroupArchive_reflection_;
  delete CommandSelectionBehaviorHistoryArchive::default_instance_;
  delete CommandSelectionBehaviorHistoryArchive_reflection_;
  delete CommandSelectionBehaviorHistoryArchive_Entry::default_instance_;
  delete CommandSelectionBehaviorHistoryArchive_Entry_reflection_;
  delete UndoRedoStateCommandSelectionBehaviorArchive::default_instance_;
  delete UndoRedoStateCommandSelectionBehaviorArchive_reflection_;
  delete FormatStructArchive::default_instance_;
  delete FormatStructArchive_reflection_;
  delete CustomFormatArchive::default_instance_;
  delete CustomFormatArchive_reflection_;
  delete CustomFormatArchive_Condition::default_instance_;
  delete CustomFormatArchive_Condition_reflection_;
  delete AnnotationAuthorArchive::default_instance_;
  delete AnnotationAuthorArchive_reflection_;
  delete DeprecatedChangeAuthorArchive::default_instance_;
  delete DeprecatedChangeAuthorArchive_reflection_;
  delete AnnotationAuthorStorageArchive::default_instance_;
  delete AnnotationAuthorStorageArchive_reflection_;
  delete AddAnnotationAuthorCommandArchive::default_instance_;
  delete AddAnnotationAuthorCommandArchive_reflection_;
  delete SetAnnotationAuthorColorCommandArchive::default_instance_;
  delete SetAnnotationAuthorColorCommandArchive_reflection_;
}

void protobuf_AddDesc_TSKArchives_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::TSP::protobuf_AddDesc_TSPMessages_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021TSKArchives.proto\022\003TSK\032\021TSPMessages.pr"
    "oto\"Z\n\010TreeNode\022\014\n\004name\030\001 \001(\t\022 \n\010childre"
    "n\030\002 \003(\0132\016.TSP.Reference\022\036\n\006object\030\003 \001(\0132"
    "\016.TSP.Reference\"\305\001\n\016CommandHistory\022\022\n\nun"
    "do_count\030\001 \002(\r\022 \n\010commands\030\002 \003(\0132\016.TSP.R"
    "eference\022,\n\024marked_redo_commands\030\003 \003(\0132\016"
    ".TSP.Reference\0221\n\031pending_preflight_comm"
    "and\030\004 \001(\0132\016.TSP.Reference\022\034\n\024fixed_radar"
    "_13365177\030\n \001(\010\"_\n\017DocumentArchive\022\031\n\021lo"
    "cale_identifier\030\004 \001(\t\0221\n\031annotation_auth"
    "or_storage\030\007 \001(\0132\016.TSP.Reference\"\200\002\n\026Doc"
    "umentSupportArchive\022\'\n\017command_history\030\001"
    " \001(\0132\016.TSP.Reference\022:\n\"command_selectio"
    "n_behavior_history\030\002 \001(\0132\016.TSP.Reference"
    "\022\022\n\nundo_count\030\004 \001(\r\022\022\n\nredo_count\030\005 \001(\r"
    "\022\032\n\022undo_action_string\030\006 \001(\t\022\032\n\022redo_act"
    "ion_string\030\007 \001(\t\022!\n\tweb_state\030\010 \001(\0132\016.TS"
    "P.Reference\";\n\020ViewStateArchive\022\'\n\017view_"
    "state_root\030\001 \002(\0132\016.TSP.Reference\"_\n\016Comm"
    "andArchive\022%\n\rundoRedoState\030\001 \001(\0132\016.TSP."
    "Reference\022&\n\016undoCollection\030\002 \001(\0132\016.TSP."
    "Reference\"\203\001\n\023CommandGroupArchive\022\"\n\005sup"
    "er\030\001 \002(\0132\023.TSK.CommandArchive\022 \n\010command"
    "s\030\002 \003(\0132\016.TSP.Reference\022&\n\017process_resul"
    "ts\030\003 \001(\0132\r.TSP.IndexSet\";\n\027CommandContai"
    "nerArchive\022 \n\010commands\030\001 \003(\0132\016.TSP.Refer"
    "ence\"C\n\035ReplaceAllChildCommandArchive\022\"\n"
    "\005super\030\001 \002(\0132\023.TSK.CommandArchive\"\236\001\n\030Re"
    "placeAllCommandArchive\022\"\n\005super\030\001 \002(\0132\023."
    "TSK.CommandArchive\022 \n\010commands\030\002 \003(\0132\016.T"
    "SP.Reference\022\023\n\013find_string\030\003 \002(\t\022\026\n\016rep"
    "lace_string\030\004 \002(\t\022\017\n\007options\030\005 \002(\r\"\273\002\n\025S"
    "huffleMappingArchive\022\023\n\013start_index\030\001 \002("
    "\r\022\021\n\tend_index\030\002 \002(\r\0221\n\007entries\030\003 \003(\0132 ."
    "TSK.ShuffleMappingArchive.Entry\022\031\n\013is_ve"
    "rtical\030\004 \001(\010:\004true\022 \n\021is_move_operation\030"
    "\005 \001(\010:\005false\022\034\n\021first_moved_index\030\006 \001(\r:"
    "\0010\022%\n\032destination_index_for_move\030\007 \001(\r:\001"
    "0\022\"\n\027number_of_indices_moved\030\010 \001(\r:\0010\032!\n"
    "\005Entry\022\014\n\004from\030\001 \002(\r\022\n\n\002to\030\002 \002(\r\"I\n\036Prog"
    "ressiveCommandGroupArchive\022\'\n\005super\030\001 \002("
    "\0132\030.TSK.CommandGroupArchive\"\312\001\n&CommandS"
    "electionBehaviorHistoryArchive\022B\n\007entrie"
    "s\030\001 \003(\01321.TSK.CommandSelectionBehaviorHi"
    "storyArchive.Entry\032\\\n\005Entry\022\037\n\007command\030\001"
    " \002(\0132\016.TSP.Reference\0222\n\032command_selectio"
    "n_behavior\030\002 \002(\0132\016.TSP.Reference\"W\n,Undo"
    "RedoStateCommandSelectionBehaviorArchive"
    "\022\'\n\017undo_redo_state\030\002 \001(\0132\016.TSP.Referenc"
    "e\"\257\t\n\023FormatStructArchive\022\023\n\013format_type"
    "\030\001 \002(\r\022\026\n\016decimal_places\030\002 \001(\r\022\025\n\rcurren"
    "cy_code\030\003 \001(\t\022\026\n\016negative_style\030\004 \001(\r\022 \n"
    "\030show_thousands_separator\030\005 \001(\010\022\034\n\024use_a"
    "ccounting_style\030\006 \001(\010\022\026\n\016duration_style\030"
    "\007 \001(\r\022\014\n\004base\030\010 \001(\r\022\023\n\013base_places\030\t \001(\r"
    "\022\033\n\023base_use_minus_sign\030\n \001(\010\022\031\n\021fractio"
    "n_accuracy\030\013 \001(\r\022\034\n\024suppress_date_format"
    "\030\014 \001(\010\022\034\n\024suppress_time_format\030\r \001(\010\022\030\n\020"
    "date_time_format\030\016 \001(\t\022\035\n\025duration_unit_"
    "largest\030\017 \001(\r\022\036\n\026duration_unit_smallest\030"
    "\020 \001(\r\022\021\n\tcustom_id\030\021 \001(\r\022\034\n\024custom_forma"
    "t_string\030\022 \001(\t\022\024\n\014scale_factor\030\023 \001(\001\022%\n\035"
    "requires_fraction_replacement\030\024 \001(\010\022\027\n\017c"
    "ontrol_minimum\030\025 \001(\001\022\027\n\017control_maximum\030"
    "\026 \001(\001\022\031\n\021control_increment\030\027 \001(\001\022\033\n\023cont"
    "rol_format_type\030\030 \001(\r\022\032\n\022slider_orientat"
    "ion\030\031 \001(\r\022\027\n\017slider_position\030\032 \001(\r\022\025\n\rde"
    "cimal_width\030\033 \001(\r\022\031\n\021min_integer_width\030\034"
    " \001(\r\022#\n\033num_nonspace_integer_digits\030\035 \001("
    "\r\022#\n\033num_nonspace_decimal_digits\030\036 \001(\r\022%"
    "\n\035index_from_right_last_integer\030\037 \001(\r\022\034\n"
    "\024interstitial_strings\030  \003(\t\0223\n\034inters_st"
    "r_insertion_indexes\030! \001(\0132\r.TSP.IndexSet"
    "\022\037\n\027num_hash_decimal_digits\030\" \001(\r\022 \n\030tot"
    "al_num_decimal_digits\030# \001(\r\022\022\n\nis_comple"
    "x\030$ \001(\010\022\036\n\026contains_integer_token\030% \001(\010\022"
    "*\n\"multiple_choice_list_initial_value\030& "
    "\001(\r\022\037\n\027multiple_choice_list_id\030\' \001(\r\022$\n\034"
    "use_automatic_duration_units\030( \001(\010*\007\010\220N\020"
    "\240\234\001\"\262\002\n\023CustomFormatArchive\022\014\n\004name\030\001 \002("
    "\t\022\023\n\013format_type\030\002 \002(\r\0220\n\016default_format"
    "\030\003 \002(\0132\030.TSK.FormatStructArchive\0226\n\ncond"
    "itions\030\004 \003(\0132\".TSK.CustomFormatArchive.C"
    "ondition\032\215\001\n\tCondition\022\026\n\016condition_type"
    "\030\001 \002(\r\022\027\n\017condition_value\030\002 \001(\002\0222\n\020condi"
    "tion_format\030\003 \002(\0132\030.TSK.FormatStructArch"
    "ive\022\033\n\023condition_value_dbl\030\004 \001(\001\"B\n\027Anno"
    "tationAuthorArchive\022\014\n\004name\030\001 \001(\t\022\031\n\005col"
    "or\030\002 \001(\0132\n.TSP.Color\"O\n\035DeprecatedChange"
    "AuthorArchive\022\014\n\004name\030\001 \001(\t\022 \n\014change_co"
    "lor\030\002 \001(\0132\n.TSP.Color\"K\n\036AnnotationAutho"
    "rStorageArchive\022)\n\021annotation_author\030\001 \003"
    "(\0132\016.TSP.Reference\"\231\001\n!AddAnnotationAuth"
    "orCommandArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Co"
    "mmandArchive\022%\n\rdocument_root\030\002 \001(\0132\016.TS"
    "P.Reference\022)\n\021annotation_author\030\003 \001(\0132\016"
    ".TSP.Reference\"\222\001\n&SetAnnotationAuthorCo"
    "lorCommandArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.C"
    "ommandArchive\022)\n\021annotation_author\030\002 \001(\013"
    "2\016.TSP.Reference\022\031\n\005color\030\003 \001(\0132\n.TSP.Co"
    "lor", 4003);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TSKArchives.proto", &protobuf_RegisterTypes);
  TreeNode::default_instance_ = new TreeNode();
  CommandHistory::default_instance_ = new CommandHistory();
  DocumentArchive::default_instance_ = new DocumentArchive();
  DocumentSupportArchive::default_instance_ = new DocumentSupportArchive();
  ViewStateArchive::default_instance_ = new ViewStateArchive();
  CommandArchive::default_instance_ = new CommandArchive();
  CommandGroupArchive::default_instance_ = new CommandGroupArchive();
  CommandContainerArchive::default_instance_ = new CommandContainerArchive();
  ReplaceAllChildCommandArchive::default_instance_ = new ReplaceAllChildCommandArchive();
  ReplaceAllCommandArchive::default_instance_ = new ReplaceAllCommandArchive();
  ShuffleMappingArchive::default_instance_ = new ShuffleMappingArchive();
  ShuffleMappingArchive_Entry::default_instance_ = new ShuffleMappingArchive_Entry();
  ProgressiveCommandGroupArchive::default_instance_ = new ProgressiveCommandGroupArchive();
  CommandSelectionBehaviorHistoryArchive::default_instance_ = new CommandSelectionBehaviorHistoryArchive();
  CommandSelectionBehaviorHistoryArchive_Entry::default_instance_ = new CommandSelectionBehaviorHistoryArchive_Entry();
  UndoRedoStateCommandSelectionBehaviorArchive::default_instance_ = new UndoRedoStateCommandSelectionBehaviorArchive();
  FormatStructArchive::default_instance_ = new FormatStructArchive();
  CustomFormatArchive::default_instance_ = new CustomFormatArchive();
  CustomFormatArchive_Condition::default_instance_ = new CustomFormatArchive_Condition();
  AnnotationAuthorArchive::default_instance_ = new AnnotationAuthorArchive();
  DeprecatedChangeAuthorArchive::default_instance_ = new DeprecatedChangeAuthorArchive();
  AnnotationAuthorStorageArchive::default_instance_ = new AnnotationAuthorStorageArchive();
  AddAnnotationAuthorCommandArchive::default_instance_ = new AddAnnotationAuthorCommandArchive();
  SetAnnotationAuthorColorCommandArchive::default_instance_ = new SetAnnotationAuthorColorCommandArchive();
  TreeNode::default_instance_->InitAsDefaultInstance();
  CommandHistory::default_instance_->InitAsDefaultInstance();
  DocumentArchive::default_instance_->InitAsDefaultInstance();
  DocumentSupportArchive::default_instance_->InitAsDefaultInstance();
  ViewStateArchive::default_instance_->InitAsDefaultInstance();
  CommandArchive::default_instance_->InitAsDefaultInstance();
  CommandGroupArchive::default_instance_->InitAsDefaultInstance();
  CommandContainerArchive::default_instance_->InitAsDefaultInstance();
  ReplaceAllChildCommandArchive::default_instance_->InitAsDefaultInstance();
  ReplaceAllCommandArchive::default_instance_->InitAsDefaultInstance();
  ShuffleMappingArchive::default_instance_->InitAsDefaultInstance();
  ShuffleMappingArchive_Entry::default_instance_->InitAsDefaultInstance();
  ProgressiveCommandGroupArchive::default_instance_->InitAsDefaultInstance();
  CommandSelectionBehaviorHistoryArchive::default_instance_->InitAsDefaultInstance();
  CommandSelectionBehaviorHistoryArchive_Entry::default_instance_->InitAsDefaultInstance();
  UndoRedoStateCommandSelectionBehaviorArchive::default_instance_->InitAsDefaultInstance();
  FormatStructArchive::default_instance_->InitAsDefaultInstance();
  CustomFormatArchive::default_instance_->InitAsDefaultInstance();
  CustomFormatArchive_Condition::default_instance_->InitAsDefaultInstance();
  AnnotationAuthorArchive::default_instance_->InitAsDefaultInstance();
  DeprecatedChangeAuthorArchive::default_instance_->InitAsDefaultInstance();
  AnnotationAuthorStorageArchive::default_instance_->InitAsDefaultInstance();
  AddAnnotationAuthorCommandArchive::default_instance_->InitAsDefaultInstance();
  SetAnnotationAuthorColorCommandArchive::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TSKArchives_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TSKArchives_2eproto {
  StaticDescriptorInitializer_TSKArchives_2eproto() {
    protobuf_AddDesc_TSKArchives_2eproto();
  }
} static_descriptor_initializer_TSKArchives_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TreeNode::kNameFieldNumber;
const int TreeNode::kChildrenFieldNumber;
const int TreeNode::kObjectFieldNumber;
#endif  // !_MSC_VER

TreeNode::TreeNode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TreeNode::InitAsDefaultInstance() {
  object_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

TreeNode::TreeNode(const TreeNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TreeNode::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  object_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreeNode::~TreeNode() {
  SharedDtor();
}

void TreeNode::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete object_;
  }
}

void TreeNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreeNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreeNode_descriptor_;
}

const TreeNode& TreeNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSKArchives_2eproto();
  return *default_instance_;
}

TreeNode* TreeNode::default_instance_ = NULL;

TreeNode* TreeNode::New() const {
  return new TreeNode;
}

void TreeNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_object()) {
      if (object_ != NULL) object_->::TSP::Reference::Clear();
    }
  }
  children_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TreeNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_children;
        break;
      }

      // repeated .TSP.Reference children = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_children:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_children()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_children;
        if (input->ExpectTag(26)) goto parse_object;
        break;
      }

      // optional .TSP.Reference object = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_object:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_object()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TreeNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated .TSP.Reference children = 2;
  for (int i = 0; i < this->children_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->children(i), output);
  }

  // optional .TSP.Reference object = 3;
  if (has_object()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->object(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TreeNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .TSP.Reference children = 2;
  for (int i = 0; i < this->children_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->children(i), target);
  }

  // optional .TSP.Reference object = 3;
  if (has_object()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->object(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TreeNode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .TSP.Reference object = 3;
    if (has_object()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->object());
    }

  }
  // repeated .TSP.Reference children = 2;
  total_size += 1 * this->children_size();
  for (int i = 0; i < this->children_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->children(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreeNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TreeNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TreeNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TreeNode::MergeFrom(const TreeNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  children_.MergeFrom(from.children_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_object()) {
      mutable_object()->::TSP::Reference::MergeFrom(from.object());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TreeNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreeNode::CopyFrom(const TreeNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeNode::IsInitialized() const {

  for (int i = 0; i < children_size(); i++) {
    if (!this->children(i).IsInitialized()) return false;
  }
  if (has_object()) {
    if (!this->object().IsInitialized()) return false;
  }
  return true;
}

void TreeNode::Swap(TreeNode* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    children_.Swap(&other->children_);
    std::swap(object_, other->object_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TreeNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreeNode_descriptor_;
  metadata.reflection = TreeNode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandHistory::kUndoCountFieldNumber;
const int CommandHistory::kCommandsFieldNumber;
const int CommandHistory::kMarkedRedoCommandsFieldNumber;
const int CommandHistory::kPendingPreflightCommandFieldNumber;
const int CommandHistory::kFixedRadar13365177FieldNumber;
#endif  // !_MSC_VER

CommandHistory::CommandHistory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandHistory::InitAsDefaultInstance() {
  pending_preflight_command_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandHistory::CommandHistory(const CommandHistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandHistory::SharedCtor() {
  _cached_size_ = 0;
  undo_count_ = 0u;
  pending_preflight_command_ = NULL;
  fixed_radar_13365177_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandHistory::~CommandHistory() {
  SharedDtor();
}

void CommandHistory::SharedDtor() {
  if (this != default_instance_) {
    delete pending_preflight_command_;
  }
}

void CommandHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandHistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandHistory_descriptor_;
}

const CommandHistory& CommandHistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSKArchives_2eproto();
  return *default_instance_;
}

CommandHistory* CommandHistory::default_instance_ = NULL;

CommandHistory* CommandHistory::New() const {
  return new CommandHistory;
}

void CommandHistory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    undo_count_ = 0u;
    if (has_pending_preflight_command()) {
      if (pending_preflight_command_ != NULL) pending_preflight_command_->::TSP::Reference::Clear();
    }
    fixed_radar_13365177_ = false;
  }
  commands_.Clear();
  marked_redo_commands_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 undo_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &undo_count_)));
          set_has_undo_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_commands;
        break;
      }

      // repeated .TSP.Reference commands = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commands:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_commands()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_commands;
        if (input->ExpectTag(26)) goto parse_marked_redo_commands;
        break;
      }

      // repeated .TSP.Reference marked_redo_commands = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_marked_redo_commands:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_marked_redo_commands()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_marked_redo_commands;
        if (input->ExpectTag(34)) goto parse_pending_preflight_command;
        break;
      }

      // optional .TSP.Reference pending_preflight_command = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pending_preflight_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pending_preflight_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_fixed_radar_13365177;
        break;
      }

      // optional bool fixed_radar_13365177 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fixed_radar_13365177:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fixed_radar_13365177_)));
          set_has_fixed_radar_13365177();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 undo_count = 1;
  if (has_undo_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->undo_count(), output);
  }

  // repeated .TSP.Reference commands = 2;
  for (int i = 0; i < this->commands_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->commands(i), output);
  }

  // repeated .TSP.Reference marked_redo_commands = 3;
  for (int i = 0; i < this->marked_redo_commands_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->marked_redo_commands(i), output);
  }

  // optional .TSP.Reference pending_preflight_command = 4;
  if (has_pending_preflight_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pending_preflight_command(), output);
  }

  // optional bool fixed_radar_13365177 = 10;
  if (has_fixed_radar_13365177()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->fixed_radar_13365177(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandHistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 undo_count = 1;
  if (has_undo_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->undo_count(), target);
  }

  // repeated .TSP.Reference commands = 2;
  for (int i = 0; i < this->commands_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->commands(i), target);
  }

  // repeated .TSP.Reference marked_redo_commands = 3;
  for (int i = 0; i < this->marked_redo_commands_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->marked_redo_commands(i), target);
  }

  // optional .TSP.Reference pending_preflight_command = 4;
  if (has_pending_preflight_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pending_preflight_command(), target);
  }

  // optional bool fixed_radar_13365177 = 10;
  if (has_fixed_radar_13365177()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->fixed_radar_13365177(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandHistory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 undo_count = 1;
    if (has_undo_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->undo_count());
    }

    // optional .TSP.Reference pending_preflight_command = 4;
    if (has_pending_preflight_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pending_preflight_command());
    }

    // optional bool fixed_radar_13365177 = 10;
    if (has_fixed_radar_13365177()) {
      total_size += 1 + 1;
    }

  }
  // repeated .TSP.Reference commands = 2;
  total_size += 1 * this->commands_size();
  for (int i = 0; i < this->commands_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->commands(i));
  }

  // repeated .TSP.Reference marked_redo_commands = 3;
  total_size += 1 * this->marked_redo_commands_size();
  for (int i = 0; i < this->marked_redo_commands_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->marked_redo_commands(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandHistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandHistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandHistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandHistory::MergeFrom(const CommandHistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  commands_.MergeFrom(from.commands_);
  marked_redo_commands_.MergeFrom(from.marked_redo_commands_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_undo_count()) {
      set_undo_count(from.undo_count());
    }
    if (from.has_pending_preflight_command()) {
      mutable_pending_preflight_command()->::TSP::Reference::MergeFrom(from.pending_preflight_command());
    }
    if (from.has_fixed_radar_13365177()) {
      set_fixed_radar_13365177(from.fixed_radar_13365177());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandHistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandHistory::CopyFrom(const CommandHistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandHistory::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < commands_size(); i++) {
    if (!this->commands(i).IsInitialized()) return false;
  }
  for (int i = 0; i < marked_redo_commands_size(); i++) {
    if (!this->marked_redo_commands(i).IsInitialized()) return false;
  }
  if (has_pending_preflight_command()) {
    if (!this->pending_preflight_command().IsInitialized()) return false;
  }
  return true;
}

void CommandHistory::Swap(CommandHistory* other) {
  if (other != this) {
    std::swap(undo_count_, other->undo_count_);
    commands_.Swap(&other->commands_);
    marked_redo_commands_.Swap(&other->marked_redo_commands_);
    std::swap(pending_preflight_command_, other->pending_preflight_command_);
    std::swap(fixed_radar_13365177_, other->fixed_radar_13365177_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandHistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandHistory_descriptor_;
  metadata.reflection = CommandHistory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DocumentArchive::kLocaleIdentifierFieldNumber;
const int DocumentArchive::kAnnotationAuthorStorageFieldNumber;
#endif  // !_MSC_VER

DocumentArchive::DocumentArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DocumentArchive::InitAsDefaultInstance() {
  annotation_author_storage_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

DocumentArchive::DocumentArchive(const DocumentArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DocumentArchive::SharedCtor() {
  _cached_size_ = 0;
  locale_identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  annotation_author_storage_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DocumentArchive::~DocumentArchive() {
  SharedDtor();
}

void DocumentArchive::SharedDtor() {
  if (locale_identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete locale_identifier_;
  }
  if (this != default_instance_) {
    delete annotation_author_storage_;
  }
}

void DocumentArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DocumentArchive_descriptor_;
}

const DocumentArchive& DocumentArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSKArchives_2eproto();
  return *default_instance_;
}

DocumentArchive* DocumentArchive::default_instance_ = NULL;

DocumentArchive* DocumentArchive::New() const {
  return new DocumentArchive;
}

void DocumentArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_locale_identifier()) {
      if (locale_identifier_ != &::google::protobuf::internal::kEmptyString) {
        locale_identifier_->clear();
      }
    }
    if (has_annotation_author_storage()) {
      if (annotation_author_storage_ != NULL) annotation_author_storage_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DocumentArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string locale_identifier = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_locale_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->locale_identifier().data(), this->locale_identifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_annotation_author_storage;
        break;
      }

      // optional .TSP.Reference annotation_author_storage = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_annotation_author_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_annotation_author_storage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DocumentArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string locale_identifier = 4;
  if (has_locale_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->locale_identifier().data(), this->locale_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->locale_identifier(), output);
  }

  // optional .TSP.Reference annotation_author_storage = 7;
  if (has_annotation_author_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->annotation_author_storage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DocumentArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string locale_identifier = 4;
  if (has_locale_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->locale_identifier().data(), this->locale_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->locale_identifier(), target);
  }

  // optional .TSP.Reference annotation_author_storage = 7;
  if (has_annotation_author_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->annotation_author_storage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DocumentArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string locale_identifier = 4;
    if (has_locale_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->locale_identifier());
    }

    // optional .TSP.Reference annotation_author_storage = 7;
    if (has_annotation_author_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->annotation_author_storage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DocumentArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DocumentArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DocumentArchive::MergeFrom(const DocumentArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_locale_identifier()) {
      set_locale_identifier(from.locale_identifier());
    }
    if (from.has_annotation_author_storage()) {
      mutable_annotation_author_storage()->::TSP::Reference::MergeFrom(from.annotation_author_storage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DocumentArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentArchive::CopyFrom(const DocumentArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentArchive::IsInitialized() const {

  if (has_annotation_author_storage()) {
    if (!this->annotation_author_storage().IsInitialized()) return false;
  }
  return true;
}

void DocumentArchive::Swap(DocumentArchive* other) {
  if (other != this) {
    std::swap(locale_identifier_, other->locale_identifier_);
    std::swap(annotation_author_storage_, other->annotation_author_storage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DocumentArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DocumentArchive_descriptor_;
  metadata.reflection = DocumentArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DocumentSupportArchive::kCommandHistoryFieldNumber;
const int DocumentSupportArchive::kCommandSelectionBehaviorHistoryFieldNumber;
const int DocumentSupportArchive::kUndoCountFieldNumber;
const int DocumentSupportArchive::kRedoCountFieldNumber;
const int DocumentSupportArchive::kUndoActionStringFieldNumber;
const int DocumentSupportArchive::kRedoActionStringFieldNumber;
const int DocumentSupportArchive::kWebStateFieldNumber;
#endif  // !_MSC_VER

DocumentSupportArchive::DocumentSupportArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DocumentSupportArchive::InitAsDefaultInstance() {
  command_history_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  command_selection_behavior_history_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  web_state_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

DocumentSupportArchive::DocumentSupportArchive(const DocumentSupportArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DocumentSupportArchive::SharedCtor() {
  _cached_size_ = 0;
  command_history_ = NULL;
  command_selection_behavior_history_ = NULL;
  undo_count_ = 0u;
  redo_count_ = 0u;
  undo_action_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  redo_action_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  web_state_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DocumentSupportArchive::~DocumentSupportArchive() {
  SharedDtor();
}

void DocumentSupportArchive::SharedDtor() {
  if (undo_action_string_ != &::google::protobuf::internal::kEmptyString) {
    delete undo_action_string_;
  }
  if (redo_action_string_ != &::google::protobuf::internal::kEmptyString) {
    delete redo_action_string_;
  }
  if (this != default_instance_) {
    delete command_history_;
    delete command_selection_behavior_history_;
    delete web_state_;
  }
}

void DocumentSupportArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentSupportArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DocumentSupportArchive_descriptor_;
}

const DocumentSupportArchive& DocumentSupportArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSKArchives_2eproto();
  return *default_instance_;
}

DocumentSupportArchive* DocumentSupportArchive::default_instance_ = NULL;

DocumentSupportArchive* DocumentSupportArchive::New() const {
  return new DocumentSupportArchive;
}

void DocumentSupportArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_command_history()) {
      if (command_history_ != NULL) command_history_->::TSP::Reference::Clear();
    }
    if (has_command_selection_behavior_history()) {
      if (command_selection_behavior_history_ != NULL) command_selection_behavior_history_->::TSP::Reference::Clear();
    }
    undo_count_ = 0u;
    redo_count_ = 0u;
    if (has_undo_action_string()) {
      if (undo_action_string_ != &::google::protobuf::internal::kEmptyString) {
        undo_action_string_->clear();
      }
    }
    if (has_redo_action_string()) {
      if (redo_action_string_ != &::google::protobuf::internal::kEmptyString) {
        redo_action_string_->clear();
      }
    }
    if (has_web_state()) {
      if (web_state_ != NULL) web_state_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DocumentSupportArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Reference command_history = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_command_history()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_command_selection_behavior_history;
        break;
      }

      // optional .TSP.Reference command_selection_behavior_history = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_command_selection_behavior_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_command_selection_behavior_history()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_undo_count;
        break;
      }

      // optional uint32 undo_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_undo_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &undo_count_)));
          set_has_undo_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_redo_count;
        break;
      }

      // optional uint32 redo_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_redo_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &redo_count_)));
          set_has_redo_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_undo_action_string;
        break;
      }

      // optional string undo_action_string = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_action_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_undo_action_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->undo_action_string().data(), this->undo_action_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_redo_action_string;
        break;
      }

      // optional string redo_action_string = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_redo_action_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_redo_action_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->redo_action_string().data(), this->redo_action_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_web_state;
        break;
      }

      // optional .TSP.Reference web_state = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_web_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_web_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DocumentSupportArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Reference command_history = 1;
  if (has_command_history()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->command_history(), output);
  }

  // optional .TSP.Reference command_selection_behavior_history = 2;
  if (has_command_selection_behavior_history()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->command_selection_behavior_history(), output);
  }

  // optional uint32 undo_count = 4;
  if (has_undo_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->undo_count(), output);
  }

  // optional uint32 redo_count = 5;
  if (has_redo_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->redo_count(), output);
  }

  // optional string undo_action_string = 6;
  if (has_undo_action_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->undo_action_string().data(), this->undo_action_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->undo_action_string(), output);
  }

  // optional string redo_action_string = 7;
  if (has_redo_action_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->redo_action_string().data(), this->redo_action_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->redo_action_string(), output);
  }

  // optional .TSP.Reference web_state = 8;
  if (has_web_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->web_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DocumentSupportArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Reference command_history = 1;
  if (has_command_history()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->command_history(), target);
  }

  // optional .TSP.Reference command_selection_behavior_history = 2;
  if (has_command_selection_behavior_history()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->command_selection_behavior_history(), target);
  }

  // optional uint32 undo_count = 4;
  if (has_undo_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->undo_count(), target);
  }

  // optional uint32 redo_count = 5;
  if (has_redo_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->redo_count(), target);
  }

  // optional string undo_action_string = 6;
  if (has_undo_action_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->undo_action_string().data(), this->undo_action_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->undo_action_string(), target);
  }

  // optional string redo_action_string = 7;
  if (has_redo_action_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->redo_action_string().data(), this->redo_action_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->redo_action_string(), target);
  }

  // optional .TSP.Reference web_state = 8;
  if (has_web_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->web_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DocumentSupportArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.Reference command_history = 1;
    if (has_command_history()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->command_history());
    }

    // optional .TSP.Reference command_selection_behavior_history = 2;
    if (has_command_selection_behavior_history()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->command_selection_behavior_history());
    }

    // optional uint32 undo_count = 4;
    if (has_undo_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->undo_count());
    }

    // optional uint32 redo_count = 5;
    if (has_redo_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->redo_count());
    }

    // optional string undo_action_string = 6;
    if (has_undo_action_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->undo_action_string());
    }

    // optional string redo_action_string = 7;
    if (has_redo_action_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->redo_action_string());
    }

    // optional .TSP.Reference web_state = 8;
    if (has_web_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->web_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentSupportArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DocumentSupportArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DocumentSupportArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DocumentSupportArchive::MergeFrom(const DocumentSupportArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command_history()) {
      mutable_command_history()->::TSP::Reference::MergeFrom(from.command_history());
    }
    if (from.has_command_selection_behavior_history()) {
      mutable_command_selection_behavior_history()->::TSP::Reference::MergeFrom(from.command_selection_behavior_history());
    }
    if (from.has_undo_count()) {
      set_undo_count(from.undo_count());
    }
    if (from.has_redo_count()) {
      set_redo_count(from.redo_count());
    }
    if (from.has_undo_action_string()) {
      set_undo_action_string(from.undo_action_string());
    }
    if (from.has_redo_action_string()) {
      set_redo_action_string(from.redo_action_string());
    }
    if (from.has_web_state()) {
      mutable_web_state()->::TSP::Reference::MergeFrom(from.web_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DocumentSupportArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentSupportArchive::CopyFrom(const DocumentSupportArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentSupportArchive::IsInitialized() const {

  if (has_command_history()) {
    if (!this->command_history().IsInitialized()) return false;
  }
  if (has_command_selection_behavior_history()) {
    if (!this->command_selection_behavior_history().IsInitialized()) return false;
  }
  if (has_web_state()) {
    if (!this->web_state().IsInitialized()) return false;
  }
  return true;
}

void DocumentSupportArchive::Swap(DocumentSupportArchive* other) {
  if (other != this) {
    std::swap(command_history_, other->command_history_);
    std::swap(command_selection_behavior_history_, other->command_selection_behavior_history_);
    std::swap(undo_count_, other->undo_count_);
    std::swap(redo_count_, other->redo_count_);
    std::swap(undo_action_string_, other->undo_action_string_);
    std::swap(redo_action_string_, other->redo_action_string_);
    std::swap(web_state_, other->web_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DocumentSupportArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DocumentSupportArchive_descriptor_;
  metadata.reflection = DocumentSupportArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ViewStateArchive::kViewStateRootFieldNumber;
#endif  // !_MSC_VER

ViewStateArchive::ViewStateArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ViewStateArchive::InitAsDefaultInstance() {
  view_state_root_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

ViewStateArchive::ViewStateArchive(const ViewStateArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ViewStateArchive::SharedCtor() {
  _cached_size_ = 0;
  view_state_root_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ViewStateArchive::~ViewStateArchive() {
  SharedDtor();
}

void ViewStateArchive::SharedDtor() {
  if (this != default_instance_) {
    delete view_state_root_;
  }
}

void ViewStateArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ViewStateArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ViewStateArchive_descriptor_;
}

const ViewStateArchive& ViewStateArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSKArchives_2eproto();
  return *default_instance_;
}

ViewStateArchive* ViewStateArchive::default_instance_ = NULL;

ViewStateArchive* ViewStateArchive::New() const {
  return new ViewStateArchive;
}

void ViewStateArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_view_state_root()) {
      if (view_state_root_ != NULL) view_state_root_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ViewStateArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSP.Reference view_state_root = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_view_state_root()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ViewStateArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSP.Reference view_state_root = 1;
  if (has_view_state_root()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->view_state_root(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ViewStateArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSP.Reference view_state_root = 1;
  if (has_view_state_root()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->view_state_root(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ViewStateArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSP.Reference view_state_root = 1;
    if (has_view_state_root()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->view_state_root());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ViewStateArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ViewStateArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ViewStateArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ViewStateArchive::MergeFrom(const ViewStateArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_view_state_root()) {
      mutable_view_state_root()->::TSP::Reference::MergeFrom(from.view_state_root());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ViewStateArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ViewStateArchive::CopyFrom(const ViewStateArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewStateArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_view_state_root()) {
    if (!this->view_state_root().IsInitialized()) return false;
  }
  return true;
}

void ViewStateArchive::Swap(ViewStateArchive* other) {
  if (other != this) {
    std::swap(view_state_root_, other->view_state_root_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ViewStateArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ViewStateArchive_descriptor_;
  metadata.reflection = ViewStateArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandArchive::kUndoRedoStateFieldNumber;
const int CommandArchive::kUndoCollectionFieldNumber;
#endif  // !_MSC_VER

CommandArchive::CommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandArchive::InitAsDefaultInstance() {
  undoredostate_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  undocollection_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandArchive::CommandArchive(const CommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandArchive::SharedCtor() {
  _cached_size_ = 0;
  undoredostate_ = NULL;
  undocollection_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandArchive::~CommandArchive() {
  SharedDtor();
}

void CommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete undoredostate_;
    delete undocollection_;
  }
}

void CommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandArchive_descriptor_;
}

const CommandArchive& CommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSKArchives_2eproto();
  return *default_instance_;
}

CommandArchive* CommandArchive::default_instance_ = NULL;

CommandArchive* CommandArchive::New() const {
  return new CommandArchive;
}

void CommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_undoredostate()) {
      if (undoredostate_ != NULL) undoredostate_->::TSP::Reference::Clear();
    }
    if (has_undocollection()) {
      if (undocollection_ != NULL) undocollection_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Reference undoRedoState = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undoredostate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_undoCollection;
        break;
      }

      // optional .TSP.Reference undoCollection = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undoCollection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undocollection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Reference undoRedoState = 1;
  if (has_undoredostate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->undoredostate(), output);
  }

  // optional .TSP.Reference undoCollection = 2;
  if (has_undocollection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->undocollection(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Reference undoRedoState = 1;
  if (has_undoredostate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->undoredostate(), target);
  }

  // optional .TSP.Reference undoCollection = 2;
  if (has_undocollection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->undocollection(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.Reference undoRedoState = 1;
    if (has_undoredostate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undoredostate());
    }

    // optional .TSP.Reference undoCollection = 2;
    if (has_undocollection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undocollection());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandArchive::MergeFrom(const CommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_undoredostate()) {
      mutable_undoredostate()->::TSP::Reference::MergeFrom(from.undoredostate());
    }
    if (from.has_undocollection()) {
      mutable_undocollection()->::TSP::Reference::MergeFrom(from.undocollection());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandArchive::CopyFrom(const CommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandArchive::IsInitialized() const {

  if (has_undoredostate()) {
    if (!this->undoredostate().IsInitialized()) return false;
  }
  if (has_undocollection()) {
    if (!this->undocollection().IsInitialized()) return false;
  }
  return true;
}

void CommandArchive::Swap(CommandArchive* other) {
  if (other != this) {
    std::swap(undoredostate_, other->undoredostate_);
    std::swap(undocollection_, other->undocollection_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandArchive_descriptor_;
  metadata.reflection = CommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandGroupArchive::kSuperFieldNumber;
const int CommandGroupArchive::kCommandsFieldNumber;
const int CommandGroupArchive::kProcessResultsFieldNumber;
#endif  // !_MSC_VER

CommandGroupArchive::CommandGroupArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandGroupArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  process_results_ = const_cast< ::TSP::IndexSet*>(&::TSP::IndexSet::default_instance());
}

CommandGroupArchive::CommandGroupArchive(const CommandGroupArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandGroupArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  process_results_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandGroupArchive::~CommandGroupArchive() {
  SharedDtor();
}

void CommandGroupArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete process_results_;
  }
}

void CommandGroupArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandGroupArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandGroupArchive_descriptor_;
}

const CommandGroupArchive& CommandGroupArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSKArchives_2eproto();
  return *default_instance_;
}

CommandGroupArchive* CommandGroupArchive::default_instance_ = NULL;

CommandGroupArchive* CommandGroupArchive::New() const {
  return new CommandGroupArchive;
}

void CommandGroupArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_process_results()) {
      if (process_results_ != NULL) process_results_->::TSP::IndexSet::Clear();
    }
  }
  commands_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandGroupArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_commands;
        break;
      }

      // repeated .TSP.Reference commands = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commands:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_commands()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_commands;
        if (input->ExpectTag(26)) goto parse_process_results;
        break;
      }

      // optional .TSP.IndexSet process_results = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_process_results:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_process_results()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandGroupArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // repeated .TSP.Reference commands = 2;
  for (int i = 0; i < this->commands_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->commands(i), output);
  }

  // optional .TSP.IndexSet process_results = 3;
  if (has_process_results()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->process_results(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandGroupArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // repeated .TSP.Reference commands = 2;
  for (int i = 0; i < this->commands_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->commands(i), target);
  }

  // optional .TSP.IndexSet process_results = 3;
  if (has_process_results()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->process_results(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandGroupArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.IndexSet process_results = 3;
    if (has_process_results()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->process_results());
    }

  }
  // repeated .TSP.Reference commands = 2;
  total_size += 1 * this->commands_size();
  for (int i = 0; i < this->commands_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->commands(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandGroupArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandGroupArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandGroupArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandGroupArchive::MergeFrom(const CommandGroupArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  commands_.MergeFrom(from.commands_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_process_results()) {
      mutable_process_results()->::TSP::IndexSet::MergeFrom(from.process_results());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandGroupArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandGroupArchive::CopyFrom(const CommandGroupArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandGroupArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  for (int i = 0; i < commands_size(); i++) {
    if (!this->commands(i).IsInitialized()) return false;
  }
  if (has_process_results()) {
    if (!this->process_results().IsInitialized()) return false;
  }
  return true;
}

void CommandGroupArchive::Swap(CommandGroupArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    commands_.Swap(&other->commands_);
    std::swap(process_results_, other->process_results_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandGroupArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandGroupArchive_descriptor_;
  metadata.reflection = CommandGroupArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandContainerArchive::kCommandsFieldNumber;
#endif  // !_MSC_VER

CommandContainerArchive::CommandContainerArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandContainerArchive::InitAsDefaultInstance() {
}

CommandContainerArchive::CommandContainerArchive(const CommandContainerArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandContainerArchive::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandContainerArchive::~CommandContainerArchive() {
  SharedDtor();
}

void CommandContainerArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommandContainerArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandContainerArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandContainerArchive_descriptor_;
}

const CommandContainerArchive& CommandContainerArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSKArchives_2eproto();
  return *default_instance_;
}

CommandContainerArchive* CommandContainerArchive::default_instance_ = NULL;

CommandContainerArchive* CommandContainerArchive::New() const {
  return new CommandContainerArchive;
}

void CommandContainerArchive::Clear() {
  commands_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandContainerArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TSP.Reference commands = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commands:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_commands()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_commands;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandContainerArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TSP.Reference commands = 1;
  for (int i = 0; i < this->commands_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commands(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandContainerArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TSP.Reference commands = 1;
  for (int i = 0; i < this->commands_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->commands(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandContainerArchive::ByteSize() const {
  int total_size = 0;

  // repeated .TSP.Reference commands = 1;
  total_size += 1 * this->commands_size();
  for (int i = 0; i < this->commands_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->commands(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandContainerArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandContainerArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandContainerArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandContainerArchive::MergeFrom(const CommandContainerArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  commands_.MergeFrom(from.commands_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandContainerArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandContainerArchive::CopyFrom(const CommandContainerArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandContainerArchive::IsInitialized() const {

  for (int i = 0; i < commands_size(); i++) {
    if (!this->commands(i).IsInitialized()) return false;
  }
  return true;
}

void CommandContainerArchive::Swap(CommandContainerArchive* other) {
  if (other != this) {
    commands_.Swap(&other->commands_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandContainerArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandContainerArchive_descriptor_;
  metadata.reflection = CommandContainerArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplaceAllChildCommandArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

ReplaceAllChildCommandArchive::ReplaceAllChildCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReplaceAllChildCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
}

ReplaceAllChildCommandArchive::ReplaceAllChildCommandArchive(const ReplaceAllChildCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReplaceAllChildCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplaceAllChildCommandArchive::~ReplaceAllChildCommandArchive() {
  SharedDtor();
}

void ReplaceAllChildCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void ReplaceAllChildCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplaceAllChildCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplaceAllChildCommandArchive_descriptor_;
}

const ReplaceAllChildCommandArchive& ReplaceAllChildCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSKArchives_2eproto();
  return *default_instance_;
}

ReplaceAllChildCommandArchive* ReplaceAllChildCommandArchive::default_instance_ = NULL;

ReplaceAllChildCommandArchive* ReplaceAllChildCommandArchive::New() const {
  return new ReplaceAllChildCommandArchive;
}

void ReplaceAllChildCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplaceAllChildCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReplaceAllChildCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReplaceAllChildCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReplaceAllChildCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplaceAllChildCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplaceAllChildCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplaceAllChildCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplaceAllChildCommandArchive::MergeFrom(const ReplaceAllChildCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplaceAllChildCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplaceAllChildCommandArchive::CopyFrom(const ReplaceAllChildCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplaceAllChildCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void ReplaceAllChildCommandArchive::Swap(ReplaceAllChildCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplaceAllChildCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplaceAllChildCommandArchive_descriptor_;
  metadata.reflection = ReplaceAllChildCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplaceAllCommandArchive::kSuperFieldNumber;
const int ReplaceAllCommandArchive::kCommandsFieldNumber;
const int ReplaceAllCommandArchive::kFindStringFieldNumber;
const int ReplaceAllCommandArchive::kReplaceStringFieldNumber;
const int ReplaceAllCommandArchive::kOptionsFieldNumber;
#endif  // !_MSC_VER

ReplaceAllCommandArchive::ReplaceAllCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReplaceAllCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
}

ReplaceAllCommandArchive::ReplaceAllCommandArchive(const ReplaceAllCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReplaceAllCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  find_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  replace_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  options_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplaceAllCommandArchive::~ReplaceAllCommandArchive() {
  SharedDtor();
}

void ReplaceAllCommandArchive::SharedDtor() {
  if (find_string_ != &::google::protobuf::internal::kEmptyString) {
    delete find_string_;
  }
  if (replace_string_ != &::google::protobuf::internal::kEmptyString) {
    delete replace_string_;
  }
  if (this != default_instance_) {
    delete super_;
  }
}

void ReplaceAllCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplaceAllCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplaceAllCommandArchive_descriptor_;
}

const ReplaceAllCommandArchive& ReplaceAllCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSKArchives_2eproto();
  return *default_instance_;
}

ReplaceAllCommandArchive* ReplaceAllCommandArchive::default_instance_ = NULL;

ReplaceAllCommandArchive* ReplaceAllCommandArchive::New() const {
  return new ReplaceAllCommandArchive;
}

void ReplaceAllCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_find_string()) {
      if (find_string_ != &::google::protobuf::internal::kEmptyString) {
        find_string_->clear();
      }
    }
    if (has_replace_string()) {
      if (replace_string_ != &::google::protobuf::internal::kEmptyString) {
        replace_string_->clear();
      }
    }
    options_ = 0u;
  }
  commands_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplaceAllCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_commands;
        break;
      }

      // repeated .TSP.Reference commands = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commands:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_commands()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_commands;
        if (input->ExpectTag(26)) goto parse_find_string;
        break;
      }

      // required string find_string = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_find_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_find_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->find_string().data(), this->find_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_replace_string;
        break;
      }

      // required string replace_string = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_replace_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_replace_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->replace_string().data(), this->replace_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_options;
        break;
      }

      // required uint32 options = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_options:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &options_)));
          set_has_options();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReplaceAllCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // repeated .TSP.Reference commands = 2;
  for (int i = 0; i < this->commands_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->commands(i), output);
  }

  // required string find_string = 3;
  if (has_find_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->find_string().data(), this->find_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->find_string(), output);
  }

  // required string replace_string = 4;
  if (has_replace_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->replace_string().data(), this->replace_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->replace_string(), output);
  }

  // required uint32 options = 5;
  if (has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->options(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReplaceAllCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // repeated .TSP.Reference commands = 2;
  for (int i = 0; i < this->commands_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->commands(i), target);
  }

  // required string find_string = 3;
  if (has_find_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->find_string().data(), this->find_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->find_string(), target);
  }

  // required string replace_string = 4;
  if (has_replace_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->replace_string().data(), this->replace_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->replace_string(), target);
  }

  // required uint32 options = 5;
  if (has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->options(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReplaceAllCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required string find_string = 3;
    if (has_find_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->find_string());
    }

    // required string replace_string = 4;
    if (has_replace_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->replace_string());
    }

    // required uint32 options = 5;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->options());
    }

  }
  // repeated .TSP.Reference commands = 2;
  total_size += 1 * this->commands_size();
  for (int i = 0; i < this->commands_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->commands(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplaceAllCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplaceAllCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplaceAllCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplaceAllCommandArchive::MergeFrom(const ReplaceAllCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  commands_.MergeFrom(from.commands_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_find_string()) {
      set_find_string(from.find_string());
    }
    if (from.has_replace_string()) {
      set_replace_string(from.replace_string());
    }
    if (from.has_options()) {
      set_options(from.options());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplaceAllCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplaceAllCommandArchive::CopyFrom(const ReplaceAllCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplaceAllCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  for (int i = 0; i < commands_size(); i++) {
    if (!this->commands(i).IsInitialized()) return false;
  }
  return true;
}

void ReplaceAllCommandArchive::Swap(ReplaceAllCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    commands_.Swap(&other->commands_);
    std::swap(find_string_, other->find_string_);
    std::swap(replace_string_, other->replace_string_);
    std::swap(options_, other->options_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplaceAllCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplaceAllCommandArchive_descriptor_;
  metadata.reflection = ReplaceAllCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShuffleMappingArchive_Entry::kFromFieldNumber;
const int ShuffleMappingArchive_Entry::kToFieldNumber;
#endif  // !_MSC_VER

ShuffleMappingArchive_Entry::ShuffleMappingArchive_Entry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShuffleMappingArchive_Entry::InitAsDefaultInstance() {
}

ShuffleMappingArchive_Entry::ShuffleMappingArchive_Entry(const ShuffleMappingArchive_Entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShuffleMappingArchive_Entry::SharedCtor() {
  _cached_size_ = 0;
  from_ = 0u;
  to_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShuffleMappingArchive_Entry::~ShuffleMappingArchive_Entry() {
  SharedDtor();
}

void ShuffleMappingArchive_Entry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShuffleMappingArchive_Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShuffleMappingArchive_Entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShuffleMappingArchive_Entry_descriptor_;
}

const ShuffleMappingArchive_Entry& ShuffleMappingArchive_Entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSKArchives_2eproto();
  return *default_instance_;
}

ShuffleMappingArchive_Entry* ShuffleMappingArchive_Entry::default_instance_ = NULL;

ShuffleMappingArchive_Entry* ShuffleMappingArchive_Entry::New() const {
  return new ShuffleMappingArchive_Entry;
}

void ShuffleMappingArchive_Entry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    from_ = 0u;
    to_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShuffleMappingArchive_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 from = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_)));
          set_has_from();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_to;
        break;
      }

      // required uint32 to = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_)));
          set_has_to();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShuffleMappingArchive_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 from = 1;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->from(), output);
  }

  // required uint32 to = 2;
  if (has_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->to(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShuffleMappingArchive_Entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 from = 1;
  if (has_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->from(), target);
  }

  // required uint32 to = 2;
  if (has_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->to(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShuffleMappingArchive_Entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 from = 1;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from());
    }

    // required uint32 to = 2;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->to());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShuffleMappingArchive_Entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShuffleMappingArchive_Entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShuffleMappingArchive_Entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShuffleMappingArchive_Entry::MergeFrom(const ShuffleMappingArchive_Entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_to()) {
      set_to(from.to());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShuffleMappingArchive_Entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShuffleMappingArchive_Entry::CopyFrom(const ShuffleMappingArchive_Entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShuffleMappingArchive_Entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ShuffleMappingArchive_Entry::Swap(ShuffleMappingArchive_Entry* other) {
  if (other != this) {
    std::swap(from_, other->from_);
    std::swap(to_, other->to_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShuffleMappingArchive_Entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShuffleMappingArchive_Entry_descriptor_;
  metadata.reflection = ShuffleMappingArchive_Entry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ShuffleMappingArchive::kStartIndexFieldNumber;
const int ShuffleMappingArchive::kEndIndexFieldNumber;
const int ShuffleMappingArchive::kEntriesFieldNumber;
const int ShuffleMappingArchive::kIsVerticalFieldNumber;
const int ShuffleMappingArchive::kIsMoveOperationFieldNumber;
const int ShuffleMappingArchive::kFirstMovedIndexFieldNumber;
const int ShuffleMappingArchive::kDestinationIndexForMoveFieldNumber;
const int ShuffleMappingArchive::kNumberOfIndicesMovedFieldNumber;
#endif  // !_MSC_VER

ShuffleMappingArchive::ShuffleMappingArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShuffleMappingArchive::InitAsDefaultInstance() {
}

ShuffleMappingArchive::ShuffleMappingArchive(const ShuffleMappingArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShuffleMappingArchive::SharedCtor() {
  _cached_size_ = 0;
  start_index_ = 0u;
  end_index_ = 0u;
  is_vertical_ = true;
  is_move_operation_ = false;
  first_moved_index_ = 0u;
  destination_index_for_move_ = 0u;
  number_of_indices_moved_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShuffleMappingArchive::~ShuffleMappingArchive() {
  SharedDtor();
}

void ShuffleMappingArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShuffleMappingArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShuffleMappingArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShuffleMappingArchive_descriptor_;
}

const ShuffleMappingArchive& ShuffleMappingArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSKArchives_2eproto();
  return *default_instance_;
}

ShuffleMappingArchive* ShuffleMappingArchive::default_instance_ = NULL;

ShuffleMappingArchive* ShuffleMappingArchive::New() const {
  return new ShuffleMappingArchive;
}

void ShuffleMappingArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    start_index_ = 0u;
    end_index_ = 0u;
    is_vertical_ = true;
    is_move_operation_ = false;
    first_moved_index_ = 0u;
    destination_index_for_move_ = 0u;
    number_of_indices_moved_ = 0u;
  }
  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShuffleMappingArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 start_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_index_)));
          set_has_start_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_end_index;
        break;
      }

      // required uint32 end_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_index_)));
          set_has_end_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_entries;
        break;
      }

      // repeated .TSK.ShuffleMappingArchive.Entry entries = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_entries;
        if (input->ExpectTag(32)) goto parse_is_vertical;
        break;
      }

      // optional bool is_vertical = 4 [default = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_vertical:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_vertical_)));
          set_has_is_vertical();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_move_operation;
        break;
      }

      // optional bool is_move_operation = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_move_operation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_move_operation_)));
          set_has_is_move_operation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_first_moved_index;
        break;
      }

      // optional uint32 first_moved_index = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_moved_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_moved_index_)));
          set_has_first_moved_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_destination_index_for_move;
        break;
      }

      // optional uint32 destination_index_for_move = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destination_index_for_move:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destination_index_for_move_)));
          set_has_destination_index_for_move();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_number_of_indices_moved;
        break;
      }

      // optional uint32 number_of_indices_moved = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number_of_indices_moved:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_indices_moved_)));
          set_has_number_of_indices_moved();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShuffleMappingArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 start_index = 1;
  if (has_start_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->start_index(), output);
  }

  // required uint32 end_index = 2;
  if (has_end_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->end_index(), output);
  }

  // repeated .TSK.ShuffleMappingArchive.Entry entries = 3;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->entries(i), output);
  }

  // optional bool is_vertical = 4 [default = true];
  if (has_is_vertical()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_vertical(), output);
  }

  // optional bool is_move_operation = 5 [default = false];
  if (has_is_move_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_move_operation(), output);
  }

  // optional uint32 first_moved_index = 6 [default = 0];
  if (has_first_moved_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->first_moved_index(), output);
  }

  // optional uint32 destination_index_for_move = 7 [default = 0];
  if (has_destination_index_for_move()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->destination_index_for_move(), output);
  }

  // optional uint32 number_of_indices_moved = 8 [default = 0];
  if (has_number_of_indices_moved()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->number_of_indices_moved(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShuffleMappingArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 start_index = 1;
  if (has_start_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->start_index(), target);
  }

  // required uint32 end_index = 2;
  if (has_end_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->end_index(), target);
  }

  // repeated .TSK.ShuffleMappingArchive.Entry entries = 3;
  for (int i = 0; i < this->entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->entries(i), target);
  }

  // optional bool is_vertical = 4 [default = true];
  if (has_is_vertical()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_vertical(), target);
  }

  // optional bool is_move_operation = 5 [default = false];
  if (has_is_move_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_move_operation(), target);
  }

  // optional uint32 first_moved_index = 6 [default = 0];
  if (has_first_moved_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->first_moved_index(), target);
  }

  // optional uint32 destination_index_for_move = 7 [default = 0];
  if (has_destination_index_for_move()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->destination_index_for_move(), target);
  }

  // optional uint32 number_of_indices_moved = 8 [default = 0];
  if (has_number_of_indices_moved()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->number_of_indices_moved(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShuffleMappingArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 start_index = 1;
    if (has_start_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_index());
    }

    // required uint32 end_index = 2;
    if (has_end_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_index());
    }

    // optional bool is_vertical = 4 [default = true];
    if (has_is_vertical()) {
      total_size += 1 + 1;
    }

    // optional bool is_move_operation = 5 [default = false];
    if (has_is_move_operation()) {
      total_size += 1 + 1;
    }

    // optional uint32 first_moved_index = 6 [default = 0];
    if (has_first_moved_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first_moved_index());
    }

    // optional uint32 destination_index_for_move = 7 [default = 0];
    if (has_destination_index_for_move()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destination_index_for_move());
    }

    // optional uint32 number_of_indices_moved = 8 [default = 0];
    if (has_number_of_indices_moved()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number_of_indices_moved());
    }

  }
  // repeated .TSK.ShuffleMappingArchive.Entry entries = 3;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShuffleMappingArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShuffleMappingArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShuffleMappingArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShuffleMappingArchive::MergeFrom(const ShuffleMappingArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_index()) {
      set_start_index(from.start_index());
    }
    if (from.has_end_index()) {
      set_end_index(from.end_index());
    }
    if (from.has_is_vertical()) {
      set_is_vertical(from.is_vertical());
    }
    if (from.has_is_move_operation()) {
      set_is_move_operation(from.is_move_operation());
    }
    if (from.has_first_moved_index()) {
      set_first_moved_index(from.first_moved_index());
    }
    if (from.has_destination_index_for_move()) {
      set_destination_index_for_move(from.destination_index_for_move());
    }
    if (from.has_number_of_indices_moved()) {
      set_number_of_indices_moved(from.number_of_indices_moved());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShuffleMappingArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShuffleMappingArchive::CopyFrom(const ShuffleMappingArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShuffleMappingArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < entries_size(); i++) {
    if (!this->entries(i).IsInitialized()) return false;
  }
  return true;
}

void ShuffleMappingArchive::Swap(ShuffleMappingArchive* other) {
  if (other != this) {
    std::swap(start_index_, other->start_index_);
    std::swap(end_index_, other->end_index_);
    entries_.Swap(&other->entries_);
    std::swap(is_vertical_, other->is_vertical_);
    std::swap(is_move_operation_, other->is_move_operation_);
    std::swap(first_moved_index_, other->first_moved_index_);
    std::swap(destination_index_for_move_, other->destination_index_for_move_);
    std::swap(number_of_indices_moved_, other->number_of_indices_moved_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShuffleMappingArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShuffleMappingArchive_descriptor_;
  metadata.reflection = ShuffleMappingArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProgressiveCommandGroupArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

ProgressiveCommandGroupArchive::ProgressiveCommandGroupArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProgressiveCommandGroupArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandGroupArchive*>(&::TSK::CommandGroupArchive::default_instance());
}

ProgressiveCommandGroupArchive::ProgressiveCommandGroupArchive(const ProgressiveCommandGroupArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProgressiveCommandGroupArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProgressiveCommandGroupArchive::~ProgressiveCommandGroupArchive() {
  SharedDtor();
}

void ProgressiveCommandGroupArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void ProgressiveCommandGroupArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProgressiveCommandGroupArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProgressiveCommandGroupArchive_descriptor_;
}

const ProgressiveCommandGroupArchive& ProgressiveCommandGroupArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSKArchives_2eproto();
  return *default_instance_;
}

ProgressiveCommandGroupArchive* ProgressiveCommandGroupArchive::default_instance_ = NULL;

ProgressiveCommandGroupArchive* ProgressiveCommandGroupArchive::New() const {
  return new ProgressiveCommandGroupArchive;
}

void ProgressiveCommandGroupArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandGroupArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProgressiveCommandGroupArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandGroupArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProgressiveCommandGroupArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandGroupArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProgressiveCommandGroupArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandGroupArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProgressiveCommandGroupArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandGroupArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProgressiveCommandGroupArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProgressiveCommandGroupArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProgressiveCommandGroupArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProgressiveCommandGroupArchive::MergeFrom(const ProgressiveCommandGroupArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandGroupArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProgressiveCommandGroupArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProgressiveCommandGroupArchive::CopyFrom(const ProgressiveCommandGroupArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProgressiveCommandGroupArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void ProgressiveCommandGroupArchive::Swap(ProgressiveCommandGroupArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProgressiveCommandGroupArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProgressiveCommandGroupArchive_descriptor_;
  metadata.reflection = ProgressiveCommandGroupArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSelectionBehaviorHistoryArchive_Entry::kCommandFieldNumber;
const int CommandSelectionBehaviorHistoryArchive_Entry::kCommandSelectionBehaviorFieldNumber;
#endif  // !_MSC_VER

CommandSelectionBehaviorHistoryArchive_Entry::CommandSelectionBehaviorHistoryArchive_Entry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSelectionBehaviorHistoryArchive_Entry::InitAsDefaultInstance() {
  command_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  command_selection_behavior_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandSelectionBehaviorHistoryArchive_Entry::CommandSelectionBehaviorHistoryArchive_Entry(const CommandSelectionBehaviorHistoryArchive_Entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSelectionBehaviorHistoryArchive_Entry::SharedCtor() {
  _cached_size_ = 0;
  command_ = NULL;
  command_selection_behavior_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSelectionBehaviorHistoryArchive_Entry::~CommandSelectionBehaviorHistoryArchive_Entry() {
  SharedDtor();
}

void CommandSelectionBehaviorHistoryArchive_Entry::SharedDtor() {
  if (this != default_instance_) {
    delete command_;
    delete command_selection_behavior_;
  }
}

void CommandSelectionBehaviorHistoryArchive_Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSelectionBehaviorHistoryArchive_Entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSelectionBehaviorHistoryArchive_Entry_descriptor_;
}

const CommandSelectionBehaviorHistoryArchive_Entry& CommandSelectionBehaviorHistoryArchive_Entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSKArchives_2eproto();
  return *default_instance_;
}

CommandSelectionBehaviorHistoryArchive_Entry* CommandSelectionBehaviorHistoryArchive_Entry::default_instance_ = NULL;

CommandSelectionBehaviorHistoryArchive_Entry* CommandSelectionBehaviorHistoryArchive_Entry::New() const {
  return new CommandSelectionBehaviorHistoryArchive_Entry;
}

void CommandSelectionBehaviorHistoryArchive_Entry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_command()) {
      if (command_ != NULL) command_->::TSP::Reference::Clear();
    }
    if (has_command_selection_behavior()) {
      if (command_selection_behavior_ != NULL) command_selection_behavior_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSelectionBehaviorHistoryArchive_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSP.Reference command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_command_selection_behavior;
        break;
      }

      // required .TSP.Reference command_selection_behavior = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_command_selection_behavior:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_command_selection_behavior()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSelectionBehaviorHistoryArchive_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSP.Reference command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->command(), output);
  }

  // required .TSP.Reference command_selection_behavior = 2;
  if (has_command_selection_behavior()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->command_selection_behavior(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSelectionBehaviorHistoryArchive_Entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSP.Reference command = 1;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->command(), target);
  }

  // required .TSP.Reference command_selection_behavior = 2;
  if (has_command_selection_behavior()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->command_selection_behavior(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSelectionBehaviorHistoryArchive_Entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSP.Reference command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->command());
    }

    // required .TSP.Reference command_selection_behavior = 2;
    if (has_command_selection_behavior()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->command_selection_behavior());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSelectionBehaviorHistoryArchive_Entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSelectionBehaviorHistoryArchive_Entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSelectionBehaviorHistoryArchive_Entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSelectionBehaviorHistoryArchive_Entry::MergeFrom(const CommandSelectionBehaviorHistoryArchive_Entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      mutable_command()->::TSP::Reference::MergeFrom(from.command());
    }
    if (from.has_command_selection_behavior()) {
      mutable_command_selection_behavior()->::TSP::Reference::MergeFrom(from.command_selection_behavior());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSelectionBehaviorHistoryArchive_Entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSelectionBehaviorHistoryArchive_Entry::CopyFrom(const CommandSelectionBehaviorHistoryArchive_Entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSelectionBehaviorHistoryArchive_Entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_command()) {
    if (!this->command().IsInitialized()) return false;
  }
  if (has_command_selection_behavior()) {
    if (!this->command_selection_behavior().IsInitialized()) return false;
  }
  return true;
}

void CommandSelectionBehaviorHistoryArchive_Entry::Swap(CommandSelectionBehaviorHistoryArchive_Entry* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(command_selection_behavior_, other->command_selection_behavior_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSelectionBehaviorHistoryArchive_Entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSelectionBehaviorHistoryArchive_Entry_descriptor_;
  metadata.reflection = CommandSelectionBehaviorHistoryArchive_Entry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CommandSelectionBehaviorHistoryArchive::kEntriesFieldNumber;
#endif  // !_MSC_VER

CommandSelectionBehaviorHistoryArchive::CommandSelectionBehaviorHistoryArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSelectionBehaviorHistoryArchive::InitAsDefaultInstance() {
}

CommandSelectionBehaviorHistoryArchive::CommandSelectionBehaviorHistoryArchive(const CommandSelectionBehaviorHistoryArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSelectionBehaviorHistoryArchive::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSelectionBehaviorHistoryArchive::~CommandSelectionBehaviorHistoryArchive() {
  SharedDtor();
}

void CommandSelectionBehaviorHistoryArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommandSelectionBehaviorHistoryArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSelectionBehaviorHistoryArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSelectionBehaviorHistoryArchive_descriptor_;
}

const CommandSelectionBehaviorHistoryArchive& CommandSelectionBehaviorHistoryArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSKArchives_2eproto();
  return *default_instance_;
}

CommandSelectionBehaviorHistoryArchive* CommandSelectionBehaviorHistoryArchive::default_instance_ = NULL;

CommandSelectionBehaviorHistoryArchive* CommandSelectionBehaviorHistoryArchive::New() const {
  return new CommandSelectionBehaviorHistoryArchive;
}

void CommandSelectionBehaviorHistoryArchive::Clear() {
  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSelectionBehaviorHistoryArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TSK.CommandSelectionBehaviorHistoryArchive.Entry entries = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_entries;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSelectionBehaviorHistoryArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TSK.CommandSelectionBehaviorHistoryArchive.Entry entries = 1;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entries(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSelectionBehaviorHistoryArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TSK.CommandSelectionBehaviorHistoryArchive.Entry entries = 1;
  for (int i = 0; i < this->entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entries(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSelectionBehaviorHistoryArchive::ByteSize() const {
  int total_size = 0;

  // repeated .TSK.CommandSelectionBehaviorHistoryArchive.Entry entries = 1;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSelectionBehaviorHistoryArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSelectionBehaviorHistoryArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSelectionBehaviorHistoryArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSelectionBehaviorHistoryArchive::MergeFrom(const CommandSelectionBehaviorHistoryArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSelectionBehaviorHistoryArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSelectionBehaviorHistoryArchive::CopyFrom(const CommandSelectionBehaviorHistoryArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSelectionBehaviorHistoryArchive::IsInitialized() const {

  for (int i = 0; i < entries_size(); i++) {
    if (!this->entries(i).IsInitialized()) return false;
  }
  return true;
}

void CommandSelectionBehaviorHistoryArchive::Swap(CommandSelectionBehaviorHistoryArchive* other) {
  if (other != this) {
    entries_.Swap(&other->entries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSelectionBehaviorHistoryArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSelectionBehaviorHistoryArchive_descriptor_;
  metadata.reflection = CommandSelectionBehaviorHistoryArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UndoRedoStateCommandSelectionBehaviorArchive::kUndoRedoStateFieldNumber;
#endif  // !_MSC_VER

UndoRedoStateCommandSelectionBehaviorArchive::UndoRedoStateCommandSelectionBehaviorArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UndoRedoStateCommandSelectionBehaviorArchive::InitAsDefaultInstance() {
  undo_redo_state_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

UndoRedoStateCommandSelectionBehaviorArchive::UndoRedoStateCommandSelectionBehaviorArchive(const UndoRedoStateCommandSelectionBehaviorArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UndoRedoStateCommandSelectionBehaviorArchive::SharedCtor() {
  _cached_size_ = 0;
  undo_redo_state_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UndoRedoStateCommandSelectionBehaviorArchive::~UndoRedoStateCommandSelectionBehaviorArchive() {
  SharedDtor();
}

void UndoRedoStateCommandSelectionBehaviorArchive::SharedDtor() {
  if (this != default_instance_) {
    delete undo_redo_state_;
  }
}

void UndoRedoStateCommandSelectionBehaviorArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UndoRedoStateCommandSelectionBehaviorArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UndoRedoStateCommandSelectionBehaviorArchive_descriptor_;
}

const UndoRedoStateCommandSelectionBehaviorArchive& UndoRedoStateCommandSelectionBehaviorArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSKArchives_2eproto();
  return *default_instance_;
}

UndoRedoStateCommandSelectionBehaviorArchive* UndoRedoStateCommandSelectionBehaviorArchive::default_instance_ = NULL;

UndoRedoStateCommandSelectionBehaviorArchive* UndoRedoStateCommandSelectionBehaviorArchive::New() const {
  return new UndoRedoStateCommandSelectionBehaviorArchive;
}

void UndoRedoStateCommandSelectionBehaviorArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_undo_redo_state()) {
      if (undo_redo_state_ != NULL) undo_redo_state_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UndoRedoStateCommandSelectionBehaviorArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Reference undo_redo_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_redo_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UndoRedoStateCommandSelectionBehaviorArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Reference undo_redo_state = 2;
  if (has_undo_redo_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->undo_redo_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UndoRedoStateCommandSelectionBehaviorArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Reference undo_redo_state = 2;
  if (has_undo_redo_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->undo_redo_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UndoRedoStateCommandSelectionBehaviorArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.Reference undo_redo_state = 2;
    if (has_undo_redo_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_redo_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UndoRedoStateCommandSelectionBehaviorArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UndoRedoStateCommandSelectionBehaviorArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UndoRedoStateCommandSelectionBehaviorArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UndoRedoStateCommandSelectionBehaviorArchive::MergeFrom(const UndoRedoStateCommandSelectionBehaviorArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_undo_redo_state()) {
      mutable_undo_redo_state()->::TSP::Reference::MergeFrom(from.undo_redo_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UndoRedoStateCommandSelectionBehaviorArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UndoRedoStateCommandSelectionBehaviorArchive::CopyFrom(const UndoRedoStateCommandSelectionBehaviorArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoRedoStateCommandSelectionBehaviorArchive::IsInitialized() const {

  if (has_undo_redo_state()) {
    if (!this->undo_redo_state().IsInitialized()) return false;
  }
  return true;
}

void UndoRedoStateCommandSelectionBehaviorArchive::Swap(UndoRedoStateCommandSelectionBehaviorArchive* other) {
  if (other != this) {
    std::swap(undo_redo_state_, other->undo_redo_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UndoRedoStateCommandSelectionBehaviorArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UndoRedoStateCommandSelectionBehaviorArchive_descriptor_;
  metadata.reflection = UndoRedoStateCommandSelectionBehaviorArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FormatStructArchive::kFormatTypeFieldNumber;
const int FormatStructArchive::kDecimalPlacesFieldNumber;
const int FormatStructArchive::kCurrencyCodeFieldNumber;
const int FormatStructArchive::kNegativeStyleFieldNumber;
const int FormatStructArchive::kShowThousandsSeparatorFieldNumber;
const int FormatStructArchive::kUseAccountingStyleFieldNumber;
const int FormatStructArchive::kDurationStyleFieldNumber;
const int FormatStructArchive::kBaseFieldNumber;
const int FormatStructArchive::kBasePlacesFieldNumber;
const int FormatStructArchive::kBaseUseMinusSignFieldNumber;
const int FormatStructArchive::kFractionAccuracyFieldNumber;
const int FormatStructArchive::kSuppressDateFormatFieldNumber;
const int FormatStructArchive::kSuppressTimeFormatFieldNumber;
const int FormatStructArchive::kDateTimeFormatFieldNumber;
const int FormatStructArchive::kDurationUnitLargestFieldNumber;
const int FormatStructArchive::kDurationUnitSmallestFieldNumber;
const int FormatStructArchive::kCustomIdFieldNumber;
const int FormatStructArchive::kCustomFormatStringFieldNumber;
const int FormatStructArchive::kScaleFactorFieldNumber;
const int FormatStructArchive::kRequiresFractionReplacementFieldNumber;
const int FormatStructArchive::kControlMinimumFieldNumber;
const int FormatStructArchive::kControlMaximumFieldNumber;
const int FormatStructArchive::kControlIncrementFieldNumber;
const int FormatStructArchive::kControlFormatTypeFieldNumber;
const int FormatStructArchive::kSliderOrientationFieldNumber;
const int FormatStructArchive::kSliderPositionFieldNumber;
const int FormatStructArchive::kDecimalWidthFieldNumber;
const int FormatStructArchive::kMinIntegerWidthFieldNumber;
const int FormatStructArchive::kNumNonspaceIntegerDigitsFieldNumber;
const int FormatStructArchive::kNumNonspaceDecimalDigitsFieldNumber;
const int FormatStructArchive::kIndexFromRightLastIntegerFieldNumber;
const int FormatStructArchive::kInterstitialStringsFieldNumber;
const int FormatStructArchive::kIntersStrInsertionIndexesFieldNumber;
const int FormatStructArchive::kNumHashDecimalDigitsFieldNumber;
const int FormatStructArchive::kTotalNumDecimalDigitsFieldNumber;
const int FormatStructArchive::kIsComplexFieldNumber;
const int FormatStructArchive::kContainsIntegerTokenFieldNumber;
const int FormatStructArchive::kMultipleChoiceListInitialValueFieldNumber;
const int FormatStructArchive::kMultipleChoiceListIdFieldNumber;
const int FormatStructArchive::kUseAutomaticDurationUnitsFieldNumber;
#endif  // !_MSC_VER

FormatStructArchive::FormatStructArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FormatStructArchive::InitAsDefaultInstance() {
  inters_str_insertion_indexes_ = const_cast< ::TSP::IndexSet*>(&::TSP::IndexSet::default_instance());
}

FormatStructArchive::FormatStructArchive(const FormatStructArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FormatStructArchive::SharedCtor() {
  _cached_size_ = 0;
  format_type_ = 0u;
  decimal_places_ = 0u;
  currency_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  negative_style_ = 0u;
  show_thousands_separator_ = false;
  use_accounting_style_ = false;
  duration_style_ = 0u;
  base_ = 0u;
  base_places_ = 0u;
  base_use_minus_sign_ = false;
  fraction_accuracy_ = 0u;
  suppress_date_format_ = false;
  suppress_time_format_ = false;
  date_time_format_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  duration_unit_largest_ = 0u;
  duration_unit_smallest_ = 0u;
  custom_id_ = 0u;
  custom_format_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  scale_factor_ = 0;
  requires_fraction_replacement_ = false;
  control_minimum_ = 0;
  control_maximum_ = 0;
  control_increment_ = 0;
  control_format_type_ = 0u;
  slider_orientation_ = 0u;
  slider_position_ = 0u;
  decimal_width_ = 0u;
  min_integer_width_ = 0u;
  num_nonspace_integer_digits_ = 0u;
  num_nonspace_decimal_digits_ = 0u;
  index_from_right_last_integer_ = 0u;
  inters_str_insertion_indexes_ = NULL;
  num_hash_decimal_digits_ = 0u;
  total_num_decimal_digits_ = 0u;
  is_complex_ = false;
  contains_integer_token_ = false;
  multiple_choice_list_initial_value_ = 0u;
  multiple_choice_list_id_ = 0u;
  use_automatic_duration_units_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FormatStructArchive::~FormatStructArchive() {
  SharedDtor();
}

void FormatStructArchive::SharedDtor() {
  if (currency_code_ != &::google::protobuf::internal::kEmptyString) {
    delete currency_code_;
  }
  if (date_time_format_ != &::google::protobuf::internal::kEmptyString) {
    delete date_time_format_;
  }
  if (custom_format_string_ != &::google::protobuf::internal::kEmptyString) {
    delete custom_format_string_;
  }
  if (this != default_instance_) {
    delete inters_str_insertion_indexes_;
  }
}

void FormatStructArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FormatStructArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FormatStructArchive_descriptor_;
}

const FormatStructArchive& FormatStructArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSKArchives_2eproto();
  return *default_instance_;
}

FormatStructArchive* FormatStructArchive::default_instance_ = NULL;

FormatStructArchive* FormatStructArchive::New() const {
  return new FormatStructArchive;
}

void FormatStructArchive::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    format_type_ = 0u;
    decimal_places_ = 0u;
    if (has_currency_code()) {
      if (currency_code_ != &::google::protobuf::internal::kEmptyString) {
        currency_code_->clear();
      }
    }
    negative_style_ = 0u;
    show_thousands_separator_ = false;
    use_accounting_style_ = false;
    duration_style_ = 0u;
    base_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    base_places_ = 0u;
    base_use_minus_sign_ = false;
    fraction_accuracy_ = 0u;
    suppress_date_format_ = false;
    suppress_time_format_ = false;
    if (has_date_time_format()) {
      if (date_time_format_ != &::google::protobuf::internal::kEmptyString) {
        date_time_format_->clear();
      }
    }
    duration_unit_largest_ = 0u;
    duration_unit_smallest_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    custom_id_ = 0u;
    if (has_custom_format_string()) {
      if (custom_format_string_ != &::google::protobuf::internal::kEmptyString) {
        custom_format_string_->clear();
      }
    }
    scale_factor_ = 0;
    requires_fraction_replacement_ = false;
    control_minimum_ = 0;
    control_maximum_ = 0;
    control_increment_ = 0;
    control_format_type_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    slider_orientation_ = 0u;
    slider_position_ = 0u;
    decimal_width_ = 0u;
    min_integer_width_ = 0u;
    num_nonspace_integer_digits_ = 0u;
    num_nonspace_decimal_digits_ = 0u;
    index_from_right_last_integer_ = 0u;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_inters_str_insertion_indexes()) {
      if (inters_str_insertion_indexes_ != NULL) inters_str_insertion_indexes_->::TSP::IndexSet::Clear();
    }
    num_hash_decimal_digits_ = 0u;
    total_num_decimal_digits_ = 0u;
    is_complex_ = false;
    contains_integer_token_ = false;
    multiple_choice_list_initial_value_ = 0u;
    multiple_choice_list_id_ = 0u;
    use_automatic_duration_units_ = false;
  }
  interstitial_strings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FormatStructArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 format_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &format_type_)));
          set_has_format_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_decimal_places;
        break;
      }

      // optional uint32 decimal_places = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_decimal_places:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &decimal_places_)));
          set_has_decimal_places();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_currency_code;
        break;
      }

      // optional string currency_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currency_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->currency_code().data(), this->currency_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_negative_style;
        break;
      }

      // optional uint32 negative_style = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_negative_style:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &negative_style_)));
          set_has_negative_style();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_show_thousands_separator;
        break;
      }

      // optional bool show_thousands_separator = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_thousands_separator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_thousands_separator_)));
          set_has_show_thousands_separator();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_use_accounting_style;
        break;
      }

      // optional bool use_accounting_style = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_accounting_style:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_accounting_style_)));
          set_has_use_accounting_style();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_duration_style;
        break;
      }

      // optional uint32 duration_style = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duration_style:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_style_)));
          set_has_duration_style();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_base;
        break;
      }

      // optional uint32 base = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_)));
          set_has_base();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_base_places;
        break;
      }

      // optional uint32 base_places = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base_places:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_places_)));
          set_has_base_places();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_base_use_minus_sign;
        break;
      }

      // optional bool base_use_minus_sign = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base_use_minus_sign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &base_use_minus_sign_)));
          set_has_base_use_minus_sign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_fraction_accuracy;
        break;
      }

      // optional uint32 fraction_accuracy = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fraction_accuracy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fraction_accuracy_)));
          set_has_fraction_accuracy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_suppress_date_format;
        break;
      }

      // optional bool suppress_date_format = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suppress_date_format:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &suppress_date_format_)));
          set_has_suppress_date_format();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_suppress_time_format;
        break;
      }

      // optional bool suppress_time_format = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suppress_time_format:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &suppress_time_format_)));
          set_has_suppress_time_format();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_date_time_format;
        break;
      }

      // optional string date_time_format = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_date_time_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date_time_format()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->date_time_format().data(), this->date_time_format().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_duration_unit_largest;
        break;
      }

      // optional uint32 duration_unit_largest = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duration_unit_largest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_unit_largest_)));
          set_has_duration_unit_largest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_duration_unit_smallest;
        break;
      }

      // optional uint32 duration_unit_smallest = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duration_unit_smallest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_unit_smallest_)));
          set_has_duration_unit_smallest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_custom_id;
        break;
      }

      // optional uint32 custom_id = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_custom_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &custom_id_)));
          set_has_custom_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_custom_format_string;
        break;
      }

      // optional string custom_format_string = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_custom_format_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_format_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->custom_format_string().data(), this->custom_format_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_scale_factor;
        break;
      }

      // optional double scale_factor = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_scale_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &scale_factor_)));
          set_has_scale_factor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_requires_fraction_replacement;
        break;
      }

      // optional bool requires_fraction_replacement = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requires_fraction_replacement:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requires_fraction_replacement_)));
          set_has_requires_fraction_replacement();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(169)) goto parse_control_minimum;
        break;
      }

      // optional double control_minimum = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_control_minimum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &control_minimum_)));
          set_has_control_minimum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(177)) goto parse_control_maximum;
        break;
      }

      // optional double control_maximum = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_control_maximum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &control_maximum_)));
          set_has_control_maximum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(185)) goto parse_control_increment;
        break;
      }

      // optional double control_increment = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_control_increment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &control_increment_)));
          set_has_control_increment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_control_format_type;
        break;
      }

      // optional uint32 control_format_type = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_control_format_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &control_format_type_)));
          set_has_control_format_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_slider_orientation;
        break;
      }

      // optional uint32 slider_orientation = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slider_orientation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slider_orientation_)));
          set_has_slider_orientation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_slider_position;
        break;
      }

      // optional uint32 slider_position = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slider_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slider_position_)));
          set_has_slider_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_decimal_width;
        break;
      }

      // optional uint32 decimal_width = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_decimal_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &decimal_width_)));
          set_has_decimal_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_min_integer_width;
        break;
      }

      // optional uint32 min_integer_width = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_integer_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_integer_width_)));
          set_has_min_integer_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_num_nonspace_integer_digits;
        break;
      }

      // optional uint32 num_nonspace_integer_digits = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_nonspace_integer_digits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_nonspace_integer_digits_)));
          set_has_num_nonspace_integer_digits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_num_nonspace_decimal_digits;
        break;
      }

      // optional uint32 num_nonspace_decimal_digits = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_nonspace_decimal_digits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_nonspace_decimal_digits_)));
          set_has_num_nonspace_decimal_digits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_index_from_right_last_integer;
        break;
      }

      // optional uint32 index_from_right_last_integer = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index_from_right_last_integer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_from_right_last_integer_)));
          set_has_index_from_right_last_integer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_interstitial_strings;
        break;
      }

      // repeated string interstitial_strings = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_interstitial_strings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_interstitial_strings()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->interstitial_strings(this->interstitial_strings_size() - 1).data(),
            this->interstitial_strings(this->interstitial_strings_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_interstitial_strings;
        if (input->ExpectTag(266)) goto parse_inters_str_insertion_indexes;
        break;
      }

      // optional .TSP.IndexSet inters_str_insertion_indexes = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inters_str_insertion_indexes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inters_str_insertion_indexes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_num_hash_decimal_digits;
        break;
      }

      // optional uint32 num_hash_decimal_digits = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_hash_decimal_digits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_hash_decimal_digits_)));
          set_has_num_hash_decimal_digits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_total_num_decimal_digits;
        break;
      }

      // optional uint32 total_num_decimal_digits = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_num_decimal_digits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_num_decimal_digits_)));
          set_has_total_num_decimal_digits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_is_complex;
        break;
      }

      // optional bool is_complex = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_complex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_complex_)));
          set_has_is_complex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_contains_integer_token;
        break;
      }

      // optional bool contains_integer_token = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contains_integer_token:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &contains_integer_token_)));
          set_has_contains_integer_token();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_multiple_choice_list_initial_value;
        break;
      }

      // optional uint32 multiple_choice_list_initial_value = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_multiple_choice_list_initial_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &multiple_choice_list_initial_value_)));
          set_has_multiple_choice_list_initial_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_multiple_choice_list_id;
        break;
      }

      // optional uint32 multiple_choice_list_id = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_multiple_choice_list_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &multiple_choice_list_id_)));
          set_has_multiple_choice_list_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_use_automatic_duration_units;
        break;
      }

      // optional bool use_automatic_duration_units = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_automatic_duration_units:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_automatic_duration_units_)));
          set_has_use_automatic_duration_units();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((80000u <= tag && tag < 160000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FormatStructArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 format_type = 1;
  if (has_format_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->format_type(), output);
  }

  // optional uint32 decimal_places = 2;
  if (has_decimal_places()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->decimal_places(), output);
  }

  // optional string currency_code = 3;
  if (has_currency_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency_code().data(), this->currency_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->currency_code(), output);
  }

  // optional uint32 negative_style = 4;
  if (has_negative_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->negative_style(), output);
  }

  // optional bool show_thousands_separator = 5;
  if (has_show_thousands_separator()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->show_thousands_separator(), output);
  }

  // optional bool use_accounting_style = 6;
  if (has_use_accounting_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->use_accounting_style(), output);
  }

  // optional uint32 duration_style = 7;
  if (has_duration_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->duration_style(), output);
  }

  // optional uint32 base = 8;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->base(), output);
  }

  // optional uint32 base_places = 9;
  if (has_base_places()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->base_places(), output);
  }

  // optional bool base_use_minus_sign = 10;
  if (has_base_use_minus_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->base_use_minus_sign(), output);
  }

  // optional uint32 fraction_accuracy = 11;
  if (has_fraction_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->fraction_accuracy(), output);
  }

  // optional bool suppress_date_format = 12;
  if (has_suppress_date_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->suppress_date_format(), output);
  }

  // optional bool suppress_time_format = 13;
  if (has_suppress_time_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->suppress_time_format(), output);
  }

  // optional string date_time_format = 14;
  if (has_date_time_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date_time_format().data(), this->date_time_format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->date_time_format(), output);
  }

  // optional uint32 duration_unit_largest = 15;
  if (has_duration_unit_largest()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->duration_unit_largest(), output);
  }

  // optional uint32 duration_unit_smallest = 16;
  if (has_duration_unit_smallest()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->duration_unit_smallest(), output);
  }

  // optional uint32 custom_id = 17;
  if (has_custom_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->custom_id(), output);
  }

  // optional string custom_format_string = 18;
  if (has_custom_format_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->custom_format_string().data(), this->custom_format_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->custom_format_string(), output);
  }

  // optional double scale_factor = 19;
  if (has_scale_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->scale_factor(), output);
  }

  // optional bool requires_fraction_replacement = 20;
  if (has_requires_fraction_replacement()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->requires_fraction_replacement(), output);
  }

  // optional double control_minimum = 21;
  if (has_control_minimum()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->control_minimum(), output);
  }

  // optional double control_maximum = 22;
  if (has_control_maximum()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->control_maximum(), output);
  }

  // optional double control_increment = 23;
  if (has_control_increment()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->control_increment(), output);
  }

  // optional uint32 control_format_type = 24;
  if (has_control_format_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->control_format_type(), output);
  }

  // optional uint32 slider_orientation = 25;
  if (has_slider_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->slider_orientation(), output);
  }

  // optional uint32 slider_position = 26;
  if (has_slider_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->slider_position(), output);
  }

  // optional uint32 decimal_width = 27;
  if (has_decimal_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->decimal_width(), output);
  }

  // optional uint32 min_integer_width = 28;
  if (has_min_integer_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->min_integer_width(), output);
  }

  // optional uint32 num_nonspace_integer_digits = 29;
  if (has_num_nonspace_integer_digits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->num_nonspace_integer_digits(), output);
  }

  // optional uint32 num_nonspace_decimal_digits = 30;
  if (has_num_nonspace_decimal_digits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->num_nonspace_decimal_digits(), output);
  }

  // optional uint32 index_from_right_last_integer = 31;
  if (has_index_from_right_last_integer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->index_from_right_last_integer(), output);
  }

  // repeated string interstitial_strings = 32;
  for (int i = 0; i < this->interstitial_strings_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->interstitial_strings(i).data(), this->interstitial_strings(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      32, this->interstitial_strings(i), output);
  }

  // optional .TSP.IndexSet inters_str_insertion_indexes = 33;
  if (has_inters_str_insertion_indexes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->inters_str_insertion_indexes(), output);
  }

  // optional uint32 num_hash_decimal_digits = 34;
  if (has_num_hash_decimal_digits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->num_hash_decimal_digits(), output);
  }

  // optional uint32 total_num_decimal_digits = 35;
  if (has_total_num_decimal_digits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->total_num_decimal_digits(), output);
  }

  // optional bool is_complex = 36;
  if (has_is_complex()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(36, this->is_complex(), output);
  }

  // optional bool contains_integer_token = 37;
  if (has_contains_integer_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(37, this->contains_integer_token(), output);
  }

  // optional uint32 multiple_choice_list_initial_value = 38;
  if (has_multiple_choice_list_initial_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->multiple_choice_list_initial_value(), output);
  }

  // optional uint32 multiple_choice_list_id = 39;
  if (has_multiple_choice_list_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->multiple_choice_list_id(), output);
  }

  // optional bool use_automatic_duration_units = 40;
  if (has_use_automatic_duration_units()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(40, this->use_automatic_duration_units(), output);
  }

  // Extension range [10000, 20000)
  _extensions_.SerializeWithCachedSizes(
      10000, 20000, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FormatStructArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 format_type = 1;
  if (has_format_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->format_type(), target);
  }

  // optional uint32 decimal_places = 2;
  if (has_decimal_places()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->decimal_places(), target);
  }

  // optional string currency_code = 3;
  if (has_currency_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency_code().data(), this->currency_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->currency_code(), target);
  }

  // optional uint32 negative_style = 4;
  if (has_negative_style()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->negative_style(), target);
  }

  // optional bool show_thousands_separator = 5;
  if (has_show_thousands_separator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->show_thousands_separator(), target);
  }

  // optional bool use_accounting_style = 6;
  if (has_use_accounting_style()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->use_accounting_style(), target);
  }

  // optional uint32 duration_style = 7;
  if (has_duration_style()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->duration_style(), target);
  }

  // optional uint32 base = 8;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->base(), target);
  }

  // optional uint32 base_places = 9;
  if (has_base_places()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->base_places(), target);
  }

  // optional bool base_use_minus_sign = 10;
  if (has_base_use_minus_sign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->base_use_minus_sign(), target);
  }

  // optional uint32 fraction_accuracy = 11;
  if (has_fraction_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->fraction_accuracy(), target);
  }

  // optional bool suppress_date_format = 12;
  if (has_suppress_date_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->suppress_date_format(), target);
  }

  // optional bool suppress_time_format = 13;
  if (has_suppress_time_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->suppress_time_format(), target);
  }

  // optional string date_time_format = 14;
  if (has_date_time_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date_time_format().data(), this->date_time_format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->date_time_format(), target);
  }

  // optional uint32 duration_unit_largest = 15;
  if (has_duration_unit_largest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->duration_unit_largest(), target);
  }

  // optional uint32 duration_unit_smallest = 16;
  if (has_duration_unit_smallest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->duration_unit_smallest(), target);
  }

  // optional uint32 custom_id = 17;
  if (has_custom_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->custom_id(), target);
  }

  // optional string custom_format_string = 18;
  if (has_custom_format_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->custom_format_string().data(), this->custom_format_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->custom_format_string(), target);
  }

  // optional double scale_factor = 19;
  if (has_scale_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->scale_factor(), target);
  }

  // optional bool requires_fraction_replacement = 20;
  if (has_requires_fraction_replacement()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->requires_fraction_replacement(), target);
  }

  // optional double control_minimum = 21;
  if (has_control_minimum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->control_minimum(), target);
  }

  // optional double control_maximum = 22;
  if (has_control_maximum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->control_maximum(), target);
  }

  // optional double control_increment = 23;
  if (has_control_increment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->control_increment(), target);
  }

  // optional uint32 control_format_type = 24;
  if (has_control_format_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->control_format_type(), target);
  }

  // optional uint32 slider_orientation = 25;
  if (has_slider_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->slider_orientation(), target);
  }

  // optional uint32 slider_position = 26;
  if (has_slider_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->slider_position(), target);
  }

  // optional uint32 decimal_width = 27;
  if (has_decimal_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->decimal_width(), target);
  }

  // optional uint32 min_integer_width = 28;
  if (has_min_integer_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->min_integer_width(), target);
  }

  // optional uint32 num_nonspace_integer_digits = 29;
  if (has_num_nonspace_integer_digits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->num_nonspace_integer_digits(), target);
  }

  // optional uint32 num_nonspace_decimal_digits = 30;
  if (has_num_nonspace_decimal_digits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->num_nonspace_decimal_digits(), target);
  }

  // optional uint32 index_from_right_last_integer = 31;
  if (has_index_from_right_last_integer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->index_from_right_last_integer(), target);
  }

  // repeated string interstitial_strings = 32;
  for (int i = 0; i < this->interstitial_strings_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->interstitial_strings(i).data(), this->interstitial_strings(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(32, this->interstitial_strings(i), target);
  }

  // optional .TSP.IndexSet inters_str_insertion_indexes = 33;
  if (has_inters_str_insertion_indexes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->inters_str_insertion_indexes(), target);
  }

  // optional uint32 num_hash_decimal_digits = 34;
  if (has_num_hash_decimal_digits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->num_hash_decimal_digits(), target);
  }

  // optional uint32 total_num_decimal_digits = 35;
  if (has_total_num_decimal_digits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->total_num_decimal_digits(), target);
  }

  // optional bool is_complex = 36;
  if (has_is_complex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(36, this->is_complex(), target);
  }

  // optional bool contains_integer_token = 37;
  if (has_contains_integer_token()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(37, this->contains_integer_token(), target);
  }

  // optional uint32 multiple_choice_list_initial_value = 38;
  if (has_multiple_choice_list_initial_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(38, this->multiple_choice_list_initial_value(), target);
  }

  // optional uint32 multiple_choice_list_id = 39;
  if (has_multiple_choice_list_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(39, this->multiple_choice_list_id(), target);
  }

  // optional bool use_automatic_duration_units = 40;
  if (has_use_automatic_duration_units()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(40, this->use_automatic_duration_units(), target);
  }

  // Extension range [10000, 20000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      10000, 20000, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FormatStructArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 format_type = 1;
    if (has_format_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->format_type());
    }

    // optional uint32 decimal_places = 2;
    if (has_decimal_places()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->decimal_places());
    }

    // optional string currency_code = 3;
    if (has_currency_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currency_code());
    }

    // optional uint32 negative_style = 4;
    if (has_negative_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->negative_style());
    }

    // optional bool show_thousands_separator = 5;
    if (has_show_thousands_separator()) {
      total_size += 1 + 1;
    }

    // optional bool use_accounting_style = 6;
    if (has_use_accounting_style()) {
      total_size += 1 + 1;
    }

    // optional uint32 duration_style = 7;
    if (has_duration_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration_style());
    }

    // optional uint32 base = 8;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->base());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 base_places = 9;
    if (has_base_places()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->base_places());
    }

    // optional bool base_use_minus_sign = 10;
    if (has_base_use_minus_sign()) {
      total_size += 1 + 1;
    }

    // optional uint32 fraction_accuracy = 11;
    if (has_fraction_accuracy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fraction_accuracy());
    }

    // optional bool suppress_date_format = 12;
    if (has_suppress_date_format()) {
      total_size += 1 + 1;
    }

    // optional bool suppress_time_format = 13;
    if (has_suppress_time_format()) {
      total_size += 1 + 1;
    }

    // optional string date_time_format = 14;
    if (has_date_time_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date_time_format());
    }

    // optional uint32 duration_unit_largest = 15;
    if (has_duration_unit_largest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration_unit_largest());
    }

    // optional uint32 duration_unit_smallest = 16;
    if (has_duration_unit_smallest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration_unit_smallest());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 custom_id = 17;
    if (has_custom_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->custom_id());
    }

    // optional string custom_format_string = 18;
    if (has_custom_format_string()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom_format_string());
    }

    // optional double scale_factor = 19;
    if (has_scale_factor()) {
      total_size += 2 + 8;
    }

    // optional bool requires_fraction_replacement = 20;
    if (has_requires_fraction_replacement()) {
      total_size += 2 + 1;
    }

    // optional double control_minimum = 21;
    if (has_control_minimum()) {
      total_size += 2 + 8;
    }

    // optional double control_maximum = 22;
    if (has_control_maximum()) {
      total_size += 2 + 8;
    }

    // optional double control_increment = 23;
    if (has_control_increment()) {
      total_size += 2 + 8;
    }

    // optional uint32 control_format_type = 24;
    if (has_control_format_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->control_format_type());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 slider_orientation = 25;
    if (has_slider_orientation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slider_orientation());
    }

    // optional uint32 slider_position = 26;
    if (has_slider_position()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slider_position());
    }

    // optional uint32 decimal_width = 27;
    if (has_decimal_width()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->decimal_width());
    }

    // optional uint32 min_integer_width = 28;
    if (has_min_integer_width()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_integer_width());
    }

    // optional uint32 num_nonspace_integer_digits = 29;
    if (has_num_nonspace_integer_digits()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_nonspace_integer_digits());
    }

    // optional uint32 num_nonspace_decimal_digits = 30;
    if (has_num_nonspace_decimal_digits()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_nonspace_decimal_digits());
    }

    // optional uint32 index_from_right_last_integer = 31;
    if (has_index_from_right_last_integer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index_from_right_last_integer());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional .TSP.IndexSet inters_str_insertion_indexes = 33;
    if (has_inters_str_insertion_indexes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inters_str_insertion_indexes());
    }

    // optional uint32 num_hash_decimal_digits = 34;
    if (has_num_hash_decimal_digits()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_hash_decimal_digits());
    }

    // optional uint32 total_num_decimal_digits = 35;
    if (has_total_num_decimal_digits()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_num_decimal_digits());
    }

    // optional bool is_complex = 36;
    if (has_is_complex()) {
      total_size += 2 + 1;
    }

    // optional bool contains_integer_token = 37;
    if (has_contains_integer_token()) {
      total_size += 2 + 1;
    }

    // optional uint32 multiple_choice_list_initial_value = 38;
    if (has_multiple_choice_list_initial_value()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->multiple_choice_list_initial_value());
    }

    // optional uint32 multiple_choice_list_id = 39;
    if (has_multiple_choice_list_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->multiple_choice_list_id());
    }

    // optional bool use_automatic_duration_units = 40;
    if (has_use_automatic_duration_units()) {
      total_size += 2 + 1;
    }

  }
  // repeated string interstitial_strings = 32;
  total_size += 2 * this->interstitial_strings_size();
  for (int i = 0; i < this->interstitial_strings_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->interstitial_strings(i));
  }

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FormatStructArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FormatStructArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FormatStructArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FormatStructArchive::MergeFrom(const FormatStructArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  interstitial_strings_.MergeFrom(from.interstitial_strings_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_format_type()) {
      set_format_type(from.format_type());
    }
    if (from.has_decimal_places()) {
      set_decimal_places(from.decimal_places());
    }
    if (from.has_currency_code()) {
      set_currency_code(from.currency_code());
    }
    if (from.has_negative_style()) {
      set_negative_style(from.negative_style());
    }
    if (from.has_show_thousands_separator()) {
      set_show_thousands_separator(from.show_thousands_separator());
    }
    if (from.has_use_accounting_style()) {
      set_use_accounting_style(from.use_accounting_style());
    }
    if (from.has_duration_style()) {
      set_duration_style(from.duration_style());
    }
    if (from.has_base()) {
      set_base(from.base());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_base_places()) {
      set_base_places(from.base_places());
    }
    if (from.has_base_use_minus_sign()) {
      set_base_use_minus_sign(from.base_use_minus_sign());
    }
    if (from.has_fraction_accuracy()) {
      set_fraction_accuracy(from.fraction_accuracy());
    }
    if (from.has_suppress_date_format()) {
      set_suppress_date_format(from.suppress_date_format());
    }
    if (from.has_suppress_time_format()) {
      set_suppress_time_format(from.suppress_time_format());
    }
    if (from.has_date_time_format()) {
      set_date_time_format(from.date_time_format());
    }
    if (from.has_duration_unit_largest()) {
      set_duration_unit_largest(from.duration_unit_largest());
    }
    if (from.has_duration_unit_smallest()) {
      set_duration_unit_smallest(from.duration_unit_smallest());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_custom_id()) {
      set_custom_id(from.custom_id());
    }
    if (from.has_custom_format_string()) {
      set_custom_format_string(from.custom_format_string());
    }
    if (from.has_scale_factor()) {
      set_scale_factor(from.scale_factor());
    }
    if (from.has_requires_fraction_replacement()) {
      set_requires_fraction_replacement(from.requires_fraction_replacement());
    }
    if (from.has_control_minimum()) {
      set_control_minimum(from.control_minimum());
    }
    if (from.has_control_maximum()) {
      set_control_maximum(from.control_maximum());
    }
    if (from.has_control_increment()) {
      set_control_increment(from.control_increment());
    }
    if (from.has_control_format_type()) {
      set_control_format_type(from.control_format_type());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_slider_orientation()) {
      set_slider_orientation(from.slider_orientation());
    }
    if (from.has_slider_position()) {
      set_slider_position(from.slider_position());
    }
    if (from.has_decimal_width()) {
      set_decimal_width(from.decimal_width());
    }
    if (from.has_min_integer_width()) {
      set_min_integer_width(from.min_integer_width());
    }
    if (from.has_num_nonspace_integer_digits()) {
      set_num_nonspace_integer_digits(from.num_nonspace_integer_digits());
    }
    if (from.has_num_nonspace_decimal_digits()) {
      set_num_nonspace_decimal_digits(from.num_nonspace_decimal_digits());
    }
    if (from.has_index_from_right_last_integer()) {
      set_index_from_right_last_integer(from.index_from_right_last_integer());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_inters_str_insertion_indexes()) {
      mutable_inters_str_insertion_indexes()->::TSP::IndexSet::MergeFrom(from.inters_str_insertion_indexes());
    }
    if (from.has_num_hash_decimal_digits()) {
      set_num_hash_decimal_digits(from.num_hash_decimal_digits());
    }
    if (from.has_total_num_decimal_digits()) {
      set_total_num_decimal_digits(from.total_num_decimal_digits());
    }
    if (from.has_is_complex()) {
      set_is_complex(from.is_complex());
    }
    if (from.has_contains_integer_token()) {
      set_contains_integer_token(from.contains_integer_token());
    }
    if (from.has_multiple_choice_list_initial_value()) {
      set_multiple_choice_list_initial_value(from.multiple_choice_list_initial_value());
    }
    if (from.has_multiple_choice_list_id()) {
      set_multiple_choice_list_id(from.multiple_choice_list_id());
    }
    if (from.has_use_automatic_duration_units()) {
      set_use_automatic_duration_units(from.use_automatic_duration_units());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FormatStructArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FormatStructArchive::CopyFrom(const FormatStructArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormatStructArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_inters_str_insertion_indexes()) {
    if (!this->inters_str_insertion_indexes().IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void FormatStructArchive::Swap(FormatStructArchive* other) {
  if (other != this) {
    std::swap(format_type_, other->format_type_);
    std::swap(decimal_places_, other->decimal_places_);
    std::swap(currency_code_, other->currency_code_);
    std::swap(negative_style_, other->negative_style_);
    std::swap(show_thousands_separator_, other->show_thousands_separator_);
    std::swap(use_accounting_style_, other->use_accounting_style_);
    std::swap(duration_style_, other->duration_style_);
    std::swap(base_, other->base_);
    std::swap(base_places_, other->base_places_);
    std::swap(base_use_minus_sign_, other->base_use_minus_sign_);
    std::swap(fraction_accuracy_, other->fraction_accuracy_);
    std::swap(suppress_date_format_, other->suppress_date_format_);
    std::swap(suppress_time_format_, other->suppress_time_format_);
    std::swap(date_time_format_, other->date_time_format_);
    std::swap(duration_unit_largest_, other->duration_unit_largest_);
    std::swap(duration_unit_smallest_, other->duration_unit_smallest_);
    std::swap(custom_id_, other->custom_id_);
    std::swap(custom_format_string_, other->custom_format_string_);
    std::swap(scale_factor_, other->scale_factor_);
    std::swap(requires_fraction_replacement_, other->requires_fraction_replacement_);
    std::swap(control_minimum_, other->control_minimum_);
    std::swap(control_maximum_, other->control_maximum_);
    std::swap(control_increment_, other->control_increment_);
    std::swap(control_format_type_, other->control_format_type_);
    std::swap(slider_orientation_, other->slider_orientation_);
    std::swap(slider_position_, other->slider_position_);
    std::swap(decimal_width_, other->decimal_width_);
    std::swap(min_integer_width_, other->min_integer_width_);
    std::swap(num_nonspace_integer_digits_, other->num_nonspace_integer_digits_);
    std::swap(num_nonspace_decimal_digits_, other->num_nonspace_decimal_digits_);
    std::swap(index_from_right_last_integer_, other->index_from_right_last_integer_);
    interstitial_strings_.Swap(&other->interstitial_strings_);
    std::swap(inters_str_insertion_indexes_, other->inters_str_insertion_indexes_);
    std::swap(num_hash_decimal_digits_, other->num_hash_decimal_digits_);
    std::swap(total_num_decimal_digits_, other->total_num_decimal_digits_);
    std::swap(is_complex_, other->is_complex_);
    std::swap(contains_integer_token_, other->contains_integer_token_);
    std::swap(multiple_choice_list_initial_value_, other->multiple_choice_list_initial_value_);
    std::swap(multiple_choice_list_id_, other->multiple_choice_list_id_);
    std::swap(use_automatic_duration_units_, other->use_automatic_duration_units_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata FormatStructArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FormatStructArchive_descriptor_;
  metadata.reflection = FormatStructArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CustomFormatArchive_Condition::kConditionTypeFieldNumber;
const int CustomFormatArchive_Condition::kConditionValueFieldNumber;
const int CustomFormatArchive_Condition::kConditionFormatFieldNumber;
const int CustomFormatArchive_Condition::kConditionValueDblFieldNumber;
#endif  // !_MSC_VER

CustomFormatArchive_Condition::CustomFormatArchive_Condition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CustomFormatArchive_Condition::InitAsDefaultInstance() {
  condition_format_ = const_cast< ::TSK::FormatStructArchive*>(&::TSK::FormatStructArchive::default_instance());
}

CustomFormatArchive_Condition::CustomFormatArchive_Condition(const CustomFormatArchive_Condition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CustomFormatArchive_Condition::SharedCtor() {
  _cached_size_ = 0;
  condition_type_ = 0u;
  condition_value_ = 0;
  condition_format_ = NULL;
  condition_value_dbl_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CustomFormatArchive_Condition::~CustomFormatArchive_Condition() {
  SharedDtor();
}

void CustomFormatArchive_Condition::SharedDtor() {
  if (this != default_instance_) {
    delete condition_format_;
  }
}

void CustomFormatArchive_Condition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CustomFormatArchive_Condition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CustomFormatArchive_Condition_descriptor_;
}

const CustomFormatArchive_Condition& CustomFormatArchive_Condition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSKArchives_2eproto();
  return *default_instance_;
}

CustomFormatArchive_Condition* CustomFormatArchive_Condition::default_instance_ = NULL;

CustomFormatArchive_Condition* CustomFormatArchive_Condition::New() const {
  return new CustomFormatArchive_Condition;
}

void CustomFormatArchive_Condition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    condition_type_ = 0u;
    condition_value_ = 0;
    if (has_condition_format()) {
      if (condition_format_ != NULL) condition_format_->::TSK::FormatStructArchive::Clear();
    }
    condition_value_dbl_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CustomFormatArchive_Condition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 condition_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &condition_type_)));
          set_has_condition_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_condition_value;
        break;
      }

      // optional float condition_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_condition_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &condition_value_)));
          set_has_condition_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_condition_format;
        break;
      }

      // required .TSK.FormatStructArchive condition_format = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_condition_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_condition_format()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_condition_value_dbl;
        break;
      }

      // optional double condition_value_dbl = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_condition_value_dbl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &condition_value_dbl_)));
          set_has_condition_value_dbl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CustomFormatArchive_Condition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 condition_type = 1;
  if (has_condition_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->condition_type(), output);
  }

  // optional float condition_value = 2;
  if (has_condition_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->condition_value(), output);
  }

  // required .TSK.FormatStructArchive condition_format = 3;
  if (has_condition_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->condition_format(), output);
  }

  // optional double condition_value_dbl = 4;
  if (has_condition_value_dbl()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->condition_value_dbl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CustomFormatArchive_Condition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 condition_type = 1;
  if (has_condition_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->condition_type(), target);
  }

  // optional float condition_value = 2;
  if (has_condition_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->condition_value(), target);
  }

  // required .TSK.FormatStructArchive condition_format = 3;
  if (has_condition_format()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->condition_format(), target);
  }

  // optional double condition_value_dbl = 4;
  if (has_condition_value_dbl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->condition_value_dbl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CustomFormatArchive_Condition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 condition_type = 1;
    if (has_condition_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->condition_type());
    }

    // optional float condition_value = 2;
    if (has_condition_value()) {
      total_size += 1 + 4;
    }

    // required .TSK.FormatStructArchive condition_format = 3;
    if (has_condition_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->condition_format());
    }

    // optional double condition_value_dbl = 4;
    if (has_condition_value_dbl()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CustomFormatArchive_Condition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CustomFormatArchive_Condition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CustomFormatArchive_Condition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CustomFormatArchive_Condition::MergeFrom(const CustomFormatArchive_Condition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_condition_type()) {
      set_condition_type(from.condition_type());
    }
    if (from.has_condition_value()) {
      set_condition_value(from.condition_value());
    }
    if (from.has_condition_format()) {
      mutable_condition_format()->::TSK::FormatStructArchive::MergeFrom(from.condition_format());
    }
    if (from.has_condition_value_dbl()) {
      set_condition_value_dbl(from.condition_value_dbl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CustomFormatArchive_Condition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomFormatArchive_Condition::CopyFrom(const CustomFormatArchive_Condition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomFormatArchive_Condition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (has_condition_format()) {
    if (!this->condition_format().IsInitialized()) return false;
  }
  return true;
}

void CustomFormatArchive_Condition::Swap(CustomFormatArchive_Condition* other) {
  if (other != this) {
    std::swap(condition_type_, other->condition_type_);
    std::swap(condition_value_, other->condition_value_);
    std::swap(condition_format_, other->condition_format_);
    std::swap(condition_value_dbl_, other->condition_value_dbl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CustomFormatArchive_Condition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CustomFormatArchive_Condition_descriptor_;
  metadata.reflection = CustomFormatArchive_Condition_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CustomFormatArchive::kNameFieldNumber;
const int CustomFormatArchive::kFormatTypeFieldNumber;
const int CustomFormatArchive::kDefaultFormatFieldNumber;
const int CustomFormatArchive::kConditionsFieldNumber;
#endif  // !_MSC_VER

CustomFormatArchive::CustomFormatArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CustomFormatArchive::InitAsDefaultInstance() {
  default_format_ = const_cast< ::TSK::FormatStructArchive*>(&::TSK::FormatStructArchive::default_instance());
}

CustomFormatArchive::CustomFormatArchive(const CustomFormatArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CustomFormatArchive::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  format_type_ = 0u;
  default_format_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CustomFormatArchive::~CustomFormatArchive() {
  SharedDtor();
}

void CustomFormatArchive::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete default_format_;
  }
}

void CustomFormatArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CustomFormatArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CustomFormatArchive_descriptor_;
}

const CustomFormatArchive& CustomFormatArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSKArchives_2eproto();
  return *default_instance_;
}

CustomFormatArchive* CustomFormatArchive::default_instance_ = NULL;

CustomFormatArchive* CustomFormatArchive::New() const {
  return new CustomFormatArchive;
}

void CustomFormatArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    format_type_ = 0u;
    if (has_default_format()) {
      if (default_format_ != NULL) default_format_->::TSK::FormatStructArchive::Clear();
    }
  }
  conditions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CustomFormatArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_format_type;
        break;
      }

      // required uint32 format_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_format_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &format_type_)));
          set_has_format_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_default_format;
        break;
      }

      // required .TSK.FormatStructArchive default_format = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_default_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_default_format()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_conditions;
        break;
      }

      // repeated .TSK.CustomFormatArchive.Condition conditions = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_conditions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_conditions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_conditions;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CustomFormatArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required uint32 format_type = 2;
  if (has_format_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->format_type(), output);
  }

  // required .TSK.FormatStructArchive default_format = 3;
  if (has_default_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->default_format(), output);
  }

  // repeated .TSK.CustomFormatArchive.Condition conditions = 4;
  for (int i = 0; i < this->conditions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->conditions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CustomFormatArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required uint32 format_type = 2;
  if (has_format_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->format_type(), target);
  }

  // required .TSK.FormatStructArchive default_format = 3;
  if (has_default_format()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->default_format(), target);
  }

  // repeated .TSK.CustomFormatArchive.Condition conditions = 4;
  for (int i = 0; i < this->conditions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->conditions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CustomFormatArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 format_type = 2;
    if (has_format_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->format_type());
    }

    // required .TSK.FormatStructArchive default_format = 3;
    if (has_default_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->default_format());
    }

  }
  // repeated .TSK.CustomFormatArchive.Condition conditions = 4;
  total_size += 1 * this->conditions_size();
  for (int i = 0; i < this->conditions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->conditions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CustomFormatArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CustomFormatArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CustomFormatArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CustomFormatArchive::MergeFrom(const CustomFormatArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  conditions_.MergeFrom(from.conditions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_format_type()) {
      set_format_type(from.format_type());
    }
    if (from.has_default_format()) {
      mutable_default_format()->::TSK::FormatStructArchive::MergeFrom(from.default_format());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CustomFormatArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomFormatArchive::CopyFrom(const CustomFormatArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomFormatArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_default_format()) {
    if (!this->default_format().IsInitialized()) return false;
  }
  for (int i = 0; i < conditions_size(); i++) {
    if (!this->conditions(i).IsInitialized()) return false;
  }
  return true;
}

void CustomFormatArchive::Swap(CustomFormatArchive* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(format_type_, other->format_type_);
    std::swap(default_format_, other->default_format_);
    conditions_.Swap(&other->conditions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CustomFormatArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CustomFormatArchive_descriptor_;
  metadata.reflection = CustomFormatArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AnnotationAuthorArchive::kNameFieldNumber;
const int AnnotationAuthorArchive::kColorFieldNumber;
#endif  // !_MSC_VER

AnnotationAuthorArchive::AnnotationAuthorArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AnnotationAuthorArchive::InitAsDefaultInstance() {
  color_ = const_cast< ::TSP::Color*>(&::TSP::Color::default_instance());
}

AnnotationAuthorArchive::AnnotationAuthorArchive(const AnnotationAuthorArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AnnotationAuthorArchive::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  color_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnnotationAuthorArchive::~AnnotationAuthorArchive() {
  SharedDtor();
}

void AnnotationAuthorArchive::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete color_;
  }
}

void AnnotationAuthorArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnnotationAuthorArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnnotationAuthorArchive_descriptor_;
}

const AnnotationAuthorArchive& AnnotationAuthorArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSKArchives_2eproto();
  return *default_instance_;
}

AnnotationAuthorArchive* AnnotationAuthorArchive::default_instance_ = NULL;

AnnotationAuthorArchive* AnnotationAuthorArchive::New() const {
  return new AnnotationAuthorArchive;
}

void AnnotationAuthorArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_color()) {
      if (color_ != NULL) color_->::TSP::Color::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnnotationAuthorArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_color;
        break;
      }

      // optional .TSP.Color color = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AnnotationAuthorArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional .TSP.Color color = 2;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->color(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AnnotationAuthorArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .TSP.Color color = 2;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->color(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AnnotationAuthorArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .TSP.Color color = 2;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->color());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnnotationAuthorArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnnotationAuthorArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnnotationAuthorArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnnotationAuthorArchive::MergeFrom(const AnnotationAuthorArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_color()) {
      mutable_color()->::TSP::Color::MergeFrom(from.color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnnotationAuthorArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnnotationAuthorArchive::CopyFrom(const AnnotationAuthorArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnotationAuthorArchive::IsInitialized() const {

  if (has_color()) {
    if (!this->color().IsInitialized()) return false;
  }
  return true;
}

void AnnotationAuthorArchive::Swap(AnnotationAuthorArchive* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(color_, other->color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnnotationAuthorArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnnotationAuthorArchive_descriptor_;
  metadata.reflection = AnnotationAuthorArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeprecatedChangeAuthorArchive::kNameFieldNumber;
const int DeprecatedChangeAuthorArchive::kChangeColorFieldNumber;
#endif  // !_MSC_VER

DeprecatedChangeAuthorArchive::DeprecatedChangeAuthorArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeprecatedChangeAuthorArchive::InitAsDefaultInstance() {
  change_color_ = const_cast< ::TSP::Color*>(&::TSP::Color::default_instance());
}

DeprecatedChangeAuthorArchive::DeprecatedChangeAuthorArchive(const DeprecatedChangeAuthorArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeprecatedChangeAuthorArchive::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  change_color_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeprecatedChangeAuthorArchive::~DeprecatedChangeAuthorArchive() {
  SharedDtor();
}

void DeprecatedChangeAuthorArchive::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete change_color_;
  }
}

void DeprecatedChangeAuthorArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeprecatedChangeAuthorArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeprecatedChangeAuthorArchive_descriptor_;
}

const DeprecatedChangeAuthorArchive& DeprecatedChangeAuthorArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSKArchives_2eproto();
  return *default_instance_;
}

DeprecatedChangeAuthorArchive* DeprecatedChangeAuthorArchive::default_instance_ = NULL;

DeprecatedChangeAuthorArchive* DeprecatedChangeAuthorArchive::New() const {
  return new DeprecatedChangeAuthorArchive;
}

void DeprecatedChangeAuthorArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_change_color()) {
      if (change_color_ != NULL) change_color_->::TSP::Color::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeprecatedChangeAuthorArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_change_color;
        break;
      }

      // optional .TSP.Color change_color = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_change_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_change_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeprecatedChangeAuthorArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional .TSP.Color change_color = 2;
  if (has_change_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->change_color(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeprecatedChangeAuthorArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .TSP.Color change_color = 2;
  if (has_change_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->change_color(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeprecatedChangeAuthorArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .TSP.Color change_color = 2;
    if (has_change_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->change_color());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeprecatedChangeAuthorArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeprecatedChangeAuthorArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeprecatedChangeAuthorArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeprecatedChangeAuthorArchive::MergeFrom(const DeprecatedChangeAuthorArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_change_color()) {
      mutable_change_color()->::TSP::Color::MergeFrom(from.change_color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeprecatedChangeAuthorArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeprecatedChangeAuthorArchive::CopyFrom(const DeprecatedChangeAuthorArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeprecatedChangeAuthorArchive::IsInitialized() const {

  if (has_change_color()) {
    if (!this->change_color().IsInitialized()) return false;
  }
  return true;
}

void DeprecatedChangeAuthorArchive::Swap(DeprecatedChangeAuthorArchive* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(change_color_, other->change_color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeprecatedChangeAuthorArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeprecatedChangeAuthorArchive_descriptor_;
  metadata.reflection = DeprecatedChangeAuthorArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AnnotationAuthorStorageArchive::kAnnotationAuthorFieldNumber;
#endif  // !_MSC_VER

AnnotationAuthorStorageArchive::AnnotationAuthorStorageArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AnnotationAuthorStorageArchive::InitAsDefaultInstance() {
}

AnnotationAuthorStorageArchive::AnnotationAuthorStorageArchive(const AnnotationAuthorStorageArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AnnotationAuthorStorageArchive::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnnotationAuthorStorageArchive::~AnnotationAuthorStorageArchive() {
  SharedDtor();
}

void AnnotationAuthorStorageArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AnnotationAuthorStorageArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnnotationAuthorStorageArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnnotationAuthorStorageArchive_descriptor_;
}

const AnnotationAuthorStorageArchive& AnnotationAuthorStorageArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSKArchives_2eproto();
  return *default_instance_;
}

AnnotationAuthorStorageArchive* AnnotationAuthorStorageArchive::default_instance_ = NULL;

AnnotationAuthorStorageArchive* AnnotationAuthorStorageArchive::New() const {
  return new AnnotationAuthorStorageArchive;
}

void AnnotationAuthorStorageArchive::Clear() {
  annotation_author_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnnotationAuthorStorageArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TSP.Reference annotation_author = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_annotation_author:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_annotation_author()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_annotation_author;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AnnotationAuthorStorageArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TSP.Reference annotation_author = 1;
  for (int i = 0; i < this->annotation_author_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->annotation_author(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AnnotationAuthorStorageArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TSP.Reference annotation_author = 1;
  for (int i = 0; i < this->annotation_author_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->annotation_author(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AnnotationAuthorStorageArchive::ByteSize() const {
  int total_size = 0;

  // repeated .TSP.Reference annotation_author = 1;
  total_size += 1 * this->annotation_author_size();
  for (int i = 0; i < this->annotation_author_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->annotation_author(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnnotationAuthorStorageArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnnotationAuthorStorageArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnnotationAuthorStorageArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnnotationAuthorStorageArchive::MergeFrom(const AnnotationAuthorStorageArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  annotation_author_.MergeFrom(from.annotation_author_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnnotationAuthorStorageArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnnotationAuthorStorageArchive::CopyFrom(const AnnotationAuthorStorageArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnotationAuthorStorageArchive::IsInitialized() const {

  for (int i = 0; i < annotation_author_size(); i++) {
    if (!this->annotation_author(i).IsInitialized()) return false;
  }
  return true;
}

void AnnotationAuthorStorageArchive::Swap(AnnotationAuthorStorageArchive* other) {
  if (other != this) {
    annotation_author_.Swap(&other->annotation_author_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnnotationAuthorStorageArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnnotationAuthorStorageArchive_descriptor_;
  metadata.reflection = AnnotationAuthorStorageArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddAnnotationAuthorCommandArchive::kSuperFieldNumber;
const int AddAnnotationAuthorCommandArchive::kDocumentRootFieldNumber;
const int AddAnnotationAuthorCommandArchive::kAnnotationAuthorFieldNumber;
#endif  // !_MSC_VER

AddAnnotationAuthorCommandArchive::AddAnnotationAuthorCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddAnnotationAuthorCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  document_root_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  annotation_author_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

AddAnnotationAuthorCommandArchive::AddAnnotationAuthorCommandArchive(const AddAnnotationAuthorCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddAnnotationAuthorCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  document_root_ = NULL;
  annotation_author_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddAnnotationAuthorCommandArchive::~AddAnnotationAuthorCommandArchive() {
  SharedDtor();
}

void AddAnnotationAuthorCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete document_root_;
    delete annotation_author_;
  }
}

void AddAnnotationAuthorCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddAnnotationAuthorCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddAnnotationAuthorCommandArchive_descriptor_;
}

const AddAnnotationAuthorCommandArchive& AddAnnotationAuthorCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSKArchives_2eproto();
  return *default_instance_;
}

AddAnnotationAuthorCommandArchive* AddAnnotationAuthorCommandArchive::default_instance_ = NULL;

AddAnnotationAuthorCommandArchive* AddAnnotationAuthorCommandArchive::New() const {
  return new AddAnnotationAuthorCommandArchive;
}

void AddAnnotationAuthorCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_document_root()) {
      if (document_root_ != NULL) document_root_->::TSP::Reference::Clear();
    }
    if (has_annotation_author()) {
      if (annotation_author_ != NULL) annotation_author_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddAnnotationAuthorCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_document_root;
        break;
      }

      // optional .TSP.Reference document_root = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_document_root:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_document_root()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_annotation_author;
        break;
      }

      // optional .TSP.Reference annotation_author = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_annotation_author:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_annotation_author()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddAnnotationAuthorCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference document_root = 2;
  if (has_document_root()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->document_root(), output);
  }

  // optional .TSP.Reference annotation_author = 3;
  if (has_annotation_author()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->annotation_author(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddAnnotationAuthorCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference document_root = 2;
  if (has_document_root()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->document_root(), target);
  }

  // optional .TSP.Reference annotation_author = 3;
  if (has_annotation_author()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->annotation_author(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddAnnotationAuthorCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference document_root = 2;
    if (has_document_root()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->document_root());
    }

    // optional .TSP.Reference annotation_author = 3;
    if (has_annotation_author()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->annotation_author());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddAnnotationAuthorCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddAnnotationAuthorCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddAnnotationAuthorCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddAnnotationAuthorCommandArchive::MergeFrom(const AddAnnotationAuthorCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_document_root()) {
      mutable_document_root()->::TSP::Reference::MergeFrom(from.document_root());
    }
    if (from.has_annotation_author()) {
      mutable_annotation_author()->::TSP::Reference::MergeFrom(from.annotation_author());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddAnnotationAuthorCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddAnnotationAuthorCommandArchive::CopyFrom(const AddAnnotationAuthorCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddAnnotationAuthorCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_document_root()) {
    if (!this->document_root().IsInitialized()) return false;
  }
  if (has_annotation_author()) {
    if (!this->annotation_author().IsInitialized()) return false;
  }
  return true;
}

void AddAnnotationAuthorCommandArchive::Swap(AddAnnotationAuthorCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(document_root_, other->document_root_);
    std::swap(annotation_author_, other->annotation_author_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddAnnotationAuthorCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddAnnotationAuthorCommandArchive_descriptor_;
  metadata.reflection = AddAnnotationAuthorCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetAnnotationAuthorColorCommandArchive::kSuperFieldNumber;
const int SetAnnotationAuthorColorCommandArchive::kAnnotationAuthorFieldNumber;
const int SetAnnotationAuthorColorCommandArchive::kColorFieldNumber;
#endif  // !_MSC_VER

SetAnnotationAuthorColorCommandArchive::SetAnnotationAuthorColorCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetAnnotationAuthorColorCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  annotation_author_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  color_ = const_cast< ::TSP::Color*>(&::TSP::Color::default_instance());
}

SetAnnotationAuthorColorCommandArchive::SetAnnotationAuthorColorCommandArchive(const SetAnnotationAuthorColorCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetAnnotationAuthorColorCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  annotation_author_ = NULL;
  color_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetAnnotationAuthorColorCommandArchive::~SetAnnotationAuthorColorCommandArchive() {
  SharedDtor();
}

void SetAnnotationAuthorColorCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete annotation_author_;
    delete color_;
  }
}

void SetAnnotationAuthorColorCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetAnnotationAuthorColorCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetAnnotationAuthorColorCommandArchive_descriptor_;
}

const SetAnnotationAuthorColorCommandArchive& SetAnnotationAuthorColorCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSKArchives_2eproto();
  return *default_instance_;
}

SetAnnotationAuthorColorCommandArchive* SetAnnotationAuthorColorCommandArchive::default_instance_ = NULL;

SetAnnotationAuthorColorCommandArchive* SetAnnotationAuthorColorCommandArchive::New() const {
  return new SetAnnotationAuthorColorCommandArchive;
}

void SetAnnotationAuthorColorCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_annotation_author()) {
      if (annotation_author_ != NULL) annotation_author_->::TSP::Reference::Clear();
    }
    if (has_color()) {
      if (color_ != NULL) color_->::TSP::Color::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetAnnotationAuthorColorCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_annotation_author;
        break;
      }

      // optional .TSP.Reference annotation_author = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_annotation_author:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_annotation_author()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_color;
        break;
      }

      // optional .TSP.Color color = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetAnnotationAuthorColorCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference annotation_author = 2;
  if (has_annotation_author()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->annotation_author(), output);
  }

  // optional .TSP.Color color = 3;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->color(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetAnnotationAuthorColorCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference annotation_author = 2;
  if (has_annotation_author()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->annotation_author(), target);
  }

  // optional .TSP.Color color = 3;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->color(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetAnnotationAuthorColorCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference annotation_author = 2;
    if (has_annotation_author()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->annotation_author());
    }

    // optional .TSP.Color color = 3;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->color());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetAnnotationAuthorColorCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetAnnotationAuthorColorCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetAnnotationAuthorColorCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetAnnotationAuthorColorCommandArchive::MergeFrom(const SetAnnotationAuthorColorCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_annotation_author()) {
      mutable_annotation_author()->::TSP::Reference::MergeFrom(from.annotation_author());
    }
    if (from.has_color()) {
      mutable_color()->::TSP::Color::MergeFrom(from.color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetAnnotationAuthorColorCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetAnnotationAuthorColorCommandArchive::CopyFrom(const SetAnnotationAuthorColorCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAnnotationAuthorColorCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_annotation_author()) {
    if (!this->annotation_author().IsInitialized()) return false;
  }
  if (has_color()) {
    if (!this->color().IsInitialized()) return false;
  }
  return true;
}

void SetAnnotationAuthorColorCommandArchive::Swap(SetAnnotationAuthorColorCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(annotation_author_, other->annotation_author_);
    std::swap(color_, other->color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetAnnotationAuthorColorCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetAnnotationAuthorColorCommandArchive_descriptor_;
  metadata.reflection = SetAnnotationAuthorColorCommandArchive_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TSK

// @@protoc_insertion_point(global_scope)
