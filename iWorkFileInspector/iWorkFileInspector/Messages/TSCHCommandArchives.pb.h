// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSCHCommandArchives.proto

#ifndef PROTOBUF_TSCHCommandArchives_2eproto__INCLUDED
#define PROTOBUF_TSCHCommandArchives_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "TSPMessages.pb.h"
#include "TSKArchives.pb.h"
#include "TSSArchives.pb.h"
#include "TSDArchives.pb.h"
#include "TSCHArchives.Common.pb.h"
#include "TSCHArchives.GEN.pb.h"
#include "TSCH3DArchives.pb.h"
#include "TSCHArchives.pb.h"
// @@protoc_insertion_point(includes)

namespace TSCH {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TSCHCommandArchives_2eproto();
void protobuf_AssignDesc_TSCHCommandArchives_2eproto();
void protobuf_ShutdownFile_TSCHCommandArchives_2eproto();

class CommandSetChartTypeArchive;
class PropertyMutationUndoTupleArchive;
class StyleSwapUndoTupleArchive;
class CommandStyleSwapArchive;
class CommandSetSeriesNameArchive;
class CommandSetCategoryNameArchive;
class CommandAddGridRowsArchive;
class CommandAddGridColumnsArchive;
class CommandMoveGridRowsArchive;
class CommandMoveGridColumnsArchive;
class CommandDeleteGridRowsArchive;
class CommandDeleteGridRowsArchive_ValueRow;
class CommandDeleteGridColumnsArchive;
class CommandDeleteGridColumnsArchive_ValueRow;
class CommandSetPreviewLocArchive;
class CommandSetGridValueArchive;
class CommandSetGridDirectionArchive;
class CommandSetSeriesTypeArchive;
class CommandSetScatterFormatArchive;
class CommandSetMultiDataSetIndexArchive;
class CommandSetLegendFrameArchive;
class CommandSetPieWedgeExplosion;
class SynchronousCommandArchive;
class CommandReplaceAllArchive;
class CommandChartApplyTheme;
class CommandChartApplyPreset;
class CommandCleanupGeometryArchive;
class ChartCommandArchive;
class CommandReplaceGridValuesArchive;
class CommandReplaceGridValuesArchive_ValueRow;
class CommandReplaceThemePresetArchive;
class CommandReplaceThemePresetArchive_StyleAndIdentifierPair;
class CommandInvalidateWPCaches;

enum StyleOwnerType {
  chart_info = 1,
  legend_model = 2,
  chart_axis = 3,
  chart_series = 4
};
bool StyleOwnerType_IsValid(int value);
const StyleOwnerType StyleOwnerType_MIN = chart_info;
const StyleOwnerType StyleOwnerType_MAX = chart_series;
const int StyleOwnerType_ARRAYSIZE = StyleOwnerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* StyleOwnerType_descriptor();
inline const ::std::string& StyleOwnerType_Name(StyleOwnerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    StyleOwnerType_descriptor(), value);
}
inline bool StyleOwnerType_Parse(
    const ::std::string& name, StyleOwnerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StyleOwnerType>(
    StyleOwnerType_descriptor(), name, value);
}
enum StyleSwapType {
  chart_style = 1,
  chart_non_style = 2,
  legend_style = 3,
  legend_non_style = 4,
  value_axis_style = 5,
  value_axis_non_style = 6,
  category_axis_style = 7,
  category_axis_non_style = 8,
  series_theme_style = 9,
  series_private_style = 10,
  series_non_style = 11,
  paragraph_style = 12
};
bool StyleSwapType_IsValid(int value);
const StyleSwapType StyleSwapType_MIN = chart_style;
const StyleSwapType StyleSwapType_MAX = paragraph_style;
const int StyleSwapType_ARRAYSIZE = StyleSwapType_MAX + 1;

const ::google::protobuf::EnumDescriptor* StyleSwapType_descriptor();
inline const ::std::string& StyleSwapType_Name(StyleSwapType value) {
  return ::google::protobuf::internal::NameOfEnum(
    StyleSwapType_descriptor(), value);
}
inline bool StyleSwapType_Parse(
    const ::std::string& name, StyleSwapType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StyleSwapType>(
    StyleSwapType_descriptor(), name, value);
}
enum ApplyPresetBehavior {
  remove_overrides = 1,
  preserve_overrides = 2,
  preserve_appearance = 3
};
bool ApplyPresetBehavior_IsValid(int value);
const ApplyPresetBehavior ApplyPresetBehavior_MIN = remove_overrides;
const ApplyPresetBehavior ApplyPresetBehavior_MAX = preserve_appearance;
const int ApplyPresetBehavior_ARRAYSIZE = ApplyPresetBehavior_MAX + 1;

const ::google::protobuf::EnumDescriptor* ApplyPresetBehavior_descriptor();
inline const ::std::string& ApplyPresetBehavior_Name(ApplyPresetBehavior value) {
  return ::google::protobuf::internal::NameOfEnum(
    ApplyPresetBehavior_descriptor(), value);
}
inline bool ApplyPresetBehavior_Parse(
    const ::std::string& name, ApplyPresetBehavior* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ApplyPresetBehavior>(
    ApplyPresetBehavior_descriptor(), name, value);
}
// ===================================================================

class CommandSetChartTypeArchive : public ::google::protobuf::Message {
 public:
  CommandSetChartTypeArchive();
  virtual ~CommandSetChartTypeArchive();

  CommandSetChartTypeArchive(const CommandSetChartTypeArchive& from);

  inline CommandSetChartTypeArchive& operator=(const CommandSetChartTypeArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandSetChartTypeArchive& default_instance();

  void Swap(CommandSetChartTypeArchive* other);

  // implements Message ----------------------------------------------

  CommandSetChartTypeArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommandSetChartTypeArchive& from);
  void MergeFrom(const CommandSetChartTypeArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSCH.ChartCommandArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSCH::ChartCommandArchive& super() const;
  inline ::TSCH::ChartCommandArchive* mutable_super();
  inline ::TSCH::ChartCommandArchive* release_super();
  inline void set_allocated_super(::TSCH::ChartCommandArchive* super);

  // required .TSCH.ChartType oldChartType = 2;
  inline bool has_oldcharttype() const;
  inline void clear_oldcharttype();
  static const int kOldChartTypeFieldNumber = 2;
  inline ::TSCH::ChartType oldcharttype() const;
  inline void set_oldcharttype(::TSCH::ChartType value);

  // required .TSCH.ChartType newChartType = 3;
  inline bool has_newcharttype() const;
  inline void clear_newcharttype();
  static const int kNewChartTypeFieldNumber = 3;
  inline ::TSCH::ChartType newcharttype() const;
  inline void set_newcharttype(::TSCH::ChartType value);

  // optional .TSP.Reference info_geometry_command = 5;
  inline bool has_info_geometry_command() const;
  inline void clear_info_geometry_command();
  static const int kInfoGeometryCommandFieldNumber = 5;
  inline const ::TSP::Reference& info_geometry_command() const;
  inline ::TSP::Reference* mutable_info_geometry_command();
  inline ::TSP::Reference* release_info_geometry_command();
  inline void set_allocated_info_geometry_command(::TSP::Reference* info_geometry_command);

  // optional .TSP.Reference anchor_attachment_command = 6;
  inline bool has_anchor_attachment_command() const;
  inline void clear_anchor_attachment_command();
  static const int kAnchorAttachmentCommandFieldNumber = 6;
  inline const ::TSP::Reference& anchor_attachment_command() const;
  inline ::TSP::Reference* mutable_anchor_attachment_command();
  inline ::TSP::Reference* release_anchor_attachment_command();
  inline void set_allocated_anchor_attachment_command(::TSP::Reference* anchor_attachment_command);

  // optional .TSCH.RectArchive original_legend_rect = 7;
  inline bool has_original_legend_rect() const;
  inline void clear_original_legend_rect();
  static const int kOriginalLegendRectFieldNumber = 7;
  inline const ::TSCH::RectArchive& original_legend_rect() const;
  inline ::TSCH::RectArchive* mutable_original_legend_rect();
  inline ::TSCH::RectArchive* release_original_legend_rect();
  inline void set_allocated_original_legend_rect(::TSCH::RectArchive* original_legend_rect);

  // @@protoc_insertion_point(class_scope:TSCH.CommandSetChartTypeArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();
  inline void set_has_oldcharttype();
  inline void clear_has_oldcharttype();
  inline void set_has_newcharttype();
  inline void clear_has_newcharttype();
  inline void set_has_info_geometry_command();
  inline void clear_has_info_geometry_command();
  inline void set_has_anchor_attachment_command();
  inline void clear_has_anchor_attachment_command();
  inline void set_has_original_legend_rect();
  inline void clear_has_original_legend_rect();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSCH::ChartCommandArchive* super_;
  int oldcharttype_;
  int newcharttype_;
  ::TSP::Reference* info_geometry_command_;
  ::TSP::Reference* anchor_attachment_command_;
  ::TSCH::RectArchive* original_legend_rect_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_AssignDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCHCommandArchives_2eproto();

  void InitAsDefaultInstance();
  static CommandSetChartTypeArchive* default_instance_;
};
// -------------------------------------------------------------------

class PropertyMutationUndoTupleArchive : public ::google::protobuf::Message {
 public:
  PropertyMutationUndoTupleArchive();
  virtual ~PropertyMutationUndoTupleArchive();

  PropertyMutationUndoTupleArchive(const PropertyMutationUndoTupleArchive& from);

  inline PropertyMutationUndoTupleArchive& operator=(const PropertyMutationUndoTupleArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PropertyMutationUndoTupleArchive& default_instance();

  void Swap(PropertyMutationUndoTupleArchive* other);

  // implements Message ----------------------------------------------

  PropertyMutationUndoTupleArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PropertyMutationUndoTupleArchive& from);
  void MergeFrom(const PropertyMutationUndoTupleArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .TSP.Reference chart_info = 1;
  inline bool has_chart_info() const;
  inline void clear_chart_info();
  static const int kChartInfoFieldNumber = 1;
  inline const ::TSP::Reference& chart_info() const;
  inline ::TSP::Reference* mutable_chart_info();
  inline ::TSP::Reference* release_chart_info();
  inline void set_allocated_chart_info(::TSP::Reference* chart_info);

  // optional .TSCH.StyleOwnerType style_owner_type = 2;
  inline bool has_style_owner_type() const;
  inline void clear_style_owner_type();
  static const int kStyleOwnerTypeFieldNumber = 2;
  inline ::TSCH::StyleOwnerType style_owner_type() const;
  inline void set_style_owner_type(::TSCH::StyleOwnerType value);

  // optional uint32 index = 3;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // optional .TSP.Reference old_style = 4;
  inline bool has_old_style() const;
  inline void clear_old_style();
  static const int kOldStyleFieldNumber = 4;
  inline const ::TSP::Reference& old_style() const;
  inline ::TSP::Reference* mutable_old_style();
  inline ::TSP::Reference* release_old_style();
  inline void set_allocated_old_style(::TSP::Reference* old_style);

  // optional .TSP.Reference new_style = 5;
  inline bool has_new_style() const;
  inline void clear_new_style();
  static const int kNewStyleFieldNumber = 5;
  inline const ::TSP::Reference& new_style() const;
  inline ::TSP::Reference* mutable_new_style();
  inline ::TSP::Reference* release_new_style();
  inline void set_allocated_new_style(::TSP::Reference* new_style);

  // optional .TSP.Reference old_non_style = 6;
  inline bool has_old_non_style() const;
  inline void clear_old_non_style();
  static const int kOldNonStyleFieldNumber = 6;
  inline const ::TSP::Reference& old_non_style() const;
  inline ::TSP::Reference* mutable_old_non_style();
  inline ::TSP::Reference* release_old_non_style();
  inline void set_allocated_old_non_style(::TSP::Reference* old_non_style);

  // optional .TSP.Reference new_non_style = 7;
  inline bool has_new_non_style() const;
  inline void clear_new_non_style();
  static const int kNewNonStyleFieldNumber = 7;
  inline const ::TSP::Reference& new_non_style() const;
  inline ::TSP::Reference* mutable_new_non_style();
  inline ::TSP::Reference* release_new_non_style();
  inline void set_allocated_new_non_style(::TSP::Reference* new_non_style);

  // @@protoc_insertion_point(class_scope:TSCH.PropertyMutationUndoTupleArchive)
 private:
  inline void set_has_chart_info();
  inline void clear_has_chart_info();
  inline void set_has_style_owner_type();
  inline void clear_has_style_owner_type();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_old_style();
  inline void clear_has_old_style();
  inline void set_has_new_style();
  inline void clear_has_new_style();
  inline void set_has_old_non_style();
  inline void clear_has_old_non_style();
  inline void set_has_new_non_style();
  inline void clear_has_new_non_style();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSP::Reference* chart_info_;
  int style_owner_type_;
  ::google::protobuf::uint32 index_;
  ::TSP::Reference* old_style_;
  ::TSP::Reference* new_style_;
  ::TSP::Reference* old_non_style_;
  ::TSP::Reference* new_non_style_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_AssignDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCHCommandArchives_2eproto();

  void InitAsDefaultInstance();
  static PropertyMutationUndoTupleArchive* default_instance_;
};
// -------------------------------------------------------------------

class StyleSwapUndoTupleArchive : public ::google::protobuf::Message {
 public:
  StyleSwapUndoTupleArchive();
  virtual ~StyleSwapUndoTupleArchive();

  StyleSwapUndoTupleArchive(const StyleSwapUndoTupleArchive& from);

  inline StyleSwapUndoTupleArchive& operator=(const StyleSwapUndoTupleArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StyleSwapUndoTupleArchive& default_instance();

  void Swap(StyleSwapUndoTupleArchive* other);

  // implements Message ----------------------------------------------

  StyleSwapUndoTupleArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StyleSwapUndoTupleArchive& from);
  void MergeFrom(const StyleSwapUndoTupleArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .TSP.Reference chart_info = 1;
  inline bool has_chart_info() const;
  inline void clear_chart_info();
  static const int kChartInfoFieldNumber = 1;
  inline const ::TSP::Reference& chart_info() const;
  inline ::TSP::Reference* mutable_chart_info();
  inline ::TSP::Reference* release_chart_info();
  inline void set_allocated_chart_info(::TSP::Reference* chart_info);

  // optional .TSCH.StyleSwapType swap_type = 2;
  inline bool has_swap_type() const;
  inline void clear_swap_type();
  static const int kSwapTypeFieldNumber = 2;
  inline ::TSCH::StyleSwapType swap_type() const;
  inline void set_swap_type(::TSCH::StyleSwapType value);

  // optional uint32 index = 3;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // optional .TSP.Reference old_value = 4;
  inline bool has_old_value() const;
  inline void clear_old_value();
  static const int kOldValueFieldNumber = 4;
  inline const ::TSP::Reference& old_value() const;
  inline ::TSP::Reference* mutable_old_value();
  inline ::TSP::Reference* release_old_value();
  inline void set_allocated_old_value(::TSP::Reference* old_value);

  // optional .TSP.Reference new_value = 5;
  inline bool has_new_value() const;
  inline void clear_new_value();
  static const int kNewValueFieldNumber = 5;
  inline const ::TSP::Reference& new_value() const;
  inline ::TSP::Reference* mutable_new_value();
  inline ::TSP::Reference* release_new_value();
  inline void set_allocated_new_value(::TSP::Reference* new_value);

  // @@protoc_insertion_point(class_scope:TSCH.StyleSwapUndoTupleArchive)
 private:
  inline void set_has_chart_info();
  inline void clear_has_chart_info();
  inline void set_has_swap_type();
  inline void clear_has_swap_type();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_old_value();
  inline void clear_has_old_value();
  inline void set_has_new_value();
  inline void clear_has_new_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSP::Reference* chart_info_;
  int swap_type_;
  ::google::protobuf::uint32 index_;
  ::TSP::Reference* old_value_;
  ::TSP::Reference* new_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_AssignDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCHCommandArchives_2eproto();

  void InitAsDefaultInstance();
  static StyleSwapUndoTupleArchive* default_instance_;
};
// -------------------------------------------------------------------

class CommandStyleSwapArchive : public ::google::protobuf::Message {
 public:
  CommandStyleSwapArchive();
  virtual ~CommandStyleSwapArchive();

  CommandStyleSwapArchive(const CommandStyleSwapArchive& from);

  inline CommandStyleSwapArchive& operator=(const CommandStyleSwapArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandStyleSwapArchive& default_instance();

  void Swap(CommandStyleSwapArchive* other);

  // implements Message ----------------------------------------------

  CommandStyleSwapArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommandStyleSwapArchive& from);
  void MergeFrom(const CommandStyleSwapArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSCH.ChartCommandArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSCH::ChartCommandArchive& super() const;
  inline ::TSCH::ChartCommandArchive* mutable_super();
  inline ::TSCH::ChartCommandArchive* release_super();
  inline void set_allocated_super(::TSCH::ChartCommandArchive* super);

  // repeated .TSCH.StyleSwapUndoTupleArchive undo_tuples = 2;
  inline int undo_tuples_size() const;
  inline void clear_undo_tuples();
  static const int kUndoTuplesFieldNumber = 2;
  inline const ::TSCH::StyleSwapUndoTupleArchive& undo_tuples(int index) const;
  inline ::TSCH::StyleSwapUndoTupleArchive* mutable_undo_tuples(int index);
  inline ::TSCH::StyleSwapUndoTupleArchive* add_undo_tuples();
  inline const ::google::protobuf::RepeatedPtrField< ::TSCH::StyleSwapUndoTupleArchive >&
      undo_tuples() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSCH::StyleSwapUndoTupleArchive >*
      mutable_undo_tuples();

  // @@protoc_insertion_point(class_scope:TSCH.CommandStyleSwapArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSCH::ChartCommandArchive* super_;
  ::google::protobuf::RepeatedPtrField< ::TSCH::StyleSwapUndoTupleArchive > undo_tuples_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_AssignDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCHCommandArchives_2eproto();

  void InitAsDefaultInstance();
  static CommandStyleSwapArchive* default_instance_;
};
// -------------------------------------------------------------------

class CommandSetSeriesNameArchive : public ::google::protobuf::Message {
 public:
  CommandSetSeriesNameArchive();
  virtual ~CommandSetSeriesNameArchive();

  CommandSetSeriesNameArchive(const CommandSetSeriesNameArchive& from);

  inline CommandSetSeriesNameArchive& operator=(const CommandSetSeriesNameArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandSetSeriesNameArchive& default_instance();

  void Swap(CommandSetSeriesNameArchive* other);

  // implements Message ----------------------------------------------

  CommandSetSeriesNameArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommandSetSeriesNameArchive& from);
  void MergeFrom(const CommandSetSeriesNameArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSCH.ChartCommandArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSCH::ChartCommandArchive& super() const;
  inline ::TSCH::ChartCommandArchive* mutable_super();
  inline ::TSCH::ChartCommandArchive* release_super();
  inline void set_allocated_super(::TSCH::ChartCommandArchive* super);

  // required uint32 seriesIndex = 2;
  inline bool has_seriesindex() const;
  inline void clear_seriesindex();
  static const int kSeriesIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 seriesindex() const;
  inline void set_seriesindex(::google::protobuf::uint32 value);

  // required string oldName = 3;
  inline bool has_oldname() const;
  inline void clear_oldname();
  static const int kOldNameFieldNumber = 3;
  inline const ::std::string& oldname() const;
  inline void set_oldname(const ::std::string& value);
  inline void set_oldname(const char* value);
  inline void set_oldname(const char* value, size_t size);
  inline ::std::string* mutable_oldname();
  inline ::std::string* release_oldname();
  inline void set_allocated_oldname(::std::string* oldname);

  // required string newName = 4;
  inline bool has_newname() const;
  inline void clear_newname();
  static const int kNewNameFieldNumber = 4;
  inline const ::std::string& newname() const;
  inline void set_newname(const ::std::string& value);
  inline void set_newname(const char* value);
  inline void set_newname(const char* value, size_t size);
  inline ::std::string* mutable_newname();
  inline ::std::string* release_newname();
  inline void set_allocated_newname(::std::string* newname);

  // @@protoc_insertion_point(class_scope:TSCH.CommandSetSeriesNameArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();
  inline void set_has_seriesindex();
  inline void clear_has_seriesindex();
  inline void set_has_oldname();
  inline void clear_has_oldname();
  inline void set_has_newname();
  inline void clear_has_newname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSCH::ChartCommandArchive* super_;
  ::std::string* oldname_;
  ::std::string* newname_;
  ::google::protobuf::uint32 seriesindex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_AssignDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCHCommandArchives_2eproto();

  void InitAsDefaultInstance();
  static CommandSetSeriesNameArchive* default_instance_;
};
// -------------------------------------------------------------------

class CommandSetCategoryNameArchive : public ::google::protobuf::Message {
 public:
  CommandSetCategoryNameArchive();
  virtual ~CommandSetCategoryNameArchive();

  CommandSetCategoryNameArchive(const CommandSetCategoryNameArchive& from);

  inline CommandSetCategoryNameArchive& operator=(const CommandSetCategoryNameArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandSetCategoryNameArchive& default_instance();

  void Swap(CommandSetCategoryNameArchive* other);

  // implements Message ----------------------------------------------

  CommandSetCategoryNameArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommandSetCategoryNameArchive& from);
  void MergeFrom(const CommandSetCategoryNameArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSCH.ChartCommandArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSCH::ChartCommandArchive& super() const;
  inline ::TSCH::ChartCommandArchive* mutable_super();
  inline ::TSCH::ChartCommandArchive* release_super();
  inline void set_allocated_super(::TSCH::ChartCommandArchive* super);

  // required uint32 categoryIndex = 2;
  inline bool has_categoryindex() const;
  inline void clear_categoryindex();
  static const int kCategoryIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 categoryindex() const;
  inline void set_categoryindex(::google::protobuf::uint32 value);

  // required string oldName = 3;
  inline bool has_oldname() const;
  inline void clear_oldname();
  static const int kOldNameFieldNumber = 3;
  inline const ::std::string& oldname() const;
  inline void set_oldname(const ::std::string& value);
  inline void set_oldname(const char* value);
  inline void set_oldname(const char* value, size_t size);
  inline ::std::string* mutable_oldname();
  inline ::std::string* release_oldname();
  inline void set_allocated_oldname(::std::string* oldname);

  // required string newName = 4;
  inline bool has_newname() const;
  inline void clear_newname();
  static const int kNewNameFieldNumber = 4;
  inline const ::std::string& newname() const;
  inline void set_newname(const ::std::string& value);
  inline void set_newname(const char* value);
  inline void set_newname(const char* value, size_t size);
  inline ::std::string* mutable_newname();
  inline ::std::string* release_newname();
  inline void set_allocated_newname(::std::string* newname);

  // optional bool isMultiDataIndex = 5;
  inline bool has_ismultidataindex() const;
  inline void clear_ismultidataindex();
  static const int kIsMultiDataIndexFieldNumber = 5;
  inline bool ismultidataindex() const;
  inline void set_ismultidataindex(bool value);

  // @@protoc_insertion_point(class_scope:TSCH.CommandSetCategoryNameArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();
  inline void set_has_categoryindex();
  inline void clear_has_categoryindex();
  inline void set_has_oldname();
  inline void clear_has_oldname();
  inline void set_has_newname();
  inline void clear_has_newname();
  inline void set_has_ismultidataindex();
  inline void clear_has_ismultidataindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSCH::ChartCommandArchive* super_;
  ::std::string* oldname_;
  ::google::protobuf::uint32 categoryindex_;
  bool ismultidataindex_;
  ::std::string* newname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_AssignDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCHCommandArchives_2eproto();

  void InitAsDefaultInstance();
  static CommandSetCategoryNameArchive* default_instance_;
};
// -------------------------------------------------------------------

class CommandAddGridRowsArchive : public ::google::protobuf::Message {
 public:
  CommandAddGridRowsArchive();
  virtual ~CommandAddGridRowsArchive();

  CommandAddGridRowsArchive(const CommandAddGridRowsArchive& from);

  inline CommandAddGridRowsArchive& operator=(const CommandAddGridRowsArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandAddGridRowsArchive& default_instance();

  void Swap(CommandAddGridRowsArchive* other);

  // implements Message ----------------------------------------------

  CommandAddGridRowsArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommandAddGridRowsArchive& from);
  void MergeFrom(const CommandAddGridRowsArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSCH.ChartCommandArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSCH::ChartCommandArchive& super() const;
  inline ::TSCH::ChartCommandArchive* mutable_super();
  inline ::TSCH::ChartCommandArchive* release_super();
  inline void set_allocated_super(::TSCH::ChartCommandArchive* super);

  // required uint32 location = 2;
  inline bool has_location() const;
  inline void clear_location();
  static const int kLocationFieldNumber = 2;
  inline ::google::protobuf::uint32 location() const;
  inline void set_location(::google::protobuf::uint32 value);

  // optional uint32 length = 3;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 3;
  inline ::google::protobuf::uint32 length() const;
  inline void set_length(::google::protobuf::uint32 value);

  // repeated string name = 4;
  inline int name_size() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name(int index) const;
  inline ::std::string* mutable_name(int index);
  inline void set_name(int index, const ::std::string& value);
  inline void set_name(int index, const char* value);
  inline void set_name(int index, const char* value, size_t size);
  inline ::std::string* add_name();
  inline void add_name(const ::std::string& value);
  inline void add_name(const char* value);
  inline void add_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name();

  // @@protoc_insertion_point(class_scope:TSCH.CommandAddGridRowsArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();
  inline void set_has_location();
  inline void clear_has_location();
  inline void set_has_length();
  inline void clear_has_length();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSCH::ChartCommandArchive* super_;
  ::google::protobuf::uint32 location_;
  ::google::protobuf::uint32 length_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_AssignDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCHCommandArchives_2eproto();

  void InitAsDefaultInstance();
  static CommandAddGridRowsArchive* default_instance_;
};
// -------------------------------------------------------------------

class CommandAddGridColumnsArchive : public ::google::protobuf::Message {
 public:
  CommandAddGridColumnsArchive();
  virtual ~CommandAddGridColumnsArchive();

  CommandAddGridColumnsArchive(const CommandAddGridColumnsArchive& from);

  inline CommandAddGridColumnsArchive& operator=(const CommandAddGridColumnsArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandAddGridColumnsArchive& default_instance();

  void Swap(CommandAddGridColumnsArchive* other);

  // implements Message ----------------------------------------------

  CommandAddGridColumnsArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommandAddGridColumnsArchive& from);
  void MergeFrom(const CommandAddGridColumnsArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSCH.ChartCommandArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSCH::ChartCommandArchive& super() const;
  inline ::TSCH::ChartCommandArchive* mutable_super();
  inline ::TSCH::ChartCommandArchive* release_super();
  inline void set_allocated_super(::TSCH::ChartCommandArchive* super);

  // required uint32 location = 2;
  inline bool has_location() const;
  inline void clear_location();
  static const int kLocationFieldNumber = 2;
  inline ::google::protobuf::uint32 location() const;
  inline void set_location(::google::protobuf::uint32 value);

  // optional uint32 length = 3;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 3;
  inline ::google::protobuf::uint32 length() const;
  inline void set_length(::google::protobuf::uint32 value);

  // repeated string name = 4;
  inline int name_size() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name(int index) const;
  inline ::std::string* mutable_name(int index);
  inline void set_name(int index, const ::std::string& value);
  inline void set_name(int index, const char* value);
  inline void set_name(int index, const char* value, size_t size);
  inline ::std::string* add_name();
  inline void add_name(const ::std::string& value);
  inline void add_name(const char* value);
  inline void add_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name();

  // @@protoc_insertion_point(class_scope:TSCH.CommandAddGridColumnsArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();
  inline void set_has_location();
  inline void clear_has_location();
  inline void set_has_length();
  inline void clear_has_length();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSCH::ChartCommandArchive* super_;
  ::google::protobuf::uint32 location_;
  ::google::protobuf::uint32 length_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_AssignDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCHCommandArchives_2eproto();

  void InitAsDefaultInstance();
  static CommandAddGridColumnsArchive* default_instance_;
};
// -------------------------------------------------------------------

class CommandMoveGridRowsArchive : public ::google::protobuf::Message {
 public:
  CommandMoveGridRowsArchive();
  virtual ~CommandMoveGridRowsArchive();

  CommandMoveGridRowsArchive(const CommandMoveGridRowsArchive& from);

  inline CommandMoveGridRowsArchive& operator=(const CommandMoveGridRowsArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandMoveGridRowsArchive& default_instance();

  void Swap(CommandMoveGridRowsArchive* other);

  // implements Message ----------------------------------------------

  CommandMoveGridRowsArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommandMoveGridRowsArchive& from);
  void MergeFrom(const CommandMoveGridRowsArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSCH.ChartCommandArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSCH::ChartCommandArchive& super() const;
  inline ::TSCH::ChartCommandArchive* mutable_super();
  inline ::TSCH::ChartCommandArchive* release_super();
  inline void set_allocated_super(::TSCH::ChartCommandArchive* super);

  // required uint32 location = 2;
  inline bool has_location() const;
  inline void clear_location();
  static const int kLocationFieldNumber = 2;
  inline ::google::protobuf::uint32 location() const;
  inline void set_location(::google::protobuf::uint32 value);

  // required uint32 length = 3;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 3;
  inline ::google::protobuf::uint32 length() const;
  inline void set_length(::google::protobuf::uint32 value);

  // required int32 afterrow = 4;
  inline bool has_afterrow() const;
  inline void clear_afterrow();
  static const int kAfterrowFieldNumber = 4;
  inline ::google::protobuf::int32 afterrow() const;
  inline void set_afterrow(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TSCH.CommandMoveGridRowsArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();
  inline void set_has_location();
  inline void clear_has_location();
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_afterrow();
  inline void clear_has_afterrow();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSCH::ChartCommandArchive* super_;
  ::google::protobuf::uint32 location_;
  ::google::protobuf::uint32 length_;
  ::google::protobuf::int32 afterrow_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_AssignDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCHCommandArchives_2eproto();

  void InitAsDefaultInstance();
  static CommandMoveGridRowsArchive* default_instance_;
};
// -------------------------------------------------------------------

class CommandMoveGridColumnsArchive : public ::google::protobuf::Message {
 public:
  CommandMoveGridColumnsArchive();
  virtual ~CommandMoveGridColumnsArchive();

  CommandMoveGridColumnsArchive(const CommandMoveGridColumnsArchive& from);

  inline CommandMoveGridColumnsArchive& operator=(const CommandMoveGridColumnsArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandMoveGridColumnsArchive& default_instance();

  void Swap(CommandMoveGridColumnsArchive* other);

  // implements Message ----------------------------------------------

  CommandMoveGridColumnsArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommandMoveGridColumnsArchive& from);
  void MergeFrom(const CommandMoveGridColumnsArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSCH.ChartCommandArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSCH::ChartCommandArchive& super() const;
  inline ::TSCH::ChartCommandArchive* mutable_super();
  inline ::TSCH::ChartCommandArchive* release_super();
  inline void set_allocated_super(::TSCH::ChartCommandArchive* super);

  // required uint32 location = 2;
  inline bool has_location() const;
  inline void clear_location();
  static const int kLocationFieldNumber = 2;
  inline ::google::protobuf::uint32 location() const;
  inline void set_location(::google::protobuf::uint32 value);

  // required uint32 length = 3;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 3;
  inline ::google::protobuf::uint32 length() const;
  inline void set_length(::google::protobuf::uint32 value);

  // required int32 aftercolumn = 4;
  inline bool has_aftercolumn() const;
  inline void clear_aftercolumn();
  static const int kAftercolumnFieldNumber = 4;
  inline ::google::protobuf::int32 aftercolumn() const;
  inline void set_aftercolumn(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TSCH.CommandMoveGridColumnsArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();
  inline void set_has_location();
  inline void clear_has_location();
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_aftercolumn();
  inline void clear_has_aftercolumn();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSCH::ChartCommandArchive* super_;
  ::google::protobuf::uint32 location_;
  ::google::protobuf::uint32 length_;
  ::google::protobuf::int32 aftercolumn_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_AssignDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCHCommandArchives_2eproto();

  void InitAsDefaultInstance();
  static CommandMoveGridColumnsArchive* default_instance_;
};
// -------------------------------------------------------------------

class CommandDeleteGridRowsArchive_ValueRow : public ::google::protobuf::Message {
 public:
  CommandDeleteGridRowsArchive_ValueRow();
  virtual ~CommandDeleteGridRowsArchive_ValueRow();

  CommandDeleteGridRowsArchive_ValueRow(const CommandDeleteGridRowsArchive_ValueRow& from);

  inline CommandDeleteGridRowsArchive_ValueRow& operator=(const CommandDeleteGridRowsArchive_ValueRow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandDeleteGridRowsArchive_ValueRow& default_instance();

  void Swap(CommandDeleteGridRowsArchive_ValueRow* other);

  // implements Message ----------------------------------------------

  CommandDeleteGridRowsArchive_ValueRow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommandDeleteGridRowsArchive_ValueRow& from);
  void MergeFrom(const CommandDeleteGridRowsArchive_ValueRow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double value = 5;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 5;
  inline double value(int index) const;
  inline void set_value(int index, double value);
  inline void add_value(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      value() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:TSCH.CommandDeleteGridRowsArchive.ValueRow)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< double > value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_AssignDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCHCommandArchives_2eproto();

  void InitAsDefaultInstance();
  static CommandDeleteGridRowsArchive_ValueRow* default_instance_;
};
// -------------------------------------------------------------------

class CommandDeleteGridRowsArchive : public ::google::protobuf::Message {
 public:
  CommandDeleteGridRowsArchive();
  virtual ~CommandDeleteGridRowsArchive();

  CommandDeleteGridRowsArchive(const CommandDeleteGridRowsArchive& from);

  inline CommandDeleteGridRowsArchive& operator=(const CommandDeleteGridRowsArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandDeleteGridRowsArchive& default_instance();

  void Swap(CommandDeleteGridRowsArchive* other);

  // implements Message ----------------------------------------------

  CommandDeleteGridRowsArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommandDeleteGridRowsArchive& from);
  void MergeFrom(const CommandDeleteGridRowsArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CommandDeleteGridRowsArchive_ValueRow ValueRow;

  // accessors -------------------------------------------------------

  // required .TSCH.ChartCommandArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSCH::ChartCommandArchive& super() const;
  inline ::TSCH::ChartCommandArchive* mutable_super();
  inline ::TSCH::ChartCommandArchive* release_super();
  inline void set_allocated_super(::TSCH::ChartCommandArchive* super);

  // required uint32 location = 2;
  inline bool has_location() const;
  inline void clear_location();
  static const int kLocationFieldNumber = 2;
  inline ::google::protobuf::uint32 location() const;
  inline void set_location(::google::protobuf::uint32 value);

  // required uint32 length = 3;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 3;
  inline ::google::protobuf::uint32 length() const;
  inline void set_length(::google::protobuf::uint32 value);

  // repeated string names = 4;
  inline int names_size() const;
  inline void clear_names();
  static const int kNamesFieldNumber = 4;
  inline const ::std::string& names(int index) const;
  inline ::std::string* mutable_names(int index);
  inline void set_names(int index, const ::std::string& value);
  inline void set_names(int index, const char* value);
  inline void set_names(int index, const char* value, size_t size);
  inline ::std::string* add_names();
  inline void add_names(const ::std::string& value);
  inline void add_names(const char* value);
  inline void add_names(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& names() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_names();

  // repeated .TSCH.CommandDeleteGridRowsArchive.ValueRow value_row = 6;
  inline int value_row_size() const;
  inline void clear_value_row();
  static const int kValueRowFieldNumber = 6;
  inline const ::TSCH::CommandDeleteGridRowsArchive_ValueRow& value_row(int index) const;
  inline ::TSCH::CommandDeleteGridRowsArchive_ValueRow* mutable_value_row(int index);
  inline ::TSCH::CommandDeleteGridRowsArchive_ValueRow* add_value_row();
  inline const ::google::protobuf::RepeatedPtrField< ::TSCH::CommandDeleteGridRowsArchive_ValueRow >&
      value_row() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSCH::CommandDeleteGridRowsArchive_ValueRow >*
      mutable_value_row();

  // optional bool removed_all_rows = 7;
  inline bool has_removed_all_rows() const;
  inline void clear_removed_all_rows();
  static const int kRemovedAllRowsFieldNumber = 7;
  inline bool removed_all_rows() const;
  inline void set_removed_all_rows(bool value);

  // repeated string column_names = 8;
  inline int column_names_size() const;
  inline void clear_column_names();
  static const int kColumnNamesFieldNumber = 8;
  inline const ::std::string& column_names(int index) const;
  inline ::std::string* mutable_column_names(int index);
  inline void set_column_names(int index, const ::std::string& value);
  inline void set_column_names(int index, const char* value);
  inline void set_column_names(int index, const char* value, size_t size);
  inline ::std::string* add_column_names();
  inline void add_column_names(const ::std::string& value);
  inline void add_column_names(const char* value);
  inline void add_column_names(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& column_names() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_column_names();

  // @@protoc_insertion_point(class_scope:TSCH.CommandDeleteGridRowsArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();
  inline void set_has_location();
  inline void clear_has_location();
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_removed_all_rows();
  inline void clear_has_removed_all_rows();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSCH::ChartCommandArchive* super_;
  ::google::protobuf::uint32 location_;
  ::google::protobuf::uint32 length_;
  ::google::protobuf::RepeatedPtrField< ::std::string> names_;
  ::google::protobuf::RepeatedPtrField< ::TSCH::CommandDeleteGridRowsArchive_ValueRow > value_row_;
  ::google::protobuf::RepeatedPtrField< ::std::string> column_names_;
  bool removed_all_rows_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_AssignDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCHCommandArchives_2eproto();

  void InitAsDefaultInstance();
  static CommandDeleteGridRowsArchive* default_instance_;
};
// -------------------------------------------------------------------

class CommandDeleteGridColumnsArchive_ValueRow : public ::google::protobuf::Message {
 public:
  CommandDeleteGridColumnsArchive_ValueRow();
  virtual ~CommandDeleteGridColumnsArchive_ValueRow();

  CommandDeleteGridColumnsArchive_ValueRow(const CommandDeleteGridColumnsArchive_ValueRow& from);

  inline CommandDeleteGridColumnsArchive_ValueRow& operator=(const CommandDeleteGridColumnsArchive_ValueRow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandDeleteGridColumnsArchive_ValueRow& default_instance();

  void Swap(CommandDeleteGridColumnsArchive_ValueRow* other);

  // implements Message ----------------------------------------------

  CommandDeleteGridColumnsArchive_ValueRow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommandDeleteGridColumnsArchive_ValueRow& from);
  void MergeFrom(const CommandDeleteGridColumnsArchive_ValueRow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double value = 5;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 5;
  inline double value(int index) const;
  inline void set_value(int index, double value);
  inline void add_value(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      value() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:TSCH.CommandDeleteGridColumnsArchive.ValueRow)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< double > value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_AssignDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCHCommandArchives_2eproto();

  void InitAsDefaultInstance();
  static CommandDeleteGridColumnsArchive_ValueRow* default_instance_;
};
// -------------------------------------------------------------------

class CommandDeleteGridColumnsArchive : public ::google::protobuf::Message {
 public:
  CommandDeleteGridColumnsArchive();
  virtual ~CommandDeleteGridColumnsArchive();

  CommandDeleteGridColumnsArchive(const CommandDeleteGridColumnsArchive& from);

  inline CommandDeleteGridColumnsArchive& operator=(const CommandDeleteGridColumnsArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandDeleteGridColumnsArchive& default_instance();

  void Swap(CommandDeleteGridColumnsArchive* other);

  // implements Message ----------------------------------------------

  CommandDeleteGridColumnsArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommandDeleteGridColumnsArchive& from);
  void MergeFrom(const CommandDeleteGridColumnsArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CommandDeleteGridColumnsArchive_ValueRow ValueRow;

  // accessors -------------------------------------------------------

  // required .TSCH.ChartCommandArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSCH::ChartCommandArchive& super() const;
  inline ::TSCH::ChartCommandArchive* mutable_super();
  inline ::TSCH::ChartCommandArchive* release_super();
  inline void set_allocated_super(::TSCH::ChartCommandArchive* super);

  // required uint32 location = 2;
  inline bool has_location() const;
  inline void clear_location();
  static const int kLocationFieldNumber = 2;
  inline ::google::protobuf::uint32 location() const;
  inline void set_location(::google::protobuf::uint32 value);

  // required uint32 length = 3;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 3;
  inline ::google::protobuf::uint32 length() const;
  inline void set_length(::google::protobuf::uint32 value);

  // repeated string names = 4;
  inline int names_size() const;
  inline void clear_names();
  static const int kNamesFieldNumber = 4;
  inline const ::std::string& names(int index) const;
  inline ::std::string* mutable_names(int index);
  inline void set_names(int index, const ::std::string& value);
  inline void set_names(int index, const char* value);
  inline void set_names(int index, const char* value, size_t size);
  inline ::std::string* add_names();
  inline void add_names(const ::std::string& value);
  inline void add_names(const char* value);
  inline void add_names(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& names() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_names();

  // repeated .TSCH.CommandDeleteGridColumnsArchive.ValueRow value_row = 6;
  inline int value_row_size() const;
  inline void clear_value_row();
  static const int kValueRowFieldNumber = 6;
  inline const ::TSCH::CommandDeleteGridColumnsArchive_ValueRow& value_row(int index) const;
  inline ::TSCH::CommandDeleteGridColumnsArchive_ValueRow* mutable_value_row(int index);
  inline ::TSCH::CommandDeleteGridColumnsArchive_ValueRow* add_value_row();
  inline const ::google::protobuf::RepeatedPtrField< ::TSCH::CommandDeleteGridColumnsArchive_ValueRow >&
      value_row() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSCH::CommandDeleteGridColumnsArchive_ValueRow >*
      mutable_value_row();

  // optional bool removed_all_columns = 7;
  inline bool has_removed_all_columns() const;
  inline void clear_removed_all_columns();
  static const int kRemovedAllColumnsFieldNumber = 7;
  inline bool removed_all_columns() const;
  inline void set_removed_all_columns(bool value);

  // repeated string row_names = 8;
  inline int row_names_size() const;
  inline void clear_row_names();
  static const int kRowNamesFieldNumber = 8;
  inline const ::std::string& row_names(int index) const;
  inline ::std::string* mutable_row_names(int index);
  inline void set_row_names(int index, const ::std::string& value);
  inline void set_row_names(int index, const char* value);
  inline void set_row_names(int index, const char* value, size_t size);
  inline ::std::string* add_row_names();
  inline void add_row_names(const ::std::string& value);
  inline void add_row_names(const char* value);
  inline void add_row_names(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& row_names() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_row_names();

  // @@protoc_insertion_point(class_scope:TSCH.CommandDeleteGridColumnsArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();
  inline void set_has_location();
  inline void clear_has_location();
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_removed_all_columns();
  inline void clear_has_removed_all_columns();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSCH::ChartCommandArchive* super_;
  ::google::protobuf::uint32 location_;
  ::google::protobuf::uint32 length_;
  ::google::protobuf::RepeatedPtrField< ::std::string> names_;
  ::google::protobuf::RepeatedPtrField< ::TSCH::CommandDeleteGridColumnsArchive_ValueRow > value_row_;
  ::google::protobuf::RepeatedPtrField< ::std::string> row_names_;
  bool removed_all_columns_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_AssignDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCHCommandArchives_2eproto();

  void InitAsDefaultInstance();
  static CommandDeleteGridColumnsArchive* default_instance_;
};
// -------------------------------------------------------------------

class CommandSetPreviewLocArchive : public ::google::protobuf::Message {
 public:
  CommandSetPreviewLocArchive();
  virtual ~CommandSetPreviewLocArchive();

  CommandSetPreviewLocArchive(const CommandSetPreviewLocArchive& from);

  inline CommandSetPreviewLocArchive& operator=(const CommandSetPreviewLocArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandSetPreviewLocArchive& default_instance();

  void Swap(CommandSetPreviewLocArchive* other);

  // implements Message ----------------------------------------------

  CommandSetPreviewLocArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommandSetPreviewLocArchive& from);
  void MergeFrom(const CommandSetPreviewLocArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSCH.ChartCommandArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSCH::ChartCommandArchive& super() const;
  inline ::TSCH::ChartCommandArchive* mutable_super();
  inline ::TSCH::ChartCommandArchive* release_super();
  inline void set_allocated_super(::TSCH::ChartCommandArchive* super);

  // required .TSP.Point old_loc = 2;
  inline bool has_old_loc() const;
  inline void clear_old_loc();
  static const int kOldLocFieldNumber = 2;
  inline const ::TSP::Point& old_loc() const;
  inline ::TSP::Point* mutable_old_loc();
  inline ::TSP::Point* release_old_loc();
  inline void set_allocated_old_loc(::TSP::Point* old_loc);

  // required .TSP.Point new_loc = 3;
  inline bool has_new_loc() const;
  inline void clear_new_loc();
  static const int kNewLocFieldNumber = 3;
  inline const ::TSP::Point& new_loc() const;
  inline ::TSP::Point* mutable_new_loc();
  inline ::TSP::Point* release_new_loc();
  inline void set_allocated_new_loc(::TSP::Point* new_loc);

  // @@protoc_insertion_point(class_scope:TSCH.CommandSetPreviewLocArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();
  inline void set_has_old_loc();
  inline void clear_has_old_loc();
  inline void set_has_new_loc();
  inline void clear_has_new_loc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSCH::ChartCommandArchive* super_;
  ::TSP::Point* old_loc_;
  ::TSP::Point* new_loc_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_AssignDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCHCommandArchives_2eproto();

  void InitAsDefaultInstance();
  static CommandSetPreviewLocArchive* default_instance_;
};
// -------------------------------------------------------------------

class CommandSetGridValueArchive : public ::google::protobuf::Message {
 public:
  CommandSetGridValueArchive();
  virtual ~CommandSetGridValueArchive();

  CommandSetGridValueArchive(const CommandSetGridValueArchive& from);

  inline CommandSetGridValueArchive& operator=(const CommandSetGridValueArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandSetGridValueArchive& default_instance();

  void Swap(CommandSetGridValueArchive* other);

  // implements Message ----------------------------------------------

  CommandSetGridValueArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommandSetGridValueArchive& from);
  void MergeFrom(const CommandSetGridValueArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSCH.ChartCommandArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSCH::ChartCommandArchive& super() const;
  inline ::TSCH::ChartCommandArchive* mutable_super();
  inline ::TSCH::ChartCommandArchive* release_super();
  inline void set_allocated_super(::TSCH::ChartCommandArchive* super);

  // required uint32 rowindex = 2;
  inline bool has_rowindex() const;
  inline void clear_rowindex();
  static const int kRowindexFieldNumber = 2;
  inline ::google::protobuf::uint32 rowindex() const;
  inline void set_rowindex(::google::protobuf::uint32 value);

  // required uint32 columnindex = 3;
  inline bool has_columnindex() const;
  inline void clear_columnindex();
  static const int kColumnindexFieldNumber = 3;
  inline ::google::protobuf::uint32 columnindex() const;
  inline void set_columnindex(::google::protobuf::uint32 value);

  // required double oldvalue = 4;
  inline bool has_oldvalue() const;
  inline void clear_oldvalue();
  static const int kOldvalueFieldNumber = 4;
  inline double oldvalue() const;
  inline void set_oldvalue(double value);

  // required double newvalue = 5;
  inline bool has_newvalue() const;
  inline void clear_newvalue();
  static const int kNewvalueFieldNumber = 5;
  inline double newvalue() const;
  inline void set_newvalue(double value);

  // @@protoc_insertion_point(class_scope:TSCH.CommandSetGridValueArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();
  inline void set_has_rowindex();
  inline void clear_has_rowindex();
  inline void set_has_columnindex();
  inline void clear_has_columnindex();
  inline void set_has_oldvalue();
  inline void clear_has_oldvalue();
  inline void set_has_newvalue();
  inline void clear_has_newvalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSCH::ChartCommandArchive* super_;
  ::google::protobuf::uint32 rowindex_;
  ::google::protobuf::uint32 columnindex_;
  double oldvalue_;
  double newvalue_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_AssignDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCHCommandArchives_2eproto();

  void InitAsDefaultInstance();
  static CommandSetGridValueArchive* default_instance_;
};
// -------------------------------------------------------------------

class CommandSetGridDirectionArchive : public ::google::protobuf::Message {
 public:
  CommandSetGridDirectionArchive();
  virtual ~CommandSetGridDirectionArchive();

  CommandSetGridDirectionArchive(const CommandSetGridDirectionArchive& from);

  inline CommandSetGridDirectionArchive& operator=(const CommandSetGridDirectionArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandSetGridDirectionArchive& default_instance();

  void Swap(CommandSetGridDirectionArchive* other);

  // implements Message ----------------------------------------------

  CommandSetGridDirectionArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommandSetGridDirectionArchive& from);
  void MergeFrom(const CommandSetGridDirectionArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSCH.ChartCommandArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSCH::ChartCommandArchive& super() const;
  inline ::TSCH::ChartCommandArchive* mutable_super();
  inline ::TSCH::ChartCommandArchive* release_super();
  inline void set_allocated_super(::TSCH::ChartCommandArchive* super);

  // required uint32 old_direction = 2;
  inline bool has_old_direction() const;
  inline void clear_old_direction();
  static const int kOldDirectionFieldNumber = 2;
  inline ::google::protobuf::uint32 old_direction() const;
  inline void set_old_direction(::google::protobuf::uint32 value);

  // required uint32 new_direction = 3;
  inline bool has_new_direction() const;
  inline void clear_new_direction();
  static const int kNewDirectionFieldNumber = 3;
  inline ::google::protobuf::uint32 new_direction() const;
  inline void set_new_direction(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TSCH.CommandSetGridDirectionArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();
  inline void set_has_old_direction();
  inline void clear_has_old_direction();
  inline void set_has_new_direction();
  inline void clear_has_new_direction();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSCH::ChartCommandArchive* super_;
  ::google::protobuf::uint32 old_direction_;
  ::google::protobuf::uint32 new_direction_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_AssignDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCHCommandArchives_2eproto();

  void InitAsDefaultInstance();
  static CommandSetGridDirectionArchive* default_instance_;
};
// -------------------------------------------------------------------

class CommandSetSeriesTypeArchive : public ::google::protobuf::Message {
 public:
  CommandSetSeriesTypeArchive();
  virtual ~CommandSetSeriesTypeArchive();

  CommandSetSeriesTypeArchive(const CommandSetSeriesTypeArchive& from);

  inline CommandSetSeriesTypeArchive& operator=(const CommandSetSeriesTypeArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandSetSeriesTypeArchive& default_instance();

  void Swap(CommandSetSeriesTypeArchive* other);

  // implements Message ----------------------------------------------

  CommandSetSeriesTypeArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommandSetSeriesTypeArchive& from);
  void MergeFrom(const CommandSetSeriesTypeArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSCH.ChartCommandArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSCH::ChartCommandArchive& super() const;
  inline ::TSCH::ChartCommandArchive* mutable_super();
  inline ::TSCH::ChartCommandArchive* release_super();
  inline void set_allocated_super(::TSCH::ChartCommandArchive* super);

  // required uint32 seriesindex = 2;
  inline bool has_seriesindex() const;
  inline void clear_seriesindex();
  static const int kSeriesindexFieldNumber = 2;
  inline ::google::protobuf::uint32 seriesindex() const;
  inline void set_seriesindex(::google::protobuf::uint32 value);

  // required uint32 oldtype = 3;
  inline bool has_oldtype() const;
  inline void clear_oldtype();
  static const int kOldtypeFieldNumber = 3;
  inline ::google::protobuf::uint32 oldtype() const;
  inline void set_oldtype(::google::protobuf::uint32 value);

  // required uint32 newtype = 4;
  inline bool has_newtype() const;
  inline void clear_newtype();
  static const int kNewtypeFieldNumber = 4;
  inline ::google::protobuf::uint32 newtype() const;
  inline void set_newtype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TSCH.CommandSetSeriesTypeArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();
  inline void set_has_seriesindex();
  inline void clear_has_seriesindex();
  inline void set_has_oldtype();
  inline void clear_has_oldtype();
  inline void set_has_newtype();
  inline void clear_has_newtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSCH::ChartCommandArchive* super_;
  ::google::protobuf::uint32 seriesindex_;
  ::google::protobuf::uint32 oldtype_;
  ::google::protobuf::uint32 newtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_AssignDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCHCommandArchives_2eproto();

  void InitAsDefaultInstance();
  static CommandSetSeriesTypeArchive* default_instance_;
};
// -------------------------------------------------------------------

class CommandSetScatterFormatArchive : public ::google::protobuf::Message {
 public:
  CommandSetScatterFormatArchive();
  virtual ~CommandSetScatterFormatArchive();

  CommandSetScatterFormatArchive(const CommandSetScatterFormatArchive& from);

  inline CommandSetScatterFormatArchive& operator=(const CommandSetScatterFormatArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandSetScatterFormatArchive& default_instance();

  void Swap(CommandSetScatterFormatArchive* other);

  // implements Message ----------------------------------------------

  CommandSetScatterFormatArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommandSetScatterFormatArchive& from);
  void MergeFrom(const CommandSetScatterFormatArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSCH.ChartCommandArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSCH::ChartCommandArchive& super() const;
  inline ::TSCH::ChartCommandArchive* mutable_super();
  inline ::TSCH::ChartCommandArchive* release_super();
  inline void set_allocated_super(::TSCH::ChartCommandArchive* super);

  // required uint32 oldformat = 3;
  inline bool has_oldformat() const;
  inline void clear_oldformat();
  static const int kOldformatFieldNumber = 3;
  inline ::google::protobuf::uint32 oldformat() const;
  inline void set_oldformat(::google::protobuf::uint32 value);

  // required uint32 newformat = 4;
  inline bool has_newformat() const;
  inline void clear_newformat();
  static const int kNewformatFieldNumber = 4;
  inline ::google::protobuf::uint32 newformat() const;
  inline void set_newformat(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TSCH.CommandSetScatterFormatArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();
  inline void set_has_oldformat();
  inline void clear_has_oldformat();
  inline void set_has_newformat();
  inline void clear_has_newformat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSCH::ChartCommandArchive* super_;
  ::google::protobuf::uint32 oldformat_;
  ::google::protobuf::uint32 newformat_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_AssignDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCHCommandArchives_2eproto();

  void InitAsDefaultInstance();
  static CommandSetScatterFormatArchive* default_instance_;
};
// -------------------------------------------------------------------

class CommandSetMultiDataSetIndexArchive : public ::google::protobuf::Message {
 public:
  CommandSetMultiDataSetIndexArchive();
  virtual ~CommandSetMultiDataSetIndexArchive();

  CommandSetMultiDataSetIndexArchive(const CommandSetMultiDataSetIndexArchive& from);

  inline CommandSetMultiDataSetIndexArchive& operator=(const CommandSetMultiDataSetIndexArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandSetMultiDataSetIndexArchive& default_instance();

  void Swap(CommandSetMultiDataSetIndexArchive* other);

  // implements Message ----------------------------------------------

  CommandSetMultiDataSetIndexArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommandSetMultiDataSetIndexArchive& from);
  void MergeFrom(const CommandSetMultiDataSetIndexArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSCH.ChartCommandArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSCH::ChartCommandArchive& super() const;
  inline ::TSCH::ChartCommandArchive* mutable_super();
  inline ::TSCH::ChartCommandArchive* release_super();
  inline void set_allocated_super(::TSCH::ChartCommandArchive* super);

  // required uint32 oldindex = 2;
  inline bool has_oldindex() const;
  inline void clear_oldindex();
  static const int kOldindexFieldNumber = 2;
  inline ::google::protobuf::uint32 oldindex() const;
  inline void set_oldindex(::google::protobuf::uint32 value);

  // required uint32 newindex = 3;
  inline bool has_newindex() const;
  inline void clear_newindex();
  static const int kNewindexFieldNumber = 3;
  inline ::google::protobuf::uint32 newindex() const;
  inline void set_newindex(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TSCH.CommandSetMultiDataSetIndexArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();
  inline void set_has_oldindex();
  inline void clear_has_oldindex();
  inline void set_has_newindex();
  inline void clear_has_newindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSCH::ChartCommandArchive* super_;
  ::google::protobuf::uint32 oldindex_;
  ::google::protobuf::uint32 newindex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_AssignDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCHCommandArchives_2eproto();

  void InitAsDefaultInstance();
  static CommandSetMultiDataSetIndexArchive* default_instance_;
};
// -------------------------------------------------------------------

class CommandSetLegendFrameArchive : public ::google::protobuf::Message {
 public:
  CommandSetLegendFrameArchive();
  virtual ~CommandSetLegendFrameArchive();

  CommandSetLegendFrameArchive(const CommandSetLegendFrameArchive& from);

  inline CommandSetLegendFrameArchive& operator=(const CommandSetLegendFrameArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandSetLegendFrameArchive& default_instance();

  void Swap(CommandSetLegendFrameArchive* other);

  // implements Message ----------------------------------------------

  CommandSetLegendFrameArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommandSetLegendFrameArchive& from);
  void MergeFrom(const CommandSetLegendFrameArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSCH.ChartCommandArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSCH::ChartCommandArchive& super() const;
  inline ::TSCH::ChartCommandArchive* mutable_super();
  inline ::TSCH::ChartCommandArchive* release_super();
  inline void set_allocated_super(::TSCH::ChartCommandArchive* super);

  // required .TSCH.RectArchive old_legend_frame = 2;
  inline bool has_old_legend_frame() const;
  inline void clear_old_legend_frame();
  static const int kOldLegendFrameFieldNumber = 2;
  inline const ::TSCH::RectArchive& old_legend_frame() const;
  inline ::TSCH::RectArchive* mutable_old_legend_frame();
  inline ::TSCH::RectArchive* release_old_legend_frame();
  inline void set_allocated_old_legend_frame(::TSCH::RectArchive* old_legend_frame);

  // required .TSCH.RectArchive new_legend_frame = 3;
  inline bool has_new_legend_frame() const;
  inline void clear_new_legend_frame();
  static const int kNewLegendFrameFieldNumber = 3;
  inline const ::TSCH::RectArchive& new_legend_frame() const;
  inline ::TSCH::RectArchive* mutable_new_legend_frame();
  inline ::TSCH::RectArchive* release_new_legend_frame();
  inline void set_allocated_new_legend_frame(::TSCH::RectArchive* new_legend_frame);

  // @@protoc_insertion_point(class_scope:TSCH.CommandSetLegendFrameArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();
  inline void set_has_old_legend_frame();
  inline void clear_has_old_legend_frame();
  inline void set_has_new_legend_frame();
  inline void clear_has_new_legend_frame();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSCH::ChartCommandArchive* super_;
  ::TSCH::RectArchive* old_legend_frame_;
  ::TSCH::RectArchive* new_legend_frame_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_AssignDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCHCommandArchives_2eproto();

  void InitAsDefaultInstance();
  static CommandSetLegendFrameArchive* default_instance_;
};
// -------------------------------------------------------------------

class CommandSetPieWedgeExplosion : public ::google::protobuf::Message {
 public:
  CommandSetPieWedgeExplosion();
  virtual ~CommandSetPieWedgeExplosion();

  CommandSetPieWedgeExplosion(const CommandSetPieWedgeExplosion& from);

  inline CommandSetPieWedgeExplosion& operator=(const CommandSetPieWedgeExplosion& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandSetPieWedgeExplosion& default_instance();

  void Swap(CommandSetPieWedgeExplosion* other);

  // implements Message ----------------------------------------------

  CommandSetPieWedgeExplosion* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommandSetPieWedgeExplosion& from);
  void MergeFrom(const CommandSetPieWedgeExplosion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSCH.ChartCommandArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSCH::ChartCommandArchive& super() const;
  inline ::TSCH::ChartCommandArchive* mutable_super();
  inline ::TSCH::ChartCommandArchive* release_super();
  inline void set_allocated_super(::TSCH::ChartCommandArchive* super);

  // optional .TSP.Reference info_geometry_command = 2;
  inline bool has_info_geometry_command() const;
  inline void clear_info_geometry_command();
  static const int kInfoGeometryCommandFieldNumber = 2;
  inline const ::TSP::Reference& info_geometry_command() const;
  inline ::TSP::Reference* mutable_info_geometry_command();
  inline ::TSP::Reference* release_info_geometry_command();
  inline void set_allocated_info_geometry_command(::TSP::Reference* info_geometry_command);

  // optional .TSP.Reference style_mutation_command = 3;
  inline bool has_style_mutation_command() const;
  inline void clear_style_mutation_command();
  static const int kStyleMutationCommandFieldNumber = 3;
  inline const ::TSP::Reference& style_mutation_command() const;
  inline ::TSP::Reference* mutable_style_mutation_command();
  inline ::TSP::Reference* release_style_mutation_command();
  inline void set_allocated_style_mutation_command(::TSP::Reference* style_mutation_command);

  // optional .TSP.Reference anchor_attachment_command = 4;
  inline bool has_anchor_attachment_command() const;
  inline void clear_anchor_attachment_command();
  static const int kAnchorAttachmentCommandFieldNumber = 4;
  inline const ::TSP::Reference& anchor_attachment_command() const;
  inline ::TSP::Reference* mutable_anchor_attachment_command();
  inline ::TSP::Reference* release_anchor_attachment_command();
  inline void set_allocated_anchor_attachment_command(::TSP::Reference* anchor_attachment_command);

  // @@protoc_insertion_point(class_scope:TSCH.CommandSetPieWedgeExplosion)
 private:
  inline void set_has_super();
  inline void clear_has_super();
  inline void set_has_info_geometry_command();
  inline void clear_has_info_geometry_command();
  inline void set_has_style_mutation_command();
  inline void clear_has_style_mutation_command();
  inline void set_has_anchor_attachment_command();
  inline void clear_has_anchor_attachment_command();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSCH::ChartCommandArchive* super_;
  ::TSP::Reference* info_geometry_command_;
  ::TSP::Reference* style_mutation_command_;
  ::TSP::Reference* anchor_attachment_command_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_AssignDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCHCommandArchives_2eproto();

  void InitAsDefaultInstance();
  static CommandSetPieWedgeExplosion* default_instance_;
};
// -------------------------------------------------------------------

class SynchronousCommandArchive : public ::google::protobuf::Message {
 public:
  SynchronousCommandArchive();
  virtual ~SynchronousCommandArchive();

  SynchronousCommandArchive(const SynchronousCommandArchive& from);

  inline SynchronousCommandArchive& operator=(const SynchronousCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SynchronousCommandArchive& default_instance();

  void Swap(SynchronousCommandArchive* other);

  // implements Message ----------------------------------------------

  SynchronousCommandArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SynchronousCommandArchive& from);
  void MergeFrom(const SynchronousCommandArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSK.CommandArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSK::CommandArchive& super() const;
  inline ::TSK::CommandArchive* mutable_super();
  inline ::TSK::CommandArchive* release_super();
  inline void set_allocated_super(::TSK::CommandArchive* super);

  // required .TSP.Reference command = 2;
  inline bool has_command() const;
  inline void clear_command();
  static const int kCommandFieldNumber = 2;
  inline const ::TSP::Reference& command() const;
  inline ::TSP::Reference* mutable_command();
  inline ::TSP::Reference* release_command();
  inline void set_allocated_command(::TSP::Reference* command);

  // @@protoc_insertion_point(class_scope:TSCH.SynchronousCommandArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();
  inline void set_has_command();
  inline void clear_has_command();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSK::CommandArchive* super_;
  ::TSP::Reference* command_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_AssignDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCHCommandArchives_2eproto();

  void InitAsDefaultInstance();
  static SynchronousCommandArchive* default_instance_;
};
// -------------------------------------------------------------------

class CommandReplaceAllArchive : public ::google::protobuf::Message {
 public:
  CommandReplaceAllArchive();
  virtual ~CommandReplaceAllArchive();

  CommandReplaceAllArchive(const CommandReplaceAllArchive& from);

  inline CommandReplaceAllArchive& operator=(const CommandReplaceAllArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandReplaceAllArchive& default_instance();

  void Swap(CommandReplaceAllArchive* other);

  // implements Message ----------------------------------------------

  CommandReplaceAllArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommandReplaceAllArchive& from);
  void MergeFrom(const CommandReplaceAllArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSK.ReplaceAllChildCommandArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSK::ReplaceAllChildCommandArchive& super() const;
  inline ::TSK::ReplaceAllChildCommandArchive* mutable_super();
  inline ::TSK::ReplaceAllChildCommandArchive* release_super();
  inline void set_allocated_super(::TSK::ReplaceAllChildCommandArchive* super);

  // required .TSP.Reference info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::TSP::Reference& info() const;
  inline ::TSP::Reference* mutable_info();
  inline ::TSP::Reference* release_info();
  inline void set_allocated_info(::TSP::Reference* info);

  // repeated .TSP.Reference commands = 3;
  inline int commands_size() const;
  inline void clear_commands();
  static const int kCommandsFieldNumber = 3;
  inline const ::TSP::Reference& commands(int index) const;
  inline ::TSP::Reference* mutable_commands(int index);
  inline ::TSP::Reference* add_commands();
  inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
      commands() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
      mutable_commands();

  // @@protoc_insertion_point(class_scope:TSCH.CommandReplaceAllArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSK::ReplaceAllChildCommandArchive* super_;
  ::TSP::Reference* info_;
  ::google::protobuf::RepeatedPtrField< ::TSP::Reference > commands_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_AssignDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCHCommandArchives_2eproto();

  void InitAsDefaultInstance();
  static CommandReplaceAllArchive* default_instance_;
};
// -------------------------------------------------------------------

class CommandChartApplyTheme : public ::google::protobuf::Message {
 public:
  CommandChartApplyTheme();
  virtual ~CommandChartApplyTheme();

  CommandChartApplyTheme(const CommandChartApplyTheme& from);

  inline CommandChartApplyTheme& operator=(const CommandChartApplyTheme& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandChartApplyTheme& default_instance();

  void Swap(CommandChartApplyTheme* other);

  // implements Message ----------------------------------------------

  CommandChartApplyTheme* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommandChartApplyTheme& from);
  void MergeFrom(const CommandChartApplyTheme& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSS.ApplyThemeChildCommandArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSS::ApplyThemeChildCommandArchive& super() const;
  inline ::TSS::ApplyThemeChildCommandArchive* mutable_super();
  inline ::TSS::ApplyThemeChildCommandArchive* release_super();
  inline void set_allocated_super(::TSS::ApplyThemeChildCommandArchive* super);

  // required .TSP.Reference info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::TSP::Reference& info() const;
  inline ::TSP::Reference* mutable_info();
  inline ::TSP::Reference* release_info();
  inline void set_allocated_info(::TSP::Reference* info);

  // optional .TSP.Reference swap_command = 3;
  inline bool has_swap_command() const;
  inline void clear_swap_command();
  static const int kSwapCommandFieldNumber = 3;
  inline const ::TSP::Reference& swap_command() const;
  inline ::TSP::Reference* mutable_swap_command();
  inline ::TSP::Reference* release_swap_command();
  inline void set_allocated_swap_command(::TSP::Reference* swap_command);

  // optional .TSP.Reference preset = 4;
  inline bool has_preset() const;
  inline void clear_preset();
  static const int kPresetFieldNumber = 4;
  inline const ::TSP::Reference& preset() const;
  inline ::TSP::Reference* mutable_preset();
  inline ::TSP::Reference* release_preset();
  inline void set_allocated_preset(::TSP::Reference* preset);

  // @@protoc_insertion_point(class_scope:TSCH.CommandChartApplyTheme)
 private:
  inline void set_has_super();
  inline void clear_has_super();
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_swap_command();
  inline void clear_has_swap_command();
  inline void set_has_preset();
  inline void clear_has_preset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSS::ApplyThemeChildCommandArchive* super_;
  ::TSP::Reference* info_;
  ::TSP::Reference* swap_command_;
  ::TSP::Reference* preset_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_AssignDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCHCommandArchives_2eproto();

  void InitAsDefaultInstance();
  static CommandChartApplyTheme* default_instance_;
};
// -------------------------------------------------------------------

class CommandChartApplyPreset : public ::google::protobuf::Message {
 public:
  CommandChartApplyPreset();
  virtual ~CommandChartApplyPreset();

  CommandChartApplyPreset(const CommandChartApplyPreset& from);

  inline CommandChartApplyPreset& operator=(const CommandChartApplyPreset& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandChartApplyPreset& default_instance();

  void Swap(CommandChartApplyPreset* other);

  // implements Message ----------------------------------------------

  CommandChartApplyPreset* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommandChartApplyPreset& from);
  void MergeFrom(const CommandChartApplyPreset& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSCH.ChartCommandArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSCH::ChartCommandArchive& super() const;
  inline ::TSCH::ChartCommandArchive* mutable_super();
  inline ::TSCH::ChartCommandArchive* release_super();
  inline void set_allocated_super(::TSCH::ChartCommandArchive* super);

  // optional .TSP.Reference swap_command = 2;
  inline bool has_swap_command() const;
  inline void clear_swap_command();
  static const int kSwapCommandFieldNumber = 2;
  inline const ::TSP::Reference& swap_command() const;
  inline ::TSP::Reference* mutable_swap_command();
  inline ::TSP::Reference* release_swap_command();
  inline void set_allocated_swap_command(::TSP::Reference* swap_command);

  // optional .TSP.Reference preset = 3;
  inline bool has_preset() const;
  inline void clear_preset();
  static const int kPresetFieldNumber = 3;
  inline const ::TSP::Reference& preset() const;
  inline ::TSP::Reference* mutable_preset();
  inline ::TSP::Reference* release_preset();
  inline void set_allocated_preset(::TSP::Reference* preset);

  // optional .TSCH.ApplyPresetBehavior behavior = 4 [default = remove_overrides];
  inline bool has_behavior() const;
  inline void clear_behavior();
  static const int kBehaviorFieldNumber = 4;
  inline ::TSCH::ApplyPresetBehavior behavior() const;
  inline void set_behavior(::TSCH::ApplyPresetBehavior value);

  // @@protoc_insertion_point(class_scope:TSCH.CommandChartApplyPreset)
 private:
  inline void set_has_super();
  inline void clear_has_super();
  inline void set_has_swap_command();
  inline void clear_has_swap_command();
  inline void set_has_preset();
  inline void clear_has_preset();
  inline void set_has_behavior();
  inline void clear_has_behavior();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSCH::ChartCommandArchive* super_;
  ::TSP::Reference* swap_command_;
  ::TSP::Reference* preset_;
  int behavior_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_AssignDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCHCommandArchives_2eproto();

  void InitAsDefaultInstance();
  static CommandChartApplyPreset* default_instance_;
};
// -------------------------------------------------------------------

class CommandCleanupGeometryArchive : public ::google::protobuf::Message {
 public:
  CommandCleanupGeometryArchive();
  virtual ~CommandCleanupGeometryArchive();

  CommandCleanupGeometryArchive(const CommandCleanupGeometryArchive& from);

  inline CommandCleanupGeometryArchive& operator=(const CommandCleanupGeometryArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandCleanupGeometryArchive& default_instance();

  void Swap(CommandCleanupGeometryArchive* other);

  // implements Message ----------------------------------------------

  CommandCleanupGeometryArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommandCleanupGeometryArchive& from);
  void MergeFrom(const CommandCleanupGeometryArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSCH.ChartCommandArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSCH::ChartCommandArchive& super() const;
  inline ::TSCH::ChartCommandArchive* mutable_super();
  inline ::TSCH::ChartCommandArchive* release_super();
  inline void set_allocated_super(::TSCH::ChartCommandArchive* super);

  // optional .TSP.Reference info_geometry_command = 2;
  inline bool has_info_geometry_command() const;
  inline void clear_info_geometry_command();
  static const int kInfoGeometryCommandFieldNumber = 2;
  inline const ::TSP::Reference& info_geometry_command() const;
  inline ::TSP::Reference* mutable_info_geometry_command();
  inline ::TSP::Reference* release_info_geometry_command();
  inline void set_allocated_info_geometry_command(::TSP::Reference* info_geometry_command);

  // optional .TSP.Reference anchor_attachment_command = 3;
  inline bool has_anchor_attachment_command() const;
  inline void clear_anchor_attachment_command();
  static const int kAnchorAttachmentCommandFieldNumber = 3;
  inline const ::TSP::Reference& anchor_attachment_command() const;
  inline ::TSP::Reference* mutable_anchor_attachment_command();
  inline ::TSP::Reference* release_anchor_attachment_command();
  inline void set_allocated_anchor_attachment_command(::TSP::Reference* anchor_attachment_command);

  // optional .TSCH.RectArchive original_legend_rect = 4;
  inline bool has_original_legend_rect() const;
  inline void clear_original_legend_rect();
  static const int kOriginalLegendRectFieldNumber = 4;
  inline const ::TSCH::RectArchive& original_legend_rect() const;
  inline ::TSCH::RectArchive* mutable_original_legend_rect();
  inline ::TSCH::RectArchive* release_original_legend_rect();
  inline void set_allocated_original_legend_rect(::TSCH::RectArchive* original_legend_rect);

  // @@protoc_insertion_point(class_scope:TSCH.CommandCleanupGeometryArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();
  inline void set_has_info_geometry_command();
  inline void clear_has_info_geometry_command();
  inline void set_has_anchor_attachment_command();
  inline void clear_has_anchor_attachment_command();
  inline void set_has_original_legend_rect();
  inline void clear_has_original_legend_rect();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSCH::ChartCommandArchive* super_;
  ::TSP::Reference* info_geometry_command_;
  ::TSP::Reference* anchor_attachment_command_;
  ::TSCH::RectArchive* original_legend_rect_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_AssignDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCHCommandArchives_2eproto();

  void InitAsDefaultInstance();
  static CommandCleanupGeometryArchive* default_instance_;
};
// -------------------------------------------------------------------

class ChartCommandArchive : public ::google::protobuf::Message {
 public:
  ChartCommandArchive();
  virtual ~ChartCommandArchive();

  ChartCommandArchive(const ChartCommandArchive& from);

  inline ChartCommandArchive& operator=(const ChartCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChartCommandArchive& default_instance();

  void Swap(ChartCommandArchive* other);

  // implements Message ----------------------------------------------

  ChartCommandArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChartCommandArchive& from);
  void MergeFrom(const ChartCommandArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSK.CommandArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSK::CommandArchive& super() const;
  inline ::TSK::CommandArchive* mutable_super();
  inline ::TSK::CommandArchive* release_super();
  inline void set_allocated_super(::TSK::CommandArchive* super);

  // required .TSP.Reference info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::TSP::Reference& info() const;
  inline ::TSP::Reference* mutable_info();
  inline ::TSP::Reference* release_info();
  inline void set_allocated_info(::TSP::Reference* info);

  // optional bool original_dirty_state = 3;
  inline bool has_original_dirty_state() const;
  inline void clear_original_dirty_state();
  static const int kOriginalDirtyStateFieldNumber = 3;
  inline bool original_dirty_state() const;
  inline void set_original_dirty_state(bool value);

  // @@protoc_insertion_point(class_scope:TSCH.ChartCommandArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_original_dirty_state();
  inline void clear_has_original_dirty_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSK::CommandArchive* super_;
  ::TSP::Reference* info_;
  bool original_dirty_state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_AssignDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCHCommandArchives_2eproto();

  void InitAsDefaultInstance();
  static ChartCommandArchive* default_instance_;
};
// -------------------------------------------------------------------

class CommandReplaceGridValuesArchive_ValueRow : public ::google::protobuf::Message {
 public:
  CommandReplaceGridValuesArchive_ValueRow();
  virtual ~CommandReplaceGridValuesArchive_ValueRow();

  CommandReplaceGridValuesArchive_ValueRow(const CommandReplaceGridValuesArchive_ValueRow& from);

  inline CommandReplaceGridValuesArchive_ValueRow& operator=(const CommandReplaceGridValuesArchive_ValueRow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandReplaceGridValuesArchive_ValueRow& default_instance();

  void Swap(CommandReplaceGridValuesArchive_ValueRow* other);

  // implements Message ----------------------------------------------

  CommandReplaceGridValuesArchive_ValueRow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommandReplaceGridValuesArchive_ValueRow& from);
  void MergeFrom(const CommandReplaceGridValuesArchive_ValueRow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double value = 1;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline double value(int index) const;
  inline void set_value(int index, double value);
  inline void add_value(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      value() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:TSCH.CommandReplaceGridValuesArchive.ValueRow)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< double > value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_AssignDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCHCommandArchives_2eproto();

  void InitAsDefaultInstance();
  static CommandReplaceGridValuesArchive_ValueRow* default_instance_;
};
// -------------------------------------------------------------------

class CommandReplaceGridValuesArchive : public ::google::protobuf::Message {
 public:
  CommandReplaceGridValuesArchive();
  virtual ~CommandReplaceGridValuesArchive();

  CommandReplaceGridValuesArchive(const CommandReplaceGridValuesArchive& from);

  inline CommandReplaceGridValuesArchive& operator=(const CommandReplaceGridValuesArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandReplaceGridValuesArchive& default_instance();

  void Swap(CommandReplaceGridValuesArchive* other);

  // implements Message ----------------------------------------------

  CommandReplaceGridValuesArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommandReplaceGridValuesArchive& from);
  void MergeFrom(const CommandReplaceGridValuesArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CommandReplaceGridValuesArchive_ValueRow ValueRow;

  // accessors -------------------------------------------------------

  // required .TSCH.ChartCommandArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSCH::ChartCommandArchive& super() const;
  inline ::TSCH::ChartCommandArchive* mutable_super();
  inline ::TSCH::ChartCommandArchive* release_super();
  inline void set_allocated_super(::TSCH::ChartCommandArchive* super);

  // required uint32 rowindex = 2;
  inline bool has_rowindex() const;
  inline void clear_rowindex();
  static const int kRowindexFieldNumber = 2;
  inline ::google::protobuf::uint32 rowindex() const;
  inline void set_rowindex(::google::protobuf::uint32 value);

  // required uint32 columnindex = 3;
  inline bool has_columnindex() const;
  inline void clear_columnindex();
  static const int kColumnindexFieldNumber = 3;
  inline ::google::protobuf::uint32 columnindex() const;
  inline void set_columnindex(::google::protobuf::uint32 value);

  // repeated .TSCH.CommandReplaceGridValuesArchive.ValueRow old_data_rows = 4;
  inline int old_data_rows_size() const;
  inline void clear_old_data_rows();
  static const int kOldDataRowsFieldNumber = 4;
  inline const ::TSCH::CommandReplaceGridValuesArchive_ValueRow& old_data_rows(int index) const;
  inline ::TSCH::CommandReplaceGridValuesArchive_ValueRow* mutable_old_data_rows(int index);
  inline ::TSCH::CommandReplaceGridValuesArchive_ValueRow* add_old_data_rows();
  inline const ::google::protobuf::RepeatedPtrField< ::TSCH::CommandReplaceGridValuesArchive_ValueRow >&
      old_data_rows() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSCH::CommandReplaceGridValuesArchive_ValueRow >*
      mutable_old_data_rows();

  // repeated .TSCH.CommandReplaceGridValuesArchive.ValueRow new_data_rows = 5;
  inline int new_data_rows_size() const;
  inline void clear_new_data_rows();
  static const int kNewDataRowsFieldNumber = 5;
  inline const ::TSCH::CommandReplaceGridValuesArchive_ValueRow& new_data_rows(int index) const;
  inline ::TSCH::CommandReplaceGridValuesArchive_ValueRow* mutable_new_data_rows(int index);
  inline ::TSCH::CommandReplaceGridValuesArchive_ValueRow* add_new_data_rows();
  inline const ::google::protobuf::RepeatedPtrField< ::TSCH::CommandReplaceGridValuesArchive_ValueRow >&
      new_data_rows() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSCH::CommandReplaceGridValuesArchive_ValueRow >*
      mutable_new_data_rows();

  // repeated string old_row_names = 6;
  inline int old_row_names_size() const;
  inline void clear_old_row_names();
  static const int kOldRowNamesFieldNumber = 6;
  inline const ::std::string& old_row_names(int index) const;
  inline ::std::string* mutable_old_row_names(int index);
  inline void set_old_row_names(int index, const ::std::string& value);
  inline void set_old_row_names(int index, const char* value);
  inline void set_old_row_names(int index, const char* value, size_t size);
  inline ::std::string* add_old_row_names();
  inline void add_old_row_names(const ::std::string& value);
  inline void add_old_row_names(const char* value);
  inline void add_old_row_names(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& old_row_names() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_old_row_names();

  // repeated string new_row_names = 7;
  inline int new_row_names_size() const;
  inline void clear_new_row_names();
  static const int kNewRowNamesFieldNumber = 7;
  inline const ::std::string& new_row_names(int index) const;
  inline ::std::string* mutable_new_row_names(int index);
  inline void set_new_row_names(int index, const ::std::string& value);
  inline void set_new_row_names(int index, const char* value);
  inline void set_new_row_names(int index, const char* value, size_t size);
  inline ::std::string* add_new_row_names();
  inline void add_new_row_names(const ::std::string& value);
  inline void add_new_row_names(const char* value);
  inline void add_new_row_names(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& new_row_names() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_new_row_names();

  // repeated string old_col_names = 8;
  inline int old_col_names_size() const;
  inline void clear_old_col_names();
  static const int kOldColNamesFieldNumber = 8;
  inline const ::std::string& old_col_names(int index) const;
  inline ::std::string* mutable_old_col_names(int index);
  inline void set_old_col_names(int index, const ::std::string& value);
  inline void set_old_col_names(int index, const char* value);
  inline void set_old_col_names(int index, const char* value, size_t size);
  inline ::std::string* add_old_col_names();
  inline void add_old_col_names(const ::std::string& value);
  inline void add_old_col_names(const char* value);
  inline void add_old_col_names(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& old_col_names() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_old_col_names();

  // repeated string new_col_names = 9;
  inline int new_col_names_size() const;
  inline void clear_new_col_names();
  static const int kNewColNamesFieldNumber = 9;
  inline const ::std::string& new_col_names(int index) const;
  inline ::std::string* mutable_new_col_names(int index);
  inline void set_new_col_names(int index, const ::std::string& value);
  inline void set_new_col_names(int index, const char* value);
  inline void set_new_col_names(int index, const char* value, size_t size);
  inline ::std::string* add_new_col_names();
  inline void add_new_col_names(const ::std::string& value);
  inline void add_new_col_names(const char* value);
  inline void add_new_col_names(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& new_col_names() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_new_col_names();

  // optional uint32 rows_to_add = 10;
  inline bool has_rows_to_add() const;
  inline void clear_rows_to_add();
  static const int kRowsToAddFieldNumber = 10;
  inline ::google::protobuf::uint32 rows_to_add() const;
  inline void set_rows_to_add(::google::protobuf::uint32 value);

  // optional uint32 cols_to_add = 11;
  inline bool has_cols_to_add() const;
  inline void clear_cols_to_add();
  static const int kColsToAddFieldNumber = 11;
  inline ::google::protobuf::uint32 cols_to_add() const;
  inline void set_cols_to_add(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TSCH.CommandReplaceGridValuesArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();
  inline void set_has_rowindex();
  inline void clear_has_rowindex();
  inline void set_has_columnindex();
  inline void clear_has_columnindex();
  inline void set_has_rows_to_add();
  inline void clear_has_rows_to_add();
  inline void set_has_cols_to_add();
  inline void clear_has_cols_to_add();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSCH::ChartCommandArchive* super_;
  ::google::protobuf::uint32 rowindex_;
  ::google::protobuf::uint32 columnindex_;
  ::google::protobuf::RepeatedPtrField< ::TSCH::CommandReplaceGridValuesArchive_ValueRow > old_data_rows_;
  ::google::protobuf::RepeatedPtrField< ::TSCH::CommandReplaceGridValuesArchive_ValueRow > new_data_rows_;
  ::google::protobuf::RepeatedPtrField< ::std::string> old_row_names_;
  ::google::protobuf::RepeatedPtrField< ::std::string> new_row_names_;
  ::google::protobuf::RepeatedPtrField< ::std::string> old_col_names_;
  ::google::protobuf::RepeatedPtrField< ::std::string> new_col_names_;
  ::google::protobuf::uint32 rows_to_add_;
  ::google::protobuf::uint32 cols_to_add_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_AssignDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCHCommandArchives_2eproto();

  void InitAsDefaultInstance();
  static CommandReplaceGridValuesArchive* default_instance_;
};
// -------------------------------------------------------------------

class CommandReplaceThemePresetArchive_StyleAndIdentifierPair : public ::google::protobuf::Message {
 public:
  CommandReplaceThemePresetArchive_StyleAndIdentifierPair();
  virtual ~CommandReplaceThemePresetArchive_StyleAndIdentifierPair();

  CommandReplaceThemePresetArchive_StyleAndIdentifierPair(const CommandReplaceThemePresetArchive_StyleAndIdentifierPair& from);

  inline CommandReplaceThemePresetArchive_StyleAndIdentifierPair& operator=(const CommandReplaceThemePresetArchive_StyleAndIdentifierPair& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandReplaceThemePresetArchive_StyleAndIdentifierPair& default_instance();

  void Swap(CommandReplaceThemePresetArchive_StyleAndIdentifierPair* other);

  // implements Message ----------------------------------------------

  CommandReplaceThemePresetArchive_StyleAndIdentifierPair* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommandReplaceThemePresetArchive_StyleAndIdentifierPair& from);
  void MergeFrom(const CommandReplaceThemePresetArchive_StyleAndIdentifierPair& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSP.Reference style = 1;
  inline bool has_style() const;
  inline void clear_style();
  static const int kStyleFieldNumber = 1;
  inline const ::TSP::Reference& style() const;
  inline ::TSP::Reference* mutable_style();
  inline ::TSP::Reference* release_style();
  inline void set_allocated_style(::TSP::Reference* style);

  // required string identifier = 2;
  inline bool has_identifier() const;
  inline void clear_identifier();
  static const int kIdentifierFieldNumber = 2;
  inline const ::std::string& identifier() const;
  inline void set_identifier(const ::std::string& value);
  inline void set_identifier(const char* value);
  inline void set_identifier(const char* value, size_t size);
  inline ::std::string* mutable_identifier();
  inline ::std::string* release_identifier();
  inline void set_allocated_identifier(::std::string* identifier);

  // @@protoc_insertion_point(class_scope:TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair)
 private:
  inline void set_has_style();
  inline void clear_has_style();
  inline void set_has_identifier();
  inline void clear_has_identifier();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSP::Reference* style_;
  ::std::string* identifier_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_AssignDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCHCommandArchives_2eproto();

  void InitAsDefaultInstance();
  static CommandReplaceThemePresetArchive_StyleAndIdentifierPair* default_instance_;
};
// -------------------------------------------------------------------

class CommandReplaceThemePresetArchive : public ::google::protobuf::Message {
 public:
  CommandReplaceThemePresetArchive();
  virtual ~CommandReplaceThemePresetArchive();

  CommandReplaceThemePresetArchive(const CommandReplaceThemePresetArchive& from);

  inline CommandReplaceThemePresetArchive& operator=(const CommandReplaceThemePresetArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandReplaceThemePresetArchive& default_instance();

  void Swap(CommandReplaceThemePresetArchive* other);

  // implements Message ----------------------------------------------

  CommandReplaceThemePresetArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommandReplaceThemePresetArchive& from);
  void MergeFrom(const CommandReplaceThemePresetArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CommandReplaceThemePresetArchive_StyleAndIdentifierPair StyleAndIdentifierPair;

  // accessors -------------------------------------------------------

  // required .TSK.CommandArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSK::CommandArchive& super() const;
  inline ::TSK::CommandArchive* mutable_super();
  inline ::TSK::CommandArchive* release_super();
  inline void set_allocated_super(::TSK::CommandArchive* super);

  // required .TSP.Reference theme = 2;
  inline bool has_theme() const;
  inline void clear_theme();
  static const int kThemeFieldNumber = 2;
  inline const ::TSP::Reference& theme() const;
  inline ::TSP::Reference* mutable_theme();
  inline ::TSP::Reference* release_theme();
  inline void set_allocated_theme(::TSP::Reference* theme);

  // optional .TSP.Reference old_preset = 3;
  inline bool has_old_preset() const;
  inline void clear_old_preset();
  static const int kOldPresetFieldNumber = 3;
  inline const ::TSP::Reference& old_preset() const;
  inline ::TSP::Reference* mutable_old_preset();
  inline ::TSP::Reference* release_old_preset();
  inline void set_allocated_old_preset(::TSP::Reference* old_preset);

  // optional .TSP.Reference new_preset = 4;
  inline bool has_new_preset() const;
  inline void clear_new_preset();
  static const int kNewPresetFieldNumber = 4;
  inline const ::TSP::Reference& new_preset() const;
  inline ::TSP::Reference* mutable_new_preset();
  inline ::TSP::Reference* release_new_preset();
  inline void set_allocated_new_preset(::TSP::Reference* new_preset);

  // repeated .TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair identifiers = 5;
  inline int identifiers_size() const;
  inline void clear_identifiers();
  static const int kIdentifiersFieldNumber = 5;
  inline const ::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair& identifiers(int index) const;
  inline ::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair* mutable_identifiers(int index);
  inline ::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair* add_identifiers();
  inline const ::google::protobuf::RepeatedPtrField< ::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair >&
      identifiers() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair >*
      mutable_identifiers();

  // optional uint64 old_preset_index = 6;
  inline bool has_old_preset_index() const;
  inline void clear_old_preset_index();
  static const int kOldPresetIndexFieldNumber = 6;
  inline ::google::protobuf::uint64 old_preset_index() const;
  inline void set_old_preset_index(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:TSCH.CommandReplaceThemePresetArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();
  inline void set_has_theme();
  inline void clear_has_theme();
  inline void set_has_old_preset();
  inline void clear_has_old_preset();
  inline void set_has_new_preset();
  inline void clear_has_new_preset();
  inline void set_has_old_preset_index();
  inline void clear_has_old_preset_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSK::CommandArchive* super_;
  ::TSP::Reference* theme_;
  ::TSP::Reference* old_preset_;
  ::TSP::Reference* new_preset_;
  ::google::protobuf::RepeatedPtrField< ::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair > identifiers_;
  ::google::protobuf::uint64 old_preset_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_AssignDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCHCommandArchives_2eproto();

  void InitAsDefaultInstance();
  static CommandReplaceThemePresetArchive* default_instance_;
};
// -------------------------------------------------------------------

class CommandInvalidateWPCaches : public ::google::protobuf::Message {
 public:
  CommandInvalidateWPCaches();
  virtual ~CommandInvalidateWPCaches();

  CommandInvalidateWPCaches(const CommandInvalidateWPCaches& from);

  inline CommandInvalidateWPCaches& operator=(const CommandInvalidateWPCaches& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandInvalidateWPCaches& default_instance();

  void Swap(CommandInvalidateWPCaches* other);

  // implements Message ----------------------------------------------

  CommandInvalidateWPCaches* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommandInvalidateWPCaches& from);
  void MergeFrom(const CommandInvalidateWPCaches& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSK.CommandArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSK::CommandArchive& super() const;
  inline ::TSK::CommandArchive* mutable_super();
  inline ::TSK::CommandArchive* release_super();
  inline void set_allocated_super(::TSK::CommandArchive* super);

  // @@protoc_insertion_point(class_scope:TSCH.CommandInvalidateWPCaches)
 private:
  inline void set_has_super();
  inline void clear_has_super();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSK::CommandArchive* super_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_AssignDesc_TSCHCommandArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCHCommandArchives_2eproto();

  void InitAsDefaultInstance();
  static CommandInvalidateWPCaches* default_instance_;
};
// ===================================================================


// ===================================================================

// CommandSetChartTypeArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandSetChartTypeArchive::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommandSetChartTypeArchive::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommandSetChartTypeArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommandSetChartTypeArchive::clear_super() {
  if (super_ != NULL) super_->::TSCH::ChartCommandArchive::Clear();
  clear_has_super();
}
inline const ::TSCH::ChartCommandArchive& CommandSetChartTypeArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSCH::ChartCommandArchive* CommandSetChartTypeArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSCH::ChartCommandArchive;
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandSetChartTypeArchive::release_super() {
  clear_has_super();
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void CommandSetChartTypeArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// required .TSCH.ChartType oldChartType = 2;
inline bool CommandSetChartTypeArchive::has_oldcharttype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommandSetChartTypeArchive::set_has_oldcharttype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommandSetChartTypeArchive::clear_has_oldcharttype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommandSetChartTypeArchive::clear_oldcharttype() {
  oldcharttype_ = 0;
  clear_has_oldcharttype();
}
inline ::TSCH::ChartType CommandSetChartTypeArchive::oldcharttype() const {
  return static_cast< ::TSCH::ChartType >(oldcharttype_);
}
inline void CommandSetChartTypeArchive::set_oldcharttype(::TSCH::ChartType value) {
  assert(::TSCH::ChartType_IsValid(value));
  set_has_oldcharttype();
  oldcharttype_ = value;
}

// required .TSCH.ChartType newChartType = 3;
inline bool CommandSetChartTypeArchive::has_newcharttype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommandSetChartTypeArchive::set_has_newcharttype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommandSetChartTypeArchive::clear_has_newcharttype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommandSetChartTypeArchive::clear_newcharttype() {
  newcharttype_ = 0;
  clear_has_newcharttype();
}
inline ::TSCH::ChartType CommandSetChartTypeArchive::newcharttype() const {
  return static_cast< ::TSCH::ChartType >(newcharttype_);
}
inline void CommandSetChartTypeArchive::set_newcharttype(::TSCH::ChartType value) {
  assert(::TSCH::ChartType_IsValid(value));
  set_has_newcharttype();
  newcharttype_ = value;
}

// optional .TSP.Reference info_geometry_command = 5;
inline bool CommandSetChartTypeArchive::has_info_geometry_command() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CommandSetChartTypeArchive::set_has_info_geometry_command() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CommandSetChartTypeArchive::clear_has_info_geometry_command() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CommandSetChartTypeArchive::clear_info_geometry_command() {
  if (info_geometry_command_ != NULL) info_geometry_command_->::TSP::Reference::Clear();
  clear_has_info_geometry_command();
}
inline const ::TSP::Reference& CommandSetChartTypeArchive::info_geometry_command() const {
  return info_geometry_command_ != NULL ? *info_geometry_command_ : *default_instance_->info_geometry_command_;
}
inline ::TSP::Reference* CommandSetChartTypeArchive::mutable_info_geometry_command() {
  set_has_info_geometry_command();
  if (info_geometry_command_ == NULL) info_geometry_command_ = new ::TSP::Reference;
  return info_geometry_command_;
}
inline ::TSP::Reference* CommandSetChartTypeArchive::release_info_geometry_command() {
  clear_has_info_geometry_command();
  ::TSP::Reference* temp = info_geometry_command_;
  info_geometry_command_ = NULL;
  return temp;
}
inline void CommandSetChartTypeArchive::set_allocated_info_geometry_command(::TSP::Reference* info_geometry_command) {
  delete info_geometry_command_;
  info_geometry_command_ = info_geometry_command;
  if (info_geometry_command) {
    set_has_info_geometry_command();
  } else {
    clear_has_info_geometry_command();
  }
}

// optional .TSP.Reference anchor_attachment_command = 6;
inline bool CommandSetChartTypeArchive::has_anchor_attachment_command() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CommandSetChartTypeArchive::set_has_anchor_attachment_command() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CommandSetChartTypeArchive::clear_has_anchor_attachment_command() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CommandSetChartTypeArchive::clear_anchor_attachment_command() {
  if (anchor_attachment_command_ != NULL) anchor_attachment_command_->::TSP::Reference::Clear();
  clear_has_anchor_attachment_command();
}
inline const ::TSP::Reference& CommandSetChartTypeArchive::anchor_attachment_command() const {
  return anchor_attachment_command_ != NULL ? *anchor_attachment_command_ : *default_instance_->anchor_attachment_command_;
}
inline ::TSP::Reference* CommandSetChartTypeArchive::mutable_anchor_attachment_command() {
  set_has_anchor_attachment_command();
  if (anchor_attachment_command_ == NULL) anchor_attachment_command_ = new ::TSP::Reference;
  return anchor_attachment_command_;
}
inline ::TSP::Reference* CommandSetChartTypeArchive::release_anchor_attachment_command() {
  clear_has_anchor_attachment_command();
  ::TSP::Reference* temp = anchor_attachment_command_;
  anchor_attachment_command_ = NULL;
  return temp;
}
inline void CommandSetChartTypeArchive::set_allocated_anchor_attachment_command(::TSP::Reference* anchor_attachment_command) {
  delete anchor_attachment_command_;
  anchor_attachment_command_ = anchor_attachment_command;
  if (anchor_attachment_command) {
    set_has_anchor_attachment_command();
  } else {
    clear_has_anchor_attachment_command();
  }
}

// optional .TSCH.RectArchive original_legend_rect = 7;
inline bool CommandSetChartTypeArchive::has_original_legend_rect() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CommandSetChartTypeArchive::set_has_original_legend_rect() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CommandSetChartTypeArchive::clear_has_original_legend_rect() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CommandSetChartTypeArchive::clear_original_legend_rect() {
  if (original_legend_rect_ != NULL) original_legend_rect_->::TSCH::RectArchive::Clear();
  clear_has_original_legend_rect();
}
inline const ::TSCH::RectArchive& CommandSetChartTypeArchive::original_legend_rect() const {
  return original_legend_rect_ != NULL ? *original_legend_rect_ : *default_instance_->original_legend_rect_;
}
inline ::TSCH::RectArchive* CommandSetChartTypeArchive::mutable_original_legend_rect() {
  set_has_original_legend_rect();
  if (original_legend_rect_ == NULL) original_legend_rect_ = new ::TSCH::RectArchive;
  return original_legend_rect_;
}
inline ::TSCH::RectArchive* CommandSetChartTypeArchive::release_original_legend_rect() {
  clear_has_original_legend_rect();
  ::TSCH::RectArchive* temp = original_legend_rect_;
  original_legend_rect_ = NULL;
  return temp;
}
inline void CommandSetChartTypeArchive::set_allocated_original_legend_rect(::TSCH::RectArchive* original_legend_rect) {
  delete original_legend_rect_;
  original_legend_rect_ = original_legend_rect;
  if (original_legend_rect) {
    set_has_original_legend_rect();
  } else {
    clear_has_original_legend_rect();
  }
}

// -------------------------------------------------------------------

// PropertyMutationUndoTupleArchive

// optional .TSP.Reference chart_info = 1;
inline bool PropertyMutationUndoTupleArchive::has_chart_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PropertyMutationUndoTupleArchive::set_has_chart_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PropertyMutationUndoTupleArchive::clear_has_chart_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PropertyMutationUndoTupleArchive::clear_chart_info() {
  if (chart_info_ != NULL) chart_info_->::TSP::Reference::Clear();
  clear_has_chart_info();
}
inline const ::TSP::Reference& PropertyMutationUndoTupleArchive::chart_info() const {
  return chart_info_ != NULL ? *chart_info_ : *default_instance_->chart_info_;
}
inline ::TSP::Reference* PropertyMutationUndoTupleArchive::mutable_chart_info() {
  set_has_chart_info();
  if (chart_info_ == NULL) chart_info_ = new ::TSP::Reference;
  return chart_info_;
}
inline ::TSP::Reference* PropertyMutationUndoTupleArchive::release_chart_info() {
  clear_has_chart_info();
  ::TSP::Reference* temp = chart_info_;
  chart_info_ = NULL;
  return temp;
}
inline void PropertyMutationUndoTupleArchive::set_allocated_chart_info(::TSP::Reference* chart_info) {
  delete chart_info_;
  chart_info_ = chart_info;
  if (chart_info) {
    set_has_chart_info();
  } else {
    clear_has_chart_info();
  }
}

// optional .TSCH.StyleOwnerType style_owner_type = 2;
inline bool PropertyMutationUndoTupleArchive::has_style_owner_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PropertyMutationUndoTupleArchive::set_has_style_owner_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PropertyMutationUndoTupleArchive::clear_has_style_owner_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PropertyMutationUndoTupleArchive::clear_style_owner_type() {
  style_owner_type_ = 1;
  clear_has_style_owner_type();
}
inline ::TSCH::StyleOwnerType PropertyMutationUndoTupleArchive::style_owner_type() const {
  return static_cast< ::TSCH::StyleOwnerType >(style_owner_type_);
}
inline void PropertyMutationUndoTupleArchive::set_style_owner_type(::TSCH::StyleOwnerType value) {
  assert(::TSCH::StyleOwnerType_IsValid(value));
  set_has_style_owner_type();
  style_owner_type_ = value;
}

// optional uint32 index = 3;
inline bool PropertyMutationUndoTupleArchive::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PropertyMutationUndoTupleArchive::set_has_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PropertyMutationUndoTupleArchive::clear_has_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PropertyMutationUndoTupleArchive::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 PropertyMutationUndoTupleArchive::index() const {
  return index_;
}
inline void PropertyMutationUndoTupleArchive::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// optional .TSP.Reference old_style = 4;
inline bool PropertyMutationUndoTupleArchive::has_old_style() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PropertyMutationUndoTupleArchive::set_has_old_style() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PropertyMutationUndoTupleArchive::clear_has_old_style() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PropertyMutationUndoTupleArchive::clear_old_style() {
  if (old_style_ != NULL) old_style_->::TSP::Reference::Clear();
  clear_has_old_style();
}
inline const ::TSP::Reference& PropertyMutationUndoTupleArchive::old_style() const {
  return old_style_ != NULL ? *old_style_ : *default_instance_->old_style_;
}
inline ::TSP::Reference* PropertyMutationUndoTupleArchive::mutable_old_style() {
  set_has_old_style();
  if (old_style_ == NULL) old_style_ = new ::TSP::Reference;
  return old_style_;
}
inline ::TSP::Reference* PropertyMutationUndoTupleArchive::release_old_style() {
  clear_has_old_style();
  ::TSP::Reference* temp = old_style_;
  old_style_ = NULL;
  return temp;
}
inline void PropertyMutationUndoTupleArchive::set_allocated_old_style(::TSP::Reference* old_style) {
  delete old_style_;
  old_style_ = old_style;
  if (old_style) {
    set_has_old_style();
  } else {
    clear_has_old_style();
  }
}

// optional .TSP.Reference new_style = 5;
inline bool PropertyMutationUndoTupleArchive::has_new_style() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PropertyMutationUndoTupleArchive::set_has_new_style() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PropertyMutationUndoTupleArchive::clear_has_new_style() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PropertyMutationUndoTupleArchive::clear_new_style() {
  if (new_style_ != NULL) new_style_->::TSP::Reference::Clear();
  clear_has_new_style();
}
inline const ::TSP::Reference& PropertyMutationUndoTupleArchive::new_style() const {
  return new_style_ != NULL ? *new_style_ : *default_instance_->new_style_;
}
inline ::TSP::Reference* PropertyMutationUndoTupleArchive::mutable_new_style() {
  set_has_new_style();
  if (new_style_ == NULL) new_style_ = new ::TSP::Reference;
  return new_style_;
}
inline ::TSP::Reference* PropertyMutationUndoTupleArchive::release_new_style() {
  clear_has_new_style();
  ::TSP::Reference* temp = new_style_;
  new_style_ = NULL;
  return temp;
}
inline void PropertyMutationUndoTupleArchive::set_allocated_new_style(::TSP::Reference* new_style) {
  delete new_style_;
  new_style_ = new_style;
  if (new_style) {
    set_has_new_style();
  } else {
    clear_has_new_style();
  }
}

// optional .TSP.Reference old_non_style = 6;
inline bool PropertyMutationUndoTupleArchive::has_old_non_style() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PropertyMutationUndoTupleArchive::set_has_old_non_style() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PropertyMutationUndoTupleArchive::clear_has_old_non_style() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PropertyMutationUndoTupleArchive::clear_old_non_style() {
  if (old_non_style_ != NULL) old_non_style_->::TSP::Reference::Clear();
  clear_has_old_non_style();
}
inline const ::TSP::Reference& PropertyMutationUndoTupleArchive::old_non_style() const {
  return old_non_style_ != NULL ? *old_non_style_ : *default_instance_->old_non_style_;
}
inline ::TSP::Reference* PropertyMutationUndoTupleArchive::mutable_old_non_style() {
  set_has_old_non_style();
  if (old_non_style_ == NULL) old_non_style_ = new ::TSP::Reference;
  return old_non_style_;
}
inline ::TSP::Reference* PropertyMutationUndoTupleArchive::release_old_non_style() {
  clear_has_old_non_style();
  ::TSP::Reference* temp = old_non_style_;
  old_non_style_ = NULL;
  return temp;
}
inline void PropertyMutationUndoTupleArchive::set_allocated_old_non_style(::TSP::Reference* old_non_style) {
  delete old_non_style_;
  old_non_style_ = old_non_style;
  if (old_non_style) {
    set_has_old_non_style();
  } else {
    clear_has_old_non_style();
  }
}

// optional .TSP.Reference new_non_style = 7;
inline bool PropertyMutationUndoTupleArchive::has_new_non_style() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PropertyMutationUndoTupleArchive::set_has_new_non_style() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PropertyMutationUndoTupleArchive::clear_has_new_non_style() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PropertyMutationUndoTupleArchive::clear_new_non_style() {
  if (new_non_style_ != NULL) new_non_style_->::TSP::Reference::Clear();
  clear_has_new_non_style();
}
inline const ::TSP::Reference& PropertyMutationUndoTupleArchive::new_non_style() const {
  return new_non_style_ != NULL ? *new_non_style_ : *default_instance_->new_non_style_;
}
inline ::TSP::Reference* PropertyMutationUndoTupleArchive::mutable_new_non_style() {
  set_has_new_non_style();
  if (new_non_style_ == NULL) new_non_style_ = new ::TSP::Reference;
  return new_non_style_;
}
inline ::TSP::Reference* PropertyMutationUndoTupleArchive::release_new_non_style() {
  clear_has_new_non_style();
  ::TSP::Reference* temp = new_non_style_;
  new_non_style_ = NULL;
  return temp;
}
inline void PropertyMutationUndoTupleArchive::set_allocated_new_non_style(::TSP::Reference* new_non_style) {
  delete new_non_style_;
  new_non_style_ = new_non_style;
  if (new_non_style) {
    set_has_new_non_style();
  } else {
    clear_has_new_non_style();
  }
}

// -------------------------------------------------------------------

// StyleSwapUndoTupleArchive

// optional .TSP.Reference chart_info = 1;
inline bool StyleSwapUndoTupleArchive::has_chart_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StyleSwapUndoTupleArchive::set_has_chart_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StyleSwapUndoTupleArchive::clear_has_chart_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StyleSwapUndoTupleArchive::clear_chart_info() {
  if (chart_info_ != NULL) chart_info_->::TSP::Reference::Clear();
  clear_has_chart_info();
}
inline const ::TSP::Reference& StyleSwapUndoTupleArchive::chart_info() const {
  return chart_info_ != NULL ? *chart_info_ : *default_instance_->chart_info_;
}
inline ::TSP::Reference* StyleSwapUndoTupleArchive::mutable_chart_info() {
  set_has_chart_info();
  if (chart_info_ == NULL) chart_info_ = new ::TSP::Reference;
  return chart_info_;
}
inline ::TSP::Reference* StyleSwapUndoTupleArchive::release_chart_info() {
  clear_has_chart_info();
  ::TSP::Reference* temp = chart_info_;
  chart_info_ = NULL;
  return temp;
}
inline void StyleSwapUndoTupleArchive::set_allocated_chart_info(::TSP::Reference* chart_info) {
  delete chart_info_;
  chart_info_ = chart_info;
  if (chart_info) {
    set_has_chart_info();
  } else {
    clear_has_chart_info();
  }
}

// optional .TSCH.StyleSwapType swap_type = 2;
inline bool StyleSwapUndoTupleArchive::has_swap_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StyleSwapUndoTupleArchive::set_has_swap_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StyleSwapUndoTupleArchive::clear_has_swap_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StyleSwapUndoTupleArchive::clear_swap_type() {
  swap_type_ = 1;
  clear_has_swap_type();
}
inline ::TSCH::StyleSwapType StyleSwapUndoTupleArchive::swap_type() const {
  return static_cast< ::TSCH::StyleSwapType >(swap_type_);
}
inline void StyleSwapUndoTupleArchive::set_swap_type(::TSCH::StyleSwapType value) {
  assert(::TSCH::StyleSwapType_IsValid(value));
  set_has_swap_type();
  swap_type_ = value;
}

// optional uint32 index = 3;
inline bool StyleSwapUndoTupleArchive::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StyleSwapUndoTupleArchive::set_has_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StyleSwapUndoTupleArchive::clear_has_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StyleSwapUndoTupleArchive::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 StyleSwapUndoTupleArchive::index() const {
  return index_;
}
inline void StyleSwapUndoTupleArchive::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// optional .TSP.Reference old_value = 4;
inline bool StyleSwapUndoTupleArchive::has_old_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StyleSwapUndoTupleArchive::set_has_old_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StyleSwapUndoTupleArchive::clear_has_old_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StyleSwapUndoTupleArchive::clear_old_value() {
  if (old_value_ != NULL) old_value_->::TSP::Reference::Clear();
  clear_has_old_value();
}
inline const ::TSP::Reference& StyleSwapUndoTupleArchive::old_value() const {
  return old_value_ != NULL ? *old_value_ : *default_instance_->old_value_;
}
inline ::TSP::Reference* StyleSwapUndoTupleArchive::mutable_old_value() {
  set_has_old_value();
  if (old_value_ == NULL) old_value_ = new ::TSP::Reference;
  return old_value_;
}
inline ::TSP::Reference* StyleSwapUndoTupleArchive::release_old_value() {
  clear_has_old_value();
  ::TSP::Reference* temp = old_value_;
  old_value_ = NULL;
  return temp;
}
inline void StyleSwapUndoTupleArchive::set_allocated_old_value(::TSP::Reference* old_value) {
  delete old_value_;
  old_value_ = old_value;
  if (old_value) {
    set_has_old_value();
  } else {
    clear_has_old_value();
  }
}

// optional .TSP.Reference new_value = 5;
inline bool StyleSwapUndoTupleArchive::has_new_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StyleSwapUndoTupleArchive::set_has_new_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StyleSwapUndoTupleArchive::clear_has_new_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StyleSwapUndoTupleArchive::clear_new_value() {
  if (new_value_ != NULL) new_value_->::TSP::Reference::Clear();
  clear_has_new_value();
}
inline const ::TSP::Reference& StyleSwapUndoTupleArchive::new_value() const {
  return new_value_ != NULL ? *new_value_ : *default_instance_->new_value_;
}
inline ::TSP::Reference* StyleSwapUndoTupleArchive::mutable_new_value() {
  set_has_new_value();
  if (new_value_ == NULL) new_value_ = new ::TSP::Reference;
  return new_value_;
}
inline ::TSP::Reference* StyleSwapUndoTupleArchive::release_new_value() {
  clear_has_new_value();
  ::TSP::Reference* temp = new_value_;
  new_value_ = NULL;
  return temp;
}
inline void StyleSwapUndoTupleArchive::set_allocated_new_value(::TSP::Reference* new_value) {
  delete new_value_;
  new_value_ = new_value;
  if (new_value) {
    set_has_new_value();
  } else {
    clear_has_new_value();
  }
}

// -------------------------------------------------------------------

// CommandStyleSwapArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandStyleSwapArchive::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommandStyleSwapArchive::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommandStyleSwapArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommandStyleSwapArchive::clear_super() {
  if (super_ != NULL) super_->::TSCH::ChartCommandArchive::Clear();
  clear_has_super();
}
inline const ::TSCH::ChartCommandArchive& CommandStyleSwapArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSCH::ChartCommandArchive* CommandStyleSwapArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSCH::ChartCommandArchive;
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandStyleSwapArchive::release_super() {
  clear_has_super();
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void CommandStyleSwapArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// repeated .TSCH.StyleSwapUndoTupleArchive undo_tuples = 2;
inline int CommandStyleSwapArchive::undo_tuples_size() const {
  return undo_tuples_.size();
}
inline void CommandStyleSwapArchive::clear_undo_tuples() {
  undo_tuples_.Clear();
}
inline const ::TSCH::StyleSwapUndoTupleArchive& CommandStyleSwapArchive::undo_tuples(int index) const {
  return undo_tuples_.Get(index);
}
inline ::TSCH::StyleSwapUndoTupleArchive* CommandStyleSwapArchive::mutable_undo_tuples(int index) {
  return undo_tuples_.Mutable(index);
}
inline ::TSCH::StyleSwapUndoTupleArchive* CommandStyleSwapArchive::add_undo_tuples() {
  return undo_tuples_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSCH::StyleSwapUndoTupleArchive >&
CommandStyleSwapArchive::undo_tuples() const {
  return undo_tuples_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSCH::StyleSwapUndoTupleArchive >*
CommandStyleSwapArchive::mutable_undo_tuples() {
  return &undo_tuples_;
}

// -------------------------------------------------------------------

// CommandSetSeriesNameArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandSetSeriesNameArchive::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommandSetSeriesNameArchive::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommandSetSeriesNameArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommandSetSeriesNameArchive::clear_super() {
  if (super_ != NULL) super_->::TSCH::ChartCommandArchive::Clear();
  clear_has_super();
}
inline const ::TSCH::ChartCommandArchive& CommandSetSeriesNameArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSCH::ChartCommandArchive* CommandSetSeriesNameArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSCH::ChartCommandArchive;
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandSetSeriesNameArchive::release_super() {
  clear_has_super();
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void CommandSetSeriesNameArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// required uint32 seriesIndex = 2;
inline bool CommandSetSeriesNameArchive::has_seriesindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommandSetSeriesNameArchive::set_has_seriesindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommandSetSeriesNameArchive::clear_has_seriesindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommandSetSeriesNameArchive::clear_seriesindex() {
  seriesindex_ = 0u;
  clear_has_seriesindex();
}
inline ::google::protobuf::uint32 CommandSetSeriesNameArchive::seriesindex() const {
  return seriesindex_;
}
inline void CommandSetSeriesNameArchive::set_seriesindex(::google::protobuf::uint32 value) {
  set_has_seriesindex();
  seriesindex_ = value;
}

// required string oldName = 3;
inline bool CommandSetSeriesNameArchive::has_oldname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommandSetSeriesNameArchive::set_has_oldname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommandSetSeriesNameArchive::clear_has_oldname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommandSetSeriesNameArchive::clear_oldname() {
  if (oldname_ != &::google::protobuf::internal::kEmptyString) {
    oldname_->clear();
  }
  clear_has_oldname();
}
inline const ::std::string& CommandSetSeriesNameArchive::oldname() const {
  return *oldname_;
}
inline void CommandSetSeriesNameArchive::set_oldname(const ::std::string& value) {
  set_has_oldname();
  if (oldname_ == &::google::protobuf::internal::kEmptyString) {
    oldname_ = new ::std::string;
  }
  oldname_->assign(value);
}
inline void CommandSetSeriesNameArchive::set_oldname(const char* value) {
  set_has_oldname();
  if (oldname_ == &::google::protobuf::internal::kEmptyString) {
    oldname_ = new ::std::string;
  }
  oldname_->assign(value);
}
inline void CommandSetSeriesNameArchive::set_oldname(const char* value, size_t size) {
  set_has_oldname();
  if (oldname_ == &::google::protobuf::internal::kEmptyString) {
    oldname_ = new ::std::string;
  }
  oldname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommandSetSeriesNameArchive::mutable_oldname() {
  set_has_oldname();
  if (oldname_ == &::google::protobuf::internal::kEmptyString) {
    oldname_ = new ::std::string;
  }
  return oldname_;
}
inline ::std::string* CommandSetSeriesNameArchive::release_oldname() {
  clear_has_oldname();
  if (oldname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = oldname_;
    oldname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CommandSetSeriesNameArchive::set_allocated_oldname(::std::string* oldname) {
  if (oldname_ != &::google::protobuf::internal::kEmptyString) {
    delete oldname_;
  }
  if (oldname) {
    set_has_oldname();
    oldname_ = oldname;
  } else {
    clear_has_oldname();
    oldname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string newName = 4;
inline bool CommandSetSeriesNameArchive::has_newname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CommandSetSeriesNameArchive::set_has_newname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CommandSetSeriesNameArchive::clear_has_newname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CommandSetSeriesNameArchive::clear_newname() {
  if (newname_ != &::google::protobuf::internal::kEmptyString) {
    newname_->clear();
  }
  clear_has_newname();
}
inline const ::std::string& CommandSetSeriesNameArchive::newname() const {
  return *newname_;
}
inline void CommandSetSeriesNameArchive::set_newname(const ::std::string& value) {
  set_has_newname();
  if (newname_ == &::google::protobuf::internal::kEmptyString) {
    newname_ = new ::std::string;
  }
  newname_->assign(value);
}
inline void CommandSetSeriesNameArchive::set_newname(const char* value) {
  set_has_newname();
  if (newname_ == &::google::protobuf::internal::kEmptyString) {
    newname_ = new ::std::string;
  }
  newname_->assign(value);
}
inline void CommandSetSeriesNameArchive::set_newname(const char* value, size_t size) {
  set_has_newname();
  if (newname_ == &::google::protobuf::internal::kEmptyString) {
    newname_ = new ::std::string;
  }
  newname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommandSetSeriesNameArchive::mutable_newname() {
  set_has_newname();
  if (newname_ == &::google::protobuf::internal::kEmptyString) {
    newname_ = new ::std::string;
  }
  return newname_;
}
inline ::std::string* CommandSetSeriesNameArchive::release_newname() {
  clear_has_newname();
  if (newname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = newname_;
    newname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CommandSetSeriesNameArchive::set_allocated_newname(::std::string* newname) {
  if (newname_ != &::google::protobuf::internal::kEmptyString) {
    delete newname_;
  }
  if (newname) {
    set_has_newname();
    newname_ = newname;
  } else {
    clear_has_newname();
    newname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CommandSetCategoryNameArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandSetCategoryNameArchive::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommandSetCategoryNameArchive::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommandSetCategoryNameArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommandSetCategoryNameArchive::clear_super() {
  if (super_ != NULL) super_->::TSCH::ChartCommandArchive::Clear();
  clear_has_super();
}
inline const ::TSCH::ChartCommandArchive& CommandSetCategoryNameArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSCH::ChartCommandArchive* CommandSetCategoryNameArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSCH::ChartCommandArchive;
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandSetCategoryNameArchive::release_super() {
  clear_has_super();
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void CommandSetCategoryNameArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// required uint32 categoryIndex = 2;
inline bool CommandSetCategoryNameArchive::has_categoryindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommandSetCategoryNameArchive::set_has_categoryindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommandSetCategoryNameArchive::clear_has_categoryindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommandSetCategoryNameArchive::clear_categoryindex() {
  categoryindex_ = 0u;
  clear_has_categoryindex();
}
inline ::google::protobuf::uint32 CommandSetCategoryNameArchive::categoryindex() const {
  return categoryindex_;
}
inline void CommandSetCategoryNameArchive::set_categoryindex(::google::protobuf::uint32 value) {
  set_has_categoryindex();
  categoryindex_ = value;
}

// required string oldName = 3;
inline bool CommandSetCategoryNameArchive::has_oldname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommandSetCategoryNameArchive::set_has_oldname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommandSetCategoryNameArchive::clear_has_oldname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommandSetCategoryNameArchive::clear_oldname() {
  if (oldname_ != &::google::protobuf::internal::kEmptyString) {
    oldname_->clear();
  }
  clear_has_oldname();
}
inline const ::std::string& CommandSetCategoryNameArchive::oldname() const {
  return *oldname_;
}
inline void CommandSetCategoryNameArchive::set_oldname(const ::std::string& value) {
  set_has_oldname();
  if (oldname_ == &::google::protobuf::internal::kEmptyString) {
    oldname_ = new ::std::string;
  }
  oldname_->assign(value);
}
inline void CommandSetCategoryNameArchive::set_oldname(const char* value) {
  set_has_oldname();
  if (oldname_ == &::google::protobuf::internal::kEmptyString) {
    oldname_ = new ::std::string;
  }
  oldname_->assign(value);
}
inline void CommandSetCategoryNameArchive::set_oldname(const char* value, size_t size) {
  set_has_oldname();
  if (oldname_ == &::google::protobuf::internal::kEmptyString) {
    oldname_ = new ::std::string;
  }
  oldname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommandSetCategoryNameArchive::mutable_oldname() {
  set_has_oldname();
  if (oldname_ == &::google::protobuf::internal::kEmptyString) {
    oldname_ = new ::std::string;
  }
  return oldname_;
}
inline ::std::string* CommandSetCategoryNameArchive::release_oldname() {
  clear_has_oldname();
  if (oldname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = oldname_;
    oldname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CommandSetCategoryNameArchive::set_allocated_oldname(::std::string* oldname) {
  if (oldname_ != &::google::protobuf::internal::kEmptyString) {
    delete oldname_;
  }
  if (oldname) {
    set_has_oldname();
    oldname_ = oldname;
  } else {
    clear_has_oldname();
    oldname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string newName = 4;
inline bool CommandSetCategoryNameArchive::has_newname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CommandSetCategoryNameArchive::set_has_newname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CommandSetCategoryNameArchive::clear_has_newname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CommandSetCategoryNameArchive::clear_newname() {
  if (newname_ != &::google::protobuf::internal::kEmptyString) {
    newname_->clear();
  }
  clear_has_newname();
}
inline const ::std::string& CommandSetCategoryNameArchive::newname() const {
  return *newname_;
}
inline void CommandSetCategoryNameArchive::set_newname(const ::std::string& value) {
  set_has_newname();
  if (newname_ == &::google::protobuf::internal::kEmptyString) {
    newname_ = new ::std::string;
  }
  newname_->assign(value);
}
inline void CommandSetCategoryNameArchive::set_newname(const char* value) {
  set_has_newname();
  if (newname_ == &::google::protobuf::internal::kEmptyString) {
    newname_ = new ::std::string;
  }
  newname_->assign(value);
}
inline void CommandSetCategoryNameArchive::set_newname(const char* value, size_t size) {
  set_has_newname();
  if (newname_ == &::google::protobuf::internal::kEmptyString) {
    newname_ = new ::std::string;
  }
  newname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommandSetCategoryNameArchive::mutable_newname() {
  set_has_newname();
  if (newname_ == &::google::protobuf::internal::kEmptyString) {
    newname_ = new ::std::string;
  }
  return newname_;
}
inline ::std::string* CommandSetCategoryNameArchive::release_newname() {
  clear_has_newname();
  if (newname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = newname_;
    newname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CommandSetCategoryNameArchive::set_allocated_newname(::std::string* newname) {
  if (newname_ != &::google::protobuf::internal::kEmptyString) {
    delete newname_;
  }
  if (newname) {
    set_has_newname();
    newname_ = newname;
  } else {
    clear_has_newname();
    newname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool isMultiDataIndex = 5;
inline bool CommandSetCategoryNameArchive::has_ismultidataindex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CommandSetCategoryNameArchive::set_has_ismultidataindex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CommandSetCategoryNameArchive::clear_has_ismultidataindex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CommandSetCategoryNameArchive::clear_ismultidataindex() {
  ismultidataindex_ = false;
  clear_has_ismultidataindex();
}
inline bool CommandSetCategoryNameArchive::ismultidataindex() const {
  return ismultidataindex_;
}
inline void CommandSetCategoryNameArchive::set_ismultidataindex(bool value) {
  set_has_ismultidataindex();
  ismultidataindex_ = value;
}

// -------------------------------------------------------------------

// CommandAddGridRowsArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandAddGridRowsArchive::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommandAddGridRowsArchive::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommandAddGridRowsArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommandAddGridRowsArchive::clear_super() {
  if (super_ != NULL) super_->::TSCH::ChartCommandArchive::Clear();
  clear_has_super();
}
inline const ::TSCH::ChartCommandArchive& CommandAddGridRowsArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSCH::ChartCommandArchive* CommandAddGridRowsArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSCH::ChartCommandArchive;
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandAddGridRowsArchive::release_super() {
  clear_has_super();
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void CommandAddGridRowsArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// required uint32 location = 2;
inline bool CommandAddGridRowsArchive::has_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommandAddGridRowsArchive::set_has_location() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommandAddGridRowsArchive::clear_has_location() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommandAddGridRowsArchive::clear_location() {
  location_ = 0u;
  clear_has_location();
}
inline ::google::protobuf::uint32 CommandAddGridRowsArchive::location() const {
  return location_;
}
inline void CommandAddGridRowsArchive::set_location(::google::protobuf::uint32 value) {
  set_has_location();
  location_ = value;
}

// optional uint32 length = 3;
inline bool CommandAddGridRowsArchive::has_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommandAddGridRowsArchive::set_has_length() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommandAddGridRowsArchive::clear_has_length() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommandAddGridRowsArchive::clear_length() {
  length_ = 0u;
  clear_has_length();
}
inline ::google::protobuf::uint32 CommandAddGridRowsArchive::length() const {
  return length_;
}
inline void CommandAddGridRowsArchive::set_length(::google::protobuf::uint32 value) {
  set_has_length();
  length_ = value;
}

// repeated string name = 4;
inline int CommandAddGridRowsArchive::name_size() const {
  return name_.size();
}
inline void CommandAddGridRowsArchive::clear_name() {
  name_.Clear();
}
inline const ::std::string& CommandAddGridRowsArchive::name(int index) const {
  return name_.Get(index);
}
inline ::std::string* CommandAddGridRowsArchive::mutable_name(int index) {
  return name_.Mutable(index);
}
inline void CommandAddGridRowsArchive::set_name(int index, const ::std::string& value) {
  name_.Mutable(index)->assign(value);
}
inline void CommandAddGridRowsArchive::set_name(int index, const char* value) {
  name_.Mutable(index)->assign(value);
}
inline void CommandAddGridRowsArchive::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommandAddGridRowsArchive::add_name() {
  return name_.Add();
}
inline void CommandAddGridRowsArchive::add_name(const ::std::string& value) {
  name_.Add()->assign(value);
}
inline void CommandAddGridRowsArchive::add_name(const char* value) {
  name_.Add()->assign(value);
}
inline void CommandAddGridRowsArchive::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CommandAddGridRowsArchive::name() const {
  return name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CommandAddGridRowsArchive::mutable_name() {
  return &name_;
}

// -------------------------------------------------------------------

// CommandAddGridColumnsArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandAddGridColumnsArchive::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommandAddGridColumnsArchive::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommandAddGridColumnsArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommandAddGridColumnsArchive::clear_super() {
  if (super_ != NULL) super_->::TSCH::ChartCommandArchive::Clear();
  clear_has_super();
}
inline const ::TSCH::ChartCommandArchive& CommandAddGridColumnsArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSCH::ChartCommandArchive* CommandAddGridColumnsArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSCH::ChartCommandArchive;
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandAddGridColumnsArchive::release_super() {
  clear_has_super();
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void CommandAddGridColumnsArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// required uint32 location = 2;
inline bool CommandAddGridColumnsArchive::has_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommandAddGridColumnsArchive::set_has_location() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommandAddGridColumnsArchive::clear_has_location() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommandAddGridColumnsArchive::clear_location() {
  location_ = 0u;
  clear_has_location();
}
inline ::google::protobuf::uint32 CommandAddGridColumnsArchive::location() const {
  return location_;
}
inline void CommandAddGridColumnsArchive::set_location(::google::protobuf::uint32 value) {
  set_has_location();
  location_ = value;
}

// optional uint32 length = 3;
inline bool CommandAddGridColumnsArchive::has_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommandAddGridColumnsArchive::set_has_length() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommandAddGridColumnsArchive::clear_has_length() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommandAddGridColumnsArchive::clear_length() {
  length_ = 0u;
  clear_has_length();
}
inline ::google::protobuf::uint32 CommandAddGridColumnsArchive::length() const {
  return length_;
}
inline void CommandAddGridColumnsArchive::set_length(::google::protobuf::uint32 value) {
  set_has_length();
  length_ = value;
}

// repeated string name = 4;
inline int CommandAddGridColumnsArchive::name_size() const {
  return name_.size();
}
inline void CommandAddGridColumnsArchive::clear_name() {
  name_.Clear();
}
inline const ::std::string& CommandAddGridColumnsArchive::name(int index) const {
  return name_.Get(index);
}
inline ::std::string* CommandAddGridColumnsArchive::mutable_name(int index) {
  return name_.Mutable(index);
}
inline void CommandAddGridColumnsArchive::set_name(int index, const ::std::string& value) {
  name_.Mutable(index)->assign(value);
}
inline void CommandAddGridColumnsArchive::set_name(int index, const char* value) {
  name_.Mutable(index)->assign(value);
}
inline void CommandAddGridColumnsArchive::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommandAddGridColumnsArchive::add_name() {
  return name_.Add();
}
inline void CommandAddGridColumnsArchive::add_name(const ::std::string& value) {
  name_.Add()->assign(value);
}
inline void CommandAddGridColumnsArchive::add_name(const char* value) {
  name_.Add()->assign(value);
}
inline void CommandAddGridColumnsArchive::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CommandAddGridColumnsArchive::name() const {
  return name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CommandAddGridColumnsArchive::mutable_name() {
  return &name_;
}

// -------------------------------------------------------------------

// CommandMoveGridRowsArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandMoveGridRowsArchive::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommandMoveGridRowsArchive::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommandMoveGridRowsArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommandMoveGridRowsArchive::clear_super() {
  if (super_ != NULL) super_->::TSCH::ChartCommandArchive::Clear();
  clear_has_super();
}
inline const ::TSCH::ChartCommandArchive& CommandMoveGridRowsArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSCH::ChartCommandArchive* CommandMoveGridRowsArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSCH::ChartCommandArchive;
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandMoveGridRowsArchive::release_super() {
  clear_has_super();
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void CommandMoveGridRowsArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// required uint32 location = 2;
inline bool CommandMoveGridRowsArchive::has_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommandMoveGridRowsArchive::set_has_location() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommandMoveGridRowsArchive::clear_has_location() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommandMoveGridRowsArchive::clear_location() {
  location_ = 0u;
  clear_has_location();
}
inline ::google::protobuf::uint32 CommandMoveGridRowsArchive::location() const {
  return location_;
}
inline void CommandMoveGridRowsArchive::set_location(::google::protobuf::uint32 value) {
  set_has_location();
  location_ = value;
}

// required uint32 length = 3;
inline bool CommandMoveGridRowsArchive::has_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommandMoveGridRowsArchive::set_has_length() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommandMoveGridRowsArchive::clear_has_length() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommandMoveGridRowsArchive::clear_length() {
  length_ = 0u;
  clear_has_length();
}
inline ::google::protobuf::uint32 CommandMoveGridRowsArchive::length() const {
  return length_;
}
inline void CommandMoveGridRowsArchive::set_length(::google::protobuf::uint32 value) {
  set_has_length();
  length_ = value;
}

// required int32 afterrow = 4;
inline bool CommandMoveGridRowsArchive::has_afterrow() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CommandMoveGridRowsArchive::set_has_afterrow() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CommandMoveGridRowsArchive::clear_has_afterrow() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CommandMoveGridRowsArchive::clear_afterrow() {
  afterrow_ = 0;
  clear_has_afterrow();
}
inline ::google::protobuf::int32 CommandMoveGridRowsArchive::afterrow() const {
  return afterrow_;
}
inline void CommandMoveGridRowsArchive::set_afterrow(::google::protobuf::int32 value) {
  set_has_afterrow();
  afterrow_ = value;
}

// -------------------------------------------------------------------

// CommandMoveGridColumnsArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandMoveGridColumnsArchive::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommandMoveGridColumnsArchive::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommandMoveGridColumnsArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommandMoveGridColumnsArchive::clear_super() {
  if (super_ != NULL) super_->::TSCH::ChartCommandArchive::Clear();
  clear_has_super();
}
inline const ::TSCH::ChartCommandArchive& CommandMoveGridColumnsArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSCH::ChartCommandArchive* CommandMoveGridColumnsArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSCH::ChartCommandArchive;
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandMoveGridColumnsArchive::release_super() {
  clear_has_super();
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void CommandMoveGridColumnsArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// required uint32 location = 2;
inline bool CommandMoveGridColumnsArchive::has_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommandMoveGridColumnsArchive::set_has_location() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommandMoveGridColumnsArchive::clear_has_location() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommandMoveGridColumnsArchive::clear_location() {
  location_ = 0u;
  clear_has_location();
}
inline ::google::protobuf::uint32 CommandMoveGridColumnsArchive::location() const {
  return location_;
}
inline void CommandMoveGridColumnsArchive::set_location(::google::protobuf::uint32 value) {
  set_has_location();
  location_ = value;
}

// required uint32 length = 3;
inline bool CommandMoveGridColumnsArchive::has_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommandMoveGridColumnsArchive::set_has_length() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommandMoveGridColumnsArchive::clear_has_length() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommandMoveGridColumnsArchive::clear_length() {
  length_ = 0u;
  clear_has_length();
}
inline ::google::protobuf::uint32 CommandMoveGridColumnsArchive::length() const {
  return length_;
}
inline void CommandMoveGridColumnsArchive::set_length(::google::protobuf::uint32 value) {
  set_has_length();
  length_ = value;
}

// required int32 aftercolumn = 4;
inline bool CommandMoveGridColumnsArchive::has_aftercolumn() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CommandMoveGridColumnsArchive::set_has_aftercolumn() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CommandMoveGridColumnsArchive::clear_has_aftercolumn() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CommandMoveGridColumnsArchive::clear_aftercolumn() {
  aftercolumn_ = 0;
  clear_has_aftercolumn();
}
inline ::google::protobuf::int32 CommandMoveGridColumnsArchive::aftercolumn() const {
  return aftercolumn_;
}
inline void CommandMoveGridColumnsArchive::set_aftercolumn(::google::protobuf::int32 value) {
  set_has_aftercolumn();
  aftercolumn_ = value;
}

// -------------------------------------------------------------------

// CommandDeleteGridRowsArchive_ValueRow

// repeated double value = 5;
inline int CommandDeleteGridRowsArchive_ValueRow::value_size() const {
  return value_.size();
}
inline void CommandDeleteGridRowsArchive_ValueRow::clear_value() {
  value_.Clear();
}
inline double CommandDeleteGridRowsArchive_ValueRow::value(int index) const {
  return value_.Get(index);
}
inline void CommandDeleteGridRowsArchive_ValueRow::set_value(int index, double value) {
  value_.Set(index, value);
}
inline void CommandDeleteGridRowsArchive_ValueRow::add_value(double value) {
  value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
CommandDeleteGridRowsArchive_ValueRow::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedField< double >*
CommandDeleteGridRowsArchive_ValueRow::mutable_value() {
  return &value_;
}

// -------------------------------------------------------------------

// CommandDeleteGridRowsArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandDeleteGridRowsArchive::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommandDeleteGridRowsArchive::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommandDeleteGridRowsArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommandDeleteGridRowsArchive::clear_super() {
  if (super_ != NULL) super_->::TSCH::ChartCommandArchive::Clear();
  clear_has_super();
}
inline const ::TSCH::ChartCommandArchive& CommandDeleteGridRowsArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSCH::ChartCommandArchive* CommandDeleteGridRowsArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSCH::ChartCommandArchive;
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandDeleteGridRowsArchive::release_super() {
  clear_has_super();
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void CommandDeleteGridRowsArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// required uint32 location = 2;
inline bool CommandDeleteGridRowsArchive::has_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommandDeleteGridRowsArchive::set_has_location() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommandDeleteGridRowsArchive::clear_has_location() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommandDeleteGridRowsArchive::clear_location() {
  location_ = 0u;
  clear_has_location();
}
inline ::google::protobuf::uint32 CommandDeleteGridRowsArchive::location() const {
  return location_;
}
inline void CommandDeleteGridRowsArchive::set_location(::google::protobuf::uint32 value) {
  set_has_location();
  location_ = value;
}

// required uint32 length = 3;
inline bool CommandDeleteGridRowsArchive::has_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommandDeleteGridRowsArchive::set_has_length() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommandDeleteGridRowsArchive::clear_has_length() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommandDeleteGridRowsArchive::clear_length() {
  length_ = 0u;
  clear_has_length();
}
inline ::google::protobuf::uint32 CommandDeleteGridRowsArchive::length() const {
  return length_;
}
inline void CommandDeleteGridRowsArchive::set_length(::google::protobuf::uint32 value) {
  set_has_length();
  length_ = value;
}

// repeated string names = 4;
inline int CommandDeleteGridRowsArchive::names_size() const {
  return names_.size();
}
inline void CommandDeleteGridRowsArchive::clear_names() {
  names_.Clear();
}
inline const ::std::string& CommandDeleteGridRowsArchive::names(int index) const {
  return names_.Get(index);
}
inline ::std::string* CommandDeleteGridRowsArchive::mutable_names(int index) {
  return names_.Mutable(index);
}
inline void CommandDeleteGridRowsArchive::set_names(int index, const ::std::string& value) {
  names_.Mutable(index)->assign(value);
}
inline void CommandDeleteGridRowsArchive::set_names(int index, const char* value) {
  names_.Mutable(index)->assign(value);
}
inline void CommandDeleteGridRowsArchive::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommandDeleteGridRowsArchive::add_names() {
  return names_.Add();
}
inline void CommandDeleteGridRowsArchive::add_names(const ::std::string& value) {
  names_.Add()->assign(value);
}
inline void CommandDeleteGridRowsArchive::add_names(const char* value) {
  names_.Add()->assign(value);
}
inline void CommandDeleteGridRowsArchive::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CommandDeleteGridRowsArchive::names() const {
  return names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CommandDeleteGridRowsArchive::mutable_names() {
  return &names_;
}

// repeated .TSCH.CommandDeleteGridRowsArchive.ValueRow value_row = 6;
inline int CommandDeleteGridRowsArchive::value_row_size() const {
  return value_row_.size();
}
inline void CommandDeleteGridRowsArchive::clear_value_row() {
  value_row_.Clear();
}
inline const ::TSCH::CommandDeleteGridRowsArchive_ValueRow& CommandDeleteGridRowsArchive::value_row(int index) const {
  return value_row_.Get(index);
}
inline ::TSCH::CommandDeleteGridRowsArchive_ValueRow* CommandDeleteGridRowsArchive::mutable_value_row(int index) {
  return value_row_.Mutable(index);
}
inline ::TSCH::CommandDeleteGridRowsArchive_ValueRow* CommandDeleteGridRowsArchive::add_value_row() {
  return value_row_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSCH::CommandDeleteGridRowsArchive_ValueRow >&
CommandDeleteGridRowsArchive::value_row() const {
  return value_row_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSCH::CommandDeleteGridRowsArchive_ValueRow >*
CommandDeleteGridRowsArchive::mutable_value_row() {
  return &value_row_;
}

// optional bool removed_all_rows = 7;
inline bool CommandDeleteGridRowsArchive::has_removed_all_rows() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CommandDeleteGridRowsArchive::set_has_removed_all_rows() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CommandDeleteGridRowsArchive::clear_has_removed_all_rows() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CommandDeleteGridRowsArchive::clear_removed_all_rows() {
  removed_all_rows_ = false;
  clear_has_removed_all_rows();
}
inline bool CommandDeleteGridRowsArchive::removed_all_rows() const {
  return removed_all_rows_;
}
inline void CommandDeleteGridRowsArchive::set_removed_all_rows(bool value) {
  set_has_removed_all_rows();
  removed_all_rows_ = value;
}

// repeated string column_names = 8;
inline int CommandDeleteGridRowsArchive::column_names_size() const {
  return column_names_.size();
}
inline void CommandDeleteGridRowsArchive::clear_column_names() {
  column_names_.Clear();
}
inline const ::std::string& CommandDeleteGridRowsArchive::column_names(int index) const {
  return column_names_.Get(index);
}
inline ::std::string* CommandDeleteGridRowsArchive::mutable_column_names(int index) {
  return column_names_.Mutable(index);
}
inline void CommandDeleteGridRowsArchive::set_column_names(int index, const ::std::string& value) {
  column_names_.Mutable(index)->assign(value);
}
inline void CommandDeleteGridRowsArchive::set_column_names(int index, const char* value) {
  column_names_.Mutable(index)->assign(value);
}
inline void CommandDeleteGridRowsArchive::set_column_names(int index, const char* value, size_t size) {
  column_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommandDeleteGridRowsArchive::add_column_names() {
  return column_names_.Add();
}
inline void CommandDeleteGridRowsArchive::add_column_names(const ::std::string& value) {
  column_names_.Add()->assign(value);
}
inline void CommandDeleteGridRowsArchive::add_column_names(const char* value) {
  column_names_.Add()->assign(value);
}
inline void CommandDeleteGridRowsArchive::add_column_names(const char* value, size_t size) {
  column_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CommandDeleteGridRowsArchive::column_names() const {
  return column_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CommandDeleteGridRowsArchive::mutable_column_names() {
  return &column_names_;
}

// -------------------------------------------------------------------

// CommandDeleteGridColumnsArchive_ValueRow

// repeated double value = 5;
inline int CommandDeleteGridColumnsArchive_ValueRow::value_size() const {
  return value_.size();
}
inline void CommandDeleteGridColumnsArchive_ValueRow::clear_value() {
  value_.Clear();
}
inline double CommandDeleteGridColumnsArchive_ValueRow::value(int index) const {
  return value_.Get(index);
}
inline void CommandDeleteGridColumnsArchive_ValueRow::set_value(int index, double value) {
  value_.Set(index, value);
}
inline void CommandDeleteGridColumnsArchive_ValueRow::add_value(double value) {
  value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
CommandDeleteGridColumnsArchive_ValueRow::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedField< double >*
CommandDeleteGridColumnsArchive_ValueRow::mutable_value() {
  return &value_;
}

// -------------------------------------------------------------------

// CommandDeleteGridColumnsArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandDeleteGridColumnsArchive::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommandDeleteGridColumnsArchive::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommandDeleteGridColumnsArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommandDeleteGridColumnsArchive::clear_super() {
  if (super_ != NULL) super_->::TSCH::ChartCommandArchive::Clear();
  clear_has_super();
}
inline const ::TSCH::ChartCommandArchive& CommandDeleteGridColumnsArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSCH::ChartCommandArchive* CommandDeleteGridColumnsArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSCH::ChartCommandArchive;
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandDeleteGridColumnsArchive::release_super() {
  clear_has_super();
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void CommandDeleteGridColumnsArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// required uint32 location = 2;
inline bool CommandDeleteGridColumnsArchive::has_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommandDeleteGridColumnsArchive::set_has_location() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommandDeleteGridColumnsArchive::clear_has_location() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommandDeleteGridColumnsArchive::clear_location() {
  location_ = 0u;
  clear_has_location();
}
inline ::google::protobuf::uint32 CommandDeleteGridColumnsArchive::location() const {
  return location_;
}
inline void CommandDeleteGridColumnsArchive::set_location(::google::protobuf::uint32 value) {
  set_has_location();
  location_ = value;
}

// required uint32 length = 3;
inline bool CommandDeleteGridColumnsArchive::has_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommandDeleteGridColumnsArchive::set_has_length() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommandDeleteGridColumnsArchive::clear_has_length() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommandDeleteGridColumnsArchive::clear_length() {
  length_ = 0u;
  clear_has_length();
}
inline ::google::protobuf::uint32 CommandDeleteGridColumnsArchive::length() const {
  return length_;
}
inline void CommandDeleteGridColumnsArchive::set_length(::google::protobuf::uint32 value) {
  set_has_length();
  length_ = value;
}

// repeated string names = 4;
inline int CommandDeleteGridColumnsArchive::names_size() const {
  return names_.size();
}
inline void CommandDeleteGridColumnsArchive::clear_names() {
  names_.Clear();
}
inline const ::std::string& CommandDeleteGridColumnsArchive::names(int index) const {
  return names_.Get(index);
}
inline ::std::string* CommandDeleteGridColumnsArchive::mutable_names(int index) {
  return names_.Mutable(index);
}
inline void CommandDeleteGridColumnsArchive::set_names(int index, const ::std::string& value) {
  names_.Mutable(index)->assign(value);
}
inline void CommandDeleteGridColumnsArchive::set_names(int index, const char* value) {
  names_.Mutable(index)->assign(value);
}
inline void CommandDeleteGridColumnsArchive::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommandDeleteGridColumnsArchive::add_names() {
  return names_.Add();
}
inline void CommandDeleteGridColumnsArchive::add_names(const ::std::string& value) {
  names_.Add()->assign(value);
}
inline void CommandDeleteGridColumnsArchive::add_names(const char* value) {
  names_.Add()->assign(value);
}
inline void CommandDeleteGridColumnsArchive::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CommandDeleteGridColumnsArchive::names() const {
  return names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CommandDeleteGridColumnsArchive::mutable_names() {
  return &names_;
}

// repeated .TSCH.CommandDeleteGridColumnsArchive.ValueRow value_row = 6;
inline int CommandDeleteGridColumnsArchive::value_row_size() const {
  return value_row_.size();
}
inline void CommandDeleteGridColumnsArchive::clear_value_row() {
  value_row_.Clear();
}
inline const ::TSCH::CommandDeleteGridColumnsArchive_ValueRow& CommandDeleteGridColumnsArchive::value_row(int index) const {
  return value_row_.Get(index);
}
inline ::TSCH::CommandDeleteGridColumnsArchive_ValueRow* CommandDeleteGridColumnsArchive::mutable_value_row(int index) {
  return value_row_.Mutable(index);
}
inline ::TSCH::CommandDeleteGridColumnsArchive_ValueRow* CommandDeleteGridColumnsArchive::add_value_row() {
  return value_row_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSCH::CommandDeleteGridColumnsArchive_ValueRow >&
CommandDeleteGridColumnsArchive::value_row() const {
  return value_row_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSCH::CommandDeleteGridColumnsArchive_ValueRow >*
CommandDeleteGridColumnsArchive::mutable_value_row() {
  return &value_row_;
}

// optional bool removed_all_columns = 7;
inline bool CommandDeleteGridColumnsArchive::has_removed_all_columns() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CommandDeleteGridColumnsArchive::set_has_removed_all_columns() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CommandDeleteGridColumnsArchive::clear_has_removed_all_columns() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CommandDeleteGridColumnsArchive::clear_removed_all_columns() {
  removed_all_columns_ = false;
  clear_has_removed_all_columns();
}
inline bool CommandDeleteGridColumnsArchive::removed_all_columns() const {
  return removed_all_columns_;
}
inline void CommandDeleteGridColumnsArchive::set_removed_all_columns(bool value) {
  set_has_removed_all_columns();
  removed_all_columns_ = value;
}

// repeated string row_names = 8;
inline int CommandDeleteGridColumnsArchive::row_names_size() const {
  return row_names_.size();
}
inline void CommandDeleteGridColumnsArchive::clear_row_names() {
  row_names_.Clear();
}
inline const ::std::string& CommandDeleteGridColumnsArchive::row_names(int index) const {
  return row_names_.Get(index);
}
inline ::std::string* CommandDeleteGridColumnsArchive::mutable_row_names(int index) {
  return row_names_.Mutable(index);
}
inline void CommandDeleteGridColumnsArchive::set_row_names(int index, const ::std::string& value) {
  row_names_.Mutable(index)->assign(value);
}
inline void CommandDeleteGridColumnsArchive::set_row_names(int index, const char* value) {
  row_names_.Mutable(index)->assign(value);
}
inline void CommandDeleteGridColumnsArchive::set_row_names(int index, const char* value, size_t size) {
  row_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommandDeleteGridColumnsArchive::add_row_names() {
  return row_names_.Add();
}
inline void CommandDeleteGridColumnsArchive::add_row_names(const ::std::string& value) {
  row_names_.Add()->assign(value);
}
inline void CommandDeleteGridColumnsArchive::add_row_names(const char* value) {
  row_names_.Add()->assign(value);
}
inline void CommandDeleteGridColumnsArchive::add_row_names(const char* value, size_t size) {
  row_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CommandDeleteGridColumnsArchive::row_names() const {
  return row_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CommandDeleteGridColumnsArchive::mutable_row_names() {
  return &row_names_;
}

// -------------------------------------------------------------------

// CommandSetPreviewLocArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandSetPreviewLocArchive::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommandSetPreviewLocArchive::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommandSetPreviewLocArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommandSetPreviewLocArchive::clear_super() {
  if (super_ != NULL) super_->::TSCH::ChartCommandArchive::Clear();
  clear_has_super();
}
inline const ::TSCH::ChartCommandArchive& CommandSetPreviewLocArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSCH::ChartCommandArchive* CommandSetPreviewLocArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSCH::ChartCommandArchive;
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandSetPreviewLocArchive::release_super() {
  clear_has_super();
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void CommandSetPreviewLocArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// required .TSP.Point old_loc = 2;
inline bool CommandSetPreviewLocArchive::has_old_loc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommandSetPreviewLocArchive::set_has_old_loc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommandSetPreviewLocArchive::clear_has_old_loc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommandSetPreviewLocArchive::clear_old_loc() {
  if (old_loc_ != NULL) old_loc_->::TSP::Point::Clear();
  clear_has_old_loc();
}
inline const ::TSP::Point& CommandSetPreviewLocArchive::old_loc() const {
  return old_loc_ != NULL ? *old_loc_ : *default_instance_->old_loc_;
}
inline ::TSP::Point* CommandSetPreviewLocArchive::mutable_old_loc() {
  set_has_old_loc();
  if (old_loc_ == NULL) old_loc_ = new ::TSP::Point;
  return old_loc_;
}
inline ::TSP::Point* CommandSetPreviewLocArchive::release_old_loc() {
  clear_has_old_loc();
  ::TSP::Point* temp = old_loc_;
  old_loc_ = NULL;
  return temp;
}
inline void CommandSetPreviewLocArchive::set_allocated_old_loc(::TSP::Point* old_loc) {
  delete old_loc_;
  old_loc_ = old_loc;
  if (old_loc) {
    set_has_old_loc();
  } else {
    clear_has_old_loc();
  }
}

// required .TSP.Point new_loc = 3;
inline bool CommandSetPreviewLocArchive::has_new_loc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommandSetPreviewLocArchive::set_has_new_loc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommandSetPreviewLocArchive::clear_has_new_loc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommandSetPreviewLocArchive::clear_new_loc() {
  if (new_loc_ != NULL) new_loc_->::TSP::Point::Clear();
  clear_has_new_loc();
}
inline const ::TSP::Point& CommandSetPreviewLocArchive::new_loc() const {
  return new_loc_ != NULL ? *new_loc_ : *default_instance_->new_loc_;
}
inline ::TSP::Point* CommandSetPreviewLocArchive::mutable_new_loc() {
  set_has_new_loc();
  if (new_loc_ == NULL) new_loc_ = new ::TSP::Point;
  return new_loc_;
}
inline ::TSP::Point* CommandSetPreviewLocArchive::release_new_loc() {
  clear_has_new_loc();
  ::TSP::Point* temp = new_loc_;
  new_loc_ = NULL;
  return temp;
}
inline void CommandSetPreviewLocArchive::set_allocated_new_loc(::TSP::Point* new_loc) {
  delete new_loc_;
  new_loc_ = new_loc;
  if (new_loc) {
    set_has_new_loc();
  } else {
    clear_has_new_loc();
  }
}

// -------------------------------------------------------------------

// CommandSetGridValueArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandSetGridValueArchive::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommandSetGridValueArchive::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommandSetGridValueArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommandSetGridValueArchive::clear_super() {
  if (super_ != NULL) super_->::TSCH::ChartCommandArchive::Clear();
  clear_has_super();
}
inline const ::TSCH::ChartCommandArchive& CommandSetGridValueArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSCH::ChartCommandArchive* CommandSetGridValueArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSCH::ChartCommandArchive;
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandSetGridValueArchive::release_super() {
  clear_has_super();
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void CommandSetGridValueArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// required uint32 rowindex = 2;
inline bool CommandSetGridValueArchive::has_rowindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommandSetGridValueArchive::set_has_rowindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommandSetGridValueArchive::clear_has_rowindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommandSetGridValueArchive::clear_rowindex() {
  rowindex_ = 0u;
  clear_has_rowindex();
}
inline ::google::protobuf::uint32 CommandSetGridValueArchive::rowindex() const {
  return rowindex_;
}
inline void CommandSetGridValueArchive::set_rowindex(::google::protobuf::uint32 value) {
  set_has_rowindex();
  rowindex_ = value;
}

// required uint32 columnindex = 3;
inline bool CommandSetGridValueArchive::has_columnindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommandSetGridValueArchive::set_has_columnindex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommandSetGridValueArchive::clear_has_columnindex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommandSetGridValueArchive::clear_columnindex() {
  columnindex_ = 0u;
  clear_has_columnindex();
}
inline ::google::protobuf::uint32 CommandSetGridValueArchive::columnindex() const {
  return columnindex_;
}
inline void CommandSetGridValueArchive::set_columnindex(::google::protobuf::uint32 value) {
  set_has_columnindex();
  columnindex_ = value;
}

// required double oldvalue = 4;
inline bool CommandSetGridValueArchive::has_oldvalue() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CommandSetGridValueArchive::set_has_oldvalue() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CommandSetGridValueArchive::clear_has_oldvalue() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CommandSetGridValueArchive::clear_oldvalue() {
  oldvalue_ = 0;
  clear_has_oldvalue();
}
inline double CommandSetGridValueArchive::oldvalue() const {
  return oldvalue_;
}
inline void CommandSetGridValueArchive::set_oldvalue(double value) {
  set_has_oldvalue();
  oldvalue_ = value;
}

// required double newvalue = 5;
inline bool CommandSetGridValueArchive::has_newvalue() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CommandSetGridValueArchive::set_has_newvalue() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CommandSetGridValueArchive::clear_has_newvalue() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CommandSetGridValueArchive::clear_newvalue() {
  newvalue_ = 0;
  clear_has_newvalue();
}
inline double CommandSetGridValueArchive::newvalue() const {
  return newvalue_;
}
inline void CommandSetGridValueArchive::set_newvalue(double value) {
  set_has_newvalue();
  newvalue_ = value;
}

// -------------------------------------------------------------------

// CommandSetGridDirectionArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandSetGridDirectionArchive::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommandSetGridDirectionArchive::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommandSetGridDirectionArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommandSetGridDirectionArchive::clear_super() {
  if (super_ != NULL) super_->::TSCH::ChartCommandArchive::Clear();
  clear_has_super();
}
inline const ::TSCH::ChartCommandArchive& CommandSetGridDirectionArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSCH::ChartCommandArchive* CommandSetGridDirectionArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSCH::ChartCommandArchive;
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandSetGridDirectionArchive::release_super() {
  clear_has_super();
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void CommandSetGridDirectionArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// required uint32 old_direction = 2;
inline bool CommandSetGridDirectionArchive::has_old_direction() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommandSetGridDirectionArchive::set_has_old_direction() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommandSetGridDirectionArchive::clear_has_old_direction() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommandSetGridDirectionArchive::clear_old_direction() {
  old_direction_ = 0u;
  clear_has_old_direction();
}
inline ::google::protobuf::uint32 CommandSetGridDirectionArchive::old_direction() const {
  return old_direction_;
}
inline void CommandSetGridDirectionArchive::set_old_direction(::google::protobuf::uint32 value) {
  set_has_old_direction();
  old_direction_ = value;
}

// required uint32 new_direction = 3;
inline bool CommandSetGridDirectionArchive::has_new_direction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommandSetGridDirectionArchive::set_has_new_direction() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommandSetGridDirectionArchive::clear_has_new_direction() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommandSetGridDirectionArchive::clear_new_direction() {
  new_direction_ = 0u;
  clear_has_new_direction();
}
inline ::google::protobuf::uint32 CommandSetGridDirectionArchive::new_direction() const {
  return new_direction_;
}
inline void CommandSetGridDirectionArchive::set_new_direction(::google::protobuf::uint32 value) {
  set_has_new_direction();
  new_direction_ = value;
}

// -------------------------------------------------------------------

// CommandSetSeriesTypeArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandSetSeriesTypeArchive::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommandSetSeriesTypeArchive::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommandSetSeriesTypeArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommandSetSeriesTypeArchive::clear_super() {
  if (super_ != NULL) super_->::TSCH::ChartCommandArchive::Clear();
  clear_has_super();
}
inline const ::TSCH::ChartCommandArchive& CommandSetSeriesTypeArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSCH::ChartCommandArchive* CommandSetSeriesTypeArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSCH::ChartCommandArchive;
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandSetSeriesTypeArchive::release_super() {
  clear_has_super();
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void CommandSetSeriesTypeArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// required uint32 seriesindex = 2;
inline bool CommandSetSeriesTypeArchive::has_seriesindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommandSetSeriesTypeArchive::set_has_seriesindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommandSetSeriesTypeArchive::clear_has_seriesindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommandSetSeriesTypeArchive::clear_seriesindex() {
  seriesindex_ = 0u;
  clear_has_seriesindex();
}
inline ::google::protobuf::uint32 CommandSetSeriesTypeArchive::seriesindex() const {
  return seriesindex_;
}
inline void CommandSetSeriesTypeArchive::set_seriesindex(::google::protobuf::uint32 value) {
  set_has_seriesindex();
  seriesindex_ = value;
}

// required uint32 oldtype = 3;
inline bool CommandSetSeriesTypeArchive::has_oldtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommandSetSeriesTypeArchive::set_has_oldtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommandSetSeriesTypeArchive::clear_has_oldtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommandSetSeriesTypeArchive::clear_oldtype() {
  oldtype_ = 0u;
  clear_has_oldtype();
}
inline ::google::protobuf::uint32 CommandSetSeriesTypeArchive::oldtype() const {
  return oldtype_;
}
inline void CommandSetSeriesTypeArchive::set_oldtype(::google::protobuf::uint32 value) {
  set_has_oldtype();
  oldtype_ = value;
}

// required uint32 newtype = 4;
inline bool CommandSetSeriesTypeArchive::has_newtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CommandSetSeriesTypeArchive::set_has_newtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CommandSetSeriesTypeArchive::clear_has_newtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CommandSetSeriesTypeArchive::clear_newtype() {
  newtype_ = 0u;
  clear_has_newtype();
}
inline ::google::protobuf::uint32 CommandSetSeriesTypeArchive::newtype() const {
  return newtype_;
}
inline void CommandSetSeriesTypeArchive::set_newtype(::google::protobuf::uint32 value) {
  set_has_newtype();
  newtype_ = value;
}

// -------------------------------------------------------------------

// CommandSetScatterFormatArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandSetScatterFormatArchive::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommandSetScatterFormatArchive::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommandSetScatterFormatArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommandSetScatterFormatArchive::clear_super() {
  if (super_ != NULL) super_->::TSCH::ChartCommandArchive::Clear();
  clear_has_super();
}
inline const ::TSCH::ChartCommandArchive& CommandSetScatterFormatArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSCH::ChartCommandArchive* CommandSetScatterFormatArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSCH::ChartCommandArchive;
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandSetScatterFormatArchive::release_super() {
  clear_has_super();
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void CommandSetScatterFormatArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// required uint32 oldformat = 3;
inline bool CommandSetScatterFormatArchive::has_oldformat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommandSetScatterFormatArchive::set_has_oldformat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommandSetScatterFormatArchive::clear_has_oldformat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommandSetScatterFormatArchive::clear_oldformat() {
  oldformat_ = 0u;
  clear_has_oldformat();
}
inline ::google::protobuf::uint32 CommandSetScatterFormatArchive::oldformat() const {
  return oldformat_;
}
inline void CommandSetScatterFormatArchive::set_oldformat(::google::protobuf::uint32 value) {
  set_has_oldformat();
  oldformat_ = value;
}

// required uint32 newformat = 4;
inline bool CommandSetScatterFormatArchive::has_newformat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommandSetScatterFormatArchive::set_has_newformat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommandSetScatterFormatArchive::clear_has_newformat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommandSetScatterFormatArchive::clear_newformat() {
  newformat_ = 0u;
  clear_has_newformat();
}
inline ::google::protobuf::uint32 CommandSetScatterFormatArchive::newformat() const {
  return newformat_;
}
inline void CommandSetScatterFormatArchive::set_newformat(::google::protobuf::uint32 value) {
  set_has_newformat();
  newformat_ = value;
}

// -------------------------------------------------------------------

// CommandSetMultiDataSetIndexArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandSetMultiDataSetIndexArchive::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommandSetMultiDataSetIndexArchive::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommandSetMultiDataSetIndexArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommandSetMultiDataSetIndexArchive::clear_super() {
  if (super_ != NULL) super_->::TSCH::ChartCommandArchive::Clear();
  clear_has_super();
}
inline const ::TSCH::ChartCommandArchive& CommandSetMultiDataSetIndexArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSCH::ChartCommandArchive* CommandSetMultiDataSetIndexArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSCH::ChartCommandArchive;
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandSetMultiDataSetIndexArchive::release_super() {
  clear_has_super();
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void CommandSetMultiDataSetIndexArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// required uint32 oldindex = 2;
inline bool CommandSetMultiDataSetIndexArchive::has_oldindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommandSetMultiDataSetIndexArchive::set_has_oldindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommandSetMultiDataSetIndexArchive::clear_has_oldindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommandSetMultiDataSetIndexArchive::clear_oldindex() {
  oldindex_ = 0u;
  clear_has_oldindex();
}
inline ::google::protobuf::uint32 CommandSetMultiDataSetIndexArchive::oldindex() const {
  return oldindex_;
}
inline void CommandSetMultiDataSetIndexArchive::set_oldindex(::google::protobuf::uint32 value) {
  set_has_oldindex();
  oldindex_ = value;
}

// required uint32 newindex = 3;
inline bool CommandSetMultiDataSetIndexArchive::has_newindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommandSetMultiDataSetIndexArchive::set_has_newindex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommandSetMultiDataSetIndexArchive::clear_has_newindex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommandSetMultiDataSetIndexArchive::clear_newindex() {
  newindex_ = 0u;
  clear_has_newindex();
}
inline ::google::protobuf::uint32 CommandSetMultiDataSetIndexArchive::newindex() const {
  return newindex_;
}
inline void CommandSetMultiDataSetIndexArchive::set_newindex(::google::protobuf::uint32 value) {
  set_has_newindex();
  newindex_ = value;
}

// -------------------------------------------------------------------

// CommandSetLegendFrameArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandSetLegendFrameArchive::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommandSetLegendFrameArchive::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommandSetLegendFrameArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommandSetLegendFrameArchive::clear_super() {
  if (super_ != NULL) super_->::TSCH::ChartCommandArchive::Clear();
  clear_has_super();
}
inline const ::TSCH::ChartCommandArchive& CommandSetLegendFrameArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSCH::ChartCommandArchive* CommandSetLegendFrameArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSCH::ChartCommandArchive;
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandSetLegendFrameArchive::release_super() {
  clear_has_super();
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void CommandSetLegendFrameArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// required .TSCH.RectArchive old_legend_frame = 2;
inline bool CommandSetLegendFrameArchive::has_old_legend_frame() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommandSetLegendFrameArchive::set_has_old_legend_frame() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommandSetLegendFrameArchive::clear_has_old_legend_frame() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommandSetLegendFrameArchive::clear_old_legend_frame() {
  if (old_legend_frame_ != NULL) old_legend_frame_->::TSCH::RectArchive::Clear();
  clear_has_old_legend_frame();
}
inline const ::TSCH::RectArchive& CommandSetLegendFrameArchive::old_legend_frame() const {
  return old_legend_frame_ != NULL ? *old_legend_frame_ : *default_instance_->old_legend_frame_;
}
inline ::TSCH::RectArchive* CommandSetLegendFrameArchive::mutable_old_legend_frame() {
  set_has_old_legend_frame();
  if (old_legend_frame_ == NULL) old_legend_frame_ = new ::TSCH::RectArchive;
  return old_legend_frame_;
}
inline ::TSCH::RectArchive* CommandSetLegendFrameArchive::release_old_legend_frame() {
  clear_has_old_legend_frame();
  ::TSCH::RectArchive* temp = old_legend_frame_;
  old_legend_frame_ = NULL;
  return temp;
}
inline void CommandSetLegendFrameArchive::set_allocated_old_legend_frame(::TSCH::RectArchive* old_legend_frame) {
  delete old_legend_frame_;
  old_legend_frame_ = old_legend_frame;
  if (old_legend_frame) {
    set_has_old_legend_frame();
  } else {
    clear_has_old_legend_frame();
  }
}

// required .TSCH.RectArchive new_legend_frame = 3;
inline bool CommandSetLegendFrameArchive::has_new_legend_frame() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommandSetLegendFrameArchive::set_has_new_legend_frame() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommandSetLegendFrameArchive::clear_has_new_legend_frame() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommandSetLegendFrameArchive::clear_new_legend_frame() {
  if (new_legend_frame_ != NULL) new_legend_frame_->::TSCH::RectArchive::Clear();
  clear_has_new_legend_frame();
}
inline const ::TSCH::RectArchive& CommandSetLegendFrameArchive::new_legend_frame() const {
  return new_legend_frame_ != NULL ? *new_legend_frame_ : *default_instance_->new_legend_frame_;
}
inline ::TSCH::RectArchive* CommandSetLegendFrameArchive::mutable_new_legend_frame() {
  set_has_new_legend_frame();
  if (new_legend_frame_ == NULL) new_legend_frame_ = new ::TSCH::RectArchive;
  return new_legend_frame_;
}
inline ::TSCH::RectArchive* CommandSetLegendFrameArchive::release_new_legend_frame() {
  clear_has_new_legend_frame();
  ::TSCH::RectArchive* temp = new_legend_frame_;
  new_legend_frame_ = NULL;
  return temp;
}
inline void CommandSetLegendFrameArchive::set_allocated_new_legend_frame(::TSCH::RectArchive* new_legend_frame) {
  delete new_legend_frame_;
  new_legend_frame_ = new_legend_frame;
  if (new_legend_frame) {
    set_has_new_legend_frame();
  } else {
    clear_has_new_legend_frame();
  }
}

// -------------------------------------------------------------------

// CommandSetPieWedgeExplosion

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandSetPieWedgeExplosion::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommandSetPieWedgeExplosion::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommandSetPieWedgeExplosion::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommandSetPieWedgeExplosion::clear_super() {
  if (super_ != NULL) super_->::TSCH::ChartCommandArchive::Clear();
  clear_has_super();
}
inline const ::TSCH::ChartCommandArchive& CommandSetPieWedgeExplosion::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSCH::ChartCommandArchive* CommandSetPieWedgeExplosion::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSCH::ChartCommandArchive;
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandSetPieWedgeExplosion::release_super() {
  clear_has_super();
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void CommandSetPieWedgeExplosion::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// optional .TSP.Reference info_geometry_command = 2;
inline bool CommandSetPieWedgeExplosion::has_info_geometry_command() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommandSetPieWedgeExplosion::set_has_info_geometry_command() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommandSetPieWedgeExplosion::clear_has_info_geometry_command() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommandSetPieWedgeExplosion::clear_info_geometry_command() {
  if (info_geometry_command_ != NULL) info_geometry_command_->::TSP::Reference::Clear();
  clear_has_info_geometry_command();
}
inline const ::TSP::Reference& CommandSetPieWedgeExplosion::info_geometry_command() const {
  return info_geometry_command_ != NULL ? *info_geometry_command_ : *default_instance_->info_geometry_command_;
}
inline ::TSP::Reference* CommandSetPieWedgeExplosion::mutable_info_geometry_command() {
  set_has_info_geometry_command();
  if (info_geometry_command_ == NULL) info_geometry_command_ = new ::TSP::Reference;
  return info_geometry_command_;
}
inline ::TSP::Reference* CommandSetPieWedgeExplosion::release_info_geometry_command() {
  clear_has_info_geometry_command();
  ::TSP::Reference* temp = info_geometry_command_;
  info_geometry_command_ = NULL;
  return temp;
}
inline void CommandSetPieWedgeExplosion::set_allocated_info_geometry_command(::TSP::Reference* info_geometry_command) {
  delete info_geometry_command_;
  info_geometry_command_ = info_geometry_command;
  if (info_geometry_command) {
    set_has_info_geometry_command();
  } else {
    clear_has_info_geometry_command();
  }
}

// optional .TSP.Reference style_mutation_command = 3;
inline bool CommandSetPieWedgeExplosion::has_style_mutation_command() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommandSetPieWedgeExplosion::set_has_style_mutation_command() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommandSetPieWedgeExplosion::clear_has_style_mutation_command() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommandSetPieWedgeExplosion::clear_style_mutation_command() {
  if (style_mutation_command_ != NULL) style_mutation_command_->::TSP::Reference::Clear();
  clear_has_style_mutation_command();
}
inline const ::TSP::Reference& CommandSetPieWedgeExplosion::style_mutation_command() const {
  return style_mutation_command_ != NULL ? *style_mutation_command_ : *default_instance_->style_mutation_command_;
}
inline ::TSP::Reference* CommandSetPieWedgeExplosion::mutable_style_mutation_command() {
  set_has_style_mutation_command();
  if (style_mutation_command_ == NULL) style_mutation_command_ = new ::TSP::Reference;
  return style_mutation_command_;
}
inline ::TSP::Reference* CommandSetPieWedgeExplosion::release_style_mutation_command() {
  clear_has_style_mutation_command();
  ::TSP::Reference* temp = style_mutation_command_;
  style_mutation_command_ = NULL;
  return temp;
}
inline void CommandSetPieWedgeExplosion::set_allocated_style_mutation_command(::TSP::Reference* style_mutation_command) {
  delete style_mutation_command_;
  style_mutation_command_ = style_mutation_command;
  if (style_mutation_command) {
    set_has_style_mutation_command();
  } else {
    clear_has_style_mutation_command();
  }
}

// optional .TSP.Reference anchor_attachment_command = 4;
inline bool CommandSetPieWedgeExplosion::has_anchor_attachment_command() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CommandSetPieWedgeExplosion::set_has_anchor_attachment_command() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CommandSetPieWedgeExplosion::clear_has_anchor_attachment_command() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CommandSetPieWedgeExplosion::clear_anchor_attachment_command() {
  if (anchor_attachment_command_ != NULL) anchor_attachment_command_->::TSP::Reference::Clear();
  clear_has_anchor_attachment_command();
}
inline const ::TSP::Reference& CommandSetPieWedgeExplosion::anchor_attachment_command() const {
  return anchor_attachment_command_ != NULL ? *anchor_attachment_command_ : *default_instance_->anchor_attachment_command_;
}
inline ::TSP::Reference* CommandSetPieWedgeExplosion::mutable_anchor_attachment_command() {
  set_has_anchor_attachment_command();
  if (anchor_attachment_command_ == NULL) anchor_attachment_command_ = new ::TSP::Reference;
  return anchor_attachment_command_;
}
inline ::TSP::Reference* CommandSetPieWedgeExplosion::release_anchor_attachment_command() {
  clear_has_anchor_attachment_command();
  ::TSP::Reference* temp = anchor_attachment_command_;
  anchor_attachment_command_ = NULL;
  return temp;
}
inline void CommandSetPieWedgeExplosion::set_allocated_anchor_attachment_command(::TSP::Reference* anchor_attachment_command) {
  delete anchor_attachment_command_;
  anchor_attachment_command_ = anchor_attachment_command;
  if (anchor_attachment_command) {
    set_has_anchor_attachment_command();
  } else {
    clear_has_anchor_attachment_command();
  }
}

// -------------------------------------------------------------------

// SynchronousCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool SynchronousCommandArchive::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SynchronousCommandArchive::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SynchronousCommandArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SynchronousCommandArchive::clear_super() {
  if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
  clear_has_super();
}
inline const ::TSK::CommandArchive& SynchronousCommandArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSK::CommandArchive* SynchronousCommandArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSK::CommandArchive;
  return super_;
}
inline ::TSK::CommandArchive* SynchronousCommandArchive::release_super() {
  clear_has_super();
  ::TSK::CommandArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void SynchronousCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// required .TSP.Reference command = 2;
inline bool SynchronousCommandArchive::has_command() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SynchronousCommandArchive::set_has_command() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SynchronousCommandArchive::clear_has_command() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SynchronousCommandArchive::clear_command() {
  if (command_ != NULL) command_->::TSP::Reference::Clear();
  clear_has_command();
}
inline const ::TSP::Reference& SynchronousCommandArchive::command() const {
  return command_ != NULL ? *command_ : *default_instance_->command_;
}
inline ::TSP::Reference* SynchronousCommandArchive::mutable_command() {
  set_has_command();
  if (command_ == NULL) command_ = new ::TSP::Reference;
  return command_;
}
inline ::TSP::Reference* SynchronousCommandArchive::release_command() {
  clear_has_command();
  ::TSP::Reference* temp = command_;
  command_ = NULL;
  return temp;
}
inline void SynchronousCommandArchive::set_allocated_command(::TSP::Reference* command) {
  delete command_;
  command_ = command;
  if (command) {
    set_has_command();
  } else {
    clear_has_command();
  }
}

// -------------------------------------------------------------------

// CommandReplaceAllArchive

// required .TSK.ReplaceAllChildCommandArchive super = 1;
inline bool CommandReplaceAllArchive::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommandReplaceAllArchive::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommandReplaceAllArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommandReplaceAllArchive::clear_super() {
  if (super_ != NULL) super_->::TSK::ReplaceAllChildCommandArchive::Clear();
  clear_has_super();
}
inline const ::TSK::ReplaceAllChildCommandArchive& CommandReplaceAllArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSK::ReplaceAllChildCommandArchive* CommandReplaceAllArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSK::ReplaceAllChildCommandArchive;
  return super_;
}
inline ::TSK::ReplaceAllChildCommandArchive* CommandReplaceAllArchive::release_super() {
  clear_has_super();
  ::TSK::ReplaceAllChildCommandArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void CommandReplaceAllArchive::set_allocated_super(::TSK::ReplaceAllChildCommandArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// required .TSP.Reference info = 2;
inline bool CommandReplaceAllArchive::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommandReplaceAllArchive::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommandReplaceAllArchive::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommandReplaceAllArchive::clear_info() {
  if (info_ != NULL) info_->::TSP::Reference::Clear();
  clear_has_info();
}
inline const ::TSP::Reference& CommandReplaceAllArchive::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::TSP::Reference* CommandReplaceAllArchive::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::TSP::Reference;
  return info_;
}
inline ::TSP::Reference* CommandReplaceAllArchive::release_info() {
  clear_has_info();
  ::TSP::Reference* temp = info_;
  info_ = NULL;
  return temp;
}
inline void CommandReplaceAllArchive::set_allocated_info(::TSP::Reference* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// repeated .TSP.Reference commands = 3;
inline int CommandReplaceAllArchive::commands_size() const {
  return commands_.size();
}
inline void CommandReplaceAllArchive::clear_commands() {
  commands_.Clear();
}
inline const ::TSP::Reference& CommandReplaceAllArchive::commands(int index) const {
  return commands_.Get(index);
}
inline ::TSP::Reference* CommandReplaceAllArchive::mutable_commands(int index) {
  return commands_.Mutable(index);
}
inline ::TSP::Reference* CommandReplaceAllArchive::add_commands() {
  return commands_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
CommandReplaceAllArchive::commands() const {
  return commands_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
CommandReplaceAllArchive::mutable_commands() {
  return &commands_;
}

// -------------------------------------------------------------------

// CommandChartApplyTheme

// required .TSS.ApplyThemeChildCommandArchive super = 1;
inline bool CommandChartApplyTheme::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommandChartApplyTheme::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommandChartApplyTheme::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommandChartApplyTheme::clear_super() {
  if (super_ != NULL) super_->::TSS::ApplyThemeChildCommandArchive::Clear();
  clear_has_super();
}
inline const ::TSS::ApplyThemeChildCommandArchive& CommandChartApplyTheme::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSS::ApplyThemeChildCommandArchive* CommandChartApplyTheme::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSS::ApplyThemeChildCommandArchive;
  return super_;
}
inline ::TSS::ApplyThemeChildCommandArchive* CommandChartApplyTheme::release_super() {
  clear_has_super();
  ::TSS::ApplyThemeChildCommandArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void CommandChartApplyTheme::set_allocated_super(::TSS::ApplyThemeChildCommandArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// required .TSP.Reference info = 2;
inline bool CommandChartApplyTheme::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommandChartApplyTheme::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommandChartApplyTheme::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommandChartApplyTheme::clear_info() {
  if (info_ != NULL) info_->::TSP::Reference::Clear();
  clear_has_info();
}
inline const ::TSP::Reference& CommandChartApplyTheme::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::TSP::Reference* CommandChartApplyTheme::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::TSP::Reference;
  return info_;
}
inline ::TSP::Reference* CommandChartApplyTheme::release_info() {
  clear_has_info();
  ::TSP::Reference* temp = info_;
  info_ = NULL;
  return temp;
}
inline void CommandChartApplyTheme::set_allocated_info(::TSP::Reference* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// optional .TSP.Reference swap_command = 3;
inline bool CommandChartApplyTheme::has_swap_command() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommandChartApplyTheme::set_has_swap_command() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommandChartApplyTheme::clear_has_swap_command() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommandChartApplyTheme::clear_swap_command() {
  if (swap_command_ != NULL) swap_command_->::TSP::Reference::Clear();
  clear_has_swap_command();
}
inline const ::TSP::Reference& CommandChartApplyTheme::swap_command() const {
  return swap_command_ != NULL ? *swap_command_ : *default_instance_->swap_command_;
}
inline ::TSP::Reference* CommandChartApplyTheme::mutable_swap_command() {
  set_has_swap_command();
  if (swap_command_ == NULL) swap_command_ = new ::TSP::Reference;
  return swap_command_;
}
inline ::TSP::Reference* CommandChartApplyTheme::release_swap_command() {
  clear_has_swap_command();
  ::TSP::Reference* temp = swap_command_;
  swap_command_ = NULL;
  return temp;
}
inline void CommandChartApplyTheme::set_allocated_swap_command(::TSP::Reference* swap_command) {
  delete swap_command_;
  swap_command_ = swap_command;
  if (swap_command) {
    set_has_swap_command();
  } else {
    clear_has_swap_command();
  }
}

// optional .TSP.Reference preset = 4;
inline bool CommandChartApplyTheme::has_preset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CommandChartApplyTheme::set_has_preset() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CommandChartApplyTheme::clear_has_preset() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CommandChartApplyTheme::clear_preset() {
  if (preset_ != NULL) preset_->::TSP::Reference::Clear();
  clear_has_preset();
}
inline const ::TSP::Reference& CommandChartApplyTheme::preset() const {
  return preset_ != NULL ? *preset_ : *default_instance_->preset_;
}
inline ::TSP::Reference* CommandChartApplyTheme::mutable_preset() {
  set_has_preset();
  if (preset_ == NULL) preset_ = new ::TSP::Reference;
  return preset_;
}
inline ::TSP::Reference* CommandChartApplyTheme::release_preset() {
  clear_has_preset();
  ::TSP::Reference* temp = preset_;
  preset_ = NULL;
  return temp;
}
inline void CommandChartApplyTheme::set_allocated_preset(::TSP::Reference* preset) {
  delete preset_;
  preset_ = preset;
  if (preset) {
    set_has_preset();
  } else {
    clear_has_preset();
  }
}

// -------------------------------------------------------------------

// CommandChartApplyPreset

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandChartApplyPreset::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommandChartApplyPreset::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommandChartApplyPreset::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommandChartApplyPreset::clear_super() {
  if (super_ != NULL) super_->::TSCH::ChartCommandArchive::Clear();
  clear_has_super();
}
inline const ::TSCH::ChartCommandArchive& CommandChartApplyPreset::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSCH::ChartCommandArchive* CommandChartApplyPreset::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSCH::ChartCommandArchive;
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandChartApplyPreset::release_super() {
  clear_has_super();
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void CommandChartApplyPreset::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// optional .TSP.Reference swap_command = 2;
inline bool CommandChartApplyPreset::has_swap_command() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommandChartApplyPreset::set_has_swap_command() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommandChartApplyPreset::clear_has_swap_command() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommandChartApplyPreset::clear_swap_command() {
  if (swap_command_ != NULL) swap_command_->::TSP::Reference::Clear();
  clear_has_swap_command();
}
inline const ::TSP::Reference& CommandChartApplyPreset::swap_command() const {
  return swap_command_ != NULL ? *swap_command_ : *default_instance_->swap_command_;
}
inline ::TSP::Reference* CommandChartApplyPreset::mutable_swap_command() {
  set_has_swap_command();
  if (swap_command_ == NULL) swap_command_ = new ::TSP::Reference;
  return swap_command_;
}
inline ::TSP::Reference* CommandChartApplyPreset::release_swap_command() {
  clear_has_swap_command();
  ::TSP::Reference* temp = swap_command_;
  swap_command_ = NULL;
  return temp;
}
inline void CommandChartApplyPreset::set_allocated_swap_command(::TSP::Reference* swap_command) {
  delete swap_command_;
  swap_command_ = swap_command;
  if (swap_command) {
    set_has_swap_command();
  } else {
    clear_has_swap_command();
  }
}

// optional .TSP.Reference preset = 3;
inline bool CommandChartApplyPreset::has_preset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommandChartApplyPreset::set_has_preset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommandChartApplyPreset::clear_has_preset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommandChartApplyPreset::clear_preset() {
  if (preset_ != NULL) preset_->::TSP::Reference::Clear();
  clear_has_preset();
}
inline const ::TSP::Reference& CommandChartApplyPreset::preset() const {
  return preset_ != NULL ? *preset_ : *default_instance_->preset_;
}
inline ::TSP::Reference* CommandChartApplyPreset::mutable_preset() {
  set_has_preset();
  if (preset_ == NULL) preset_ = new ::TSP::Reference;
  return preset_;
}
inline ::TSP::Reference* CommandChartApplyPreset::release_preset() {
  clear_has_preset();
  ::TSP::Reference* temp = preset_;
  preset_ = NULL;
  return temp;
}
inline void CommandChartApplyPreset::set_allocated_preset(::TSP::Reference* preset) {
  delete preset_;
  preset_ = preset;
  if (preset) {
    set_has_preset();
  } else {
    clear_has_preset();
  }
}

// optional .TSCH.ApplyPresetBehavior behavior = 4 [default = remove_overrides];
inline bool CommandChartApplyPreset::has_behavior() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CommandChartApplyPreset::set_has_behavior() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CommandChartApplyPreset::clear_has_behavior() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CommandChartApplyPreset::clear_behavior() {
  behavior_ = 1;
  clear_has_behavior();
}
inline ::TSCH::ApplyPresetBehavior CommandChartApplyPreset::behavior() const {
  return static_cast< ::TSCH::ApplyPresetBehavior >(behavior_);
}
inline void CommandChartApplyPreset::set_behavior(::TSCH::ApplyPresetBehavior value) {
  assert(::TSCH::ApplyPresetBehavior_IsValid(value));
  set_has_behavior();
  behavior_ = value;
}

// -------------------------------------------------------------------

// CommandCleanupGeometryArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandCleanupGeometryArchive::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommandCleanupGeometryArchive::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommandCleanupGeometryArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommandCleanupGeometryArchive::clear_super() {
  if (super_ != NULL) super_->::TSCH::ChartCommandArchive::Clear();
  clear_has_super();
}
inline const ::TSCH::ChartCommandArchive& CommandCleanupGeometryArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSCH::ChartCommandArchive* CommandCleanupGeometryArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSCH::ChartCommandArchive;
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandCleanupGeometryArchive::release_super() {
  clear_has_super();
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void CommandCleanupGeometryArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// optional .TSP.Reference info_geometry_command = 2;
inline bool CommandCleanupGeometryArchive::has_info_geometry_command() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommandCleanupGeometryArchive::set_has_info_geometry_command() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommandCleanupGeometryArchive::clear_has_info_geometry_command() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommandCleanupGeometryArchive::clear_info_geometry_command() {
  if (info_geometry_command_ != NULL) info_geometry_command_->::TSP::Reference::Clear();
  clear_has_info_geometry_command();
}
inline const ::TSP::Reference& CommandCleanupGeometryArchive::info_geometry_command() const {
  return info_geometry_command_ != NULL ? *info_geometry_command_ : *default_instance_->info_geometry_command_;
}
inline ::TSP::Reference* CommandCleanupGeometryArchive::mutable_info_geometry_command() {
  set_has_info_geometry_command();
  if (info_geometry_command_ == NULL) info_geometry_command_ = new ::TSP::Reference;
  return info_geometry_command_;
}
inline ::TSP::Reference* CommandCleanupGeometryArchive::release_info_geometry_command() {
  clear_has_info_geometry_command();
  ::TSP::Reference* temp = info_geometry_command_;
  info_geometry_command_ = NULL;
  return temp;
}
inline void CommandCleanupGeometryArchive::set_allocated_info_geometry_command(::TSP::Reference* info_geometry_command) {
  delete info_geometry_command_;
  info_geometry_command_ = info_geometry_command;
  if (info_geometry_command) {
    set_has_info_geometry_command();
  } else {
    clear_has_info_geometry_command();
  }
}

// optional .TSP.Reference anchor_attachment_command = 3;
inline bool CommandCleanupGeometryArchive::has_anchor_attachment_command() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommandCleanupGeometryArchive::set_has_anchor_attachment_command() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommandCleanupGeometryArchive::clear_has_anchor_attachment_command() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommandCleanupGeometryArchive::clear_anchor_attachment_command() {
  if (anchor_attachment_command_ != NULL) anchor_attachment_command_->::TSP::Reference::Clear();
  clear_has_anchor_attachment_command();
}
inline const ::TSP::Reference& CommandCleanupGeometryArchive::anchor_attachment_command() const {
  return anchor_attachment_command_ != NULL ? *anchor_attachment_command_ : *default_instance_->anchor_attachment_command_;
}
inline ::TSP::Reference* CommandCleanupGeometryArchive::mutable_anchor_attachment_command() {
  set_has_anchor_attachment_command();
  if (anchor_attachment_command_ == NULL) anchor_attachment_command_ = new ::TSP::Reference;
  return anchor_attachment_command_;
}
inline ::TSP::Reference* CommandCleanupGeometryArchive::release_anchor_attachment_command() {
  clear_has_anchor_attachment_command();
  ::TSP::Reference* temp = anchor_attachment_command_;
  anchor_attachment_command_ = NULL;
  return temp;
}
inline void CommandCleanupGeometryArchive::set_allocated_anchor_attachment_command(::TSP::Reference* anchor_attachment_command) {
  delete anchor_attachment_command_;
  anchor_attachment_command_ = anchor_attachment_command;
  if (anchor_attachment_command) {
    set_has_anchor_attachment_command();
  } else {
    clear_has_anchor_attachment_command();
  }
}

// optional .TSCH.RectArchive original_legend_rect = 4;
inline bool CommandCleanupGeometryArchive::has_original_legend_rect() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CommandCleanupGeometryArchive::set_has_original_legend_rect() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CommandCleanupGeometryArchive::clear_has_original_legend_rect() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CommandCleanupGeometryArchive::clear_original_legend_rect() {
  if (original_legend_rect_ != NULL) original_legend_rect_->::TSCH::RectArchive::Clear();
  clear_has_original_legend_rect();
}
inline const ::TSCH::RectArchive& CommandCleanupGeometryArchive::original_legend_rect() const {
  return original_legend_rect_ != NULL ? *original_legend_rect_ : *default_instance_->original_legend_rect_;
}
inline ::TSCH::RectArchive* CommandCleanupGeometryArchive::mutable_original_legend_rect() {
  set_has_original_legend_rect();
  if (original_legend_rect_ == NULL) original_legend_rect_ = new ::TSCH::RectArchive;
  return original_legend_rect_;
}
inline ::TSCH::RectArchive* CommandCleanupGeometryArchive::release_original_legend_rect() {
  clear_has_original_legend_rect();
  ::TSCH::RectArchive* temp = original_legend_rect_;
  original_legend_rect_ = NULL;
  return temp;
}
inline void CommandCleanupGeometryArchive::set_allocated_original_legend_rect(::TSCH::RectArchive* original_legend_rect) {
  delete original_legend_rect_;
  original_legend_rect_ = original_legend_rect;
  if (original_legend_rect) {
    set_has_original_legend_rect();
  } else {
    clear_has_original_legend_rect();
  }
}

// -------------------------------------------------------------------

// ChartCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool ChartCommandArchive::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChartCommandArchive::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChartCommandArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChartCommandArchive::clear_super() {
  if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
  clear_has_super();
}
inline const ::TSK::CommandArchive& ChartCommandArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSK::CommandArchive* ChartCommandArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSK::CommandArchive;
  return super_;
}
inline ::TSK::CommandArchive* ChartCommandArchive::release_super() {
  clear_has_super();
  ::TSK::CommandArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void ChartCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// required .TSP.Reference info = 2;
inline bool ChartCommandArchive::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChartCommandArchive::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChartCommandArchive::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChartCommandArchive::clear_info() {
  if (info_ != NULL) info_->::TSP::Reference::Clear();
  clear_has_info();
}
inline const ::TSP::Reference& ChartCommandArchive::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::TSP::Reference* ChartCommandArchive::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::TSP::Reference;
  return info_;
}
inline ::TSP::Reference* ChartCommandArchive::release_info() {
  clear_has_info();
  ::TSP::Reference* temp = info_;
  info_ = NULL;
  return temp;
}
inline void ChartCommandArchive::set_allocated_info(::TSP::Reference* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// optional bool original_dirty_state = 3;
inline bool ChartCommandArchive::has_original_dirty_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChartCommandArchive::set_has_original_dirty_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChartCommandArchive::clear_has_original_dirty_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChartCommandArchive::clear_original_dirty_state() {
  original_dirty_state_ = false;
  clear_has_original_dirty_state();
}
inline bool ChartCommandArchive::original_dirty_state() const {
  return original_dirty_state_;
}
inline void ChartCommandArchive::set_original_dirty_state(bool value) {
  set_has_original_dirty_state();
  original_dirty_state_ = value;
}

// -------------------------------------------------------------------

// CommandReplaceGridValuesArchive_ValueRow

// repeated double value = 1;
inline int CommandReplaceGridValuesArchive_ValueRow::value_size() const {
  return value_.size();
}
inline void CommandReplaceGridValuesArchive_ValueRow::clear_value() {
  value_.Clear();
}
inline double CommandReplaceGridValuesArchive_ValueRow::value(int index) const {
  return value_.Get(index);
}
inline void CommandReplaceGridValuesArchive_ValueRow::set_value(int index, double value) {
  value_.Set(index, value);
}
inline void CommandReplaceGridValuesArchive_ValueRow::add_value(double value) {
  value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
CommandReplaceGridValuesArchive_ValueRow::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedField< double >*
CommandReplaceGridValuesArchive_ValueRow::mutable_value() {
  return &value_;
}

// -------------------------------------------------------------------

// CommandReplaceGridValuesArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandReplaceGridValuesArchive::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommandReplaceGridValuesArchive::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommandReplaceGridValuesArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommandReplaceGridValuesArchive::clear_super() {
  if (super_ != NULL) super_->::TSCH::ChartCommandArchive::Clear();
  clear_has_super();
}
inline const ::TSCH::ChartCommandArchive& CommandReplaceGridValuesArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSCH::ChartCommandArchive* CommandReplaceGridValuesArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSCH::ChartCommandArchive;
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandReplaceGridValuesArchive::release_super() {
  clear_has_super();
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void CommandReplaceGridValuesArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// required uint32 rowindex = 2;
inline bool CommandReplaceGridValuesArchive::has_rowindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommandReplaceGridValuesArchive::set_has_rowindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommandReplaceGridValuesArchive::clear_has_rowindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommandReplaceGridValuesArchive::clear_rowindex() {
  rowindex_ = 0u;
  clear_has_rowindex();
}
inline ::google::protobuf::uint32 CommandReplaceGridValuesArchive::rowindex() const {
  return rowindex_;
}
inline void CommandReplaceGridValuesArchive::set_rowindex(::google::protobuf::uint32 value) {
  set_has_rowindex();
  rowindex_ = value;
}

// required uint32 columnindex = 3;
inline bool CommandReplaceGridValuesArchive::has_columnindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommandReplaceGridValuesArchive::set_has_columnindex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommandReplaceGridValuesArchive::clear_has_columnindex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommandReplaceGridValuesArchive::clear_columnindex() {
  columnindex_ = 0u;
  clear_has_columnindex();
}
inline ::google::protobuf::uint32 CommandReplaceGridValuesArchive::columnindex() const {
  return columnindex_;
}
inline void CommandReplaceGridValuesArchive::set_columnindex(::google::protobuf::uint32 value) {
  set_has_columnindex();
  columnindex_ = value;
}

// repeated .TSCH.CommandReplaceGridValuesArchive.ValueRow old_data_rows = 4;
inline int CommandReplaceGridValuesArchive::old_data_rows_size() const {
  return old_data_rows_.size();
}
inline void CommandReplaceGridValuesArchive::clear_old_data_rows() {
  old_data_rows_.Clear();
}
inline const ::TSCH::CommandReplaceGridValuesArchive_ValueRow& CommandReplaceGridValuesArchive::old_data_rows(int index) const {
  return old_data_rows_.Get(index);
}
inline ::TSCH::CommandReplaceGridValuesArchive_ValueRow* CommandReplaceGridValuesArchive::mutable_old_data_rows(int index) {
  return old_data_rows_.Mutable(index);
}
inline ::TSCH::CommandReplaceGridValuesArchive_ValueRow* CommandReplaceGridValuesArchive::add_old_data_rows() {
  return old_data_rows_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSCH::CommandReplaceGridValuesArchive_ValueRow >&
CommandReplaceGridValuesArchive::old_data_rows() const {
  return old_data_rows_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSCH::CommandReplaceGridValuesArchive_ValueRow >*
CommandReplaceGridValuesArchive::mutable_old_data_rows() {
  return &old_data_rows_;
}

// repeated .TSCH.CommandReplaceGridValuesArchive.ValueRow new_data_rows = 5;
inline int CommandReplaceGridValuesArchive::new_data_rows_size() const {
  return new_data_rows_.size();
}
inline void CommandReplaceGridValuesArchive::clear_new_data_rows() {
  new_data_rows_.Clear();
}
inline const ::TSCH::CommandReplaceGridValuesArchive_ValueRow& CommandReplaceGridValuesArchive::new_data_rows(int index) const {
  return new_data_rows_.Get(index);
}
inline ::TSCH::CommandReplaceGridValuesArchive_ValueRow* CommandReplaceGridValuesArchive::mutable_new_data_rows(int index) {
  return new_data_rows_.Mutable(index);
}
inline ::TSCH::CommandReplaceGridValuesArchive_ValueRow* CommandReplaceGridValuesArchive::add_new_data_rows() {
  return new_data_rows_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSCH::CommandReplaceGridValuesArchive_ValueRow >&
CommandReplaceGridValuesArchive::new_data_rows() const {
  return new_data_rows_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSCH::CommandReplaceGridValuesArchive_ValueRow >*
CommandReplaceGridValuesArchive::mutable_new_data_rows() {
  return &new_data_rows_;
}

// repeated string old_row_names = 6;
inline int CommandReplaceGridValuesArchive::old_row_names_size() const {
  return old_row_names_.size();
}
inline void CommandReplaceGridValuesArchive::clear_old_row_names() {
  old_row_names_.Clear();
}
inline const ::std::string& CommandReplaceGridValuesArchive::old_row_names(int index) const {
  return old_row_names_.Get(index);
}
inline ::std::string* CommandReplaceGridValuesArchive::mutable_old_row_names(int index) {
  return old_row_names_.Mutable(index);
}
inline void CommandReplaceGridValuesArchive::set_old_row_names(int index, const ::std::string& value) {
  old_row_names_.Mutable(index)->assign(value);
}
inline void CommandReplaceGridValuesArchive::set_old_row_names(int index, const char* value) {
  old_row_names_.Mutable(index)->assign(value);
}
inline void CommandReplaceGridValuesArchive::set_old_row_names(int index, const char* value, size_t size) {
  old_row_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommandReplaceGridValuesArchive::add_old_row_names() {
  return old_row_names_.Add();
}
inline void CommandReplaceGridValuesArchive::add_old_row_names(const ::std::string& value) {
  old_row_names_.Add()->assign(value);
}
inline void CommandReplaceGridValuesArchive::add_old_row_names(const char* value) {
  old_row_names_.Add()->assign(value);
}
inline void CommandReplaceGridValuesArchive::add_old_row_names(const char* value, size_t size) {
  old_row_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CommandReplaceGridValuesArchive::old_row_names() const {
  return old_row_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CommandReplaceGridValuesArchive::mutable_old_row_names() {
  return &old_row_names_;
}

// repeated string new_row_names = 7;
inline int CommandReplaceGridValuesArchive::new_row_names_size() const {
  return new_row_names_.size();
}
inline void CommandReplaceGridValuesArchive::clear_new_row_names() {
  new_row_names_.Clear();
}
inline const ::std::string& CommandReplaceGridValuesArchive::new_row_names(int index) const {
  return new_row_names_.Get(index);
}
inline ::std::string* CommandReplaceGridValuesArchive::mutable_new_row_names(int index) {
  return new_row_names_.Mutable(index);
}
inline void CommandReplaceGridValuesArchive::set_new_row_names(int index, const ::std::string& value) {
  new_row_names_.Mutable(index)->assign(value);
}
inline void CommandReplaceGridValuesArchive::set_new_row_names(int index, const char* value) {
  new_row_names_.Mutable(index)->assign(value);
}
inline void CommandReplaceGridValuesArchive::set_new_row_names(int index, const char* value, size_t size) {
  new_row_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommandReplaceGridValuesArchive::add_new_row_names() {
  return new_row_names_.Add();
}
inline void CommandReplaceGridValuesArchive::add_new_row_names(const ::std::string& value) {
  new_row_names_.Add()->assign(value);
}
inline void CommandReplaceGridValuesArchive::add_new_row_names(const char* value) {
  new_row_names_.Add()->assign(value);
}
inline void CommandReplaceGridValuesArchive::add_new_row_names(const char* value, size_t size) {
  new_row_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CommandReplaceGridValuesArchive::new_row_names() const {
  return new_row_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CommandReplaceGridValuesArchive::mutable_new_row_names() {
  return &new_row_names_;
}

// repeated string old_col_names = 8;
inline int CommandReplaceGridValuesArchive::old_col_names_size() const {
  return old_col_names_.size();
}
inline void CommandReplaceGridValuesArchive::clear_old_col_names() {
  old_col_names_.Clear();
}
inline const ::std::string& CommandReplaceGridValuesArchive::old_col_names(int index) const {
  return old_col_names_.Get(index);
}
inline ::std::string* CommandReplaceGridValuesArchive::mutable_old_col_names(int index) {
  return old_col_names_.Mutable(index);
}
inline void CommandReplaceGridValuesArchive::set_old_col_names(int index, const ::std::string& value) {
  old_col_names_.Mutable(index)->assign(value);
}
inline void CommandReplaceGridValuesArchive::set_old_col_names(int index, const char* value) {
  old_col_names_.Mutable(index)->assign(value);
}
inline void CommandReplaceGridValuesArchive::set_old_col_names(int index, const char* value, size_t size) {
  old_col_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommandReplaceGridValuesArchive::add_old_col_names() {
  return old_col_names_.Add();
}
inline void CommandReplaceGridValuesArchive::add_old_col_names(const ::std::string& value) {
  old_col_names_.Add()->assign(value);
}
inline void CommandReplaceGridValuesArchive::add_old_col_names(const char* value) {
  old_col_names_.Add()->assign(value);
}
inline void CommandReplaceGridValuesArchive::add_old_col_names(const char* value, size_t size) {
  old_col_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CommandReplaceGridValuesArchive::old_col_names() const {
  return old_col_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CommandReplaceGridValuesArchive::mutable_old_col_names() {
  return &old_col_names_;
}

// repeated string new_col_names = 9;
inline int CommandReplaceGridValuesArchive::new_col_names_size() const {
  return new_col_names_.size();
}
inline void CommandReplaceGridValuesArchive::clear_new_col_names() {
  new_col_names_.Clear();
}
inline const ::std::string& CommandReplaceGridValuesArchive::new_col_names(int index) const {
  return new_col_names_.Get(index);
}
inline ::std::string* CommandReplaceGridValuesArchive::mutable_new_col_names(int index) {
  return new_col_names_.Mutable(index);
}
inline void CommandReplaceGridValuesArchive::set_new_col_names(int index, const ::std::string& value) {
  new_col_names_.Mutable(index)->assign(value);
}
inline void CommandReplaceGridValuesArchive::set_new_col_names(int index, const char* value) {
  new_col_names_.Mutable(index)->assign(value);
}
inline void CommandReplaceGridValuesArchive::set_new_col_names(int index, const char* value, size_t size) {
  new_col_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommandReplaceGridValuesArchive::add_new_col_names() {
  return new_col_names_.Add();
}
inline void CommandReplaceGridValuesArchive::add_new_col_names(const ::std::string& value) {
  new_col_names_.Add()->assign(value);
}
inline void CommandReplaceGridValuesArchive::add_new_col_names(const char* value) {
  new_col_names_.Add()->assign(value);
}
inline void CommandReplaceGridValuesArchive::add_new_col_names(const char* value, size_t size) {
  new_col_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CommandReplaceGridValuesArchive::new_col_names() const {
  return new_col_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CommandReplaceGridValuesArchive::mutable_new_col_names() {
  return &new_col_names_;
}

// optional uint32 rows_to_add = 10;
inline bool CommandReplaceGridValuesArchive::has_rows_to_add() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CommandReplaceGridValuesArchive::set_has_rows_to_add() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CommandReplaceGridValuesArchive::clear_has_rows_to_add() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CommandReplaceGridValuesArchive::clear_rows_to_add() {
  rows_to_add_ = 0u;
  clear_has_rows_to_add();
}
inline ::google::protobuf::uint32 CommandReplaceGridValuesArchive::rows_to_add() const {
  return rows_to_add_;
}
inline void CommandReplaceGridValuesArchive::set_rows_to_add(::google::protobuf::uint32 value) {
  set_has_rows_to_add();
  rows_to_add_ = value;
}

// optional uint32 cols_to_add = 11;
inline bool CommandReplaceGridValuesArchive::has_cols_to_add() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CommandReplaceGridValuesArchive::set_has_cols_to_add() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CommandReplaceGridValuesArchive::clear_has_cols_to_add() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CommandReplaceGridValuesArchive::clear_cols_to_add() {
  cols_to_add_ = 0u;
  clear_has_cols_to_add();
}
inline ::google::protobuf::uint32 CommandReplaceGridValuesArchive::cols_to_add() const {
  return cols_to_add_;
}
inline void CommandReplaceGridValuesArchive::set_cols_to_add(::google::protobuf::uint32 value) {
  set_has_cols_to_add();
  cols_to_add_ = value;
}

// -------------------------------------------------------------------

// CommandReplaceThemePresetArchive_StyleAndIdentifierPair

// required .TSP.Reference style = 1;
inline bool CommandReplaceThemePresetArchive_StyleAndIdentifierPair::has_style() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::set_has_style() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::clear_has_style() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::clear_style() {
  if (style_ != NULL) style_->::TSP::Reference::Clear();
  clear_has_style();
}
inline const ::TSP::Reference& CommandReplaceThemePresetArchive_StyleAndIdentifierPair::style() const {
  return style_ != NULL ? *style_ : *default_instance_->style_;
}
inline ::TSP::Reference* CommandReplaceThemePresetArchive_StyleAndIdentifierPair::mutable_style() {
  set_has_style();
  if (style_ == NULL) style_ = new ::TSP::Reference;
  return style_;
}
inline ::TSP::Reference* CommandReplaceThemePresetArchive_StyleAndIdentifierPair::release_style() {
  clear_has_style();
  ::TSP::Reference* temp = style_;
  style_ = NULL;
  return temp;
}
inline void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::set_allocated_style(::TSP::Reference* style) {
  delete style_;
  style_ = style;
  if (style) {
    set_has_style();
  } else {
    clear_has_style();
  }
}

// required string identifier = 2;
inline bool CommandReplaceThemePresetArchive_StyleAndIdentifierPair::has_identifier() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::set_has_identifier() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::clear_has_identifier() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::clear_identifier() {
  if (identifier_ != &::google::protobuf::internal::kEmptyString) {
    identifier_->clear();
  }
  clear_has_identifier();
}
inline const ::std::string& CommandReplaceThemePresetArchive_StyleAndIdentifierPair::identifier() const {
  return *identifier_;
}
inline void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::set_identifier(const ::std::string& value) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(value);
}
inline void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::set_identifier(const char* value) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(value);
}
inline void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::set_identifier(const char* value, size_t size) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommandReplaceThemePresetArchive_StyleAndIdentifierPair::mutable_identifier() {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  return identifier_;
}
inline ::std::string* CommandReplaceThemePresetArchive_StyleAndIdentifierPair::release_identifier() {
  clear_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = identifier_;
    identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::set_allocated_identifier(::std::string* identifier) {
  if (identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete identifier_;
  }
  if (identifier) {
    set_has_identifier();
    identifier_ = identifier;
  } else {
    clear_has_identifier();
    identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CommandReplaceThemePresetArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandReplaceThemePresetArchive::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommandReplaceThemePresetArchive::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommandReplaceThemePresetArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommandReplaceThemePresetArchive::clear_super() {
  if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
  clear_has_super();
}
inline const ::TSK::CommandArchive& CommandReplaceThemePresetArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSK::CommandArchive* CommandReplaceThemePresetArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSK::CommandArchive;
  return super_;
}
inline ::TSK::CommandArchive* CommandReplaceThemePresetArchive::release_super() {
  clear_has_super();
  ::TSK::CommandArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void CommandReplaceThemePresetArchive::set_allocated_super(::TSK::CommandArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// required .TSP.Reference theme = 2;
inline bool CommandReplaceThemePresetArchive::has_theme() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommandReplaceThemePresetArchive::set_has_theme() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommandReplaceThemePresetArchive::clear_has_theme() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommandReplaceThemePresetArchive::clear_theme() {
  if (theme_ != NULL) theme_->::TSP::Reference::Clear();
  clear_has_theme();
}
inline const ::TSP::Reference& CommandReplaceThemePresetArchive::theme() const {
  return theme_ != NULL ? *theme_ : *default_instance_->theme_;
}
inline ::TSP::Reference* CommandReplaceThemePresetArchive::mutable_theme() {
  set_has_theme();
  if (theme_ == NULL) theme_ = new ::TSP::Reference;
  return theme_;
}
inline ::TSP::Reference* CommandReplaceThemePresetArchive::release_theme() {
  clear_has_theme();
  ::TSP::Reference* temp = theme_;
  theme_ = NULL;
  return temp;
}
inline void CommandReplaceThemePresetArchive::set_allocated_theme(::TSP::Reference* theme) {
  delete theme_;
  theme_ = theme;
  if (theme) {
    set_has_theme();
  } else {
    clear_has_theme();
  }
}

// optional .TSP.Reference old_preset = 3;
inline bool CommandReplaceThemePresetArchive::has_old_preset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommandReplaceThemePresetArchive::set_has_old_preset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommandReplaceThemePresetArchive::clear_has_old_preset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommandReplaceThemePresetArchive::clear_old_preset() {
  if (old_preset_ != NULL) old_preset_->::TSP::Reference::Clear();
  clear_has_old_preset();
}
inline const ::TSP::Reference& CommandReplaceThemePresetArchive::old_preset() const {
  return old_preset_ != NULL ? *old_preset_ : *default_instance_->old_preset_;
}
inline ::TSP::Reference* CommandReplaceThemePresetArchive::mutable_old_preset() {
  set_has_old_preset();
  if (old_preset_ == NULL) old_preset_ = new ::TSP::Reference;
  return old_preset_;
}
inline ::TSP::Reference* CommandReplaceThemePresetArchive::release_old_preset() {
  clear_has_old_preset();
  ::TSP::Reference* temp = old_preset_;
  old_preset_ = NULL;
  return temp;
}
inline void CommandReplaceThemePresetArchive::set_allocated_old_preset(::TSP::Reference* old_preset) {
  delete old_preset_;
  old_preset_ = old_preset;
  if (old_preset) {
    set_has_old_preset();
  } else {
    clear_has_old_preset();
  }
}

// optional .TSP.Reference new_preset = 4;
inline bool CommandReplaceThemePresetArchive::has_new_preset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CommandReplaceThemePresetArchive::set_has_new_preset() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CommandReplaceThemePresetArchive::clear_has_new_preset() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CommandReplaceThemePresetArchive::clear_new_preset() {
  if (new_preset_ != NULL) new_preset_->::TSP::Reference::Clear();
  clear_has_new_preset();
}
inline const ::TSP::Reference& CommandReplaceThemePresetArchive::new_preset() const {
  return new_preset_ != NULL ? *new_preset_ : *default_instance_->new_preset_;
}
inline ::TSP::Reference* CommandReplaceThemePresetArchive::mutable_new_preset() {
  set_has_new_preset();
  if (new_preset_ == NULL) new_preset_ = new ::TSP::Reference;
  return new_preset_;
}
inline ::TSP::Reference* CommandReplaceThemePresetArchive::release_new_preset() {
  clear_has_new_preset();
  ::TSP::Reference* temp = new_preset_;
  new_preset_ = NULL;
  return temp;
}
inline void CommandReplaceThemePresetArchive::set_allocated_new_preset(::TSP::Reference* new_preset) {
  delete new_preset_;
  new_preset_ = new_preset;
  if (new_preset) {
    set_has_new_preset();
  } else {
    clear_has_new_preset();
  }
}

// repeated .TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair identifiers = 5;
inline int CommandReplaceThemePresetArchive::identifiers_size() const {
  return identifiers_.size();
}
inline void CommandReplaceThemePresetArchive::clear_identifiers() {
  identifiers_.Clear();
}
inline const ::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair& CommandReplaceThemePresetArchive::identifiers(int index) const {
  return identifiers_.Get(index);
}
inline ::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair* CommandReplaceThemePresetArchive::mutable_identifiers(int index) {
  return identifiers_.Mutable(index);
}
inline ::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair* CommandReplaceThemePresetArchive::add_identifiers() {
  return identifiers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair >&
CommandReplaceThemePresetArchive::identifiers() const {
  return identifiers_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair >*
CommandReplaceThemePresetArchive::mutable_identifiers() {
  return &identifiers_;
}

// optional uint64 old_preset_index = 6;
inline bool CommandReplaceThemePresetArchive::has_old_preset_index() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CommandReplaceThemePresetArchive::set_has_old_preset_index() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CommandReplaceThemePresetArchive::clear_has_old_preset_index() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CommandReplaceThemePresetArchive::clear_old_preset_index() {
  old_preset_index_ = GOOGLE_ULONGLONG(0);
  clear_has_old_preset_index();
}
inline ::google::protobuf::uint64 CommandReplaceThemePresetArchive::old_preset_index() const {
  return old_preset_index_;
}
inline void CommandReplaceThemePresetArchive::set_old_preset_index(::google::protobuf::uint64 value) {
  set_has_old_preset_index();
  old_preset_index_ = value;
}

// -------------------------------------------------------------------

// CommandInvalidateWPCaches

// required .TSK.CommandArchive super = 1;
inline bool CommandInvalidateWPCaches::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommandInvalidateWPCaches::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommandInvalidateWPCaches::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommandInvalidateWPCaches::clear_super() {
  if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
  clear_has_super();
}
inline const ::TSK::CommandArchive& CommandInvalidateWPCaches::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSK::CommandArchive* CommandInvalidateWPCaches::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSK::CommandArchive;
  return super_;
}
inline ::TSK::CommandArchive* CommandInvalidateWPCaches::release_super() {
  clear_has_super();
  ::TSK::CommandArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void CommandInvalidateWPCaches::set_allocated_super(::TSK::CommandArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TSCH

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSCH::StyleOwnerType>() {
  return ::TSCH::StyleOwnerType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSCH::StyleSwapType>() {
  return ::TSCH::StyleSwapType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSCH::ApplyPresetBehavior>() {
  return ::TSCH::ApplyPresetBehavior_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TSCHCommandArchives_2eproto__INCLUDED
