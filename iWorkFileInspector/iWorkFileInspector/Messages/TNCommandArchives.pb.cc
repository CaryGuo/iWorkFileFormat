// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TNCommandArchives.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TNCommandArchives.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace TN {

namespace {

const ::google::protobuf::Descriptor* SheetCommandSelectionBehaviorArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SheetCommandSelectionBehaviorArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandFormChooseTargetTableArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandFormChooseTargetTableArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSheetInsertDrawablesArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSheetInsertDrawablesArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSheetRemoveDrawablesArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSheetRemoveDrawablesArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSheetMoveDrawableZOrderArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSheetMoveDrawableZOrderArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandDocumentInsertSheetArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandDocumentInsertSheetArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandDocumentRemoveSheetArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandDocumentRemoveSheetArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandDocumentReplaceLastSheetArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandDocumentReplaceLastSheetArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandDocumentReorderSheetArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandDocumentReorderSheetArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetSheetNameArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetSheetNameArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetPageOrientationArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetPageOrientationArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetShowPageNumbersValueArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetShowPageNumbersValueArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetRepeatingHeadersValueArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetRepeatingHeadersValueArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetContentScaleArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetContentScaleArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetAutofitValueArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetAutofitValueArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetDocumentPrinterOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetDocumentPrinterOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandEnterPrintPreviewModeArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandEnterPrintPreviewModeArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandExitPrintPreviewModeArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandExitPrintPreviewModeArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandPasteDrawablesArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandPasteDrawablesArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandPasteSheetArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandPasteSheetArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandReorderSidebarItemChildrenAchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandReorderSidebarItemChildrenAchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandChartMediatorSetEditingState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandChartMediatorSetEditingState_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandChartMediatorUpdateForEntityDelete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandChartMediatorUpdateForEntityDelete_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChartCommandSetSeriesNameArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartCommandSetSeriesNameArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChartCommandSelectionBehaviorArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartCommandSelectionBehaviorArchive_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TNCommandArchives_2eproto() {
  protobuf_AddDesc_TNCommandArchives_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TNCommandArchives.proto");
  GOOGLE_CHECK(file != NULL);
  SheetCommandSelectionBehaviorArchive_descriptor_ = file->message_type(0);
  static const int SheetCommandSelectionBehaviorArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SheetCommandSelectionBehaviorArchive, sheet_selection_),
  };
  SheetCommandSelectionBehaviorArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SheetCommandSelectionBehaviorArchive_descriptor_,
      SheetCommandSelectionBehaviorArchive::default_instance_,
      SheetCommandSelectionBehaviorArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SheetCommandSelectionBehaviorArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SheetCommandSelectionBehaviorArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SheetCommandSelectionBehaviorArchive));
  CommandFormChooseTargetTableArchive_descriptor_ = file->message_type(1);
  static const int CommandFormChooseTargetTableArchive_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandFormChooseTargetTableArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandFormChooseTargetTableArchive, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandFormChooseTargetTableArchive, previous_table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandFormChooseTargetTableArchive, sheet_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandFormChooseTargetTableArchive, previous_sheet_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandFormChooseTargetTableArchive, sheet_),
  };
  CommandFormChooseTargetTableArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandFormChooseTargetTableArchive_descriptor_,
      CommandFormChooseTargetTableArchive::default_instance_,
      CommandFormChooseTargetTableArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandFormChooseTargetTableArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandFormChooseTargetTableArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandFormChooseTargetTableArchive));
  CommandSheetInsertDrawablesArchive_descriptor_ = file->message_type(2);
  static const int CommandSheetInsertDrawablesArchive_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSheetInsertDrawablesArchive, sheet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSheetInsertDrawablesArchive, drawables_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSheetInsertDrawablesArchive, provider_undo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSheetInsertDrawablesArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSheetInsertDrawablesArchive, fordrag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSheetInsertDrawablesArchive, forpaste_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSheetInsertDrawablesArchive, atindex_),
  };
  CommandSheetInsertDrawablesArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSheetInsertDrawablesArchive_descriptor_,
      CommandSheetInsertDrawablesArchive::default_instance_,
      CommandSheetInsertDrawablesArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSheetInsertDrawablesArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSheetInsertDrawablesArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSheetInsertDrawablesArchive));
  CommandSheetRemoveDrawablesArchive_descriptor_ = file->message_type(3);
  static const int CommandSheetRemoveDrawablesArchive_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSheetRemoveDrawablesArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSheetRemoveDrawablesArchive, sheet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSheetRemoveDrawablesArchive, sorteddrawables_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSheetRemoveDrawablesArchive, drawableindices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSheetRemoveDrawablesArchive, old_sheet_sidebar_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSheetRemoveDrawablesArchive, formula_rewrite_command_for_undo_),
  };
  CommandSheetRemoveDrawablesArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSheetRemoveDrawablesArchive_descriptor_,
      CommandSheetRemoveDrawablesArchive::default_instance_,
      CommandSheetRemoveDrawablesArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSheetRemoveDrawablesArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSheetRemoveDrawablesArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSheetRemoveDrawablesArchive));
  CommandSheetMoveDrawableZOrderArchive_descriptor_ = file->message_type(4);
  static const int CommandSheetMoveDrawableZOrderArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSheetMoveDrawableZOrderArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSheetMoveDrawableZOrderArchive, sheet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSheetMoveDrawableZOrderArchive, drawable_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSheetMoveDrawableZOrderArchive, indexes_),
  };
  CommandSheetMoveDrawableZOrderArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSheetMoveDrawableZOrderArchive_descriptor_,
      CommandSheetMoveDrawableZOrderArchive::default_instance_,
      CommandSheetMoveDrawableZOrderArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSheetMoveDrawableZOrderArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSheetMoveDrawableZOrderArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSheetMoveDrawableZOrderArchive));
  CommandDocumentInsertSheetArchive_descriptor_ = file->message_type(5);
  static const int CommandDocumentInsertSheetArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDocumentInsertSheetArchive, document_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDocumentInsertSheetArchive, sheet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDocumentInsertSheetArchive, super_),
  };
  CommandDocumentInsertSheetArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandDocumentInsertSheetArchive_descriptor_,
      CommandDocumentInsertSheetArchive::default_instance_,
      CommandDocumentInsertSheetArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDocumentInsertSheetArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDocumentInsertSheetArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandDocumentInsertSheetArchive));
  CommandDocumentRemoveSheetArchive_descriptor_ = file->message_type(6);
  static const int CommandDocumentRemoveSheetArchive_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDocumentRemoveSheetArchive, document_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDocumentRemoveSheetArchive, sheet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDocumentRemoveSheetArchive, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDocumentRemoveSheetArchive, old_sheet_sidebar_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDocumentRemoveSheetArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDocumentRemoveSheetArchive, formula_rewrite_command_for_undo_),
  };
  CommandDocumentRemoveSheetArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandDocumentRemoveSheetArchive_descriptor_,
      CommandDocumentRemoveSheetArchive::default_instance_,
      CommandDocumentRemoveSheetArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDocumentRemoveSheetArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDocumentRemoveSheetArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandDocumentRemoveSheetArchive));
  CommandDocumentReplaceLastSheetArchive_descriptor_ = file->message_type(7);
  static const int CommandDocumentReplaceLastSheetArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDocumentReplaceLastSheetArchive, document_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDocumentReplaceLastSheetArchive, last_sheet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDocumentReplaceLastSheetArchive, new_sheet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDocumentReplaceLastSheetArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDocumentReplaceLastSheetArchive, index_),
  };
  CommandDocumentReplaceLastSheetArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandDocumentReplaceLastSheetArchive_descriptor_,
      CommandDocumentReplaceLastSheetArchive::default_instance_,
      CommandDocumentReplaceLastSheetArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDocumentReplaceLastSheetArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDocumentReplaceLastSheetArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandDocumentReplaceLastSheetArchive));
  CommandDocumentReorderSheetArchive_descriptor_ = file->message_type(8);
  static const int CommandDocumentReorderSheetArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDocumentReorderSheetArchive, document_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDocumentReorderSheetArchive, sheet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDocumentReorderSheetArchive, source_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDocumentReorderSheetArchive, dest_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDocumentReorderSheetArchive, super_),
  };
  CommandDocumentReorderSheetArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandDocumentReorderSheetArchive_descriptor_,
      CommandDocumentReorderSheetArchive::default_instance_,
      CommandDocumentReorderSheetArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDocumentReorderSheetArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDocumentReorderSheetArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandDocumentReorderSheetArchive));
  CommandSetSheetNameArchive_descriptor_ = file->message_type(9);
  static const int CommandSetSheetNameArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetSheetNameArchive, newname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetSheetNameArchive, oldname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetSheetNameArchive, sheet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetSheetNameArchive, super_),
  };
  CommandSetSheetNameArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetSheetNameArchive_descriptor_,
      CommandSetSheetNameArchive::default_instance_,
      CommandSetSheetNameArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetSheetNameArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetSheetNameArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetSheetNameArchive));
  CommandSetPageOrientationArchive_descriptor_ = file->message_type(10);
  static const int CommandSetPageOrientationArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetPageOrientationArchive, in_portrait_page_orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetPageOrientationArchive, sheet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetPageOrientationArchive, super_),
  };
  CommandSetPageOrientationArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetPageOrientationArchive_descriptor_,
      CommandSetPageOrientationArchive::default_instance_,
      CommandSetPageOrientationArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetPageOrientationArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetPageOrientationArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetPageOrientationArchive));
  CommandSetShowPageNumbersValueArchive_descriptor_ = file->message_type(11);
  static const int CommandSetShowPageNumbersValueArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetShowPageNumbersValueArchive, show_page_numbers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetShowPageNumbersValueArchive, sheet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetShowPageNumbersValueArchive, super_),
  };
  CommandSetShowPageNumbersValueArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetShowPageNumbersValueArchive_descriptor_,
      CommandSetShowPageNumbersValueArchive::default_instance_,
      CommandSetShowPageNumbersValueArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetShowPageNumbersValueArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetShowPageNumbersValueArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetShowPageNumbersValueArchive));
  CommandSetRepeatingHeadersValueArchive_descriptor_ = file->message_type(12);
  static const int CommandSetRepeatingHeadersValueArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetRepeatingHeadersValueArchive, show_repeating_headers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetRepeatingHeadersValueArchive, sheet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetRepeatingHeadersValueArchive, super_),
  };
  CommandSetRepeatingHeadersValueArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetRepeatingHeadersValueArchive_descriptor_,
      CommandSetRepeatingHeadersValueArchive::default_instance_,
      CommandSetRepeatingHeadersValueArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetRepeatingHeadersValueArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetRepeatingHeadersValueArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetRepeatingHeadersValueArchive));
  CommandSetContentScaleArchive_descriptor_ = file->message_type(13);
  static const int CommandSetContentScaleArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetContentScaleArchive, is_autofit_on_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetContentScaleArchive, old_content_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetContentScaleArchive, new_content_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetContentScaleArchive, sheet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetContentScaleArchive, super_),
  };
  CommandSetContentScaleArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetContentScaleArchive_descriptor_,
      CommandSetContentScaleArchive::default_instance_,
      CommandSetContentScaleArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetContentScaleArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetContentScaleArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetContentScaleArchive));
  CommandSetAutofitValueArchive_descriptor_ = file->message_type(14);
  static const int CommandSetAutofitValueArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetAutofitValueArchive, old_content_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetAutofitValueArchive, sheet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetAutofitValueArchive, super_),
  };
  CommandSetAutofitValueArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetAutofitValueArchive_descriptor_,
      CommandSetAutofitValueArchive::default_instance_,
      CommandSetAutofitValueArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetAutofitValueArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetAutofitValueArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetAutofitValueArchive));
  CommandSetDocumentPrinterOptions_descriptor_ = file->message_type(15);
  static const int CommandSetDocumentPrinterOptions_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetDocumentPrinterOptions, printer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetDocumentPrinterOptions, paper_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetDocumentPrinterOptions, page_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetDocumentPrinterOptions, super_),
  };
  CommandSetDocumentPrinterOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetDocumentPrinterOptions_descriptor_,
      CommandSetDocumentPrinterOptions::default_instance_,
      CommandSetDocumentPrinterOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetDocumentPrinterOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetDocumentPrinterOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetDocumentPrinterOptions));
  CommandEnterPrintPreviewModeArchive_descriptor_ = file->message_type(16);
  static const int CommandEnterPrintPreviewModeArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandEnterPrintPreviewModeArchive, super_),
  };
  CommandEnterPrintPreviewModeArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandEnterPrintPreviewModeArchive_descriptor_,
      CommandEnterPrintPreviewModeArchive::default_instance_,
      CommandEnterPrintPreviewModeArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandEnterPrintPreviewModeArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandEnterPrintPreviewModeArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandEnterPrintPreviewModeArchive));
  CommandExitPrintPreviewModeArchive_descriptor_ = file->message_type(17);
  static const int CommandExitPrintPreviewModeArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandExitPrintPreviewModeArchive, super_),
  };
  CommandExitPrintPreviewModeArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandExitPrintPreviewModeArchive_descriptor_,
      CommandExitPrintPreviewModeArchive::default_instance_,
      CommandExitPrintPreviewModeArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandExitPrintPreviewModeArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandExitPrintPreviewModeArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandExitPrintPreviewModeArchive));
  CommandPasteDrawablesArchive_descriptor_ = file->message_type(18);
  static const int CommandPasteDrawablesArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPasteDrawablesArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPasteDrawablesArchive, sheet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPasteDrawablesArchive, drawables_),
  };
  CommandPasteDrawablesArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandPasteDrawablesArchive_descriptor_,
      CommandPasteDrawablesArchive::default_instance_,
      CommandPasteDrawablesArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPasteDrawablesArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPasteDrawablesArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandPasteDrawablesArchive));
  CommandPasteSheetArchive_descriptor_ = file->message_type(19);
  static const int CommandPasteSheetArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPasteSheetArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPasteSheetArchive, document_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPasteSheetArchive, sheet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPasteSheetArchive, sheet_uistate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPasteSheetArchive, sheetindex_),
  };
  CommandPasteSheetArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandPasteSheetArchive_descriptor_,
      CommandPasteSheetArchive::default_instance_,
      CommandPasteSheetArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPasteSheetArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPasteSheetArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandPasteSheetArchive));
  CommandReorderSidebarItemChildrenAchive_descriptor_ = file->message_type(20);
  static const int CommandReorderSidebarItemChildrenAchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReorderSidebarItemChildrenAchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReorderSidebarItemChildrenAchive, sheet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReorderSidebarItemChildrenAchive, old_children_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReorderSidebarItemChildrenAchive, new_children_),
  };
  CommandReorderSidebarItemChildrenAchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandReorderSidebarItemChildrenAchive_descriptor_,
      CommandReorderSidebarItemChildrenAchive::default_instance_,
      CommandReorderSidebarItemChildrenAchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReorderSidebarItemChildrenAchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReorderSidebarItemChildrenAchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandReorderSidebarItemChildrenAchive));
  CommandChartMediatorSetEditingState_descriptor_ = file->message_type(21);
  static const int CommandChartMediatorSetEditingState_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandChartMediatorSetEditingState, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandChartMediatorSetEditingState, old_formulas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandChartMediatorSetEditingState, new_formulas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandChartMediatorSetEditingState, old_direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandChartMediatorSetEditingState, new_direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandChartMediatorSetEditingState, old_scatter_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandChartMediatorSetEditingState, new_scatter_format_),
  };
  CommandChartMediatorSetEditingState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandChartMediatorSetEditingState_descriptor_,
      CommandChartMediatorSetEditingState::default_instance_,
      CommandChartMediatorSetEditingState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandChartMediatorSetEditingState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandChartMediatorSetEditingState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandChartMediatorSetEditingState));
  CommandChartMediatorUpdateForEntityDelete_descriptor_ = file->message_type(22);
  static const int CommandChartMediatorUpdateForEntityDelete_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandChartMediatorUpdateForEntityDelete, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandChartMediatorUpdateForEntityDelete, cmd_),
  };
  CommandChartMediatorUpdateForEntityDelete_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandChartMediatorUpdateForEntityDelete_descriptor_,
      CommandChartMediatorUpdateForEntityDelete::default_instance_,
      CommandChartMediatorUpdateForEntityDelete_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandChartMediatorUpdateForEntityDelete, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandChartMediatorUpdateForEntityDelete, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandChartMediatorUpdateForEntityDelete));
  ChartCommandSetSeriesNameArchive_descriptor_ = file->message_type(23);
  static const int ChartCommandSetSeriesNameArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartCommandSetSeriesNameArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartCommandSetSeriesNameArchive, mediator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartCommandSetSeriesNameArchive, seriesindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartCommandSetSeriesNameArchive, old_formula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartCommandSetSeriesNameArchive, new_formula_),
  };
  ChartCommandSetSeriesNameArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartCommandSetSeriesNameArchive_descriptor_,
      ChartCommandSetSeriesNameArchive::default_instance_,
      ChartCommandSetSeriesNameArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartCommandSetSeriesNameArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartCommandSetSeriesNameArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartCommandSetSeriesNameArchive));
  ChartCommandSelectionBehaviorArchive_descriptor_ = file->message_type(24);
  static const int ChartCommandSelectionBehaviorArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartCommandSelectionBehaviorArchive, drawable_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartCommandSelectionBehaviorArchive, begin_selection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartCommandSelectionBehaviorArchive, end_selection_),
  };
  ChartCommandSelectionBehaviorArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartCommandSelectionBehaviorArchive_descriptor_,
      ChartCommandSelectionBehaviorArchive::default_instance_,
      ChartCommandSelectionBehaviorArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartCommandSelectionBehaviorArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartCommandSelectionBehaviorArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartCommandSelectionBehaviorArchive));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TNCommandArchives_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SheetCommandSelectionBehaviorArchive_descriptor_, &SheetCommandSelectionBehaviorArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandFormChooseTargetTableArchive_descriptor_, &CommandFormChooseTargetTableArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSheetInsertDrawablesArchive_descriptor_, &CommandSheetInsertDrawablesArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSheetRemoveDrawablesArchive_descriptor_, &CommandSheetRemoveDrawablesArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSheetMoveDrawableZOrderArchive_descriptor_, &CommandSheetMoveDrawableZOrderArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandDocumentInsertSheetArchive_descriptor_, &CommandDocumentInsertSheetArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandDocumentRemoveSheetArchive_descriptor_, &CommandDocumentRemoveSheetArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandDocumentReplaceLastSheetArchive_descriptor_, &CommandDocumentReplaceLastSheetArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandDocumentReorderSheetArchive_descriptor_, &CommandDocumentReorderSheetArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetSheetNameArchive_descriptor_, &CommandSetSheetNameArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetPageOrientationArchive_descriptor_, &CommandSetPageOrientationArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetShowPageNumbersValueArchive_descriptor_, &CommandSetShowPageNumbersValueArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetRepeatingHeadersValueArchive_descriptor_, &CommandSetRepeatingHeadersValueArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetContentScaleArchive_descriptor_, &CommandSetContentScaleArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetAutofitValueArchive_descriptor_, &CommandSetAutofitValueArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetDocumentPrinterOptions_descriptor_, &CommandSetDocumentPrinterOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandEnterPrintPreviewModeArchive_descriptor_, &CommandEnterPrintPreviewModeArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandExitPrintPreviewModeArchive_descriptor_, &CommandExitPrintPreviewModeArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandPasteDrawablesArchive_descriptor_, &CommandPasteDrawablesArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandPasteSheetArchive_descriptor_, &CommandPasteSheetArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandReorderSidebarItemChildrenAchive_descriptor_, &CommandReorderSidebarItemChildrenAchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandChartMediatorSetEditingState_descriptor_, &CommandChartMediatorSetEditingState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandChartMediatorUpdateForEntityDelete_descriptor_, &CommandChartMediatorUpdateForEntityDelete::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartCommandSetSeriesNameArchive_descriptor_, &ChartCommandSetSeriesNameArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartCommandSelectionBehaviorArchive_descriptor_, &ChartCommandSelectionBehaviorArchive::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TNCommandArchives_2eproto() {
  delete SheetCommandSelectionBehaviorArchive::default_instance_;
  delete SheetCommandSelectionBehaviorArchive_reflection_;
  delete CommandFormChooseTargetTableArchive::default_instance_;
  delete CommandFormChooseTargetTableArchive_reflection_;
  delete CommandSheetInsertDrawablesArchive::default_instance_;
  delete CommandSheetInsertDrawablesArchive_reflection_;
  delete CommandSheetRemoveDrawablesArchive::default_instance_;
  delete CommandSheetRemoveDrawablesArchive_reflection_;
  delete CommandSheetMoveDrawableZOrderArchive::default_instance_;
  delete CommandSheetMoveDrawableZOrderArchive_reflection_;
  delete CommandDocumentInsertSheetArchive::default_instance_;
  delete CommandDocumentInsertSheetArchive_reflection_;
  delete CommandDocumentRemoveSheetArchive::default_instance_;
  delete CommandDocumentRemoveSheetArchive_reflection_;
  delete CommandDocumentReplaceLastSheetArchive::default_instance_;
  delete CommandDocumentReplaceLastSheetArchive_reflection_;
  delete CommandDocumentReorderSheetArchive::default_instance_;
  delete CommandDocumentReorderSheetArchive_reflection_;
  delete CommandSetSheetNameArchive::default_instance_;
  delete CommandSetSheetNameArchive_reflection_;
  delete CommandSetPageOrientationArchive::default_instance_;
  delete CommandSetPageOrientationArchive_reflection_;
  delete CommandSetShowPageNumbersValueArchive::default_instance_;
  delete CommandSetShowPageNumbersValueArchive_reflection_;
  delete CommandSetRepeatingHeadersValueArchive::default_instance_;
  delete CommandSetRepeatingHeadersValueArchive_reflection_;
  delete CommandSetContentScaleArchive::default_instance_;
  delete CommandSetContentScaleArchive_reflection_;
  delete CommandSetAutofitValueArchive::default_instance_;
  delete CommandSetAutofitValueArchive_reflection_;
  delete CommandSetDocumentPrinterOptions::default_instance_;
  delete CommandSetDocumentPrinterOptions_reflection_;
  delete CommandEnterPrintPreviewModeArchive::default_instance_;
  delete CommandEnterPrintPreviewModeArchive_reflection_;
  delete CommandExitPrintPreviewModeArchive::default_instance_;
  delete CommandExitPrintPreviewModeArchive_reflection_;
  delete CommandPasteDrawablesArchive::default_instance_;
  delete CommandPasteDrawablesArchive_reflection_;
  delete CommandPasteSheetArchive::default_instance_;
  delete CommandPasteSheetArchive_reflection_;
  delete CommandReorderSidebarItemChildrenAchive::default_instance_;
  delete CommandReorderSidebarItemChildrenAchive_reflection_;
  delete CommandChartMediatorSetEditingState::default_instance_;
  delete CommandChartMediatorSetEditingState_reflection_;
  delete CommandChartMediatorUpdateForEntityDelete::default_instance_;
  delete CommandChartMediatorUpdateForEntityDelete_reflection_;
  delete ChartCommandSetSeriesNameArchive::default_instance_;
  delete ChartCommandSetSeriesNameArchive_reflection_;
  delete ChartCommandSelectionBehaviorArchive::default_instance_;
  delete ChartCommandSelectionBehaviorArchive_reflection_;
}

void protobuf_AddDesc_TNCommandArchives_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::TSP::protobuf_AddDesc_TSPMessages_2eproto();
  ::TSK::protobuf_AddDesc_TSKArchives_2eproto();
  ::TSCH::protobuf_AddDesc_TSCHArchives_2eproto();
  ::TSCH::protobuf_AddDesc_TSCHCommandArchives_2eproto();
  ::TSCE::protobuf_AddDesc_TSCEArchives_2eproto();
  ::TSS::protobuf_AddDesc_TSSArchives_2eproto();
  ::TSD::protobuf_AddDesc_TSDArchives_2eproto();
  ::TSWP::protobuf_AddDesc_TSWPArchives_2eproto();
  ::TSA::protobuf_AddDesc_TSAArchives_2eproto();
  ::TST::protobuf_AddDesc_TSTArchives_2eproto();
  ::TN::protobuf_AddDesc_TNArchives_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027TNCommandArchives.proto\022\002TN\032\021TSPMessag"
    "es.proto\032\021TSKArchives.proto\032\022TSCHArchive"
    "s.proto\032\031TSCHCommandArchives.proto\032\022TSCE"
    "Archives.proto\032\021TSSArchives.proto\032\021TSDAr"
    "chives.proto\032\022TSWPArchives.proto\032\021TSAArc"
    "hives.proto\032\021TSTArchives.proto\032\020TNArchiv"
    "es.proto\"O\n$SheetCommandSelectionBehavio"
    "rArchive\022\'\n\017sheet_selection\030\001 \001(\0132\016.TSP."
    "Reference\"\360\001\n#CommandFormChooseTargetTab"
    "leArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandAr"
    "chive\022%\n\010table_id\030\002 \001(\0132\023.TSCE.CFUUIDArc"
    "hive\022.\n\021previous_table_id\030\003 \001(\0132\023.TSCE.C"
    "FUUIDArchive\022\022\n\nsheet_name\030\004 \001(\t\022\033\n\023prev"
    "ious_sheet_name\030\005 \001(\t\022\035\n\005sheet\030\006 \002(\0132\016.T"
    "SP.Reference\"\345\001\n\"CommandSheetInsertDrawa"
    "blesArchive\022\035\n\005sheet\030\001 \002(\0132\016.TSP.Referen"
    "ce\022!\n\tdrawables\030\002 \003(\0132\016.TSP.Reference\022%\n"
    "\rprovider_undo\030\003 \001(\0132\016.TSP.Reference\022\"\n\005"
    "super\030\004 \002(\0132\023.TSK.CommandArchive\022\017\n\007forD"
    "rag\030\005 \001(\010\022\020\n\010forPaste\030\007 \001(\010\022\017\n\007atIndex\030\006"
    " \001(\005\"\243\002\n\"CommandSheetRemoveDrawablesArch"
    "ive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022"
    "\035\n\005sheet\030\002 \002(\0132\016.TSP.Reference\022\'\n\017sorted"
    "Drawables\030\003 \003(\0132\016.TSP.Reference\022&\n\017drawa"
    "bleIndices\030\004 \002(\0132\r.TSP.IndexSet\022/\n\027old_s"
    "heet_sidebar_order\030\005 \003(\0132\016.TSP.Reference"
    "\0228\n formula_rewrite_command_for_undo\030\006 \001"
    "(\0132\016.TSP.Reference\"\262\001\n%CommandSheetMoveD"
    "rawableZOrderArchive\022\"\n\005super\030\001 \002(\0132\023.TS"
    "K.CommandArchive\022\035\n\005sheet\030\002 \002(\0132\016.TSP.Re"
    "ference\022&\n\016drawable_infos\030\003 \003(\0132\016.TSP.Re"
    "ference\022\036\n\007indexes\030\004 \002(\0132\r.TSP.IndexSet\""
    "\210\001\n!CommandDocumentInsertSheetArchive\022 \n"
    "\010document\030\001 \002(\0132\016.TSP.Reference\022\035\n\005sheet"
    "\030\002 \002(\0132\016.TSP.Reference\022\"\n\005super\030\003 \002(\0132\023."
    "TSK.CommandArchive\"\202\002\n!CommandDocumentRe"
    "moveSheetArchive\022 \n\010document\030\001 \002(\0132\016.TSP"
    ".Reference\022\035\n\005sheet\030\002 \002(\0132\016.TSP.Referenc"
    "e\022\r\n\005index\030\003 \002(\r\022/\n\027old_sheet_sidebar_or"
    "der\030\004 \003(\0132\016.TSP.Reference\022\"\n\005super\030\005 \002(\013"
    "2\023.TSK.CommandArchive\0228\n formula_rewrite"
    "_command_for_undo\030\006 \001(\0132\016.TSP.Reference\""
    "\304\001\n&CommandDocumentReplaceLastSheetArchi"
    "ve\022 \n\010document\030\001 \002(\0132\016.TSP.Reference\022\"\n\n"
    "last_sheet\030\002 \002(\0132\016.TSP.Reference\022!\n\tnew_"
    "sheet\030\003 \002(\0132\016.TSP.Reference\022\"\n\005super\030\004 \002"
    "(\0132\023.TSK.CommandArchive\022\r\n\005index\030\005 \001(\r\"\263"
    "\001\n\"CommandDocumentReorderSheetArchive\022 \n"
    "\010document\030\001 \002(\0132\016.TSP.Reference\022\035\n\005sheet"
    "\030\002 \002(\0132\016.TSP.Reference\022\024\n\014source_index\030\003"
    " \002(\r\022\022\n\ndest_index\030\004 \002(\r\022\"\n\005super\030\005 \002(\0132"
    "\023.TSK.CommandArchive\"\201\001\n\032CommandSetSheet"
    "NameArchive\022\017\n\007newname\030\001 \002(\t\022\017\n\007oldname\030"
    "\002 \002(\t\022\035\n\005sheet\030\003 \002(\0132\016.TSP.Reference\022\"\n\005"
    "super\030\004 \002(\0132\023.TSK.CommandArchive\"\213\001\n Com"
    "mandSetPageOrientationArchive\022$\n\034in_port"
    "rait_page_orientation\030\001 \002(\010\022\035\n\005sheet\030\002 \002"
    "(\0132\016.TSP.Reference\022\"\n\005super\030\003 \002(\0132\023.TSK."
    "CommandArchive\"\205\001\n%CommandSetShowPageNum"
    "bersValueArchive\022\031\n\021show_page_numbers\030\001 "
    "\002(\010\022\035\n\005sheet\030\002 \002(\0132\016.TSP.Reference\022\"\n\005su"
    "per\030\003 \002(\0132\023.TSK.CommandArchive\"\213\001\n&Comma"
    "ndSetRepeatingHeadersValueArchive\022\036\n\026sho"
    "w_repeating_headers\030\001 \002(\010\022\035\n\005sheet\030\002 \002(\013"
    "2\016.TSP.Reference\022\"\n\005super\030\003 \002(\0132\023.TSK.Co"
    "mmandArchive\"\257\001\n\035CommandSetContentScaleA"
    "rchive\022\025\n\ris_autofit_on\030\001 \002(\010\022\031\n\021old_con"
    "tent_scale\030\002 \002(\002\022\031\n\021new_content_scale\030\003 "
    "\001(\002\022\035\n\005sheet\030\004 \002(\0132\016.TSP.Reference\022\"\n\005su"
    "per\030\005 \002(\0132\023.TSK.CommandArchive\"}\n\035Comman"
    "dSetAutofitValueArchive\022\031\n\021old_content_s"
    "cale\030\001 \002(\002\022\035\n\005sheet\030\002 \002(\0132\016.TSP.Referenc"
    "e\022\"\n\005super\030\003 \002(\0132\023.TSK.CommandArchive\"\212\001"
    "\n CommandSetDocumentPrinterOptions\022\022\n\npr"
    "inter_id\030\001 \002(\t\022\020\n\010paper_id\030\002 \002(\t\022\034\n\tpage"
    "_size\030\003 \002(\0132\t.TSP.Size\022\"\n\005super\030\004 \002(\0132\023."
    "TSK.CommandArchive\"I\n#CommandEnterPrintP"
    "reviewModeArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.C"
    "ommandArchive\"H\n\"CommandExitPrintPreview"
    "ModeArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Command"
    "Archive\"\204\001\n\034CommandPasteDrawablesArchive"
    "\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022\035\n\005"
    "sheet\030\002 \002(\0132\016.TSP.Reference\022!\n\tdrawables"
    "\030\003 \003(\0132\016.TSP.Reference\"\303\001\n\030CommandPasteS"
    "heetArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Command"
    "Archive\022 \n\010document\030\002 \002(\0132\016.TSP.Referenc"
    "e\022\035\n\005sheet\030\003 \002(\0132\016.TSP.Reference\022.\n\rshee"
    "t_uistate\030\004 \001(\0132\027.TN.SheetUIStateArchive"
    "\022\022\n\nsheetIndex\030\005 \002(\r\"\270\001\n\'CommandReorderS"
    "idebarItemChildrenAchive\022\"\n\005super\030\001 \002(\0132"
    "\023.TSK.CommandArchive\022\035\n\005sheet\030\002 \002(\0132\016.TS"
    "P.Reference\022$\n\014old_children\030\003 \003(\0132\016.TSP."
    "Reference\022$\n\014new_children\030\004 \003(\0132\016.TSP.Re"
    "ference\"\243\002\n#CommandChartMediatorSetEditi"
    "ngState\022(\n\005super\030\001 \002(\0132\031.TSCH.ChartComma"
    "ndArchive\0225\n\014old_formulas\030\003 \001(\0132\037.TN.Cha"
    "rtMediatorFormulaStorage\0225\n\014new_formulas"
    "\030\004 \001(\0132\037.TN.ChartMediatorFormulaStorage\022"
    "\025\n\rold_direction\030\005 \001(\005\022\025\n\rnew_direction\030"
    "\006 \001(\005\022\032\n\022old_scatter_format\030\007 \001(\005\022\032\n\022new"
    "_scatter_format\030\010 \001(\005\"r\n)CommandChartMed"
    "iatorUpdateForEntityDelete\022(\n\005super\030\001 \002("
    "\0132\031.TSCH.ChartCommandArchive\022\033\n\003cmd\030\003 \001("
    "\0132\016.TSP.Reference\"\331\001\n ChartCommandSetSer"
    "iesNameArchive\022(\n\005super\030\001 \002(\0132\031.TSCH.Cha"
    "rtCommandArchive\022 \n\010mediator\030\002 \002(\0132\016.TSP"
    ".Reference\022\023\n\013seriesindex\030\003 \002(\r\022)\n\013old_f"
    "ormula\030\004 \001(\0132\024.TSCE.FormulaArchive\022)\n\013ne"
    "w_formula\030\005 \001(\0132\024.TSCE.FormulaArchive\"\263\001"
    "\n$ChartCommandSelectionBehaviorArchive\022%"
    "\n\rdrawable_info\030\001 \002(\0132\016.TSP.Reference\0222\n"
    "\017begin_selection\030\002 \001(\0132\031.TN.ChartSelecti"
    "onArchive\0220\n\rend_selection\030\003 \001(\0132\031.TN.Ch"
    "artSelectionArchive", 4539);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TNCommandArchives.proto", &protobuf_RegisterTypes);
  SheetCommandSelectionBehaviorArchive::default_instance_ = new SheetCommandSelectionBehaviorArchive();
  CommandFormChooseTargetTableArchive::default_instance_ = new CommandFormChooseTargetTableArchive();
  CommandSheetInsertDrawablesArchive::default_instance_ = new CommandSheetInsertDrawablesArchive();
  CommandSheetRemoveDrawablesArchive::default_instance_ = new CommandSheetRemoveDrawablesArchive();
  CommandSheetMoveDrawableZOrderArchive::default_instance_ = new CommandSheetMoveDrawableZOrderArchive();
  CommandDocumentInsertSheetArchive::default_instance_ = new CommandDocumentInsertSheetArchive();
  CommandDocumentRemoveSheetArchive::default_instance_ = new CommandDocumentRemoveSheetArchive();
  CommandDocumentReplaceLastSheetArchive::default_instance_ = new CommandDocumentReplaceLastSheetArchive();
  CommandDocumentReorderSheetArchive::default_instance_ = new CommandDocumentReorderSheetArchive();
  CommandSetSheetNameArchive::default_instance_ = new CommandSetSheetNameArchive();
  CommandSetPageOrientationArchive::default_instance_ = new CommandSetPageOrientationArchive();
  CommandSetShowPageNumbersValueArchive::default_instance_ = new CommandSetShowPageNumbersValueArchive();
  CommandSetRepeatingHeadersValueArchive::default_instance_ = new CommandSetRepeatingHeadersValueArchive();
  CommandSetContentScaleArchive::default_instance_ = new CommandSetContentScaleArchive();
  CommandSetAutofitValueArchive::default_instance_ = new CommandSetAutofitValueArchive();
  CommandSetDocumentPrinterOptions::default_instance_ = new CommandSetDocumentPrinterOptions();
  CommandEnterPrintPreviewModeArchive::default_instance_ = new CommandEnterPrintPreviewModeArchive();
  CommandExitPrintPreviewModeArchive::default_instance_ = new CommandExitPrintPreviewModeArchive();
  CommandPasteDrawablesArchive::default_instance_ = new CommandPasteDrawablesArchive();
  CommandPasteSheetArchive::default_instance_ = new CommandPasteSheetArchive();
  CommandReorderSidebarItemChildrenAchive::default_instance_ = new CommandReorderSidebarItemChildrenAchive();
  CommandChartMediatorSetEditingState::default_instance_ = new CommandChartMediatorSetEditingState();
  CommandChartMediatorUpdateForEntityDelete::default_instance_ = new CommandChartMediatorUpdateForEntityDelete();
  ChartCommandSetSeriesNameArchive::default_instance_ = new ChartCommandSetSeriesNameArchive();
  ChartCommandSelectionBehaviorArchive::default_instance_ = new ChartCommandSelectionBehaviorArchive();
  SheetCommandSelectionBehaviorArchive::default_instance_->InitAsDefaultInstance();
  CommandFormChooseTargetTableArchive::default_instance_->InitAsDefaultInstance();
  CommandSheetInsertDrawablesArchive::default_instance_->InitAsDefaultInstance();
  CommandSheetRemoveDrawablesArchive::default_instance_->InitAsDefaultInstance();
  CommandSheetMoveDrawableZOrderArchive::default_instance_->InitAsDefaultInstance();
  CommandDocumentInsertSheetArchive::default_instance_->InitAsDefaultInstance();
  CommandDocumentRemoveSheetArchive::default_instance_->InitAsDefaultInstance();
  CommandDocumentReplaceLastSheetArchive::default_instance_->InitAsDefaultInstance();
  CommandDocumentReorderSheetArchive::default_instance_->InitAsDefaultInstance();
  CommandSetSheetNameArchive::default_instance_->InitAsDefaultInstance();
  CommandSetPageOrientationArchive::default_instance_->InitAsDefaultInstance();
  CommandSetShowPageNumbersValueArchive::default_instance_->InitAsDefaultInstance();
  CommandSetRepeatingHeadersValueArchive::default_instance_->InitAsDefaultInstance();
  CommandSetContentScaleArchive::default_instance_->InitAsDefaultInstance();
  CommandSetAutofitValueArchive::default_instance_->InitAsDefaultInstance();
  CommandSetDocumentPrinterOptions::default_instance_->InitAsDefaultInstance();
  CommandEnterPrintPreviewModeArchive::default_instance_->InitAsDefaultInstance();
  CommandExitPrintPreviewModeArchive::default_instance_->InitAsDefaultInstance();
  CommandPasteDrawablesArchive::default_instance_->InitAsDefaultInstance();
  CommandPasteSheetArchive::default_instance_->InitAsDefaultInstance();
  CommandReorderSidebarItemChildrenAchive::default_instance_->InitAsDefaultInstance();
  CommandChartMediatorSetEditingState::default_instance_->InitAsDefaultInstance();
  CommandChartMediatorUpdateForEntityDelete::default_instance_->InitAsDefaultInstance();
  ChartCommandSetSeriesNameArchive::default_instance_->InitAsDefaultInstance();
  ChartCommandSelectionBehaviorArchive::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TNCommandArchives_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TNCommandArchives_2eproto {
  StaticDescriptorInitializer_TNCommandArchives_2eproto() {
    protobuf_AddDesc_TNCommandArchives_2eproto();
  }
} static_descriptor_initializer_TNCommandArchives_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SheetCommandSelectionBehaviorArchive::kSheetSelectionFieldNumber;
#endif  // !_MSC_VER

SheetCommandSelectionBehaviorArchive::SheetCommandSelectionBehaviorArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SheetCommandSelectionBehaviorArchive::InitAsDefaultInstance() {
  sheet_selection_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

SheetCommandSelectionBehaviorArchive::SheetCommandSelectionBehaviorArchive(const SheetCommandSelectionBehaviorArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SheetCommandSelectionBehaviorArchive::SharedCtor() {
  _cached_size_ = 0;
  sheet_selection_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SheetCommandSelectionBehaviorArchive::~SheetCommandSelectionBehaviorArchive() {
  SharedDtor();
}

void SheetCommandSelectionBehaviorArchive::SharedDtor() {
  if (this != default_instance_) {
    delete sheet_selection_;
  }
}

void SheetCommandSelectionBehaviorArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SheetCommandSelectionBehaviorArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SheetCommandSelectionBehaviorArchive_descriptor_;
}

const SheetCommandSelectionBehaviorArchive& SheetCommandSelectionBehaviorArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TNCommandArchives_2eproto();
  return *default_instance_;
}

SheetCommandSelectionBehaviorArchive* SheetCommandSelectionBehaviorArchive::default_instance_ = NULL;

SheetCommandSelectionBehaviorArchive* SheetCommandSelectionBehaviorArchive::New() const {
  return new SheetCommandSelectionBehaviorArchive;
}

void SheetCommandSelectionBehaviorArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sheet_selection()) {
      if (sheet_selection_ != NULL) sheet_selection_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SheetCommandSelectionBehaviorArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Reference sheet_selection = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sheet_selection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SheetCommandSelectionBehaviorArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Reference sheet_selection = 1;
  if (has_sheet_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sheet_selection(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SheetCommandSelectionBehaviorArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Reference sheet_selection = 1;
  if (has_sheet_selection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sheet_selection(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SheetCommandSelectionBehaviorArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.Reference sheet_selection = 1;
    if (has_sheet_selection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sheet_selection());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SheetCommandSelectionBehaviorArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SheetCommandSelectionBehaviorArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SheetCommandSelectionBehaviorArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SheetCommandSelectionBehaviorArchive::MergeFrom(const SheetCommandSelectionBehaviorArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sheet_selection()) {
      mutable_sheet_selection()->::TSP::Reference::MergeFrom(from.sheet_selection());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SheetCommandSelectionBehaviorArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SheetCommandSelectionBehaviorArchive::CopyFrom(const SheetCommandSelectionBehaviorArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SheetCommandSelectionBehaviorArchive::IsInitialized() const {

  if (has_sheet_selection()) {
    if (!this->sheet_selection().IsInitialized()) return false;
  }
  return true;
}

void SheetCommandSelectionBehaviorArchive::Swap(SheetCommandSelectionBehaviorArchive* other) {
  if (other != this) {
    std::swap(sheet_selection_, other->sheet_selection_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SheetCommandSelectionBehaviorArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SheetCommandSelectionBehaviorArchive_descriptor_;
  metadata.reflection = SheetCommandSelectionBehaviorArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandFormChooseTargetTableArchive::kSuperFieldNumber;
const int CommandFormChooseTargetTableArchive::kTableIdFieldNumber;
const int CommandFormChooseTargetTableArchive::kPreviousTableIdFieldNumber;
const int CommandFormChooseTargetTableArchive::kSheetNameFieldNumber;
const int CommandFormChooseTargetTableArchive::kPreviousSheetNameFieldNumber;
const int CommandFormChooseTargetTableArchive::kSheetFieldNumber;
#endif  // !_MSC_VER

CommandFormChooseTargetTableArchive::CommandFormChooseTargetTableArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandFormChooseTargetTableArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  table_id_ = const_cast< ::TSCE::CFUUIDArchive*>(&::TSCE::CFUUIDArchive::default_instance());
  previous_table_id_ = const_cast< ::TSCE::CFUUIDArchive*>(&::TSCE::CFUUIDArchive::default_instance());
  sheet_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandFormChooseTargetTableArchive::CommandFormChooseTargetTableArchive(const CommandFormChooseTargetTableArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandFormChooseTargetTableArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  table_id_ = NULL;
  previous_table_id_ = NULL;
  sheet_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  previous_sheet_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sheet_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandFormChooseTargetTableArchive::~CommandFormChooseTargetTableArchive() {
  SharedDtor();
}

void CommandFormChooseTargetTableArchive::SharedDtor() {
  if (sheet_name_ != &::google::protobuf::internal::kEmptyString) {
    delete sheet_name_;
  }
  if (previous_sheet_name_ != &::google::protobuf::internal::kEmptyString) {
    delete previous_sheet_name_;
  }
  if (this != default_instance_) {
    delete super_;
    delete table_id_;
    delete previous_table_id_;
    delete sheet_;
  }
}

void CommandFormChooseTargetTableArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandFormChooseTargetTableArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandFormChooseTargetTableArchive_descriptor_;
}

const CommandFormChooseTargetTableArchive& CommandFormChooseTargetTableArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TNCommandArchives_2eproto();
  return *default_instance_;
}

CommandFormChooseTargetTableArchive* CommandFormChooseTargetTableArchive::default_instance_ = NULL;

CommandFormChooseTargetTableArchive* CommandFormChooseTargetTableArchive::New() const {
  return new CommandFormChooseTargetTableArchive;
}

void CommandFormChooseTargetTableArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_table_id()) {
      if (table_id_ != NULL) table_id_->::TSCE::CFUUIDArchive::Clear();
    }
    if (has_previous_table_id()) {
      if (previous_table_id_ != NULL) previous_table_id_->::TSCE::CFUUIDArchive::Clear();
    }
    if (has_sheet_name()) {
      if (sheet_name_ != &::google::protobuf::internal::kEmptyString) {
        sheet_name_->clear();
      }
    }
    if (has_previous_sheet_name()) {
      if (previous_sheet_name_ != &::google::protobuf::internal::kEmptyString) {
        previous_sheet_name_->clear();
      }
    }
    if (has_sheet()) {
      if (sheet_ != NULL) sheet_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandFormChooseTargetTableArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table_id;
        break;
      }

      // optional .TSCE.CFUUIDArchive table_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_previous_table_id;
        break;
      }

      // optional .TSCE.CFUUIDArchive previous_table_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_previous_table_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_previous_table_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sheet_name;
        break;
      }

      // optional string sheet_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sheet_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sheet_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sheet_name().data(), this->sheet_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_previous_sheet_name;
        break;
      }

      // optional string previous_sheet_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_previous_sheet_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_previous_sheet_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->previous_sheet_name().data(), this->previous_sheet_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_sheet;
        break;
      }

      // required .TSP.Reference sheet = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sheet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sheet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandFormChooseTargetTableArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSCE.CFUUIDArchive table_id = 2;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->table_id(), output);
  }

  // optional .TSCE.CFUUIDArchive previous_table_id = 3;
  if (has_previous_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->previous_table_id(), output);
  }

  // optional string sheet_name = 4;
  if (has_sheet_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sheet_name().data(), this->sheet_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->sheet_name(), output);
  }

  // optional string previous_sheet_name = 5;
  if (has_previous_sheet_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->previous_sheet_name().data(), this->previous_sheet_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->previous_sheet_name(), output);
  }

  // required .TSP.Reference sheet = 6;
  if (has_sheet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->sheet(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandFormChooseTargetTableArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSCE.CFUUIDArchive table_id = 2;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->table_id(), target);
  }

  // optional .TSCE.CFUUIDArchive previous_table_id = 3;
  if (has_previous_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->previous_table_id(), target);
  }

  // optional string sheet_name = 4;
  if (has_sheet_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sheet_name().data(), this->sheet_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sheet_name(), target);
  }

  // optional string previous_sheet_name = 5;
  if (has_previous_sheet_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->previous_sheet_name().data(), this->previous_sheet_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->previous_sheet_name(), target);
  }

  // required .TSP.Reference sheet = 6;
  if (has_sheet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->sheet(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandFormChooseTargetTableArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSCE.CFUUIDArchive table_id = 2;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_id());
    }

    // optional .TSCE.CFUUIDArchive previous_table_id = 3;
    if (has_previous_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->previous_table_id());
    }

    // optional string sheet_name = 4;
    if (has_sheet_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sheet_name());
    }

    // optional string previous_sheet_name = 5;
    if (has_previous_sheet_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->previous_sheet_name());
    }

    // required .TSP.Reference sheet = 6;
    if (has_sheet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sheet());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandFormChooseTargetTableArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandFormChooseTargetTableArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandFormChooseTargetTableArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandFormChooseTargetTableArchive::MergeFrom(const CommandFormChooseTargetTableArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_table_id()) {
      mutable_table_id()->::TSCE::CFUUIDArchive::MergeFrom(from.table_id());
    }
    if (from.has_previous_table_id()) {
      mutable_previous_table_id()->::TSCE::CFUUIDArchive::MergeFrom(from.previous_table_id());
    }
    if (from.has_sheet_name()) {
      set_sheet_name(from.sheet_name());
    }
    if (from.has_previous_sheet_name()) {
      set_previous_sheet_name(from.previous_sheet_name());
    }
    if (from.has_sheet()) {
      mutable_sheet()->::TSP::Reference::MergeFrom(from.sheet());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandFormChooseTargetTableArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandFormChooseTargetTableArchive::CopyFrom(const CommandFormChooseTargetTableArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandFormChooseTargetTableArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000021) != 0x00000021) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_sheet()) {
    if (!this->sheet().IsInitialized()) return false;
  }
  return true;
}

void CommandFormChooseTargetTableArchive::Swap(CommandFormChooseTargetTableArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(table_id_, other->table_id_);
    std::swap(previous_table_id_, other->previous_table_id_);
    std::swap(sheet_name_, other->sheet_name_);
    std::swap(previous_sheet_name_, other->previous_sheet_name_);
    std::swap(sheet_, other->sheet_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandFormChooseTargetTableArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandFormChooseTargetTableArchive_descriptor_;
  metadata.reflection = CommandFormChooseTargetTableArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSheetInsertDrawablesArchive::kSheetFieldNumber;
const int CommandSheetInsertDrawablesArchive::kDrawablesFieldNumber;
const int CommandSheetInsertDrawablesArchive::kProviderUndoFieldNumber;
const int CommandSheetInsertDrawablesArchive::kSuperFieldNumber;
const int CommandSheetInsertDrawablesArchive::kForDragFieldNumber;
const int CommandSheetInsertDrawablesArchive::kForPasteFieldNumber;
const int CommandSheetInsertDrawablesArchive::kAtIndexFieldNumber;
#endif  // !_MSC_VER

CommandSheetInsertDrawablesArchive::CommandSheetInsertDrawablesArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSheetInsertDrawablesArchive::InitAsDefaultInstance() {
  sheet_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  provider_undo_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
}

CommandSheetInsertDrawablesArchive::CommandSheetInsertDrawablesArchive(const CommandSheetInsertDrawablesArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSheetInsertDrawablesArchive::SharedCtor() {
  _cached_size_ = 0;
  sheet_ = NULL;
  provider_undo_ = NULL;
  super_ = NULL;
  fordrag_ = false;
  forpaste_ = false;
  atindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSheetInsertDrawablesArchive::~CommandSheetInsertDrawablesArchive() {
  SharedDtor();
}

void CommandSheetInsertDrawablesArchive::SharedDtor() {
  if (this != default_instance_) {
    delete sheet_;
    delete provider_undo_;
    delete super_;
  }
}

void CommandSheetInsertDrawablesArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSheetInsertDrawablesArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSheetInsertDrawablesArchive_descriptor_;
}

const CommandSheetInsertDrawablesArchive& CommandSheetInsertDrawablesArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TNCommandArchives_2eproto();
  return *default_instance_;
}

CommandSheetInsertDrawablesArchive* CommandSheetInsertDrawablesArchive::default_instance_ = NULL;

CommandSheetInsertDrawablesArchive* CommandSheetInsertDrawablesArchive::New() const {
  return new CommandSheetInsertDrawablesArchive;
}

void CommandSheetInsertDrawablesArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sheet()) {
      if (sheet_ != NULL) sheet_->::TSP::Reference::Clear();
    }
    if (has_provider_undo()) {
      if (provider_undo_ != NULL) provider_undo_->::TSP::Reference::Clear();
    }
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    fordrag_ = false;
    forpaste_ = false;
    atindex_ = 0;
  }
  drawables_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSheetInsertDrawablesArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSP.Reference sheet = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sheet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_drawables;
        break;
      }

      // repeated .TSP.Reference drawables = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drawables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_drawables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_drawables;
        if (input->ExpectTag(26)) goto parse_provider_undo;
        break;
      }

      // optional .TSP.Reference provider_undo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_provider_undo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_provider_undo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_super;
        break;
      }

      // required .TSK.CommandArchive super = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_forDrag;
        break;
      }

      // optional bool forDrag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forDrag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fordrag_)));
          set_has_fordrag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_atIndex;
        break;
      }

      // optional int32 atIndex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &atindex_)));
          set_has_atindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_forPaste;
        break;
      }

      // optional bool forPaste = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forPaste:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forpaste_)));
          set_has_forpaste();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSheetInsertDrawablesArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSP.Reference sheet = 1;
  if (has_sheet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sheet(), output);
  }

  // repeated .TSP.Reference drawables = 2;
  for (int i = 0; i < this->drawables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->drawables(i), output);
  }

  // optional .TSP.Reference provider_undo = 3;
  if (has_provider_undo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->provider_undo(), output);
  }

  // required .TSK.CommandArchive super = 4;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->super(), output);
  }

  // optional bool forDrag = 5;
  if (has_fordrag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->fordrag(), output);
  }

  // optional int32 atIndex = 6;
  if (has_atindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->atindex(), output);
  }

  // optional bool forPaste = 7;
  if (has_forpaste()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->forpaste(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSheetInsertDrawablesArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSP.Reference sheet = 1;
  if (has_sheet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sheet(), target);
  }

  // repeated .TSP.Reference drawables = 2;
  for (int i = 0; i < this->drawables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->drawables(i), target);
  }

  // optional .TSP.Reference provider_undo = 3;
  if (has_provider_undo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->provider_undo(), target);
  }

  // required .TSK.CommandArchive super = 4;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->super(), target);
  }

  // optional bool forDrag = 5;
  if (has_fordrag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->fordrag(), target);
  }

  // optional int32 atIndex = 6;
  if (has_atindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->atindex(), target);
  }

  // optional bool forPaste = 7;
  if (has_forpaste()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->forpaste(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSheetInsertDrawablesArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSP.Reference sheet = 1;
    if (has_sheet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sheet());
    }

    // optional .TSP.Reference provider_undo = 3;
    if (has_provider_undo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->provider_undo());
    }

    // required .TSK.CommandArchive super = 4;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional bool forDrag = 5;
    if (has_fordrag()) {
      total_size += 1 + 1;
    }

    // optional bool forPaste = 7;
    if (has_forpaste()) {
      total_size += 1 + 1;
    }

    // optional int32 atIndex = 6;
    if (has_atindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atindex());
    }

  }
  // repeated .TSP.Reference drawables = 2;
  total_size += 1 * this->drawables_size();
  for (int i = 0; i < this->drawables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->drawables(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSheetInsertDrawablesArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSheetInsertDrawablesArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSheetInsertDrawablesArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSheetInsertDrawablesArchive::MergeFrom(const CommandSheetInsertDrawablesArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  drawables_.MergeFrom(from.drawables_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sheet()) {
      mutable_sheet()->::TSP::Reference::MergeFrom(from.sheet());
    }
    if (from.has_provider_undo()) {
      mutable_provider_undo()->::TSP::Reference::MergeFrom(from.provider_undo());
    }
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_fordrag()) {
      set_fordrag(from.fordrag());
    }
    if (from.has_forpaste()) {
      set_forpaste(from.forpaste());
    }
    if (from.has_atindex()) {
      set_atindex(from.atindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSheetInsertDrawablesArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSheetInsertDrawablesArchive::CopyFrom(const CommandSheetInsertDrawablesArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSheetInsertDrawablesArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  if (has_sheet()) {
    if (!this->sheet().IsInitialized()) return false;
  }
  for (int i = 0; i < drawables_size(); i++) {
    if (!this->drawables(i).IsInitialized()) return false;
  }
  if (has_provider_undo()) {
    if (!this->provider_undo().IsInitialized()) return false;
  }
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandSheetInsertDrawablesArchive::Swap(CommandSheetInsertDrawablesArchive* other) {
  if (other != this) {
    std::swap(sheet_, other->sheet_);
    drawables_.Swap(&other->drawables_);
    std::swap(provider_undo_, other->provider_undo_);
    std::swap(super_, other->super_);
    std::swap(fordrag_, other->fordrag_);
    std::swap(forpaste_, other->forpaste_);
    std::swap(atindex_, other->atindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSheetInsertDrawablesArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSheetInsertDrawablesArchive_descriptor_;
  metadata.reflection = CommandSheetInsertDrawablesArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSheetRemoveDrawablesArchive::kSuperFieldNumber;
const int CommandSheetRemoveDrawablesArchive::kSheetFieldNumber;
const int CommandSheetRemoveDrawablesArchive::kSortedDrawablesFieldNumber;
const int CommandSheetRemoveDrawablesArchive::kDrawableIndicesFieldNumber;
const int CommandSheetRemoveDrawablesArchive::kOldSheetSidebarOrderFieldNumber;
const int CommandSheetRemoveDrawablesArchive::kFormulaRewriteCommandForUndoFieldNumber;
#endif  // !_MSC_VER

CommandSheetRemoveDrawablesArchive::CommandSheetRemoveDrawablesArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSheetRemoveDrawablesArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  sheet_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  drawableindices_ = const_cast< ::TSP::IndexSet*>(&::TSP::IndexSet::default_instance());
  formula_rewrite_command_for_undo_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandSheetRemoveDrawablesArchive::CommandSheetRemoveDrawablesArchive(const CommandSheetRemoveDrawablesArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSheetRemoveDrawablesArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  sheet_ = NULL;
  drawableindices_ = NULL;
  formula_rewrite_command_for_undo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSheetRemoveDrawablesArchive::~CommandSheetRemoveDrawablesArchive() {
  SharedDtor();
}

void CommandSheetRemoveDrawablesArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete sheet_;
    delete drawableindices_;
    delete formula_rewrite_command_for_undo_;
  }
}

void CommandSheetRemoveDrawablesArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSheetRemoveDrawablesArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSheetRemoveDrawablesArchive_descriptor_;
}

const CommandSheetRemoveDrawablesArchive& CommandSheetRemoveDrawablesArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TNCommandArchives_2eproto();
  return *default_instance_;
}

CommandSheetRemoveDrawablesArchive* CommandSheetRemoveDrawablesArchive::default_instance_ = NULL;

CommandSheetRemoveDrawablesArchive* CommandSheetRemoveDrawablesArchive::New() const {
  return new CommandSheetRemoveDrawablesArchive;
}

void CommandSheetRemoveDrawablesArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_sheet()) {
      if (sheet_ != NULL) sheet_->::TSP::Reference::Clear();
    }
    if (has_drawableindices()) {
      if (drawableindices_ != NULL) drawableindices_->::TSP::IndexSet::Clear();
    }
    if (has_formula_rewrite_command_for_undo()) {
      if (formula_rewrite_command_for_undo_ != NULL) formula_rewrite_command_for_undo_->::TSP::Reference::Clear();
    }
  }
  sorteddrawables_.Clear();
  old_sheet_sidebar_order_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSheetRemoveDrawablesArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sheet;
        break;
      }

      // required .TSP.Reference sheet = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sheet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sheet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sortedDrawables;
        break;
      }

      // repeated .TSP.Reference sortedDrawables = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sortedDrawables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sorteddrawables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sortedDrawables;
        if (input->ExpectTag(34)) goto parse_drawableIndices;
        break;
      }

      // required .TSP.IndexSet drawableIndices = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drawableIndices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_drawableindices()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_old_sheet_sidebar_order;
        break;
      }

      // repeated .TSP.Reference old_sheet_sidebar_order = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_sheet_sidebar_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_old_sheet_sidebar_order()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_old_sheet_sidebar_order;
        if (input->ExpectTag(50)) goto parse_formula_rewrite_command_for_undo;
        break;
      }

      // optional .TSP.Reference formula_rewrite_command_for_undo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_formula_rewrite_command_for_undo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_formula_rewrite_command_for_undo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSheetRemoveDrawablesArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference sheet = 2;
  if (has_sheet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sheet(), output);
  }

  // repeated .TSP.Reference sortedDrawables = 3;
  for (int i = 0; i < this->sorteddrawables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sorteddrawables(i), output);
  }

  // required .TSP.IndexSet drawableIndices = 4;
  if (has_drawableindices()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->drawableindices(), output);
  }

  // repeated .TSP.Reference old_sheet_sidebar_order = 5;
  for (int i = 0; i < this->old_sheet_sidebar_order_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->old_sheet_sidebar_order(i), output);
  }

  // optional .TSP.Reference formula_rewrite_command_for_undo = 6;
  if (has_formula_rewrite_command_for_undo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->formula_rewrite_command_for_undo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSheetRemoveDrawablesArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference sheet = 2;
  if (has_sheet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sheet(), target);
  }

  // repeated .TSP.Reference sortedDrawables = 3;
  for (int i = 0; i < this->sorteddrawables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sorteddrawables(i), target);
  }

  // required .TSP.IndexSet drawableIndices = 4;
  if (has_drawableindices()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->drawableindices(), target);
  }

  // repeated .TSP.Reference old_sheet_sidebar_order = 5;
  for (int i = 0; i < this->old_sheet_sidebar_order_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->old_sheet_sidebar_order(i), target);
  }

  // optional .TSP.Reference formula_rewrite_command_for_undo = 6;
  if (has_formula_rewrite_command_for_undo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->formula_rewrite_command_for_undo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSheetRemoveDrawablesArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference sheet = 2;
    if (has_sheet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sheet());
    }

    // required .TSP.IndexSet drawableIndices = 4;
    if (has_drawableindices()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->drawableindices());
    }

    // optional .TSP.Reference formula_rewrite_command_for_undo = 6;
    if (has_formula_rewrite_command_for_undo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->formula_rewrite_command_for_undo());
    }

  }
  // repeated .TSP.Reference sortedDrawables = 3;
  total_size += 1 * this->sorteddrawables_size();
  for (int i = 0; i < this->sorteddrawables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sorteddrawables(i));
  }

  // repeated .TSP.Reference old_sheet_sidebar_order = 5;
  total_size += 1 * this->old_sheet_sidebar_order_size();
  for (int i = 0; i < this->old_sheet_sidebar_order_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->old_sheet_sidebar_order(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSheetRemoveDrawablesArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSheetRemoveDrawablesArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSheetRemoveDrawablesArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSheetRemoveDrawablesArchive::MergeFrom(const CommandSheetRemoveDrawablesArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  sorteddrawables_.MergeFrom(from.sorteddrawables_);
  old_sheet_sidebar_order_.MergeFrom(from.old_sheet_sidebar_order_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_sheet()) {
      mutable_sheet()->::TSP::Reference::MergeFrom(from.sheet());
    }
    if (from.has_drawableindices()) {
      mutable_drawableindices()->::TSP::IndexSet::MergeFrom(from.drawableindices());
    }
    if (from.has_formula_rewrite_command_for_undo()) {
      mutable_formula_rewrite_command_for_undo()->::TSP::Reference::MergeFrom(from.formula_rewrite_command_for_undo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSheetRemoveDrawablesArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSheetRemoveDrawablesArchive::CopyFrom(const CommandSheetRemoveDrawablesArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSheetRemoveDrawablesArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_sheet()) {
    if (!this->sheet().IsInitialized()) return false;
  }
  for (int i = 0; i < sorteddrawables_size(); i++) {
    if (!this->sorteddrawables(i).IsInitialized()) return false;
  }
  if (has_drawableindices()) {
    if (!this->drawableindices().IsInitialized()) return false;
  }
  for (int i = 0; i < old_sheet_sidebar_order_size(); i++) {
    if (!this->old_sheet_sidebar_order(i).IsInitialized()) return false;
  }
  if (has_formula_rewrite_command_for_undo()) {
    if (!this->formula_rewrite_command_for_undo().IsInitialized()) return false;
  }
  return true;
}

void CommandSheetRemoveDrawablesArchive::Swap(CommandSheetRemoveDrawablesArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(sheet_, other->sheet_);
    sorteddrawables_.Swap(&other->sorteddrawables_);
    std::swap(drawableindices_, other->drawableindices_);
    old_sheet_sidebar_order_.Swap(&other->old_sheet_sidebar_order_);
    std::swap(formula_rewrite_command_for_undo_, other->formula_rewrite_command_for_undo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSheetRemoveDrawablesArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSheetRemoveDrawablesArchive_descriptor_;
  metadata.reflection = CommandSheetRemoveDrawablesArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSheetMoveDrawableZOrderArchive::kSuperFieldNumber;
const int CommandSheetMoveDrawableZOrderArchive::kSheetFieldNumber;
const int CommandSheetMoveDrawableZOrderArchive::kDrawableInfosFieldNumber;
const int CommandSheetMoveDrawableZOrderArchive::kIndexesFieldNumber;
#endif  // !_MSC_VER

CommandSheetMoveDrawableZOrderArchive::CommandSheetMoveDrawableZOrderArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSheetMoveDrawableZOrderArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  sheet_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  indexes_ = const_cast< ::TSP::IndexSet*>(&::TSP::IndexSet::default_instance());
}

CommandSheetMoveDrawableZOrderArchive::CommandSheetMoveDrawableZOrderArchive(const CommandSheetMoveDrawableZOrderArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSheetMoveDrawableZOrderArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  sheet_ = NULL;
  indexes_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSheetMoveDrawableZOrderArchive::~CommandSheetMoveDrawableZOrderArchive() {
  SharedDtor();
}

void CommandSheetMoveDrawableZOrderArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete sheet_;
    delete indexes_;
  }
}

void CommandSheetMoveDrawableZOrderArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSheetMoveDrawableZOrderArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSheetMoveDrawableZOrderArchive_descriptor_;
}

const CommandSheetMoveDrawableZOrderArchive& CommandSheetMoveDrawableZOrderArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TNCommandArchives_2eproto();
  return *default_instance_;
}

CommandSheetMoveDrawableZOrderArchive* CommandSheetMoveDrawableZOrderArchive::default_instance_ = NULL;

CommandSheetMoveDrawableZOrderArchive* CommandSheetMoveDrawableZOrderArchive::New() const {
  return new CommandSheetMoveDrawableZOrderArchive;
}

void CommandSheetMoveDrawableZOrderArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_sheet()) {
      if (sheet_ != NULL) sheet_->::TSP::Reference::Clear();
    }
    if (has_indexes()) {
      if (indexes_ != NULL) indexes_->::TSP::IndexSet::Clear();
    }
  }
  drawable_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSheetMoveDrawableZOrderArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sheet;
        break;
      }

      // required .TSP.Reference sheet = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sheet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sheet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_drawable_infos;
        break;
      }

      // repeated .TSP.Reference drawable_infos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drawable_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_drawable_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_drawable_infos;
        if (input->ExpectTag(34)) goto parse_indexes;
        break;
      }

      // required .TSP.IndexSet indexes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_indexes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_indexes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSheetMoveDrawableZOrderArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference sheet = 2;
  if (has_sheet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sheet(), output);
  }

  // repeated .TSP.Reference drawable_infos = 3;
  for (int i = 0; i < this->drawable_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->drawable_infos(i), output);
  }

  // required .TSP.IndexSet indexes = 4;
  if (has_indexes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->indexes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSheetMoveDrawableZOrderArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference sheet = 2;
  if (has_sheet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sheet(), target);
  }

  // repeated .TSP.Reference drawable_infos = 3;
  for (int i = 0; i < this->drawable_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->drawable_infos(i), target);
  }

  // required .TSP.IndexSet indexes = 4;
  if (has_indexes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->indexes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSheetMoveDrawableZOrderArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference sheet = 2;
    if (has_sheet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sheet());
    }

    // required .TSP.IndexSet indexes = 4;
    if (has_indexes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->indexes());
    }

  }
  // repeated .TSP.Reference drawable_infos = 3;
  total_size += 1 * this->drawable_infos_size();
  for (int i = 0; i < this->drawable_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->drawable_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSheetMoveDrawableZOrderArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSheetMoveDrawableZOrderArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSheetMoveDrawableZOrderArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSheetMoveDrawableZOrderArchive::MergeFrom(const CommandSheetMoveDrawableZOrderArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  drawable_infos_.MergeFrom(from.drawable_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_sheet()) {
      mutable_sheet()->::TSP::Reference::MergeFrom(from.sheet());
    }
    if (from.has_indexes()) {
      mutable_indexes()->::TSP::IndexSet::MergeFrom(from.indexes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSheetMoveDrawableZOrderArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSheetMoveDrawableZOrderArchive::CopyFrom(const CommandSheetMoveDrawableZOrderArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSheetMoveDrawableZOrderArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_sheet()) {
    if (!this->sheet().IsInitialized()) return false;
  }
  for (int i = 0; i < drawable_infos_size(); i++) {
    if (!this->drawable_infos(i).IsInitialized()) return false;
  }
  if (has_indexes()) {
    if (!this->indexes().IsInitialized()) return false;
  }
  return true;
}

void CommandSheetMoveDrawableZOrderArchive::Swap(CommandSheetMoveDrawableZOrderArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(sheet_, other->sheet_);
    drawable_infos_.Swap(&other->drawable_infos_);
    std::swap(indexes_, other->indexes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSheetMoveDrawableZOrderArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSheetMoveDrawableZOrderArchive_descriptor_;
  metadata.reflection = CommandSheetMoveDrawableZOrderArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandDocumentInsertSheetArchive::kDocumentFieldNumber;
const int CommandDocumentInsertSheetArchive::kSheetFieldNumber;
const int CommandDocumentInsertSheetArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

CommandDocumentInsertSheetArchive::CommandDocumentInsertSheetArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandDocumentInsertSheetArchive::InitAsDefaultInstance() {
  document_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  sheet_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
}

CommandDocumentInsertSheetArchive::CommandDocumentInsertSheetArchive(const CommandDocumentInsertSheetArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandDocumentInsertSheetArchive::SharedCtor() {
  _cached_size_ = 0;
  document_ = NULL;
  sheet_ = NULL;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandDocumentInsertSheetArchive::~CommandDocumentInsertSheetArchive() {
  SharedDtor();
}

void CommandDocumentInsertSheetArchive::SharedDtor() {
  if (this != default_instance_) {
    delete document_;
    delete sheet_;
    delete super_;
  }
}

void CommandDocumentInsertSheetArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandDocumentInsertSheetArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandDocumentInsertSheetArchive_descriptor_;
}

const CommandDocumentInsertSheetArchive& CommandDocumentInsertSheetArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TNCommandArchives_2eproto();
  return *default_instance_;
}

CommandDocumentInsertSheetArchive* CommandDocumentInsertSheetArchive::default_instance_ = NULL;

CommandDocumentInsertSheetArchive* CommandDocumentInsertSheetArchive::New() const {
  return new CommandDocumentInsertSheetArchive;
}

void CommandDocumentInsertSheetArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_document()) {
      if (document_ != NULL) document_->::TSP::Reference::Clear();
    }
    if (has_sheet()) {
      if (sheet_ != NULL) sheet_->::TSP::Reference::Clear();
    }
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandDocumentInsertSheetArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSP.Reference document = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_document()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sheet;
        break;
      }

      // required .TSP.Reference sheet = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sheet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sheet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_super;
        break;
      }

      // required .TSK.CommandArchive super = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandDocumentInsertSheetArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSP.Reference document = 1;
  if (has_document()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->document(), output);
  }

  // required .TSP.Reference sheet = 2;
  if (has_sheet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sheet(), output);
  }

  // required .TSK.CommandArchive super = 3;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->super(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandDocumentInsertSheetArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSP.Reference document = 1;
  if (has_document()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->document(), target);
  }

  // required .TSP.Reference sheet = 2;
  if (has_sheet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sheet(), target);
  }

  // required .TSK.CommandArchive super = 3;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->super(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandDocumentInsertSheetArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSP.Reference document = 1;
    if (has_document()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->document());
    }

    // required .TSP.Reference sheet = 2;
    if (has_sheet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sheet());
    }

    // required .TSK.CommandArchive super = 3;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandDocumentInsertSheetArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandDocumentInsertSheetArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandDocumentInsertSheetArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandDocumentInsertSheetArchive::MergeFrom(const CommandDocumentInsertSheetArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_document()) {
      mutable_document()->::TSP::Reference::MergeFrom(from.document());
    }
    if (from.has_sheet()) {
      mutable_sheet()->::TSP::Reference::MergeFrom(from.sheet());
    }
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandDocumentInsertSheetArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandDocumentInsertSheetArchive::CopyFrom(const CommandDocumentInsertSheetArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandDocumentInsertSheetArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_document()) {
    if (!this->document().IsInitialized()) return false;
  }
  if (has_sheet()) {
    if (!this->sheet().IsInitialized()) return false;
  }
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandDocumentInsertSheetArchive::Swap(CommandDocumentInsertSheetArchive* other) {
  if (other != this) {
    std::swap(document_, other->document_);
    std::swap(sheet_, other->sheet_);
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandDocumentInsertSheetArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandDocumentInsertSheetArchive_descriptor_;
  metadata.reflection = CommandDocumentInsertSheetArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandDocumentRemoveSheetArchive::kDocumentFieldNumber;
const int CommandDocumentRemoveSheetArchive::kSheetFieldNumber;
const int CommandDocumentRemoveSheetArchive::kIndexFieldNumber;
const int CommandDocumentRemoveSheetArchive::kOldSheetSidebarOrderFieldNumber;
const int CommandDocumentRemoveSheetArchive::kSuperFieldNumber;
const int CommandDocumentRemoveSheetArchive::kFormulaRewriteCommandForUndoFieldNumber;
#endif  // !_MSC_VER

CommandDocumentRemoveSheetArchive::CommandDocumentRemoveSheetArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandDocumentRemoveSheetArchive::InitAsDefaultInstance() {
  document_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  sheet_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  formula_rewrite_command_for_undo_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandDocumentRemoveSheetArchive::CommandDocumentRemoveSheetArchive(const CommandDocumentRemoveSheetArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandDocumentRemoveSheetArchive::SharedCtor() {
  _cached_size_ = 0;
  document_ = NULL;
  sheet_ = NULL;
  index_ = 0u;
  super_ = NULL;
  formula_rewrite_command_for_undo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandDocumentRemoveSheetArchive::~CommandDocumentRemoveSheetArchive() {
  SharedDtor();
}

void CommandDocumentRemoveSheetArchive::SharedDtor() {
  if (this != default_instance_) {
    delete document_;
    delete sheet_;
    delete super_;
    delete formula_rewrite_command_for_undo_;
  }
}

void CommandDocumentRemoveSheetArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandDocumentRemoveSheetArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandDocumentRemoveSheetArchive_descriptor_;
}

const CommandDocumentRemoveSheetArchive& CommandDocumentRemoveSheetArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TNCommandArchives_2eproto();
  return *default_instance_;
}

CommandDocumentRemoveSheetArchive* CommandDocumentRemoveSheetArchive::default_instance_ = NULL;

CommandDocumentRemoveSheetArchive* CommandDocumentRemoveSheetArchive::New() const {
  return new CommandDocumentRemoveSheetArchive;
}

void CommandDocumentRemoveSheetArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_document()) {
      if (document_ != NULL) document_->::TSP::Reference::Clear();
    }
    if (has_sheet()) {
      if (sheet_ != NULL) sheet_->::TSP::Reference::Clear();
    }
    index_ = 0u;
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_formula_rewrite_command_for_undo()) {
      if (formula_rewrite_command_for_undo_ != NULL) formula_rewrite_command_for_undo_->::TSP::Reference::Clear();
    }
  }
  old_sheet_sidebar_order_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandDocumentRemoveSheetArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSP.Reference document = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_document()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sheet;
        break;
      }

      // required .TSP.Reference sheet = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sheet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sheet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // required uint32 index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_old_sheet_sidebar_order;
        break;
      }

      // repeated .TSP.Reference old_sheet_sidebar_order = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_sheet_sidebar_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_old_sheet_sidebar_order()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_old_sheet_sidebar_order;
        if (input->ExpectTag(42)) goto parse_super;
        break;
      }

      // required .TSK.CommandArchive super = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_formula_rewrite_command_for_undo;
        break;
      }

      // optional .TSP.Reference formula_rewrite_command_for_undo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_formula_rewrite_command_for_undo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_formula_rewrite_command_for_undo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandDocumentRemoveSheetArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSP.Reference document = 1;
  if (has_document()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->document(), output);
  }

  // required .TSP.Reference sheet = 2;
  if (has_sheet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sheet(), output);
  }

  // required uint32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->index(), output);
  }

  // repeated .TSP.Reference old_sheet_sidebar_order = 4;
  for (int i = 0; i < this->old_sheet_sidebar_order_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->old_sheet_sidebar_order(i), output);
  }

  // required .TSK.CommandArchive super = 5;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->super(), output);
  }

  // optional .TSP.Reference formula_rewrite_command_for_undo = 6;
  if (has_formula_rewrite_command_for_undo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->formula_rewrite_command_for_undo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandDocumentRemoveSheetArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSP.Reference document = 1;
  if (has_document()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->document(), target);
  }

  // required .TSP.Reference sheet = 2;
  if (has_sheet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sheet(), target);
  }

  // required uint32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->index(), target);
  }

  // repeated .TSP.Reference old_sheet_sidebar_order = 4;
  for (int i = 0; i < this->old_sheet_sidebar_order_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->old_sheet_sidebar_order(i), target);
  }

  // required .TSK.CommandArchive super = 5;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->super(), target);
  }

  // optional .TSP.Reference formula_rewrite_command_for_undo = 6;
  if (has_formula_rewrite_command_for_undo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->formula_rewrite_command_for_undo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandDocumentRemoveSheetArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSP.Reference document = 1;
    if (has_document()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->document());
    }

    // required .TSP.Reference sheet = 2;
    if (has_sheet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sheet());
    }

    // required uint32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // required .TSK.CommandArchive super = 5;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference formula_rewrite_command_for_undo = 6;
    if (has_formula_rewrite_command_for_undo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->formula_rewrite_command_for_undo());
    }

  }
  // repeated .TSP.Reference old_sheet_sidebar_order = 4;
  total_size += 1 * this->old_sheet_sidebar_order_size();
  for (int i = 0; i < this->old_sheet_sidebar_order_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->old_sheet_sidebar_order(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandDocumentRemoveSheetArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandDocumentRemoveSheetArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandDocumentRemoveSheetArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandDocumentRemoveSheetArchive::MergeFrom(const CommandDocumentRemoveSheetArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  old_sheet_sidebar_order_.MergeFrom(from.old_sheet_sidebar_order_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_document()) {
      mutable_document()->::TSP::Reference::MergeFrom(from.document());
    }
    if (from.has_sheet()) {
      mutable_sheet()->::TSP::Reference::MergeFrom(from.sheet());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_formula_rewrite_command_for_undo()) {
      mutable_formula_rewrite_command_for_undo()->::TSP::Reference::MergeFrom(from.formula_rewrite_command_for_undo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandDocumentRemoveSheetArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandDocumentRemoveSheetArchive::CopyFrom(const CommandDocumentRemoveSheetArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandDocumentRemoveSheetArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;

  if (has_document()) {
    if (!this->document().IsInitialized()) return false;
  }
  if (has_sheet()) {
    if (!this->sheet().IsInitialized()) return false;
  }
  for (int i = 0; i < old_sheet_sidebar_order_size(); i++) {
    if (!this->old_sheet_sidebar_order(i).IsInitialized()) return false;
  }
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_formula_rewrite_command_for_undo()) {
    if (!this->formula_rewrite_command_for_undo().IsInitialized()) return false;
  }
  return true;
}

void CommandDocumentRemoveSheetArchive::Swap(CommandDocumentRemoveSheetArchive* other) {
  if (other != this) {
    std::swap(document_, other->document_);
    std::swap(sheet_, other->sheet_);
    std::swap(index_, other->index_);
    old_sheet_sidebar_order_.Swap(&other->old_sheet_sidebar_order_);
    std::swap(super_, other->super_);
    std::swap(formula_rewrite_command_for_undo_, other->formula_rewrite_command_for_undo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandDocumentRemoveSheetArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandDocumentRemoveSheetArchive_descriptor_;
  metadata.reflection = CommandDocumentRemoveSheetArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandDocumentReplaceLastSheetArchive::kDocumentFieldNumber;
const int CommandDocumentReplaceLastSheetArchive::kLastSheetFieldNumber;
const int CommandDocumentReplaceLastSheetArchive::kNewSheetFieldNumber;
const int CommandDocumentReplaceLastSheetArchive::kSuperFieldNumber;
const int CommandDocumentReplaceLastSheetArchive::kIndexFieldNumber;
#endif  // !_MSC_VER

CommandDocumentReplaceLastSheetArchive::CommandDocumentReplaceLastSheetArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandDocumentReplaceLastSheetArchive::InitAsDefaultInstance() {
  document_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  last_sheet_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  new_sheet_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
}

CommandDocumentReplaceLastSheetArchive::CommandDocumentReplaceLastSheetArchive(const CommandDocumentReplaceLastSheetArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandDocumentReplaceLastSheetArchive::SharedCtor() {
  _cached_size_ = 0;
  document_ = NULL;
  last_sheet_ = NULL;
  new_sheet_ = NULL;
  super_ = NULL;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandDocumentReplaceLastSheetArchive::~CommandDocumentReplaceLastSheetArchive() {
  SharedDtor();
}

void CommandDocumentReplaceLastSheetArchive::SharedDtor() {
  if (this != default_instance_) {
    delete document_;
    delete last_sheet_;
    delete new_sheet_;
    delete super_;
  }
}

void CommandDocumentReplaceLastSheetArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandDocumentReplaceLastSheetArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandDocumentReplaceLastSheetArchive_descriptor_;
}

const CommandDocumentReplaceLastSheetArchive& CommandDocumentReplaceLastSheetArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TNCommandArchives_2eproto();
  return *default_instance_;
}

CommandDocumentReplaceLastSheetArchive* CommandDocumentReplaceLastSheetArchive::default_instance_ = NULL;

CommandDocumentReplaceLastSheetArchive* CommandDocumentReplaceLastSheetArchive::New() const {
  return new CommandDocumentReplaceLastSheetArchive;
}

void CommandDocumentReplaceLastSheetArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_document()) {
      if (document_ != NULL) document_->::TSP::Reference::Clear();
    }
    if (has_last_sheet()) {
      if (last_sheet_ != NULL) last_sheet_->::TSP::Reference::Clear();
    }
    if (has_new_sheet()) {
      if (new_sheet_ != NULL) new_sheet_->::TSP::Reference::Clear();
    }
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandDocumentReplaceLastSheetArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSP.Reference document = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_document()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_last_sheet;
        break;
      }

      // required .TSP.Reference last_sheet = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_last_sheet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_last_sheet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_new_sheet;
        break;
      }

      // required .TSP.Reference new_sheet = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_sheet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_sheet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_super;
        break;
      }

      // required .TSK.CommandArchive super = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_index;
        break;
      }

      // optional uint32 index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandDocumentReplaceLastSheetArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSP.Reference document = 1;
  if (has_document()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->document(), output);
  }

  // required .TSP.Reference last_sheet = 2;
  if (has_last_sheet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->last_sheet(), output);
  }

  // required .TSP.Reference new_sheet = 3;
  if (has_new_sheet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->new_sheet(), output);
  }

  // required .TSK.CommandArchive super = 4;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->super(), output);
  }

  // optional uint32 index = 5;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandDocumentReplaceLastSheetArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSP.Reference document = 1;
  if (has_document()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->document(), target);
  }

  // required .TSP.Reference last_sheet = 2;
  if (has_last_sheet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->last_sheet(), target);
  }

  // required .TSP.Reference new_sheet = 3;
  if (has_new_sheet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->new_sheet(), target);
  }

  // required .TSK.CommandArchive super = 4;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->super(), target);
  }

  // optional uint32 index = 5;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandDocumentReplaceLastSheetArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSP.Reference document = 1;
    if (has_document()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->document());
    }

    // required .TSP.Reference last_sheet = 2;
    if (has_last_sheet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->last_sheet());
    }

    // required .TSP.Reference new_sheet = 3;
    if (has_new_sheet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_sheet());
    }

    // required .TSK.CommandArchive super = 4;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional uint32 index = 5;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandDocumentReplaceLastSheetArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandDocumentReplaceLastSheetArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandDocumentReplaceLastSheetArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandDocumentReplaceLastSheetArchive::MergeFrom(const CommandDocumentReplaceLastSheetArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_document()) {
      mutable_document()->::TSP::Reference::MergeFrom(from.document());
    }
    if (from.has_last_sheet()) {
      mutable_last_sheet()->::TSP::Reference::MergeFrom(from.last_sheet());
    }
    if (from.has_new_sheet()) {
      mutable_new_sheet()->::TSP::Reference::MergeFrom(from.new_sheet());
    }
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandDocumentReplaceLastSheetArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandDocumentReplaceLastSheetArchive::CopyFrom(const CommandDocumentReplaceLastSheetArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandDocumentReplaceLastSheetArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_document()) {
    if (!this->document().IsInitialized()) return false;
  }
  if (has_last_sheet()) {
    if (!this->last_sheet().IsInitialized()) return false;
  }
  if (has_new_sheet()) {
    if (!this->new_sheet().IsInitialized()) return false;
  }
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandDocumentReplaceLastSheetArchive::Swap(CommandDocumentReplaceLastSheetArchive* other) {
  if (other != this) {
    std::swap(document_, other->document_);
    std::swap(last_sheet_, other->last_sheet_);
    std::swap(new_sheet_, other->new_sheet_);
    std::swap(super_, other->super_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandDocumentReplaceLastSheetArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandDocumentReplaceLastSheetArchive_descriptor_;
  metadata.reflection = CommandDocumentReplaceLastSheetArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandDocumentReorderSheetArchive::kDocumentFieldNumber;
const int CommandDocumentReorderSheetArchive::kSheetFieldNumber;
const int CommandDocumentReorderSheetArchive::kSourceIndexFieldNumber;
const int CommandDocumentReorderSheetArchive::kDestIndexFieldNumber;
const int CommandDocumentReorderSheetArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

CommandDocumentReorderSheetArchive::CommandDocumentReorderSheetArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandDocumentReorderSheetArchive::InitAsDefaultInstance() {
  document_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  sheet_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
}

CommandDocumentReorderSheetArchive::CommandDocumentReorderSheetArchive(const CommandDocumentReorderSheetArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandDocumentReorderSheetArchive::SharedCtor() {
  _cached_size_ = 0;
  document_ = NULL;
  sheet_ = NULL;
  source_index_ = 0u;
  dest_index_ = 0u;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandDocumentReorderSheetArchive::~CommandDocumentReorderSheetArchive() {
  SharedDtor();
}

void CommandDocumentReorderSheetArchive::SharedDtor() {
  if (this != default_instance_) {
    delete document_;
    delete sheet_;
    delete super_;
  }
}

void CommandDocumentReorderSheetArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandDocumentReorderSheetArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandDocumentReorderSheetArchive_descriptor_;
}

const CommandDocumentReorderSheetArchive& CommandDocumentReorderSheetArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TNCommandArchives_2eproto();
  return *default_instance_;
}

CommandDocumentReorderSheetArchive* CommandDocumentReorderSheetArchive::default_instance_ = NULL;

CommandDocumentReorderSheetArchive* CommandDocumentReorderSheetArchive::New() const {
  return new CommandDocumentReorderSheetArchive;
}

void CommandDocumentReorderSheetArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_document()) {
      if (document_ != NULL) document_->::TSP::Reference::Clear();
    }
    if (has_sheet()) {
      if (sheet_ != NULL) sheet_->::TSP::Reference::Clear();
    }
    source_index_ = 0u;
    dest_index_ = 0u;
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandDocumentReorderSheetArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSP.Reference document = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_document()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sheet;
        break;
      }

      // required .TSP.Reference sheet = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sheet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sheet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_source_index;
        break;
      }

      // required uint32 source_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_index_)));
          set_has_source_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dest_index;
        break;
      }

      // required uint32 dest_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dest_index_)));
          set_has_dest_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_super;
        break;
      }

      // required .TSK.CommandArchive super = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandDocumentReorderSheetArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSP.Reference document = 1;
  if (has_document()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->document(), output);
  }

  // required .TSP.Reference sheet = 2;
  if (has_sheet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sheet(), output);
  }

  // required uint32 source_index = 3;
  if (has_source_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->source_index(), output);
  }

  // required uint32 dest_index = 4;
  if (has_dest_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dest_index(), output);
  }

  // required .TSK.CommandArchive super = 5;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->super(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandDocumentReorderSheetArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSP.Reference document = 1;
  if (has_document()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->document(), target);
  }

  // required .TSP.Reference sheet = 2;
  if (has_sheet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sheet(), target);
  }

  // required uint32 source_index = 3;
  if (has_source_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->source_index(), target);
  }

  // required uint32 dest_index = 4;
  if (has_dest_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dest_index(), target);
  }

  // required .TSK.CommandArchive super = 5;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->super(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandDocumentReorderSheetArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSP.Reference document = 1;
    if (has_document()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->document());
    }

    // required .TSP.Reference sheet = 2;
    if (has_sheet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sheet());
    }

    // required uint32 source_index = 3;
    if (has_source_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_index());
    }

    // required uint32 dest_index = 4;
    if (has_dest_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dest_index());
    }

    // required .TSK.CommandArchive super = 5;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandDocumentReorderSheetArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandDocumentReorderSheetArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandDocumentReorderSheetArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandDocumentReorderSheetArchive::MergeFrom(const CommandDocumentReorderSheetArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_document()) {
      mutable_document()->::TSP::Reference::MergeFrom(from.document());
    }
    if (from.has_sheet()) {
      mutable_sheet()->::TSP::Reference::MergeFrom(from.sheet());
    }
    if (from.has_source_index()) {
      set_source_index(from.source_index());
    }
    if (from.has_dest_index()) {
      set_dest_index(from.dest_index());
    }
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandDocumentReorderSheetArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandDocumentReorderSheetArchive::CopyFrom(const CommandDocumentReorderSheetArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandDocumentReorderSheetArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_document()) {
    if (!this->document().IsInitialized()) return false;
  }
  if (has_sheet()) {
    if (!this->sheet().IsInitialized()) return false;
  }
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandDocumentReorderSheetArchive::Swap(CommandDocumentReorderSheetArchive* other) {
  if (other != this) {
    std::swap(document_, other->document_);
    std::swap(sheet_, other->sheet_);
    std::swap(source_index_, other->source_index_);
    std::swap(dest_index_, other->dest_index_);
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandDocumentReorderSheetArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandDocumentReorderSheetArchive_descriptor_;
  metadata.reflection = CommandDocumentReorderSheetArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetSheetNameArchive::kNewnameFieldNumber;
const int CommandSetSheetNameArchive::kOldnameFieldNumber;
const int CommandSetSheetNameArchive::kSheetFieldNumber;
const int CommandSetSheetNameArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

CommandSetSheetNameArchive::CommandSetSheetNameArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetSheetNameArchive::InitAsDefaultInstance() {
  sheet_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
}

CommandSetSheetNameArchive::CommandSetSheetNameArchive(const CommandSetSheetNameArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetSheetNameArchive::SharedCtor() {
  _cached_size_ = 0;
  newname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  oldname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sheet_ = NULL;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetSheetNameArchive::~CommandSetSheetNameArchive() {
  SharedDtor();
}

void CommandSetSheetNameArchive::SharedDtor() {
  if (newname_ != &::google::protobuf::internal::kEmptyString) {
    delete newname_;
  }
  if (oldname_ != &::google::protobuf::internal::kEmptyString) {
    delete oldname_;
  }
  if (this != default_instance_) {
    delete sheet_;
    delete super_;
  }
}

void CommandSetSheetNameArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetSheetNameArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetSheetNameArchive_descriptor_;
}

const CommandSetSheetNameArchive& CommandSetSheetNameArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TNCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetSheetNameArchive* CommandSetSheetNameArchive::default_instance_ = NULL;

CommandSetSheetNameArchive* CommandSetSheetNameArchive::New() const {
  return new CommandSetSheetNameArchive;
}

void CommandSetSheetNameArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_newname()) {
      if (newname_ != &::google::protobuf::internal::kEmptyString) {
        newname_->clear();
      }
    }
    if (has_oldname()) {
      if (oldname_ != &::google::protobuf::internal::kEmptyString) {
        oldname_->clear();
      }
    }
    if (has_sheet()) {
      if (sheet_ != NULL) sheet_->::TSP::Reference::Clear();
    }
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetSheetNameArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string newname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->newname().data(), this->newname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_oldname;
        break;
      }

      // required string oldname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oldname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oldname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->oldname().data(), this->oldname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sheet;
        break;
      }

      // required .TSP.Reference sheet = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sheet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sheet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_super;
        break;
      }

      // required .TSK.CommandArchive super = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetSheetNameArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string newname = 1;
  if (has_newname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newname().data(), this->newname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->newname(), output);
  }

  // required string oldname = 2;
  if (has_oldname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oldname().data(), this->oldname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->oldname(), output);
  }

  // required .TSP.Reference sheet = 3;
  if (has_sheet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sheet(), output);
  }

  // required .TSK.CommandArchive super = 4;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->super(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetSheetNameArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string newname = 1;
  if (has_newname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newname().data(), this->newname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->newname(), target);
  }

  // required string oldname = 2;
  if (has_oldname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oldname().data(), this->oldname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->oldname(), target);
  }

  // required .TSP.Reference sheet = 3;
  if (has_sheet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sheet(), target);
  }

  // required .TSK.CommandArchive super = 4;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->super(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetSheetNameArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string newname = 1;
    if (has_newname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newname());
    }

    // required string oldname = 2;
    if (has_oldname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oldname());
    }

    // required .TSP.Reference sheet = 3;
    if (has_sheet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sheet());
    }

    // required .TSK.CommandArchive super = 4;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetSheetNameArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetSheetNameArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetSheetNameArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetSheetNameArchive::MergeFrom(const CommandSetSheetNameArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_newname()) {
      set_newname(from.newname());
    }
    if (from.has_oldname()) {
      set_oldname(from.oldname());
    }
    if (from.has_sheet()) {
      mutable_sheet()->::TSP::Reference::MergeFrom(from.sheet());
    }
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetSheetNameArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetSheetNameArchive::CopyFrom(const CommandSetSheetNameArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetSheetNameArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_sheet()) {
    if (!this->sheet().IsInitialized()) return false;
  }
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandSetSheetNameArchive::Swap(CommandSetSheetNameArchive* other) {
  if (other != this) {
    std::swap(newname_, other->newname_);
    std::swap(oldname_, other->oldname_);
    std::swap(sheet_, other->sheet_);
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetSheetNameArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetSheetNameArchive_descriptor_;
  metadata.reflection = CommandSetSheetNameArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetPageOrientationArchive::kInPortraitPageOrientationFieldNumber;
const int CommandSetPageOrientationArchive::kSheetFieldNumber;
const int CommandSetPageOrientationArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

CommandSetPageOrientationArchive::CommandSetPageOrientationArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetPageOrientationArchive::InitAsDefaultInstance() {
  sheet_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
}

CommandSetPageOrientationArchive::CommandSetPageOrientationArchive(const CommandSetPageOrientationArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetPageOrientationArchive::SharedCtor() {
  _cached_size_ = 0;
  in_portrait_page_orientation_ = false;
  sheet_ = NULL;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetPageOrientationArchive::~CommandSetPageOrientationArchive() {
  SharedDtor();
}

void CommandSetPageOrientationArchive::SharedDtor() {
  if (this != default_instance_) {
    delete sheet_;
    delete super_;
  }
}

void CommandSetPageOrientationArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetPageOrientationArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetPageOrientationArchive_descriptor_;
}

const CommandSetPageOrientationArchive& CommandSetPageOrientationArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TNCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetPageOrientationArchive* CommandSetPageOrientationArchive::default_instance_ = NULL;

CommandSetPageOrientationArchive* CommandSetPageOrientationArchive::New() const {
  return new CommandSetPageOrientationArchive;
}

void CommandSetPageOrientationArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    in_portrait_page_orientation_ = false;
    if (has_sheet()) {
      if (sheet_ != NULL) sheet_->::TSP::Reference::Clear();
    }
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetPageOrientationArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool in_portrait_page_orientation = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_portrait_page_orientation_)));
          set_has_in_portrait_page_orientation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sheet;
        break;
      }

      // required .TSP.Reference sheet = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sheet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sheet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_super;
        break;
      }

      // required .TSK.CommandArchive super = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetPageOrientationArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool in_portrait_page_orientation = 1;
  if (has_in_portrait_page_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->in_portrait_page_orientation(), output);
  }

  // required .TSP.Reference sheet = 2;
  if (has_sheet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sheet(), output);
  }

  // required .TSK.CommandArchive super = 3;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->super(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetPageOrientationArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool in_portrait_page_orientation = 1;
  if (has_in_portrait_page_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->in_portrait_page_orientation(), target);
  }

  // required .TSP.Reference sheet = 2;
  if (has_sheet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sheet(), target);
  }

  // required .TSK.CommandArchive super = 3;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->super(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetPageOrientationArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool in_portrait_page_orientation = 1;
    if (has_in_portrait_page_orientation()) {
      total_size += 1 + 1;
    }

    // required .TSP.Reference sheet = 2;
    if (has_sheet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sheet());
    }

    // required .TSK.CommandArchive super = 3;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetPageOrientationArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetPageOrientationArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetPageOrientationArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetPageOrientationArchive::MergeFrom(const CommandSetPageOrientationArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_in_portrait_page_orientation()) {
      set_in_portrait_page_orientation(from.in_portrait_page_orientation());
    }
    if (from.has_sheet()) {
      mutable_sheet()->::TSP::Reference::MergeFrom(from.sheet());
    }
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetPageOrientationArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetPageOrientationArchive::CopyFrom(const CommandSetPageOrientationArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetPageOrientationArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_sheet()) {
    if (!this->sheet().IsInitialized()) return false;
  }
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandSetPageOrientationArchive::Swap(CommandSetPageOrientationArchive* other) {
  if (other != this) {
    std::swap(in_portrait_page_orientation_, other->in_portrait_page_orientation_);
    std::swap(sheet_, other->sheet_);
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetPageOrientationArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetPageOrientationArchive_descriptor_;
  metadata.reflection = CommandSetPageOrientationArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetShowPageNumbersValueArchive::kShowPageNumbersFieldNumber;
const int CommandSetShowPageNumbersValueArchive::kSheetFieldNumber;
const int CommandSetShowPageNumbersValueArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

CommandSetShowPageNumbersValueArchive::CommandSetShowPageNumbersValueArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetShowPageNumbersValueArchive::InitAsDefaultInstance() {
  sheet_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
}

CommandSetShowPageNumbersValueArchive::CommandSetShowPageNumbersValueArchive(const CommandSetShowPageNumbersValueArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetShowPageNumbersValueArchive::SharedCtor() {
  _cached_size_ = 0;
  show_page_numbers_ = false;
  sheet_ = NULL;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetShowPageNumbersValueArchive::~CommandSetShowPageNumbersValueArchive() {
  SharedDtor();
}

void CommandSetShowPageNumbersValueArchive::SharedDtor() {
  if (this != default_instance_) {
    delete sheet_;
    delete super_;
  }
}

void CommandSetShowPageNumbersValueArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetShowPageNumbersValueArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetShowPageNumbersValueArchive_descriptor_;
}

const CommandSetShowPageNumbersValueArchive& CommandSetShowPageNumbersValueArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TNCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetShowPageNumbersValueArchive* CommandSetShowPageNumbersValueArchive::default_instance_ = NULL;

CommandSetShowPageNumbersValueArchive* CommandSetShowPageNumbersValueArchive::New() const {
  return new CommandSetShowPageNumbersValueArchive;
}

void CommandSetShowPageNumbersValueArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    show_page_numbers_ = false;
    if (has_sheet()) {
      if (sheet_ != NULL) sheet_->::TSP::Reference::Clear();
    }
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetShowPageNumbersValueArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool show_page_numbers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_page_numbers_)));
          set_has_show_page_numbers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sheet;
        break;
      }

      // required .TSP.Reference sheet = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sheet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sheet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_super;
        break;
      }

      // required .TSK.CommandArchive super = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetShowPageNumbersValueArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool show_page_numbers = 1;
  if (has_show_page_numbers()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->show_page_numbers(), output);
  }

  // required .TSP.Reference sheet = 2;
  if (has_sheet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sheet(), output);
  }

  // required .TSK.CommandArchive super = 3;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->super(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetShowPageNumbersValueArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool show_page_numbers = 1;
  if (has_show_page_numbers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->show_page_numbers(), target);
  }

  // required .TSP.Reference sheet = 2;
  if (has_sheet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sheet(), target);
  }

  // required .TSK.CommandArchive super = 3;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->super(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetShowPageNumbersValueArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool show_page_numbers = 1;
    if (has_show_page_numbers()) {
      total_size += 1 + 1;
    }

    // required .TSP.Reference sheet = 2;
    if (has_sheet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sheet());
    }

    // required .TSK.CommandArchive super = 3;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetShowPageNumbersValueArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetShowPageNumbersValueArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetShowPageNumbersValueArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetShowPageNumbersValueArchive::MergeFrom(const CommandSetShowPageNumbersValueArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_show_page_numbers()) {
      set_show_page_numbers(from.show_page_numbers());
    }
    if (from.has_sheet()) {
      mutable_sheet()->::TSP::Reference::MergeFrom(from.sheet());
    }
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetShowPageNumbersValueArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetShowPageNumbersValueArchive::CopyFrom(const CommandSetShowPageNumbersValueArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetShowPageNumbersValueArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_sheet()) {
    if (!this->sheet().IsInitialized()) return false;
  }
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandSetShowPageNumbersValueArchive::Swap(CommandSetShowPageNumbersValueArchive* other) {
  if (other != this) {
    std::swap(show_page_numbers_, other->show_page_numbers_);
    std::swap(sheet_, other->sheet_);
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetShowPageNumbersValueArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetShowPageNumbersValueArchive_descriptor_;
  metadata.reflection = CommandSetShowPageNumbersValueArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetRepeatingHeadersValueArchive::kShowRepeatingHeadersFieldNumber;
const int CommandSetRepeatingHeadersValueArchive::kSheetFieldNumber;
const int CommandSetRepeatingHeadersValueArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

CommandSetRepeatingHeadersValueArchive::CommandSetRepeatingHeadersValueArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetRepeatingHeadersValueArchive::InitAsDefaultInstance() {
  sheet_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
}

CommandSetRepeatingHeadersValueArchive::CommandSetRepeatingHeadersValueArchive(const CommandSetRepeatingHeadersValueArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetRepeatingHeadersValueArchive::SharedCtor() {
  _cached_size_ = 0;
  show_repeating_headers_ = false;
  sheet_ = NULL;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetRepeatingHeadersValueArchive::~CommandSetRepeatingHeadersValueArchive() {
  SharedDtor();
}

void CommandSetRepeatingHeadersValueArchive::SharedDtor() {
  if (this != default_instance_) {
    delete sheet_;
    delete super_;
  }
}

void CommandSetRepeatingHeadersValueArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetRepeatingHeadersValueArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetRepeatingHeadersValueArchive_descriptor_;
}

const CommandSetRepeatingHeadersValueArchive& CommandSetRepeatingHeadersValueArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TNCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetRepeatingHeadersValueArchive* CommandSetRepeatingHeadersValueArchive::default_instance_ = NULL;

CommandSetRepeatingHeadersValueArchive* CommandSetRepeatingHeadersValueArchive::New() const {
  return new CommandSetRepeatingHeadersValueArchive;
}

void CommandSetRepeatingHeadersValueArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    show_repeating_headers_ = false;
    if (has_sheet()) {
      if (sheet_ != NULL) sheet_->::TSP::Reference::Clear();
    }
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetRepeatingHeadersValueArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool show_repeating_headers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_repeating_headers_)));
          set_has_show_repeating_headers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sheet;
        break;
      }

      // required .TSP.Reference sheet = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sheet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sheet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_super;
        break;
      }

      // required .TSK.CommandArchive super = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetRepeatingHeadersValueArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool show_repeating_headers = 1;
  if (has_show_repeating_headers()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->show_repeating_headers(), output);
  }

  // required .TSP.Reference sheet = 2;
  if (has_sheet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sheet(), output);
  }

  // required .TSK.CommandArchive super = 3;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->super(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetRepeatingHeadersValueArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool show_repeating_headers = 1;
  if (has_show_repeating_headers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->show_repeating_headers(), target);
  }

  // required .TSP.Reference sheet = 2;
  if (has_sheet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sheet(), target);
  }

  // required .TSK.CommandArchive super = 3;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->super(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetRepeatingHeadersValueArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool show_repeating_headers = 1;
    if (has_show_repeating_headers()) {
      total_size += 1 + 1;
    }

    // required .TSP.Reference sheet = 2;
    if (has_sheet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sheet());
    }

    // required .TSK.CommandArchive super = 3;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetRepeatingHeadersValueArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetRepeatingHeadersValueArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetRepeatingHeadersValueArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetRepeatingHeadersValueArchive::MergeFrom(const CommandSetRepeatingHeadersValueArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_show_repeating_headers()) {
      set_show_repeating_headers(from.show_repeating_headers());
    }
    if (from.has_sheet()) {
      mutable_sheet()->::TSP::Reference::MergeFrom(from.sheet());
    }
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetRepeatingHeadersValueArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetRepeatingHeadersValueArchive::CopyFrom(const CommandSetRepeatingHeadersValueArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetRepeatingHeadersValueArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_sheet()) {
    if (!this->sheet().IsInitialized()) return false;
  }
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandSetRepeatingHeadersValueArchive::Swap(CommandSetRepeatingHeadersValueArchive* other) {
  if (other != this) {
    std::swap(show_repeating_headers_, other->show_repeating_headers_);
    std::swap(sheet_, other->sheet_);
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetRepeatingHeadersValueArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetRepeatingHeadersValueArchive_descriptor_;
  metadata.reflection = CommandSetRepeatingHeadersValueArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetContentScaleArchive::kIsAutofitOnFieldNumber;
const int CommandSetContentScaleArchive::kOldContentScaleFieldNumber;
const int CommandSetContentScaleArchive::kNewContentScaleFieldNumber;
const int CommandSetContentScaleArchive::kSheetFieldNumber;
const int CommandSetContentScaleArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

CommandSetContentScaleArchive::CommandSetContentScaleArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetContentScaleArchive::InitAsDefaultInstance() {
  sheet_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
}

CommandSetContentScaleArchive::CommandSetContentScaleArchive(const CommandSetContentScaleArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetContentScaleArchive::SharedCtor() {
  _cached_size_ = 0;
  is_autofit_on_ = false;
  old_content_scale_ = 0;
  new_content_scale_ = 0;
  sheet_ = NULL;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetContentScaleArchive::~CommandSetContentScaleArchive() {
  SharedDtor();
}

void CommandSetContentScaleArchive::SharedDtor() {
  if (this != default_instance_) {
    delete sheet_;
    delete super_;
  }
}

void CommandSetContentScaleArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetContentScaleArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetContentScaleArchive_descriptor_;
}

const CommandSetContentScaleArchive& CommandSetContentScaleArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TNCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetContentScaleArchive* CommandSetContentScaleArchive::default_instance_ = NULL;

CommandSetContentScaleArchive* CommandSetContentScaleArchive::New() const {
  return new CommandSetContentScaleArchive;
}

void CommandSetContentScaleArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_autofit_on_ = false;
    old_content_scale_ = 0;
    new_content_scale_ = 0;
    if (has_sheet()) {
      if (sheet_ != NULL) sheet_->::TSP::Reference::Clear();
    }
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetContentScaleArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_autofit_on = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_autofit_on_)));
          set_has_is_autofit_on();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_old_content_scale;
        break;
      }

      // required float old_content_scale = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_old_content_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &old_content_scale_)));
          set_has_old_content_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_new_content_scale;
        break;
      }

      // optional float new_content_scale = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_new_content_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &new_content_scale_)));
          set_has_new_content_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sheet;
        break;
      }

      // required .TSP.Reference sheet = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sheet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sheet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_super;
        break;
      }

      // required .TSK.CommandArchive super = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetContentScaleArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_autofit_on = 1;
  if (has_is_autofit_on()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_autofit_on(), output);
  }

  // required float old_content_scale = 2;
  if (has_old_content_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->old_content_scale(), output);
  }

  // optional float new_content_scale = 3;
  if (has_new_content_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->new_content_scale(), output);
  }

  // required .TSP.Reference sheet = 4;
  if (has_sheet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sheet(), output);
  }

  // required .TSK.CommandArchive super = 5;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->super(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetContentScaleArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_autofit_on = 1;
  if (has_is_autofit_on()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_autofit_on(), target);
  }

  // required float old_content_scale = 2;
  if (has_old_content_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->old_content_scale(), target);
  }

  // optional float new_content_scale = 3;
  if (has_new_content_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->new_content_scale(), target);
  }

  // required .TSP.Reference sheet = 4;
  if (has_sheet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->sheet(), target);
  }

  // required .TSK.CommandArchive super = 5;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->super(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetContentScaleArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_autofit_on = 1;
    if (has_is_autofit_on()) {
      total_size += 1 + 1;
    }

    // required float old_content_scale = 2;
    if (has_old_content_scale()) {
      total_size += 1 + 4;
    }

    // optional float new_content_scale = 3;
    if (has_new_content_scale()) {
      total_size += 1 + 4;
    }

    // required .TSP.Reference sheet = 4;
    if (has_sheet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sheet());
    }

    // required .TSK.CommandArchive super = 5;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetContentScaleArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetContentScaleArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetContentScaleArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetContentScaleArchive::MergeFrom(const CommandSetContentScaleArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_autofit_on()) {
      set_is_autofit_on(from.is_autofit_on());
    }
    if (from.has_old_content_scale()) {
      set_old_content_scale(from.old_content_scale());
    }
    if (from.has_new_content_scale()) {
      set_new_content_scale(from.new_content_scale());
    }
    if (from.has_sheet()) {
      mutable_sheet()->::TSP::Reference::MergeFrom(from.sheet());
    }
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetContentScaleArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetContentScaleArchive::CopyFrom(const CommandSetContentScaleArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetContentScaleArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;

  if (has_sheet()) {
    if (!this->sheet().IsInitialized()) return false;
  }
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandSetContentScaleArchive::Swap(CommandSetContentScaleArchive* other) {
  if (other != this) {
    std::swap(is_autofit_on_, other->is_autofit_on_);
    std::swap(old_content_scale_, other->old_content_scale_);
    std::swap(new_content_scale_, other->new_content_scale_);
    std::swap(sheet_, other->sheet_);
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetContentScaleArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetContentScaleArchive_descriptor_;
  metadata.reflection = CommandSetContentScaleArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetAutofitValueArchive::kOldContentScaleFieldNumber;
const int CommandSetAutofitValueArchive::kSheetFieldNumber;
const int CommandSetAutofitValueArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

CommandSetAutofitValueArchive::CommandSetAutofitValueArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetAutofitValueArchive::InitAsDefaultInstance() {
  sheet_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
}

CommandSetAutofitValueArchive::CommandSetAutofitValueArchive(const CommandSetAutofitValueArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetAutofitValueArchive::SharedCtor() {
  _cached_size_ = 0;
  old_content_scale_ = 0;
  sheet_ = NULL;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetAutofitValueArchive::~CommandSetAutofitValueArchive() {
  SharedDtor();
}

void CommandSetAutofitValueArchive::SharedDtor() {
  if (this != default_instance_) {
    delete sheet_;
    delete super_;
  }
}

void CommandSetAutofitValueArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetAutofitValueArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetAutofitValueArchive_descriptor_;
}

const CommandSetAutofitValueArchive& CommandSetAutofitValueArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TNCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetAutofitValueArchive* CommandSetAutofitValueArchive::default_instance_ = NULL;

CommandSetAutofitValueArchive* CommandSetAutofitValueArchive::New() const {
  return new CommandSetAutofitValueArchive;
}

void CommandSetAutofitValueArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    old_content_scale_ = 0;
    if (has_sheet()) {
      if (sheet_ != NULL) sheet_->::TSP::Reference::Clear();
    }
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetAutofitValueArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float old_content_scale = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &old_content_scale_)));
          set_has_old_content_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sheet;
        break;
      }

      // required .TSP.Reference sheet = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sheet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sheet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_super;
        break;
      }

      // required .TSK.CommandArchive super = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetAutofitValueArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float old_content_scale = 1;
  if (has_old_content_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->old_content_scale(), output);
  }

  // required .TSP.Reference sheet = 2;
  if (has_sheet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sheet(), output);
  }

  // required .TSK.CommandArchive super = 3;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->super(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetAutofitValueArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float old_content_scale = 1;
  if (has_old_content_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->old_content_scale(), target);
  }

  // required .TSP.Reference sheet = 2;
  if (has_sheet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sheet(), target);
  }

  // required .TSK.CommandArchive super = 3;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->super(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetAutofitValueArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float old_content_scale = 1;
    if (has_old_content_scale()) {
      total_size += 1 + 4;
    }

    // required .TSP.Reference sheet = 2;
    if (has_sheet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sheet());
    }

    // required .TSK.CommandArchive super = 3;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetAutofitValueArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetAutofitValueArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetAutofitValueArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetAutofitValueArchive::MergeFrom(const CommandSetAutofitValueArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_old_content_scale()) {
      set_old_content_scale(from.old_content_scale());
    }
    if (from.has_sheet()) {
      mutable_sheet()->::TSP::Reference::MergeFrom(from.sheet());
    }
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetAutofitValueArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetAutofitValueArchive::CopyFrom(const CommandSetAutofitValueArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetAutofitValueArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_sheet()) {
    if (!this->sheet().IsInitialized()) return false;
  }
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandSetAutofitValueArchive::Swap(CommandSetAutofitValueArchive* other) {
  if (other != this) {
    std::swap(old_content_scale_, other->old_content_scale_);
    std::swap(sheet_, other->sheet_);
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetAutofitValueArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetAutofitValueArchive_descriptor_;
  metadata.reflection = CommandSetAutofitValueArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetDocumentPrinterOptions::kPrinterIdFieldNumber;
const int CommandSetDocumentPrinterOptions::kPaperIdFieldNumber;
const int CommandSetDocumentPrinterOptions::kPageSizeFieldNumber;
const int CommandSetDocumentPrinterOptions::kSuperFieldNumber;
#endif  // !_MSC_VER

CommandSetDocumentPrinterOptions::CommandSetDocumentPrinterOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetDocumentPrinterOptions::InitAsDefaultInstance() {
  page_size_ = const_cast< ::TSP::Size*>(&::TSP::Size::default_instance());
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
}

CommandSetDocumentPrinterOptions::CommandSetDocumentPrinterOptions(const CommandSetDocumentPrinterOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetDocumentPrinterOptions::SharedCtor() {
  _cached_size_ = 0;
  printer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  paper_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  page_size_ = NULL;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetDocumentPrinterOptions::~CommandSetDocumentPrinterOptions() {
  SharedDtor();
}

void CommandSetDocumentPrinterOptions::SharedDtor() {
  if (printer_id_ != &::google::protobuf::internal::kEmptyString) {
    delete printer_id_;
  }
  if (paper_id_ != &::google::protobuf::internal::kEmptyString) {
    delete paper_id_;
  }
  if (this != default_instance_) {
    delete page_size_;
    delete super_;
  }
}

void CommandSetDocumentPrinterOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetDocumentPrinterOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetDocumentPrinterOptions_descriptor_;
}

const CommandSetDocumentPrinterOptions& CommandSetDocumentPrinterOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TNCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetDocumentPrinterOptions* CommandSetDocumentPrinterOptions::default_instance_ = NULL;

CommandSetDocumentPrinterOptions* CommandSetDocumentPrinterOptions::New() const {
  return new CommandSetDocumentPrinterOptions;
}

void CommandSetDocumentPrinterOptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_printer_id()) {
      if (printer_id_ != &::google::protobuf::internal::kEmptyString) {
        printer_id_->clear();
      }
    }
    if (has_paper_id()) {
      if (paper_id_ != &::google::protobuf::internal::kEmptyString) {
        paper_id_->clear();
      }
    }
    if (has_page_size()) {
      if (page_size_ != NULL) page_size_->::TSP::Size::Clear();
    }
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetDocumentPrinterOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string printer_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_printer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->printer_id().data(), this->printer_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_paper_id;
        break;
      }

      // required string paper_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_paper_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_paper_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->paper_id().data(), this->paper_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_page_size;
        break;
      }

      // required .TSP.Size page_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_page_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_page_size()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_super;
        break;
      }

      // required .TSK.CommandArchive super = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetDocumentPrinterOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string printer_id = 1;
  if (has_printer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->printer_id().data(), this->printer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->printer_id(), output);
  }

  // required string paper_id = 2;
  if (has_paper_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->paper_id().data(), this->paper_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->paper_id(), output);
  }

  // required .TSP.Size page_size = 3;
  if (has_page_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->page_size(), output);
  }

  // required .TSK.CommandArchive super = 4;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->super(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetDocumentPrinterOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string printer_id = 1;
  if (has_printer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->printer_id().data(), this->printer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->printer_id(), target);
  }

  // required string paper_id = 2;
  if (has_paper_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->paper_id().data(), this->paper_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->paper_id(), target);
  }

  // required .TSP.Size page_size = 3;
  if (has_page_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->page_size(), target);
  }

  // required .TSK.CommandArchive super = 4;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->super(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetDocumentPrinterOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string printer_id = 1;
    if (has_printer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->printer_id());
    }

    // required string paper_id = 2;
    if (has_paper_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->paper_id());
    }

    // required .TSP.Size page_size = 3;
    if (has_page_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->page_size());
    }

    // required .TSK.CommandArchive super = 4;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetDocumentPrinterOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetDocumentPrinterOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetDocumentPrinterOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetDocumentPrinterOptions::MergeFrom(const CommandSetDocumentPrinterOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_printer_id()) {
      set_printer_id(from.printer_id());
    }
    if (from.has_paper_id()) {
      set_paper_id(from.paper_id());
    }
    if (from.has_page_size()) {
      mutable_page_size()->::TSP::Size::MergeFrom(from.page_size());
    }
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetDocumentPrinterOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetDocumentPrinterOptions::CopyFrom(const CommandSetDocumentPrinterOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetDocumentPrinterOptions::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_page_size()) {
    if (!this->page_size().IsInitialized()) return false;
  }
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandSetDocumentPrinterOptions::Swap(CommandSetDocumentPrinterOptions* other) {
  if (other != this) {
    std::swap(printer_id_, other->printer_id_);
    std::swap(paper_id_, other->paper_id_);
    std::swap(page_size_, other->page_size_);
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetDocumentPrinterOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetDocumentPrinterOptions_descriptor_;
  metadata.reflection = CommandSetDocumentPrinterOptions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandEnterPrintPreviewModeArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

CommandEnterPrintPreviewModeArchive::CommandEnterPrintPreviewModeArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandEnterPrintPreviewModeArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
}

CommandEnterPrintPreviewModeArchive::CommandEnterPrintPreviewModeArchive(const CommandEnterPrintPreviewModeArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandEnterPrintPreviewModeArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandEnterPrintPreviewModeArchive::~CommandEnterPrintPreviewModeArchive() {
  SharedDtor();
}

void CommandEnterPrintPreviewModeArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void CommandEnterPrintPreviewModeArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandEnterPrintPreviewModeArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandEnterPrintPreviewModeArchive_descriptor_;
}

const CommandEnterPrintPreviewModeArchive& CommandEnterPrintPreviewModeArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TNCommandArchives_2eproto();
  return *default_instance_;
}

CommandEnterPrintPreviewModeArchive* CommandEnterPrintPreviewModeArchive::default_instance_ = NULL;

CommandEnterPrintPreviewModeArchive* CommandEnterPrintPreviewModeArchive::New() const {
  return new CommandEnterPrintPreviewModeArchive;
}

void CommandEnterPrintPreviewModeArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandEnterPrintPreviewModeArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandEnterPrintPreviewModeArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandEnterPrintPreviewModeArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandEnterPrintPreviewModeArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandEnterPrintPreviewModeArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandEnterPrintPreviewModeArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandEnterPrintPreviewModeArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandEnterPrintPreviewModeArchive::MergeFrom(const CommandEnterPrintPreviewModeArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandEnterPrintPreviewModeArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandEnterPrintPreviewModeArchive::CopyFrom(const CommandEnterPrintPreviewModeArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandEnterPrintPreviewModeArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandEnterPrintPreviewModeArchive::Swap(CommandEnterPrintPreviewModeArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandEnterPrintPreviewModeArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandEnterPrintPreviewModeArchive_descriptor_;
  metadata.reflection = CommandEnterPrintPreviewModeArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandExitPrintPreviewModeArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

CommandExitPrintPreviewModeArchive::CommandExitPrintPreviewModeArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandExitPrintPreviewModeArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
}

CommandExitPrintPreviewModeArchive::CommandExitPrintPreviewModeArchive(const CommandExitPrintPreviewModeArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandExitPrintPreviewModeArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandExitPrintPreviewModeArchive::~CommandExitPrintPreviewModeArchive() {
  SharedDtor();
}

void CommandExitPrintPreviewModeArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void CommandExitPrintPreviewModeArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandExitPrintPreviewModeArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandExitPrintPreviewModeArchive_descriptor_;
}

const CommandExitPrintPreviewModeArchive& CommandExitPrintPreviewModeArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TNCommandArchives_2eproto();
  return *default_instance_;
}

CommandExitPrintPreviewModeArchive* CommandExitPrintPreviewModeArchive::default_instance_ = NULL;

CommandExitPrintPreviewModeArchive* CommandExitPrintPreviewModeArchive::New() const {
  return new CommandExitPrintPreviewModeArchive;
}

void CommandExitPrintPreviewModeArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandExitPrintPreviewModeArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandExitPrintPreviewModeArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandExitPrintPreviewModeArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandExitPrintPreviewModeArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandExitPrintPreviewModeArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandExitPrintPreviewModeArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandExitPrintPreviewModeArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandExitPrintPreviewModeArchive::MergeFrom(const CommandExitPrintPreviewModeArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandExitPrintPreviewModeArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandExitPrintPreviewModeArchive::CopyFrom(const CommandExitPrintPreviewModeArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandExitPrintPreviewModeArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandExitPrintPreviewModeArchive::Swap(CommandExitPrintPreviewModeArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandExitPrintPreviewModeArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandExitPrintPreviewModeArchive_descriptor_;
  metadata.reflection = CommandExitPrintPreviewModeArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandPasteDrawablesArchive::kSuperFieldNumber;
const int CommandPasteDrawablesArchive::kSheetFieldNumber;
const int CommandPasteDrawablesArchive::kDrawablesFieldNumber;
#endif  // !_MSC_VER

CommandPasteDrawablesArchive::CommandPasteDrawablesArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandPasteDrawablesArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  sheet_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandPasteDrawablesArchive::CommandPasteDrawablesArchive(const CommandPasteDrawablesArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandPasteDrawablesArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  sheet_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandPasteDrawablesArchive::~CommandPasteDrawablesArchive() {
  SharedDtor();
}

void CommandPasteDrawablesArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete sheet_;
  }
}

void CommandPasteDrawablesArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandPasteDrawablesArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandPasteDrawablesArchive_descriptor_;
}

const CommandPasteDrawablesArchive& CommandPasteDrawablesArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TNCommandArchives_2eproto();
  return *default_instance_;
}

CommandPasteDrawablesArchive* CommandPasteDrawablesArchive::default_instance_ = NULL;

CommandPasteDrawablesArchive* CommandPasteDrawablesArchive::New() const {
  return new CommandPasteDrawablesArchive;
}

void CommandPasteDrawablesArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_sheet()) {
      if (sheet_ != NULL) sheet_->::TSP::Reference::Clear();
    }
  }
  drawables_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandPasteDrawablesArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sheet;
        break;
      }

      // required .TSP.Reference sheet = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sheet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sheet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_drawables;
        break;
      }

      // repeated .TSP.Reference drawables = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drawables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_drawables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_drawables;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandPasteDrawablesArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference sheet = 2;
  if (has_sheet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sheet(), output);
  }

  // repeated .TSP.Reference drawables = 3;
  for (int i = 0; i < this->drawables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->drawables(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandPasteDrawablesArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference sheet = 2;
  if (has_sheet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sheet(), target);
  }

  // repeated .TSP.Reference drawables = 3;
  for (int i = 0; i < this->drawables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->drawables(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandPasteDrawablesArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference sheet = 2;
    if (has_sheet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sheet());
    }

  }
  // repeated .TSP.Reference drawables = 3;
  total_size += 1 * this->drawables_size();
  for (int i = 0; i < this->drawables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->drawables(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandPasteDrawablesArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandPasteDrawablesArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandPasteDrawablesArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandPasteDrawablesArchive::MergeFrom(const CommandPasteDrawablesArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  drawables_.MergeFrom(from.drawables_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_sheet()) {
      mutable_sheet()->::TSP::Reference::MergeFrom(from.sheet());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandPasteDrawablesArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandPasteDrawablesArchive::CopyFrom(const CommandPasteDrawablesArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandPasteDrawablesArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_sheet()) {
    if (!this->sheet().IsInitialized()) return false;
  }
  for (int i = 0; i < drawables_size(); i++) {
    if (!this->drawables(i).IsInitialized()) return false;
  }
  return true;
}

void CommandPasteDrawablesArchive::Swap(CommandPasteDrawablesArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(sheet_, other->sheet_);
    drawables_.Swap(&other->drawables_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandPasteDrawablesArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandPasteDrawablesArchive_descriptor_;
  metadata.reflection = CommandPasteDrawablesArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandPasteSheetArchive::kSuperFieldNumber;
const int CommandPasteSheetArchive::kDocumentFieldNumber;
const int CommandPasteSheetArchive::kSheetFieldNumber;
const int CommandPasteSheetArchive::kSheetUistateFieldNumber;
const int CommandPasteSheetArchive::kSheetIndexFieldNumber;
#endif  // !_MSC_VER

CommandPasteSheetArchive::CommandPasteSheetArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandPasteSheetArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  document_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  sheet_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  sheet_uistate_ = const_cast< ::TN::SheetUIStateArchive*>(&::TN::SheetUIStateArchive::default_instance());
}

CommandPasteSheetArchive::CommandPasteSheetArchive(const CommandPasteSheetArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandPasteSheetArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  document_ = NULL;
  sheet_ = NULL;
  sheet_uistate_ = NULL;
  sheetindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandPasteSheetArchive::~CommandPasteSheetArchive() {
  SharedDtor();
}

void CommandPasteSheetArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete document_;
    delete sheet_;
    delete sheet_uistate_;
  }
}

void CommandPasteSheetArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandPasteSheetArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandPasteSheetArchive_descriptor_;
}

const CommandPasteSheetArchive& CommandPasteSheetArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TNCommandArchives_2eproto();
  return *default_instance_;
}

CommandPasteSheetArchive* CommandPasteSheetArchive::default_instance_ = NULL;

CommandPasteSheetArchive* CommandPasteSheetArchive::New() const {
  return new CommandPasteSheetArchive;
}

void CommandPasteSheetArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_document()) {
      if (document_ != NULL) document_->::TSP::Reference::Clear();
    }
    if (has_sheet()) {
      if (sheet_ != NULL) sheet_->::TSP::Reference::Clear();
    }
    if (has_sheet_uistate()) {
      if (sheet_uistate_ != NULL) sheet_uistate_->::TN::SheetUIStateArchive::Clear();
    }
    sheetindex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandPasteSheetArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_document;
        break;
      }

      // required .TSP.Reference document = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_document:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_document()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sheet;
        break;
      }

      // required .TSP.Reference sheet = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sheet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sheet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sheet_uistate;
        break;
      }

      // optional .TN.SheetUIStateArchive sheet_uistate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sheet_uistate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sheet_uistate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sheetIndex;
        break;
      }

      // required uint32 sheetIndex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sheetIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sheetindex_)));
          set_has_sheetindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandPasteSheetArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference document = 2;
  if (has_document()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->document(), output);
  }

  // required .TSP.Reference sheet = 3;
  if (has_sheet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sheet(), output);
  }

  // optional .TN.SheetUIStateArchive sheet_uistate = 4;
  if (has_sheet_uistate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sheet_uistate(), output);
  }

  // required uint32 sheetIndex = 5;
  if (has_sheetindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sheetindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandPasteSheetArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference document = 2;
  if (has_document()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->document(), target);
  }

  // required .TSP.Reference sheet = 3;
  if (has_sheet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sheet(), target);
  }

  // optional .TN.SheetUIStateArchive sheet_uistate = 4;
  if (has_sheet_uistate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->sheet_uistate(), target);
  }

  // required uint32 sheetIndex = 5;
  if (has_sheetindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sheetindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandPasteSheetArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference document = 2;
    if (has_document()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->document());
    }

    // required .TSP.Reference sheet = 3;
    if (has_sheet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sheet());
    }

    // optional .TN.SheetUIStateArchive sheet_uistate = 4;
    if (has_sheet_uistate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sheet_uistate());
    }

    // required uint32 sheetIndex = 5;
    if (has_sheetindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sheetindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandPasteSheetArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandPasteSheetArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandPasteSheetArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandPasteSheetArchive::MergeFrom(const CommandPasteSheetArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_document()) {
      mutable_document()->::TSP::Reference::MergeFrom(from.document());
    }
    if (from.has_sheet()) {
      mutable_sheet()->::TSP::Reference::MergeFrom(from.sheet());
    }
    if (from.has_sheet_uistate()) {
      mutable_sheet_uistate()->::TN::SheetUIStateArchive::MergeFrom(from.sheet_uistate());
    }
    if (from.has_sheetindex()) {
      set_sheetindex(from.sheetindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandPasteSheetArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandPasteSheetArchive::CopyFrom(const CommandPasteSheetArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandPasteSheetArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_document()) {
    if (!this->document().IsInitialized()) return false;
  }
  if (has_sheet()) {
    if (!this->sheet().IsInitialized()) return false;
  }
  if (has_sheet_uistate()) {
    if (!this->sheet_uistate().IsInitialized()) return false;
  }
  return true;
}

void CommandPasteSheetArchive::Swap(CommandPasteSheetArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(document_, other->document_);
    std::swap(sheet_, other->sheet_);
    std::swap(sheet_uistate_, other->sheet_uistate_);
    std::swap(sheetindex_, other->sheetindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandPasteSheetArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandPasteSheetArchive_descriptor_;
  metadata.reflection = CommandPasteSheetArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandReorderSidebarItemChildrenAchive::kSuperFieldNumber;
const int CommandReorderSidebarItemChildrenAchive::kSheetFieldNumber;
const int CommandReorderSidebarItemChildrenAchive::kOldChildrenFieldNumber;
const int CommandReorderSidebarItemChildrenAchive::kNewChildrenFieldNumber;
#endif  // !_MSC_VER

CommandReorderSidebarItemChildrenAchive::CommandReorderSidebarItemChildrenAchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandReorderSidebarItemChildrenAchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  sheet_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandReorderSidebarItemChildrenAchive::CommandReorderSidebarItemChildrenAchive(const CommandReorderSidebarItemChildrenAchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandReorderSidebarItemChildrenAchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  sheet_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandReorderSidebarItemChildrenAchive::~CommandReorderSidebarItemChildrenAchive() {
  SharedDtor();
}

void CommandReorderSidebarItemChildrenAchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete sheet_;
  }
}

void CommandReorderSidebarItemChildrenAchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandReorderSidebarItemChildrenAchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandReorderSidebarItemChildrenAchive_descriptor_;
}

const CommandReorderSidebarItemChildrenAchive& CommandReorderSidebarItemChildrenAchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TNCommandArchives_2eproto();
  return *default_instance_;
}

CommandReorderSidebarItemChildrenAchive* CommandReorderSidebarItemChildrenAchive::default_instance_ = NULL;

CommandReorderSidebarItemChildrenAchive* CommandReorderSidebarItemChildrenAchive::New() const {
  return new CommandReorderSidebarItemChildrenAchive;
}

void CommandReorderSidebarItemChildrenAchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_sheet()) {
      if (sheet_ != NULL) sheet_->::TSP::Reference::Clear();
    }
  }
  old_children_.Clear();
  new_children_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandReorderSidebarItemChildrenAchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sheet;
        break;
      }

      // required .TSP.Reference sheet = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sheet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sheet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_old_children;
        break;
      }

      // repeated .TSP.Reference old_children = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_children:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_old_children()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_old_children;
        if (input->ExpectTag(34)) goto parse_new_children;
        break;
      }

      // repeated .TSP.Reference new_children = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_children:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_new_children()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_new_children;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandReorderSidebarItemChildrenAchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference sheet = 2;
  if (has_sheet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sheet(), output);
  }

  // repeated .TSP.Reference old_children = 3;
  for (int i = 0; i < this->old_children_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->old_children(i), output);
  }

  // repeated .TSP.Reference new_children = 4;
  for (int i = 0; i < this->new_children_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->new_children(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandReorderSidebarItemChildrenAchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference sheet = 2;
  if (has_sheet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sheet(), target);
  }

  // repeated .TSP.Reference old_children = 3;
  for (int i = 0; i < this->old_children_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->old_children(i), target);
  }

  // repeated .TSP.Reference new_children = 4;
  for (int i = 0; i < this->new_children_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->new_children(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandReorderSidebarItemChildrenAchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference sheet = 2;
    if (has_sheet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sheet());
    }

  }
  // repeated .TSP.Reference old_children = 3;
  total_size += 1 * this->old_children_size();
  for (int i = 0; i < this->old_children_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->old_children(i));
  }

  // repeated .TSP.Reference new_children = 4;
  total_size += 1 * this->new_children_size();
  for (int i = 0; i < this->new_children_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->new_children(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandReorderSidebarItemChildrenAchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandReorderSidebarItemChildrenAchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandReorderSidebarItemChildrenAchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandReorderSidebarItemChildrenAchive::MergeFrom(const CommandReorderSidebarItemChildrenAchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  old_children_.MergeFrom(from.old_children_);
  new_children_.MergeFrom(from.new_children_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_sheet()) {
      mutable_sheet()->::TSP::Reference::MergeFrom(from.sheet());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandReorderSidebarItemChildrenAchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandReorderSidebarItemChildrenAchive::CopyFrom(const CommandReorderSidebarItemChildrenAchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandReorderSidebarItemChildrenAchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_sheet()) {
    if (!this->sheet().IsInitialized()) return false;
  }
  for (int i = 0; i < old_children_size(); i++) {
    if (!this->old_children(i).IsInitialized()) return false;
  }
  for (int i = 0; i < new_children_size(); i++) {
    if (!this->new_children(i).IsInitialized()) return false;
  }
  return true;
}

void CommandReorderSidebarItemChildrenAchive::Swap(CommandReorderSidebarItemChildrenAchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(sheet_, other->sheet_);
    old_children_.Swap(&other->old_children_);
    new_children_.Swap(&other->new_children_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandReorderSidebarItemChildrenAchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandReorderSidebarItemChildrenAchive_descriptor_;
  metadata.reflection = CommandReorderSidebarItemChildrenAchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandChartMediatorSetEditingState::kSuperFieldNumber;
const int CommandChartMediatorSetEditingState::kOldFormulasFieldNumber;
const int CommandChartMediatorSetEditingState::kNewFormulasFieldNumber;
const int CommandChartMediatorSetEditingState::kOldDirectionFieldNumber;
const int CommandChartMediatorSetEditingState::kNewDirectionFieldNumber;
const int CommandChartMediatorSetEditingState::kOldScatterFormatFieldNumber;
const int CommandChartMediatorSetEditingState::kNewScatterFormatFieldNumber;
#endif  // !_MSC_VER

CommandChartMediatorSetEditingState::CommandChartMediatorSetEditingState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandChartMediatorSetEditingState::InitAsDefaultInstance() {
  super_ = const_cast< ::TSCH::ChartCommandArchive*>(&::TSCH::ChartCommandArchive::default_instance());
  old_formulas_ = const_cast< ::TN::ChartMediatorFormulaStorage*>(&::TN::ChartMediatorFormulaStorage::default_instance());
  new_formulas_ = const_cast< ::TN::ChartMediatorFormulaStorage*>(&::TN::ChartMediatorFormulaStorage::default_instance());
}

CommandChartMediatorSetEditingState::CommandChartMediatorSetEditingState(const CommandChartMediatorSetEditingState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandChartMediatorSetEditingState::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  old_formulas_ = NULL;
  new_formulas_ = NULL;
  old_direction_ = 0;
  new_direction_ = 0;
  old_scatter_format_ = 0;
  new_scatter_format_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandChartMediatorSetEditingState::~CommandChartMediatorSetEditingState() {
  SharedDtor();
}

void CommandChartMediatorSetEditingState::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete old_formulas_;
    delete new_formulas_;
  }
}

void CommandChartMediatorSetEditingState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandChartMediatorSetEditingState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandChartMediatorSetEditingState_descriptor_;
}

const CommandChartMediatorSetEditingState& CommandChartMediatorSetEditingState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TNCommandArchives_2eproto();
  return *default_instance_;
}

CommandChartMediatorSetEditingState* CommandChartMediatorSetEditingState::default_instance_ = NULL;

CommandChartMediatorSetEditingState* CommandChartMediatorSetEditingState::New() const {
  return new CommandChartMediatorSetEditingState;
}

void CommandChartMediatorSetEditingState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSCH::ChartCommandArchive::Clear();
    }
    if (has_old_formulas()) {
      if (old_formulas_ != NULL) old_formulas_->::TN::ChartMediatorFormulaStorage::Clear();
    }
    if (has_new_formulas()) {
      if (new_formulas_ != NULL) new_formulas_->::TN::ChartMediatorFormulaStorage::Clear();
    }
    old_direction_ = 0;
    new_direction_ = 0;
    old_scatter_format_ = 0;
    new_scatter_format_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandChartMediatorSetEditingState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_old_formulas;
        break;
      }

      // optional .TN.ChartMediatorFormulaStorage old_formulas = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_formulas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_formulas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_new_formulas;
        break;
      }

      // optional .TN.ChartMediatorFormulaStorage new_formulas = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_formulas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_formulas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_old_direction;
        break;
      }

      // optional int32 old_direction = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &old_direction_)));
          set_has_old_direction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_new_direction;
        break;
      }

      // optional int32 new_direction = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_direction_)));
          set_has_new_direction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_old_scatter_format;
        break;
      }

      // optional int32 old_scatter_format = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_scatter_format:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &old_scatter_format_)));
          set_has_old_scatter_format();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_new_scatter_format;
        break;
      }

      // optional int32 new_scatter_format = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_scatter_format:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_scatter_format_)));
          set_has_new_scatter_format();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandChartMediatorSetEditingState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSCH.ChartCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TN.ChartMediatorFormulaStorage old_formulas = 3;
  if (has_old_formulas()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->old_formulas(), output);
  }

  // optional .TN.ChartMediatorFormulaStorage new_formulas = 4;
  if (has_new_formulas()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->new_formulas(), output);
  }

  // optional int32 old_direction = 5;
  if (has_old_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->old_direction(), output);
  }

  // optional int32 new_direction = 6;
  if (has_new_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->new_direction(), output);
  }

  // optional int32 old_scatter_format = 7;
  if (has_old_scatter_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->old_scatter_format(), output);
  }

  // optional int32 new_scatter_format = 8;
  if (has_new_scatter_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->new_scatter_format(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandChartMediatorSetEditingState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSCH.ChartCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TN.ChartMediatorFormulaStorage old_formulas = 3;
  if (has_old_formulas()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->old_formulas(), target);
  }

  // optional .TN.ChartMediatorFormulaStorage new_formulas = 4;
  if (has_new_formulas()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->new_formulas(), target);
  }

  // optional int32 old_direction = 5;
  if (has_old_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->old_direction(), target);
  }

  // optional int32 new_direction = 6;
  if (has_new_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->new_direction(), target);
  }

  // optional int32 old_scatter_format = 7;
  if (has_old_scatter_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->old_scatter_format(), target);
  }

  // optional int32 new_scatter_format = 8;
  if (has_new_scatter_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->new_scatter_format(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandChartMediatorSetEditingState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSCH.ChartCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TN.ChartMediatorFormulaStorage old_formulas = 3;
    if (has_old_formulas()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_formulas());
    }

    // optional .TN.ChartMediatorFormulaStorage new_formulas = 4;
    if (has_new_formulas()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_formulas());
    }

    // optional int32 old_direction = 5;
    if (has_old_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->old_direction());
    }

    // optional int32 new_direction = 6;
    if (has_new_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_direction());
    }

    // optional int32 old_scatter_format = 7;
    if (has_old_scatter_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->old_scatter_format());
    }

    // optional int32 new_scatter_format = 8;
    if (has_new_scatter_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_scatter_format());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandChartMediatorSetEditingState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandChartMediatorSetEditingState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandChartMediatorSetEditingState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandChartMediatorSetEditingState::MergeFrom(const CommandChartMediatorSetEditingState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from.super());
    }
    if (from.has_old_formulas()) {
      mutable_old_formulas()->::TN::ChartMediatorFormulaStorage::MergeFrom(from.old_formulas());
    }
    if (from.has_new_formulas()) {
      mutable_new_formulas()->::TN::ChartMediatorFormulaStorage::MergeFrom(from.new_formulas());
    }
    if (from.has_old_direction()) {
      set_old_direction(from.old_direction());
    }
    if (from.has_new_direction()) {
      set_new_direction(from.new_direction());
    }
    if (from.has_old_scatter_format()) {
      set_old_scatter_format(from.old_scatter_format());
    }
    if (from.has_new_scatter_format()) {
      set_new_scatter_format(from.new_scatter_format());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandChartMediatorSetEditingState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandChartMediatorSetEditingState::CopyFrom(const CommandChartMediatorSetEditingState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandChartMediatorSetEditingState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_old_formulas()) {
    if (!this->old_formulas().IsInitialized()) return false;
  }
  if (has_new_formulas()) {
    if (!this->new_formulas().IsInitialized()) return false;
  }
  return true;
}

void CommandChartMediatorSetEditingState::Swap(CommandChartMediatorSetEditingState* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(old_formulas_, other->old_formulas_);
    std::swap(new_formulas_, other->new_formulas_);
    std::swap(old_direction_, other->old_direction_);
    std::swap(new_direction_, other->new_direction_);
    std::swap(old_scatter_format_, other->old_scatter_format_);
    std::swap(new_scatter_format_, other->new_scatter_format_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandChartMediatorSetEditingState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandChartMediatorSetEditingState_descriptor_;
  metadata.reflection = CommandChartMediatorSetEditingState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandChartMediatorUpdateForEntityDelete::kSuperFieldNumber;
const int CommandChartMediatorUpdateForEntityDelete::kCmdFieldNumber;
#endif  // !_MSC_VER

CommandChartMediatorUpdateForEntityDelete::CommandChartMediatorUpdateForEntityDelete()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandChartMediatorUpdateForEntityDelete::InitAsDefaultInstance() {
  super_ = const_cast< ::TSCH::ChartCommandArchive*>(&::TSCH::ChartCommandArchive::default_instance());
  cmd_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandChartMediatorUpdateForEntityDelete::CommandChartMediatorUpdateForEntityDelete(const CommandChartMediatorUpdateForEntityDelete& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandChartMediatorUpdateForEntityDelete::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  cmd_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandChartMediatorUpdateForEntityDelete::~CommandChartMediatorUpdateForEntityDelete() {
  SharedDtor();
}

void CommandChartMediatorUpdateForEntityDelete::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete cmd_;
  }
}

void CommandChartMediatorUpdateForEntityDelete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandChartMediatorUpdateForEntityDelete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandChartMediatorUpdateForEntityDelete_descriptor_;
}

const CommandChartMediatorUpdateForEntityDelete& CommandChartMediatorUpdateForEntityDelete::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TNCommandArchives_2eproto();
  return *default_instance_;
}

CommandChartMediatorUpdateForEntityDelete* CommandChartMediatorUpdateForEntityDelete::default_instance_ = NULL;

CommandChartMediatorUpdateForEntityDelete* CommandChartMediatorUpdateForEntityDelete::New() const {
  return new CommandChartMediatorUpdateForEntityDelete;
}

void CommandChartMediatorUpdateForEntityDelete::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSCH::ChartCommandArchive::Clear();
    }
    if (has_cmd()) {
      if (cmd_ != NULL) cmd_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandChartMediatorUpdateForEntityDelete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cmd;
        break;
      }

      // optional .TSP.Reference cmd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandChartMediatorUpdateForEntityDelete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSCH.ChartCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference cmd = 3;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cmd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandChartMediatorUpdateForEntityDelete::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSCH.ChartCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference cmd = 3;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cmd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandChartMediatorUpdateForEntityDelete::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSCH.ChartCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference cmd = 3;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cmd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandChartMediatorUpdateForEntityDelete::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandChartMediatorUpdateForEntityDelete* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandChartMediatorUpdateForEntityDelete*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandChartMediatorUpdateForEntityDelete::MergeFrom(const CommandChartMediatorUpdateForEntityDelete& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from.super());
    }
    if (from.has_cmd()) {
      mutable_cmd()->::TSP::Reference::MergeFrom(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandChartMediatorUpdateForEntityDelete::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandChartMediatorUpdateForEntityDelete::CopyFrom(const CommandChartMediatorUpdateForEntityDelete& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandChartMediatorUpdateForEntityDelete::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_cmd()) {
    if (!this->cmd().IsInitialized()) return false;
  }
  return true;
}

void CommandChartMediatorUpdateForEntityDelete::Swap(CommandChartMediatorUpdateForEntityDelete* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(cmd_, other->cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandChartMediatorUpdateForEntityDelete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandChartMediatorUpdateForEntityDelete_descriptor_;
  metadata.reflection = CommandChartMediatorUpdateForEntityDelete_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChartCommandSetSeriesNameArchive::kSuperFieldNumber;
const int ChartCommandSetSeriesNameArchive::kMediatorFieldNumber;
const int ChartCommandSetSeriesNameArchive::kSeriesindexFieldNumber;
const int ChartCommandSetSeriesNameArchive::kOldFormulaFieldNumber;
const int ChartCommandSetSeriesNameArchive::kNewFormulaFieldNumber;
#endif  // !_MSC_VER

ChartCommandSetSeriesNameArchive::ChartCommandSetSeriesNameArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartCommandSetSeriesNameArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSCH::ChartCommandArchive*>(&::TSCH::ChartCommandArchive::default_instance());
  mediator_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  old_formula_ = const_cast< ::TSCE::FormulaArchive*>(&::TSCE::FormulaArchive::default_instance());
  new_formula_ = const_cast< ::TSCE::FormulaArchive*>(&::TSCE::FormulaArchive::default_instance());
}

ChartCommandSetSeriesNameArchive::ChartCommandSetSeriesNameArchive(const ChartCommandSetSeriesNameArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartCommandSetSeriesNameArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  mediator_ = NULL;
  seriesindex_ = 0u;
  old_formula_ = NULL;
  new_formula_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartCommandSetSeriesNameArchive::~ChartCommandSetSeriesNameArchive() {
  SharedDtor();
}

void ChartCommandSetSeriesNameArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete mediator_;
    delete old_formula_;
    delete new_formula_;
  }
}

void ChartCommandSetSeriesNameArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartCommandSetSeriesNameArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartCommandSetSeriesNameArchive_descriptor_;
}

const ChartCommandSetSeriesNameArchive& ChartCommandSetSeriesNameArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TNCommandArchives_2eproto();
  return *default_instance_;
}

ChartCommandSetSeriesNameArchive* ChartCommandSetSeriesNameArchive::default_instance_ = NULL;

ChartCommandSetSeriesNameArchive* ChartCommandSetSeriesNameArchive::New() const {
  return new ChartCommandSetSeriesNameArchive;
}

void ChartCommandSetSeriesNameArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSCH::ChartCommandArchive::Clear();
    }
    if (has_mediator()) {
      if (mediator_ != NULL) mediator_->::TSP::Reference::Clear();
    }
    seriesindex_ = 0u;
    if (has_old_formula()) {
      if (old_formula_ != NULL) old_formula_->::TSCE::FormulaArchive::Clear();
    }
    if (has_new_formula()) {
      if (new_formula_ != NULL) new_formula_->::TSCE::FormulaArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartCommandSetSeriesNameArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mediator;
        break;
      }

      // required .TSP.Reference mediator = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mediator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mediator()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seriesindex;
        break;
      }

      // required uint32 seriesindex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seriesindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seriesindex_)));
          set_has_seriesindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_old_formula;
        break;
      }

      // optional .TSCE.FormulaArchive old_formula = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_formula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_formula()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_new_formula;
        break;
      }

      // optional .TSCE.FormulaArchive new_formula = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_formula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_formula()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChartCommandSetSeriesNameArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSCH.ChartCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference mediator = 2;
  if (has_mediator()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mediator(), output);
  }

  // required uint32 seriesindex = 3;
  if (has_seriesindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->seriesindex(), output);
  }

  // optional .TSCE.FormulaArchive old_formula = 4;
  if (has_old_formula()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->old_formula(), output);
  }

  // optional .TSCE.FormulaArchive new_formula = 5;
  if (has_new_formula()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->new_formula(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartCommandSetSeriesNameArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSCH.ChartCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference mediator = 2;
  if (has_mediator()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mediator(), target);
  }

  // required uint32 seriesindex = 3;
  if (has_seriesindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->seriesindex(), target);
  }

  // optional .TSCE.FormulaArchive old_formula = 4;
  if (has_old_formula()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->old_formula(), target);
  }

  // optional .TSCE.FormulaArchive new_formula = 5;
  if (has_new_formula()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->new_formula(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartCommandSetSeriesNameArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSCH.ChartCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference mediator = 2;
    if (has_mediator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mediator());
    }

    // required uint32 seriesindex = 3;
    if (has_seriesindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seriesindex());
    }

    // optional .TSCE.FormulaArchive old_formula = 4;
    if (has_old_formula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_formula());
    }

    // optional .TSCE.FormulaArchive new_formula = 5;
    if (has_new_formula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_formula());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartCommandSetSeriesNameArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartCommandSetSeriesNameArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartCommandSetSeriesNameArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartCommandSetSeriesNameArchive::MergeFrom(const ChartCommandSetSeriesNameArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from.super());
    }
    if (from.has_mediator()) {
      mutable_mediator()->::TSP::Reference::MergeFrom(from.mediator());
    }
    if (from.has_seriesindex()) {
      set_seriesindex(from.seriesindex());
    }
    if (from.has_old_formula()) {
      mutable_old_formula()->::TSCE::FormulaArchive::MergeFrom(from.old_formula());
    }
    if (from.has_new_formula()) {
      mutable_new_formula()->::TSCE::FormulaArchive::MergeFrom(from.new_formula());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartCommandSetSeriesNameArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartCommandSetSeriesNameArchive::CopyFrom(const ChartCommandSetSeriesNameArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartCommandSetSeriesNameArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_mediator()) {
    if (!this->mediator().IsInitialized()) return false;
  }
  if (has_old_formula()) {
    if (!this->old_formula().IsInitialized()) return false;
  }
  if (has_new_formula()) {
    if (!this->new_formula().IsInitialized()) return false;
  }
  return true;
}

void ChartCommandSetSeriesNameArchive::Swap(ChartCommandSetSeriesNameArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(mediator_, other->mediator_);
    std::swap(seriesindex_, other->seriesindex_);
    std::swap(old_formula_, other->old_formula_);
    std::swap(new_formula_, other->new_formula_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChartCommandSetSeriesNameArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartCommandSetSeriesNameArchive_descriptor_;
  metadata.reflection = ChartCommandSetSeriesNameArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChartCommandSelectionBehaviorArchive::kDrawableInfoFieldNumber;
const int ChartCommandSelectionBehaviorArchive::kBeginSelectionFieldNumber;
const int ChartCommandSelectionBehaviorArchive::kEndSelectionFieldNumber;
#endif  // !_MSC_VER

ChartCommandSelectionBehaviorArchive::ChartCommandSelectionBehaviorArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartCommandSelectionBehaviorArchive::InitAsDefaultInstance() {
  drawable_info_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  begin_selection_ = const_cast< ::TN::ChartSelectionArchive*>(&::TN::ChartSelectionArchive::default_instance());
  end_selection_ = const_cast< ::TN::ChartSelectionArchive*>(&::TN::ChartSelectionArchive::default_instance());
}

ChartCommandSelectionBehaviorArchive::ChartCommandSelectionBehaviorArchive(const ChartCommandSelectionBehaviorArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartCommandSelectionBehaviorArchive::SharedCtor() {
  _cached_size_ = 0;
  drawable_info_ = NULL;
  begin_selection_ = NULL;
  end_selection_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartCommandSelectionBehaviorArchive::~ChartCommandSelectionBehaviorArchive() {
  SharedDtor();
}

void ChartCommandSelectionBehaviorArchive::SharedDtor() {
  if (this != default_instance_) {
    delete drawable_info_;
    delete begin_selection_;
    delete end_selection_;
  }
}

void ChartCommandSelectionBehaviorArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartCommandSelectionBehaviorArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartCommandSelectionBehaviorArchive_descriptor_;
}

const ChartCommandSelectionBehaviorArchive& ChartCommandSelectionBehaviorArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TNCommandArchives_2eproto();
  return *default_instance_;
}

ChartCommandSelectionBehaviorArchive* ChartCommandSelectionBehaviorArchive::default_instance_ = NULL;

ChartCommandSelectionBehaviorArchive* ChartCommandSelectionBehaviorArchive::New() const {
  return new ChartCommandSelectionBehaviorArchive;
}

void ChartCommandSelectionBehaviorArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_drawable_info()) {
      if (drawable_info_ != NULL) drawable_info_->::TSP::Reference::Clear();
    }
    if (has_begin_selection()) {
      if (begin_selection_ != NULL) begin_selection_->::TN::ChartSelectionArchive::Clear();
    }
    if (has_end_selection()) {
      if (end_selection_ != NULL) end_selection_->::TN::ChartSelectionArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartCommandSelectionBehaviorArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSP.Reference drawable_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_drawable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_begin_selection;
        break;
      }

      // optional .TN.ChartSelectionArchive begin_selection = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_begin_selection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_begin_selection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_end_selection;
        break;
      }

      // optional .TN.ChartSelectionArchive end_selection = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end_selection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_selection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChartCommandSelectionBehaviorArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSP.Reference drawable_info = 1;
  if (has_drawable_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->drawable_info(), output);
  }

  // optional .TN.ChartSelectionArchive begin_selection = 2;
  if (has_begin_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->begin_selection(), output);
  }

  // optional .TN.ChartSelectionArchive end_selection = 3;
  if (has_end_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->end_selection(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartCommandSelectionBehaviorArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSP.Reference drawable_info = 1;
  if (has_drawable_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->drawable_info(), target);
  }

  // optional .TN.ChartSelectionArchive begin_selection = 2;
  if (has_begin_selection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->begin_selection(), target);
  }

  // optional .TN.ChartSelectionArchive end_selection = 3;
  if (has_end_selection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->end_selection(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartCommandSelectionBehaviorArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSP.Reference drawable_info = 1;
    if (has_drawable_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->drawable_info());
    }

    // optional .TN.ChartSelectionArchive begin_selection = 2;
    if (has_begin_selection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->begin_selection());
    }

    // optional .TN.ChartSelectionArchive end_selection = 3;
    if (has_end_selection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end_selection());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartCommandSelectionBehaviorArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartCommandSelectionBehaviorArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartCommandSelectionBehaviorArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartCommandSelectionBehaviorArchive::MergeFrom(const ChartCommandSelectionBehaviorArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_drawable_info()) {
      mutable_drawable_info()->::TSP::Reference::MergeFrom(from.drawable_info());
    }
    if (from.has_begin_selection()) {
      mutable_begin_selection()->::TN::ChartSelectionArchive::MergeFrom(from.begin_selection());
    }
    if (from.has_end_selection()) {
      mutable_end_selection()->::TN::ChartSelectionArchive::MergeFrom(from.end_selection());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartCommandSelectionBehaviorArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartCommandSelectionBehaviorArchive::CopyFrom(const ChartCommandSelectionBehaviorArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartCommandSelectionBehaviorArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_drawable_info()) {
    if (!this->drawable_info().IsInitialized()) return false;
  }
  if (has_begin_selection()) {
    if (!this->begin_selection().IsInitialized()) return false;
  }
  if (has_end_selection()) {
    if (!this->end_selection().IsInitialized()) return false;
  }
  return true;
}

void ChartCommandSelectionBehaviorArchive::Swap(ChartCommandSelectionBehaviorArchive* other) {
  if (other != this) {
    std::swap(drawable_info_, other->drawable_info_);
    std::swap(begin_selection_, other->begin_selection_);
    std::swap(end_selection_, other->end_selection_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChartCommandSelectionBehaviorArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartCommandSelectionBehaviorArchive_descriptor_;
  metadata.reflection = ChartCommandSelectionBehaviorArchive_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TN

// @@protoc_insertion_point(global_scope)
