// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TNArchives.proto

#ifndef PROTOBUF_TNArchives_2eproto__INCLUDED
#define PROTOBUF_TNArchives_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "TSPMessages.pb.h"
#include "TSKArchives.pb.h"
#include "TSCHArchives.pb.h"
#include "TSCEArchives.pb.h"
#include "TSSArchives.pb.h"
#include "TSDArchives.pb.h"
#include "TSWPArchives.pb.h"
#include "TSAArchives.pb.h"
#include "TSTArchives.pb.h"
// @@protoc_insertion_point(includes)

namespace TN {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TNArchives_2eproto();
void protobuf_AssignDesc_TNArchives_2eproto();
void protobuf_ShutdownFile_TNArchives_2eproto();

class SheetUIStateArchive;
class SheetUIStateDictionaryEntryArchive;
class UIStateArchive;
class SheetSelectionArchive;
class UndoRedoStateArchive;
class DocumentArchive;
class PlaceholderArchive;
class SheetArchive;
class FormBasedSheetArchive;
class ThemeArchive;
class ChartMediatorFormulaStorage;
class ChartMediatorArchive;
class ChartSelectionArchive;

enum UIStateArchive_InspectorPaneViewMode {
  UIStateArchive_InspectorPaneViewMode_kInspectorPaneViewModeFormat = 0,
  UIStateArchive_InspectorPaneViewMode_kInspectorPaneViewModeFilter = 1
};
bool UIStateArchive_InspectorPaneViewMode_IsValid(int value);
const UIStateArchive_InspectorPaneViewMode UIStateArchive_InspectorPaneViewMode_InspectorPaneViewMode_MIN = UIStateArchive_InspectorPaneViewMode_kInspectorPaneViewModeFormat;
const UIStateArchive_InspectorPaneViewMode UIStateArchive_InspectorPaneViewMode_InspectorPaneViewMode_MAX = UIStateArchive_InspectorPaneViewMode_kInspectorPaneViewModeFilter;
const int UIStateArchive_InspectorPaneViewMode_InspectorPaneViewMode_ARRAYSIZE = UIStateArchive_InspectorPaneViewMode_InspectorPaneViewMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* UIStateArchive_InspectorPaneViewMode_descriptor();
inline const ::std::string& UIStateArchive_InspectorPaneViewMode_Name(UIStateArchive_InspectorPaneViewMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    UIStateArchive_InspectorPaneViewMode_descriptor(), value);
}
inline bool UIStateArchive_InspectorPaneViewMode_Parse(
    const ::std::string& name, UIStateArchive_InspectorPaneViewMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UIStateArchive_InspectorPaneViewMode>(
    UIStateArchive_InspectorPaneViewMode_descriptor(), name, value);
}
enum SheetPageOrder {
  SheetPageOrderTopToBottom = 0,
  SheetPageOrderLeftToRight = 1
};
bool SheetPageOrder_IsValid(int value);
const SheetPageOrder SheetPageOrder_MIN = SheetPageOrderTopToBottom;
const SheetPageOrder SheetPageOrder_MAX = SheetPageOrderLeftToRight;
const int SheetPageOrder_ARRAYSIZE = SheetPageOrder_MAX + 1;

const ::google::protobuf::EnumDescriptor* SheetPageOrder_descriptor();
inline const ::std::string& SheetPageOrder_Name(SheetPageOrder value) {
  return ::google::protobuf::internal::NameOfEnum(
    SheetPageOrder_descriptor(), value);
}
inline bool SheetPageOrder_Parse(
    const ::std::string& name, SheetPageOrder* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SheetPageOrder>(
    SheetPageOrder_descriptor(), name, value);
}
// ===================================================================

class SheetUIStateArchive : public ::google::protobuf::Message {
 public:
  SheetUIStateArchive();
  virtual ~SheetUIStateArchive();

  SheetUIStateArchive(const SheetUIStateArchive& from);

  inline SheetUIStateArchive& operator=(const SheetUIStateArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SheetUIStateArchive& default_instance();

  void Swap(SheetUIStateArchive* other);

  // implements Message ----------------------------------------------

  SheetUIStateArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SheetUIStateArchive& from);
  void MergeFrom(const SheetUIStateArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float view_scale = 1;
  inline bool has_view_scale() const;
  inline void clear_view_scale();
  static const int kViewScaleFieldNumber = 1;
  inline float view_scale() const;
  inline void set_view_scale(float value);

  // required .TSP.Point scroll_position = 2;
  inline bool has_scroll_position() const;
  inline void clear_scroll_position();
  static const int kScrollPositionFieldNumber = 2;
  inline const ::TSP::Point& scroll_position() const;
  inline ::TSP::Point* mutable_scroll_position();
  inline ::TSP::Point* release_scroll_position();
  inline void set_allocated_scroll_position(::TSP::Point* scroll_position);

  // optional float previous_view_scale = 3;
  inline bool has_previous_view_scale() const;
  inline void clear_previous_view_scale();
  static const int kPreviousViewScaleFieldNumber = 3;
  inline float previous_view_scale() const;
  inline void set_previous_view_scale(float value);

  // optional bool scroll_position_is_unscaled = 4;
  inline bool has_scroll_position_is_unscaled() const;
  inline void clear_scroll_position_is_unscaled();
  static const int kScrollPositionIsUnscaledFieldNumber = 4;
  inline bool scroll_position_is_unscaled() const;
  inline void set_scroll_position_is_unscaled(bool value);

  // optional .TSP.Point previous_scroll_position = 5;
  inline bool has_previous_scroll_position() const;
  inline void clear_previous_scroll_position();
  static const int kPreviousScrollPositionFieldNumber = 5;
  inline const ::TSP::Point& previous_scroll_position() const;
  inline ::TSP::Point* mutable_previous_scroll_position();
  inline ::TSP::Point* release_previous_scroll_position();
  inline void set_allocated_previous_scroll_position(::TSP::Point* previous_scroll_position);

  // optional bool scroll_position_valid = 6;
  inline bool has_scroll_position_valid() const;
  inline void clear_scroll_position_valid();
  static const int kScrollPositionValidFieldNumber = 6;
  inline bool scroll_position_valid() const;
  inline void set_scroll_position_valid(bool value);

  // optional bool previous_scroll_position_valid = 7;
  inline bool has_previous_scroll_position_valid() const;
  inline void clear_previous_scroll_position_valid();
  static const int kPreviousScrollPositionValidFieldNumber = 7;
  inline bool previous_scroll_position_valid() const;
  inline void set_previous_scroll_position_valid(bool value);

  // optional .TSP.Size visible_size = 8;
  inline bool has_visible_size() const;
  inline void clear_visible_size();
  static const int kVisibleSizeFieldNumber = 8;
  inline const ::TSP::Size& visible_size() const;
  inline ::TSP::Size* mutable_visible_size();
  inline ::TSP::Size* release_visible_size();
  inline void set_allocated_visible_size(::TSP::Size* visible_size);

  // optional .TSP.Size previous_visible_size = 9;
  inline bool has_previous_visible_size() const;
  inline void clear_previous_visible_size();
  static const int kPreviousVisibleSizeFieldNumber = 9;
  inline const ::TSP::Size& previous_visible_size() const;
  inline ::TSP::Size* mutable_previous_visible_size();
  inline ::TSP::Size* release_previous_visible_size();
  inline void set_allocated_previous_visible_size(::TSP::Size* previous_visible_size);

  // optional uint32 device_idiom = 10;
  inline bool has_device_idiom() const;
  inline void clear_device_idiom();
  static const int kDeviceIdiomFieldNumber = 10;
  inline ::google::protobuf::uint32 device_idiom() const;
  inline void set_device_idiom(::google::protobuf::uint32 value);

  // optional uint32 form_focused_record_index = 11;
  inline bool has_form_focused_record_index() const;
  inline void clear_form_focused_record_index();
  static const int kFormFocusedRecordIndexFieldNumber = 11;
  inline ::google::protobuf::uint32 form_focused_record_index() const;
  inline void set_form_focused_record_index(::google::protobuf::uint32 value);

  // optional uint32 form_focused_field_index = 12;
  inline bool has_form_focused_field_index() const;
  inline void clear_form_focused_field_index();
  static const int kFormFocusedFieldIndexFieldNumber = 12;
  inline ::google::protobuf::uint32 form_focused_field_index() const;
  inline void set_form_focused_field_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TN.SheetUIStateArchive)
 private:
  inline void set_has_view_scale();
  inline void clear_has_view_scale();
  inline void set_has_scroll_position();
  inline void clear_has_scroll_position();
  inline void set_has_previous_view_scale();
  inline void clear_has_previous_view_scale();
  inline void set_has_scroll_position_is_unscaled();
  inline void clear_has_scroll_position_is_unscaled();
  inline void set_has_previous_scroll_position();
  inline void clear_has_previous_scroll_position();
  inline void set_has_scroll_position_valid();
  inline void clear_has_scroll_position_valid();
  inline void set_has_previous_scroll_position_valid();
  inline void clear_has_previous_scroll_position_valid();
  inline void set_has_visible_size();
  inline void clear_has_visible_size();
  inline void set_has_previous_visible_size();
  inline void clear_has_previous_visible_size();
  inline void set_has_device_idiom();
  inline void clear_has_device_idiom();
  inline void set_has_form_focused_record_index();
  inline void clear_has_form_focused_record_index();
  inline void set_has_form_focused_field_index();
  inline void clear_has_form_focused_field_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSP::Point* scroll_position_;
  float view_scale_;
  float previous_view_scale_;
  ::TSP::Point* previous_scroll_position_;
  bool scroll_position_is_unscaled_;
  bool scroll_position_valid_;
  bool previous_scroll_position_valid_;
  ::google::protobuf::uint32 device_idiom_;
  ::TSP::Size* visible_size_;
  ::TSP::Size* previous_visible_size_;
  ::google::protobuf::uint32 form_focused_record_index_;
  ::google::protobuf::uint32 form_focused_field_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_TNArchives_2eproto();
  friend void protobuf_AssignDesc_TNArchives_2eproto();
  friend void protobuf_ShutdownFile_TNArchives_2eproto();

  void InitAsDefaultInstance();
  static SheetUIStateArchive* default_instance_;
};
// -------------------------------------------------------------------

class SheetUIStateDictionaryEntryArchive : public ::google::protobuf::Message {
 public:
  SheetUIStateDictionaryEntryArchive();
  virtual ~SheetUIStateDictionaryEntryArchive();

  SheetUIStateDictionaryEntryArchive(const SheetUIStateDictionaryEntryArchive& from);

  inline SheetUIStateDictionaryEntryArchive& operator=(const SheetUIStateDictionaryEntryArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SheetUIStateDictionaryEntryArchive& default_instance();

  void Swap(SheetUIStateDictionaryEntryArchive* other);

  // implements Message ----------------------------------------------

  SheetUIStateDictionaryEntryArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SheetUIStateDictionaryEntryArchive& from);
  void MergeFrom(const SheetUIStateDictionaryEntryArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSP.Reference sheet = 1;
  inline bool has_sheet() const;
  inline void clear_sheet();
  static const int kSheetFieldNumber = 1;
  inline const ::TSP::Reference& sheet() const;
  inline ::TSP::Reference* mutable_sheet();
  inline ::TSP::Reference* release_sheet();
  inline void set_allocated_sheet(::TSP::Reference* sheet);

  // required .TN.SheetUIStateArchive sheet_uistate = 2;
  inline bool has_sheet_uistate() const;
  inline void clear_sheet_uistate();
  static const int kSheetUistateFieldNumber = 2;
  inline const ::TN::SheetUIStateArchive& sheet_uistate() const;
  inline ::TN::SheetUIStateArchive* mutable_sheet_uistate();
  inline ::TN::SheetUIStateArchive* release_sheet_uistate();
  inline void set_allocated_sheet_uistate(::TN::SheetUIStateArchive* sheet_uistate);

  // @@protoc_insertion_point(class_scope:TN.SheetUIStateDictionaryEntryArchive)
 private:
  inline void set_has_sheet();
  inline void clear_has_sheet();
  inline void set_has_sheet_uistate();
  inline void clear_has_sheet_uistate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSP::Reference* sheet_;
  ::TN::SheetUIStateArchive* sheet_uistate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_TNArchives_2eproto();
  friend void protobuf_AssignDesc_TNArchives_2eproto();
  friend void protobuf_ShutdownFile_TNArchives_2eproto();

  void InitAsDefaultInstance();
  static SheetUIStateDictionaryEntryArchive* default_instance_;
};
// -------------------------------------------------------------------

class UIStateArchive : public ::google::protobuf::Message {
 public:
  UIStateArchive();
  virtual ~UIStateArchive();

  UIStateArchive(const UIStateArchive& from);

  inline UIStateArchive& operator=(const UIStateArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UIStateArchive& default_instance();

  void Swap(UIStateArchive* other);

  // implements Message ----------------------------------------------

  UIStateArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UIStateArchive& from);
  void MergeFrom(const UIStateArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef UIStateArchive_InspectorPaneViewMode InspectorPaneViewMode;
  static const InspectorPaneViewMode kInspectorPaneViewModeFormat = UIStateArchive_InspectorPaneViewMode_kInspectorPaneViewModeFormat;
  static const InspectorPaneViewMode kInspectorPaneViewModeFilter = UIStateArchive_InspectorPaneViewMode_kInspectorPaneViewModeFilter;
  static inline bool InspectorPaneViewMode_IsValid(int value) {
    return UIStateArchive_InspectorPaneViewMode_IsValid(value);
  }
  static const InspectorPaneViewMode InspectorPaneViewMode_MIN =
    UIStateArchive_InspectorPaneViewMode_InspectorPaneViewMode_MIN;
  static const InspectorPaneViewMode InspectorPaneViewMode_MAX =
    UIStateArchive_InspectorPaneViewMode_InspectorPaneViewMode_MAX;
  static const int InspectorPaneViewMode_ARRAYSIZE =
    UIStateArchive_InspectorPaneViewMode_InspectorPaneViewMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  InspectorPaneViewMode_descriptor() {
    return UIStateArchive_InspectorPaneViewMode_descriptor();
  }
  static inline const ::std::string& InspectorPaneViewMode_Name(InspectorPaneViewMode value) {
    return UIStateArchive_InspectorPaneViewMode_Name(value);
  }
  static inline bool InspectorPaneViewMode_Parse(const ::std::string& name,
      InspectorPaneViewMode* value) {
    return UIStateArchive_InspectorPaneViewMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 active_sheet_index = 1 [deprecated = true];
  inline bool has_active_sheet_index() const PROTOBUF_DEPRECATED;
  inline void clear_active_sheet_index() PROTOBUF_DEPRECATED;
  static const int kActiveSheetIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 active_sheet_index() const PROTOBUF_DEPRECATED;
  inline void set_active_sheet_index(::google::protobuf::uint32 value) PROTOBUF_DEPRECATED;

  // repeated .TSP.Reference selected_info = 2;
  inline int selected_info_size() const;
  inline void clear_selected_info();
  static const int kSelectedInfoFieldNumber = 2;
  inline const ::TSP::Reference& selected_info(int index) const;
  inline ::TSP::Reference* mutable_selected_info(int index);
  inline ::TSP::Reference* add_selected_info();
  inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
      selected_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
      mutable_selected_info();

  // repeated .TN.SheetUIStateDictionaryEntryArchive sheet_uistate_dictionary_entry = 3;
  inline int sheet_uistate_dictionary_entry_size() const;
  inline void clear_sheet_uistate_dictionary_entry();
  static const int kSheetUistateDictionaryEntryFieldNumber = 3;
  inline const ::TN::SheetUIStateDictionaryEntryArchive& sheet_uistate_dictionary_entry(int index) const;
  inline ::TN::SheetUIStateDictionaryEntryArchive* mutable_sheet_uistate_dictionary_entry(int index);
  inline ::TN::SheetUIStateDictionaryEntryArchive* add_sheet_uistate_dictionary_entry();
  inline const ::google::protobuf::RepeatedPtrField< ::TN::SheetUIStateDictionaryEntryArchive >&
      sheet_uistate_dictionary_entry() const;
  inline ::google::protobuf::RepeatedPtrField< ::TN::SheetUIStateDictionaryEntryArchive >*
      mutable_sheet_uistate_dictionary_entry();

  // optional .TST.SelectionArchive table_selection = 4;
  inline bool has_table_selection() const;
  inline void clear_table_selection();
  static const int kTableSelectionFieldNumber = 4;
  inline const ::TST::SelectionArchive& table_selection() const;
  inline ::TST::SelectionArchive* mutable_table_selection();
  inline ::TST::SelectionArchive* release_table_selection();
  inline void set_allocated_table_selection(::TST::SelectionArchive* table_selection);

  // optional uint32 editing_sheet_index = 5 [deprecated = true];
  inline bool has_editing_sheet_index() const PROTOBUF_DEPRECATED;
  inline void clear_editing_sheet_index() PROTOBUF_DEPRECATED;
  static const int kEditingSheetIndexFieldNumber = 5;
  inline ::google::protobuf::uint32 editing_sheet_index() const PROTOBUF_DEPRECATED;
  inline void set_editing_sheet_index(::google::protobuf::uint32 value) PROTOBUF_DEPRECATED;

  // optional int32 document_mode = 6;
  inline bool has_document_mode() const;
  inline void clear_document_mode();
  static const int kDocumentModeFieldNumber = 6;
  inline ::google::protobuf::int32 document_mode() const;
  inline void set_document_mode(::google::protobuf::int32 value);

  // repeated .TN.SheetUIStateDictionaryEntryArchive edit_mode_sheet_uistate_dictionary_entry = 7;
  inline int edit_mode_sheet_uistate_dictionary_entry_size() const;
  inline void clear_edit_mode_sheet_uistate_dictionary_entry();
  static const int kEditModeSheetUistateDictionaryEntryFieldNumber = 7;
  inline const ::TN::SheetUIStateDictionaryEntryArchive& edit_mode_sheet_uistate_dictionary_entry(int index) const;
  inline ::TN::SheetUIStateDictionaryEntryArchive* mutable_edit_mode_sheet_uistate_dictionary_entry(int index);
  inline ::TN::SheetUIStateDictionaryEntryArchive* add_edit_mode_sheet_uistate_dictionary_entry();
  inline const ::google::protobuf::RepeatedPtrField< ::TN::SheetUIStateDictionaryEntryArchive >&
      edit_mode_sheet_uistate_dictionary_entry() const;
  inline ::google::protobuf::RepeatedPtrField< ::TN::SheetUIStateDictionaryEntryArchive >*
      mutable_edit_mode_sheet_uistate_dictionary_entry();

  // optional int32 table_editing_mode = 8;
  inline bool has_table_editing_mode() const;
  inline void clear_table_editing_mode();
  static const int kTableEditingModeFieldNumber = 8;
  inline ::google::protobuf::int32 table_editing_mode() const;
  inline void set_table_editing_mode(::google::protobuf::int32 value);

  // optional uint32 form_focused_record_index = 9 [deprecated = true];
  inline bool has_form_focused_record_index() const PROTOBUF_DEPRECATED;
  inline void clear_form_focused_record_index() PROTOBUF_DEPRECATED;
  static const int kFormFocusedRecordIndexFieldNumber = 9;
  inline ::google::protobuf::uint32 form_focused_record_index() const PROTOBUF_DEPRECATED;
  inline void set_form_focused_record_index(::google::protobuf::uint32 value) PROTOBUF_DEPRECATED;

  // optional uint32 form_focused_field_index = 10 [deprecated = true];
  inline bool has_form_focused_field_index() const PROTOBUF_DEPRECATED;
  inline void clear_form_focused_field_index() PROTOBUF_DEPRECATED;
  static const int kFormFocusedFieldIndexFieldNumber = 10;
  inline ::google::protobuf::uint32 form_focused_field_index() const PROTOBUF_DEPRECATED;
  inline void set_form_focused_field_index(::google::protobuf::uint32 value) PROTOBUF_DEPRECATED;

  // optional bool in_chart_mode = 11;
  inline bool has_in_chart_mode() const;
  inline void clear_in_chart_mode();
  static const int kInChartModeFieldNumber = 11;
  inline bool in_chart_mode() const;
  inline void set_in_chart_mode(bool value);

  // optional .TN.ChartSelectionArchive chart_selection = 12;
  inline bool has_chart_selection() const;
  inline void clear_chart_selection();
  static const int kChartSelectionFieldNumber = 12;
  inline const ::TN::ChartSelectionArchive& chart_selection() const;
  inline ::TN::ChartSelectionArchive* mutable_chart_selection();
  inline ::TN::ChartSelectionArchive* release_chart_selection();
  inline void set_allocated_chart_selection(::TN::ChartSelectionArchive* chart_selection);

  // optional .TSP.Reference sheet_selection = 13;
  inline bool has_sheet_selection() const;
  inline void clear_sheet_selection();
  static const int kSheetSelectionFieldNumber = 13;
  inline const ::TSP::Reference& sheet_selection() const;
  inline ::TSP::Reference* mutable_sheet_selection();
  inline ::TSP::Reference* release_sheet_selection();
  inline void set_allocated_sheet_selection(::TSP::Reference* sheet_selection);

  // optional bool inspector_pane_visible = 14 [default = true];
  inline bool has_inspector_pane_visible() const;
  inline void clear_inspector_pane_visible();
  static const int kInspectorPaneVisibleFieldNumber = 14;
  inline bool inspector_pane_visible() const;
  inline void set_inspector_pane_visible(bool value);

  // optional .TN.UIStateArchive.InspectorPaneViewMode inspector_pane_view_mode = 15 [default = kInspectorPaneViewModeFormat];
  inline bool has_inspector_pane_view_mode() const;
  inline void clear_inspector_pane_view_mode();
  static const int kInspectorPaneViewModeFieldNumber = 15;
  inline ::TN::UIStateArchive_InspectorPaneViewMode inspector_pane_view_mode() const;
  inline void set_inspector_pane_view_mode(::TN::UIStateArchive_InspectorPaneViewMode value);

  // repeated uint32 selected_quick_calc_functions = 16;
  inline int selected_quick_calc_functions_size() const;
  inline void clear_selected_quick_calc_functions();
  static const int kSelectedQuickCalcFunctionsFieldNumber = 16;
  inline ::google::protobuf::uint32 selected_quick_calc_functions(int index) const;
  inline void set_selected_quick_calc_functions(int index, ::google::protobuf::uint32 value);
  inline void add_selected_quick_calc_functions(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      selected_quick_calc_functions() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_selected_quick_calc_functions();

  // optional bool removed_all_quick_calc_functions = 17;
  inline bool has_removed_all_quick_calc_functions() const;
  inline void clear_removed_all_quick_calc_functions();
  static const int kRemovedAllQuickCalcFunctionsFieldNumber = 17;
  inline bool removed_all_quick_calc_functions() const;
  inline void set_removed_all_quick_calc_functions(bool value);

  // optional bool show_canvas_guides = 18;
  inline bool has_show_canvas_guides() const;
  inline void clear_show_canvas_guides();
  static const int kShowCanvasGuidesFieldNumber = 18;
  inline bool show_canvas_guides() const;
  inline void set_show_canvas_guides(bool value);

  // optional bool shows_comments = 19;
  inline bool has_shows_comments() const;
  inline void clear_shows_comments();
  static const int kShowsCommentsFieldNumber = 19;
  inline bool shows_comments() const;
  inline void set_shows_comments(bool value);

  // @@protoc_insertion_point(class_scope:TN.UIStateArchive)
 private:
  inline void set_has_active_sheet_index();
  inline void clear_has_active_sheet_index();
  inline void set_has_table_selection();
  inline void clear_has_table_selection();
  inline void set_has_editing_sheet_index();
  inline void clear_has_editing_sheet_index();
  inline void set_has_document_mode();
  inline void clear_has_document_mode();
  inline void set_has_table_editing_mode();
  inline void clear_has_table_editing_mode();
  inline void set_has_form_focused_record_index();
  inline void clear_has_form_focused_record_index();
  inline void set_has_form_focused_field_index();
  inline void clear_has_form_focused_field_index();
  inline void set_has_in_chart_mode();
  inline void clear_has_in_chart_mode();
  inline void set_has_chart_selection();
  inline void clear_has_chart_selection();
  inline void set_has_sheet_selection();
  inline void clear_has_sheet_selection();
  inline void set_has_inspector_pane_visible();
  inline void clear_has_inspector_pane_visible();
  inline void set_has_inspector_pane_view_mode();
  inline void clear_has_inspector_pane_view_mode();
  inline void set_has_removed_all_quick_calc_functions();
  inline void clear_has_removed_all_quick_calc_functions();
  inline void set_has_show_canvas_guides();
  inline void clear_has_show_canvas_guides();
  inline void set_has_shows_comments();
  inline void clear_has_shows_comments();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::TSP::Reference > selected_info_;
  ::google::protobuf::RepeatedPtrField< ::TN::SheetUIStateDictionaryEntryArchive > sheet_uistate_dictionary_entry_;
  ::google::protobuf::uint32 active_sheet_index_;
  ::google::protobuf::uint32 editing_sheet_index_;
  ::TST::SelectionArchive* table_selection_;
  ::google::protobuf::RepeatedPtrField< ::TN::SheetUIStateDictionaryEntryArchive > edit_mode_sheet_uistate_dictionary_entry_;
  ::google::protobuf::int32 document_mode_;
  ::google::protobuf::int32 table_editing_mode_;
  ::google::protobuf::uint32 form_focused_record_index_;
  ::google::protobuf::uint32 form_focused_field_index_;
  ::TN::ChartSelectionArchive* chart_selection_;
  ::TSP::Reference* sheet_selection_;
  int inspector_pane_view_mode_;
  bool in_chart_mode_;
  bool inspector_pane_visible_;
  bool removed_all_quick_calc_functions_;
  bool show_canvas_guides_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > selected_quick_calc_functions_;
  bool shows_comments_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];

  friend void  protobuf_AddDesc_TNArchives_2eproto();
  friend void protobuf_AssignDesc_TNArchives_2eproto();
  friend void protobuf_ShutdownFile_TNArchives_2eproto();

  void InitAsDefaultInstance();
  static UIStateArchive* default_instance_;
};
// -------------------------------------------------------------------

class SheetSelectionArchive : public ::google::protobuf::Message {
 public:
  SheetSelectionArchive();
  virtual ~SheetSelectionArchive();

  SheetSelectionArchive(const SheetSelectionArchive& from);

  inline SheetSelectionArchive& operator=(const SheetSelectionArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SheetSelectionArchive& default_instance();

  void Swap(SheetSelectionArchive* other);

  // implements Message ----------------------------------------------

  SheetSelectionArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SheetSelectionArchive& from);
  void MergeFrom(const SheetSelectionArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .TSP.Reference sheet = 1;
  inline bool has_sheet() const;
  inline void clear_sheet();
  static const int kSheetFieldNumber = 1;
  inline const ::TSP::Reference& sheet() const;
  inline ::TSP::Reference* mutable_sheet();
  inline ::TSP::Reference* release_sheet();
  inline void set_allocated_sheet(::TSP::Reference* sheet);

  // optional bool paginated = 2;
  inline bool has_paginated() const;
  inline void clear_paginated();
  static const int kPaginatedFieldNumber = 2;
  inline bool paginated() const;
  inline void set_paginated(bool value);

  // @@protoc_insertion_point(class_scope:TN.SheetSelectionArchive)
 private:
  inline void set_has_sheet();
  inline void clear_has_sheet();
  inline void set_has_paginated();
  inline void clear_has_paginated();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSP::Reference* sheet_;
  bool paginated_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_TNArchives_2eproto();
  friend void protobuf_AssignDesc_TNArchives_2eproto();
  friend void protobuf_ShutdownFile_TNArchives_2eproto();

  void InitAsDefaultInstance();
  static SheetSelectionArchive* default_instance_;
};
// -------------------------------------------------------------------

class UndoRedoStateArchive : public ::google::protobuf::Message {
 public:
  UndoRedoStateArchive();
  virtual ~UndoRedoStateArchive();

  UndoRedoStateArchive(const UndoRedoStateArchive& from);

  inline UndoRedoStateArchive& operator=(const UndoRedoStateArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UndoRedoStateArchive& default_instance();

  void Swap(UndoRedoStateArchive* other);

  // implements Message ----------------------------------------------

  UndoRedoStateArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UndoRedoStateArchive& from);
  void MergeFrom(const UndoRedoStateArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TN.UIStateArchive ui_state = 1;
  inline bool has_ui_state() const;
  inline void clear_ui_state();
  static const int kUiStateFieldNumber = 1;
  inline const ::TN::UIStateArchive& ui_state() const;
  inline ::TN::UIStateArchive* mutable_ui_state();
  inline ::TN::UIStateArchive* release_ui_state();
  inline void set_allocated_ui_state(::TN::UIStateArchive* ui_state);

  // @@protoc_insertion_point(class_scope:TN.UndoRedoStateArchive)
 private:
  inline void set_has_ui_state();
  inline void clear_has_ui_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TN::UIStateArchive* ui_state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_TNArchives_2eproto();
  friend void protobuf_AssignDesc_TNArchives_2eproto();
  friend void protobuf_ShutdownFile_TNArchives_2eproto();

  void InitAsDefaultInstance();
  static UndoRedoStateArchive* default_instance_;
};
// -------------------------------------------------------------------

class DocumentArchive : public ::google::protobuf::Message {
 public:
  DocumentArchive();
  virtual ~DocumentArchive();

  DocumentArchive(const DocumentArchive& from);

  inline DocumentArchive& operator=(const DocumentArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentArchive& default_instance();

  void Swap(DocumentArchive* other);

  // implements Message ----------------------------------------------

  DocumentArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DocumentArchive& from);
  void MergeFrom(const DocumentArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TSP.Reference sheets = 1;
  inline int sheets_size() const;
  inline void clear_sheets();
  static const int kSheetsFieldNumber = 1;
  inline const ::TSP::Reference& sheets(int index) const;
  inline ::TSP::Reference* mutable_sheets(int index);
  inline ::TSP::Reference* add_sheets();
  inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
      sheets() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
      mutable_sheets();

  // required .TSA.DocumentArchive super = 8;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 8;
  inline const ::TSA::DocumentArchive& super() const;
  inline ::TSA::DocumentArchive* mutable_super();
  inline ::TSA::DocumentArchive* release_super();
  inline void set_allocated_super(::TSA::DocumentArchive* super);

  // optional .TSP.Reference calculation_engine = 3 [deprecated = true];
  inline bool has_calculation_engine() const PROTOBUF_DEPRECATED;
  inline void clear_calculation_engine() PROTOBUF_DEPRECATED;
  static const int kCalculationEngineFieldNumber = 3;
  inline const ::TSP::Reference& calculation_engine() const PROTOBUF_DEPRECATED;
  inline ::TSP::Reference* mutable_calculation_engine() PROTOBUF_DEPRECATED;
  inline ::TSP::Reference* release_calculation_engine() PROTOBUF_DEPRECATED;
  inline void set_allocated_calculation_engine(::TSP::Reference* calculation_engine) PROTOBUF_DEPRECATED;

  // required .TSP.Reference stylesheet = 4;
  inline bool has_stylesheet() const;
  inline void clear_stylesheet();
  static const int kStylesheetFieldNumber = 4;
  inline const ::TSP::Reference& stylesheet() const;
  inline ::TSP::Reference* mutable_stylesheet();
  inline ::TSP::Reference* release_stylesheet();
  inline void set_allocated_stylesheet(::TSP::Reference* stylesheet);

  // required .TSP.Reference sidebar_order = 5;
  inline bool has_sidebar_order() const;
  inline void clear_sidebar_order();
  static const int kSidebarOrderFieldNumber = 5;
  inline const ::TSP::Reference& sidebar_order() const;
  inline ::TSP::Reference* mutable_sidebar_order();
  inline ::TSP::Reference* release_sidebar_order();
  inline void set_allocated_sidebar_order(::TSP::Reference* sidebar_order);

  // required .TSP.Reference theme = 6;
  inline bool has_theme() const;
  inline void clear_theme();
  static const int kThemeFieldNumber = 6;
  inline const ::TSP::Reference& theme() const;
  inline ::TSP::Reference* mutable_theme();
  inline ::TSP::Reference* release_theme();
  inline void set_allocated_theme(::TSP::Reference* theme);

  // optional .TN.UIStateArchive uistate = 7;
  inline bool has_uistate() const;
  inline void clear_uistate();
  static const int kUistateFieldNumber = 7;
  inline const ::TN::UIStateArchive& uistate() const;
  inline ::TN::UIStateArchive* mutable_uistate();
  inline ::TN::UIStateArchive* release_uistate();
  inline void set_allocated_uistate(::TN::UIStateArchive* uistate);

  // optional .TSP.Reference custom_format_list = 9;
  inline bool has_custom_format_list() const;
  inline void clear_custom_format_list();
  static const int kCustomFormatListFieldNumber = 9;
  inline const ::TSP::Reference& custom_format_list() const;
  inline ::TSP::Reference* mutable_custom_format_list();
  inline ::TSP::Reference* release_custom_format_list();
  inline void set_allocated_custom_format_list(::TSP::Reference* custom_format_list);

  // optional string printer_id = 10;
  inline bool has_printer_id() const;
  inline void clear_printer_id();
  static const int kPrinterIdFieldNumber = 10;
  inline const ::std::string& printer_id() const;
  inline void set_printer_id(const ::std::string& value);
  inline void set_printer_id(const char* value);
  inline void set_printer_id(const char* value, size_t size);
  inline ::std::string* mutable_printer_id();
  inline ::std::string* release_printer_id();
  inline void set_allocated_printer_id(::std::string* printer_id);

  // optional string paper_id = 11;
  inline bool has_paper_id() const;
  inline void clear_paper_id();
  static const int kPaperIdFieldNumber = 11;
  inline const ::std::string& paper_id() const;
  inline void set_paper_id(const ::std::string& value);
  inline void set_paper_id(const char* value);
  inline void set_paper_id(const char* value, size_t size);
  inline ::std::string* mutable_paper_id();
  inline ::std::string* release_paper_id();
  inline void set_allocated_paper_id(::std::string* paper_id);

  // optional .TSP.Size page_size = 12;
  inline bool has_page_size() const;
  inline void clear_page_size();
  static const int kPageSizeFieldNumber = 12;
  inline const ::TSP::Size& page_size() const;
  inline ::TSP::Size* mutable_page_size();
  inline ::TSP::Size* release_page_size();
  inline void set_allocated_page_size(::TSP::Size* page_size);

  // @@protoc_insertion_point(class_scope:TN.DocumentArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();
  inline void set_has_calculation_engine();
  inline void clear_has_calculation_engine();
  inline void set_has_stylesheet();
  inline void clear_has_stylesheet();
  inline void set_has_sidebar_order();
  inline void clear_has_sidebar_order();
  inline void set_has_theme();
  inline void clear_has_theme();
  inline void set_has_uistate();
  inline void clear_has_uistate();
  inline void set_has_custom_format_list();
  inline void clear_has_custom_format_list();
  inline void set_has_printer_id();
  inline void clear_has_printer_id();
  inline void set_has_paper_id();
  inline void clear_has_paper_id();
  inline void set_has_page_size();
  inline void clear_has_page_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::TSP::Reference > sheets_;
  ::TSA::DocumentArchive* super_;
  ::TSP::Reference* calculation_engine_;
  ::TSP::Reference* stylesheet_;
  ::TSP::Reference* sidebar_order_;
  ::TSP::Reference* theme_;
  ::TN::UIStateArchive* uistate_;
  ::TSP::Reference* custom_format_list_;
  ::std::string* printer_id_;
  ::std::string* paper_id_;
  ::TSP::Size* page_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_TNArchives_2eproto();
  friend void protobuf_AssignDesc_TNArchives_2eproto();
  friend void protobuf_ShutdownFile_TNArchives_2eproto();

  void InitAsDefaultInstance();
  static DocumentArchive* default_instance_;
};
// -------------------------------------------------------------------

class PlaceholderArchive : public ::google::protobuf::Message {
 public:
  PlaceholderArchive();
  virtual ~PlaceholderArchive();

  PlaceholderArchive(const PlaceholderArchive& from);

  inline PlaceholderArchive& operator=(const PlaceholderArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlaceholderArchive& default_instance();

  void Swap(PlaceholderArchive* other);

  // implements Message ----------------------------------------------

  PlaceholderArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlaceholderArchive& from);
  void MergeFrom(const PlaceholderArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSWP.ShapeInfoArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSWP::ShapeInfoArchive& super() const;
  inline ::TSWP::ShapeInfoArchive* mutable_super();
  inline ::TSWP::ShapeInfoArchive* release_super();
  inline void set_allocated_super(::TSWP::ShapeInfoArchive* super);

  // @@protoc_insertion_point(class_scope:TN.PlaceholderArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSWP::ShapeInfoArchive* super_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_TNArchives_2eproto();
  friend void protobuf_AssignDesc_TNArchives_2eproto();
  friend void protobuf_ShutdownFile_TNArchives_2eproto();

  void InitAsDefaultInstance();
  static PlaceholderArchive* default_instance_;
};
// -------------------------------------------------------------------

class SheetArchive : public ::google::protobuf::Message {
 public:
  SheetArchive();
  virtual ~SheetArchive();

  SheetArchive(const SheetArchive& from);

  inline SheetArchive& operator=(const SheetArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SheetArchive& default_instance();

  void Swap(SheetArchive* other);

  // implements Message ----------------------------------------------

  SheetArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SheetArchive& from);
  void MergeFrom(const SheetArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .TSP.Reference drawable_infos = 2;
  inline int drawable_infos_size() const;
  inline void clear_drawable_infos();
  static const int kDrawableInfosFieldNumber = 2;
  inline const ::TSP::Reference& drawable_infos(int index) const;
  inline ::TSP::Reference* mutable_drawable_infos(int index);
  inline ::TSP::Reference* add_drawable_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
      drawable_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
      mutable_drawable_infos();

  // optional bool in_portrait_page_orientation = 3;
  inline bool has_in_portrait_page_orientation() const;
  inline void clear_in_portrait_page_orientation();
  static const int kInPortraitPageOrientationFieldNumber = 3;
  inline bool in_portrait_page_orientation() const;
  inline void set_in_portrait_page_orientation(bool value);

  // optional bool show_repeating_headers = 4 [deprecated = true];
  inline bool has_show_repeating_headers() const PROTOBUF_DEPRECATED;
  inline void clear_show_repeating_headers() PROTOBUF_DEPRECATED;
  static const int kShowRepeatingHeadersFieldNumber = 4;
  inline bool show_repeating_headers() const PROTOBUF_DEPRECATED;
  inline void set_show_repeating_headers(bool value) PROTOBUF_DEPRECATED;

  // optional bool show_page_numbers = 5;
  inline bool has_show_page_numbers() const;
  inline void clear_show_page_numbers();
  static const int kShowPageNumbersFieldNumber = 5;
  inline bool show_page_numbers() const;
  inline void set_show_page_numbers(bool value);

  // optional bool is_autofit_on = 6;
  inline bool has_is_autofit_on() const;
  inline void clear_is_autofit_on();
  static const int kIsAutofitOnFieldNumber = 6;
  inline bool is_autofit_on() const;
  inline void set_is_autofit_on(bool value);

  // optional float content_scale = 7;
  inline bool has_content_scale() const;
  inline void clear_content_scale();
  static const int kContentScaleFieldNumber = 7;
  inline float content_scale() const;
  inline void set_content_scale(float value);

  // optional .TN.SheetPageOrder page_order = 8;
  inline bool has_page_order() const;
  inline void clear_page_order();
  static const int kPageOrderFieldNumber = 8;
  inline ::TN::SheetPageOrder page_order() const;
  inline void set_page_order(::TN::SheetPageOrder value);

  // optional .TSD.EdgeInsetsArchive print_margins = 10;
  inline bool has_print_margins() const;
  inline void clear_print_margins();
  static const int kPrintMarginsFieldNumber = 10;
  inline const ::TSD::EdgeInsetsArchive& print_margins() const;
  inline ::TSD::EdgeInsetsArchive* mutable_print_margins();
  inline ::TSD::EdgeInsetsArchive* release_print_margins();
  inline void set_allocated_print_margins(::TSD::EdgeInsetsArchive* print_margins);

  // optional bool using_start_page_number = 11;
  inline bool has_using_start_page_number() const;
  inline void clear_using_start_page_number();
  static const int kUsingStartPageNumberFieldNumber = 11;
  inline bool using_start_page_number() const;
  inline void set_using_start_page_number(bool value);

  // optional int32 start_page_number = 12;
  inline bool has_start_page_number() const;
  inline void clear_start_page_number();
  static const int kStartPageNumberFieldNumber = 12;
  inline ::google::protobuf::int32 start_page_number() const;
  inline void set_start_page_number(::google::protobuf::int32 value);

  // optional float page_header_inset = 13;
  inline bool has_page_header_inset() const;
  inline void clear_page_header_inset();
  static const int kPageHeaderInsetFieldNumber = 13;
  inline float page_header_inset() const;
  inline void set_page_header_inset(float value);

  // optional float page_footer_inset = 14;
  inline bool has_page_footer_inset() const;
  inline void clear_page_footer_inset();
  static const int kPageFooterInsetFieldNumber = 14;
  inline float page_footer_inset() const;
  inline void set_page_footer_inset(float value);

  // optional .TSP.Reference header_storage = 15;
  inline bool has_header_storage() const;
  inline void clear_header_storage();
  static const int kHeaderStorageFieldNumber = 15;
  inline const ::TSP::Reference& header_storage() const;
  inline ::TSP::Reference* mutable_header_storage();
  inline ::TSP::Reference* release_header_storage();
  inline void set_allocated_header_storage(::TSP::Reference* header_storage);

  // optional .TSP.Reference footer_storage = 16;
  inline bool has_footer_storage() const;
  inline void clear_footer_storage();
  static const int kFooterStorageFieldNumber = 16;
  inline const ::TSP::Reference& footer_storage() const;
  inline ::TSP::Reference* mutable_footer_storage();
  inline ::TSP::Reference* release_footer_storage();
  inline void set_allocated_footer_storage(::TSP::Reference* footer_storage);

  // optional .TSP.Reference userDefinedGuideStorage = 17;
  inline bool has_userdefinedguidestorage() const;
  inline void clear_userdefinedguidestorage();
  static const int kUserDefinedGuideStorageFieldNumber = 17;
  inline const ::TSP::Reference& userdefinedguidestorage() const;
  inline ::TSP::Reference* mutable_userdefinedguidestorage();
  inline ::TSP::Reference* release_userdefinedguidestorage();
  inline void set_allocated_userdefinedguidestorage(::TSP::Reference* userdefinedguidestorage);

  // @@protoc_insertion_point(class_scope:TN.SheetArchive)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_in_portrait_page_orientation();
  inline void clear_has_in_portrait_page_orientation();
  inline void set_has_show_repeating_headers();
  inline void clear_has_show_repeating_headers();
  inline void set_has_show_page_numbers();
  inline void clear_has_show_page_numbers();
  inline void set_has_is_autofit_on();
  inline void clear_has_is_autofit_on();
  inline void set_has_content_scale();
  inline void clear_has_content_scale();
  inline void set_has_page_order();
  inline void clear_has_page_order();
  inline void set_has_print_margins();
  inline void clear_has_print_margins();
  inline void set_has_using_start_page_number();
  inline void clear_has_using_start_page_number();
  inline void set_has_start_page_number();
  inline void clear_has_start_page_number();
  inline void set_has_page_header_inset();
  inline void clear_has_page_header_inset();
  inline void set_has_page_footer_inset();
  inline void clear_has_page_footer_inset();
  inline void set_has_header_storage();
  inline void clear_has_header_storage();
  inline void set_has_footer_storage();
  inline void clear_has_footer_storage();
  inline void set_has_userdefinedguidestorage();
  inline void clear_has_userdefinedguidestorage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::TSP::Reference > drawable_infos_;
  bool in_portrait_page_orientation_;
  bool show_repeating_headers_;
  bool show_page_numbers_;
  bool is_autofit_on_;
  float content_scale_;
  int page_order_;
  bool using_start_page_number_;
  ::TSD::EdgeInsetsArchive* print_margins_;
  ::google::protobuf::int32 start_page_number_;
  float page_header_inset_;
  ::TSP::Reference* header_storage_;
  ::TSP::Reference* footer_storage_;
  ::TSP::Reference* userdefinedguidestorage_;
  float page_footer_inset_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_TNArchives_2eproto();
  friend void protobuf_AssignDesc_TNArchives_2eproto();
  friend void protobuf_ShutdownFile_TNArchives_2eproto();

  void InitAsDefaultInstance();
  static SheetArchive* default_instance_;
};
// -------------------------------------------------------------------

class FormBasedSheetArchive : public ::google::protobuf::Message {
 public:
  FormBasedSheetArchive();
  virtual ~FormBasedSheetArchive();

  FormBasedSheetArchive(const FormBasedSheetArchive& from);

  inline FormBasedSheetArchive& operator=(const FormBasedSheetArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FormBasedSheetArchive& default_instance();

  void Swap(FormBasedSheetArchive* other);

  // implements Message ----------------------------------------------

  FormBasedSheetArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FormBasedSheetArchive& from);
  void MergeFrom(const FormBasedSheetArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TN.SheetArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TN::SheetArchive& super() const;
  inline ::TN::SheetArchive* mutable_super();
  inline ::TN::SheetArchive* release_super();
  inline void set_allocated_super(::TN::SheetArchive* super);

  // optional .TSCE.CFUUIDArchive table_id = 2;
  inline bool has_table_id() const;
  inline void clear_table_id();
  static const int kTableIdFieldNumber = 2;
  inline const ::TSCE::CFUUIDArchive& table_id() const;
  inline ::TSCE::CFUUIDArchive* mutable_table_id();
  inline ::TSCE::CFUUIDArchive* release_table_id();
  inline void set_allocated_table_id(::TSCE::CFUUIDArchive* table_id);

  // @@protoc_insertion_point(class_scope:TN.FormBasedSheetArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();
  inline void set_has_table_id();
  inline void clear_has_table_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TN::SheetArchive* super_;
  ::TSCE::CFUUIDArchive* table_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_TNArchives_2eproto();
  friend void protobuf_AssignDesc_TNArchives_2eproto();
  friend void protobuf_ShutdownFile_TNArchives_2eproto();

  void InitAsDefaultInstance();
  static FormBasedSheetArchive* default_instance_;
};
// -------------------------------------------------------------------

class ThemeArchive : public ::google::protobuf::Message {
 public:
  ThemeArchive();
  virtual ~ThemeArchive();

  ThemeArchive(const ThemeArchive& from);

  inline ThemeArchive& operator=(const ThemeArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ThemeArchive& default_instance();

  void Swap(ThemeArchive* other);

  // implements Message ----------------------------------------------

  ThemeArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ThemeArchive& from);
  void MergeFrom(const ThemeArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSS.ThemeArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSS::ThemeArchive& super() const;
  inline ::TSS::ThemeArchive* mutable_super();
  inline ::TSS::ThemeArchive* release_super();
  inline void set_allocated_super(::TSS::ThemeArchive* super);

  // repeated .TSP.Reference prototypes = 2;
  inline int prototypes_size() const;
  inline void clear_prototypes();
  static const int kPrototypesFieldNumber = 2;
  inline const ::TSP::Reference& prototypes(int index) const;
  inline ::TSP::Reference* mutable_prototypes(int index);
  inline ::TSP::Reference* add_prototypes();
  inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
      prototypes() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
      mutable_prototypes();

  // @@protoc_insertion_point(class_scope:TN.ThemeArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSS::ThemeArchive* super_;
  ::google::protobuf::RepeatedPtrField< ::TSP::Reference > prototypes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_TNArchives_2eproto();
  friend void protobuf_AssignDesc_TNArchives_2eproto();
  friend void protobuf_ShutdownFile_TNArchives_2eproto();

  void InitAsDefaultInstance();
  static ThemeArchive* default_instance_;
};
// -------------------------------------------------------------------

class ChartMediatorFormulaStorage : public ::google::protobuf::Message {
 public:
  ChartMediatorFormulaStorage();
  virtual ~ChartMediatorFormulaStorage();

  ChartMediatorFormulaStorage(const ChartMediatorFormulaStorage& from);

  inline ChartMediatorFormulaStorage& operator=(const ChartMediatorFormulaStorage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChartMediatorFormulaStorage& default_instance();

  void Swap(ChartMediatorFormulaStorage* other);

  // implements Message ----------------------------------------------

  ChartMediatorFormulaStorage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChartMediatorFormulaStorage& from);
  void MergeFrom(const ChartMediatorFormulaStorage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TSCE.FormulaArchive data_formulae = 1;
  inline int data_formulae_size() const;
  inline void clear_data_formulae();
  static const int kDataFormulaeFieldNumber = 1;
  inline const ::TSCE::FormulaArchive& data_formulae(int index) const;
  inline ::TSCE::FormulaArchive* mutable_data_formulae(int index);
  inline ::TSCE::FormulaArchive* add_data_formulae();
  inline const ::google::protobuf::RepeatedPtrField< ::TSCE::FormulaArchive >&
      data_formulae() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSCE::FormulaArchive >*
      mutable_data_formulae();

  // repeated .TSCE.FormulaArchive row_label_formulae = 3;
  inline int row_label_formulae_size() const;
  inline void clear_row_label_formulae();
  static const int kRowLabelFormulaeFieldNumber = 3;
  inline const ::TSCE::FormulaArchive& row_label_formulae(int index) const;
  inline ::TSCE::FormulaArchive* mutable_row_label_formulae(int index);
  inline ::TSCE::FormulaArchive* add_row_label_formulae();
  inline const ::google::protobuf::RepeatedPtrField< ::TSCE::FormulaArchive >&
      row_label_formulae() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSCE::FormulaArchive >*
      mutable_row_label_formulae();

  // repeated .TSCE.FormulaArchive col_label_formulae = 4;
  inline int col_label_formulae_size() const;
  inline void clear_col_label_formulae();
  static const int kColLabelFormulaeFieldNumber = 4;
  inline const ::TSCE::FormulaArchive& col_label_formulae(int index) const;
  inline ::TSCE::FormulaArchive* mutable_col_label_formulae(int index);
  inline ::TSCE::FormulaArchive* add_col_label_formulae();
  inline const ::google::protobuf::RepeatedPtrField< ::TSCE::FormulaArchive >&
      col_label_formulae() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSCE::FormulaArchive >*
      mutable_col_label_formulae();

  // optional int32 direction = 5;
  inline bool has_direction() const;
  inline void clear_direction();
  static const int kDirectionFieldNumber = 5;
  inline ::google::protobuf::int32 direction() const;
  inline void set_direction(::google::protobuf::int32 value);

  // repeated .TSCE.FormulaArchive error_custom_pos_formulae = 6;
  inline int error_custom_pos_formulae_size() const;
  inline void clear_error_custom_pos_formulae();
  static const int kErrorCustomPosFormulaeFieldNumber = 6;
  inline const ::TSCE::FormulaArchive& error_custom_pos_formulae(int index) const;
  inline ::TSCE::FormulaArchive* mutable_error_custom_pos_formulae(int index);
  inline ::TSCE::FormulaArchive* add_error_custom_pos_formulae();
  inline const ::google::protobuf::RepeatedPtrField< ::TSCE::FormulaArchive >&
      error_custom_pos_formulae() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSCE::FormulaArchive >*
      mutable_error_custom_pos_formulae();

  // repeated .TSCE.FormulaArchive error_custom_neg_formulae = 7;
  inline int error_custom_neg_formulae_size() const;
  inline void clear_error_custom_neg_formulae();
  static const int kErrorCustomNegFormulaeFieldNumber = 7;
  inline const ::TSCE::FormulaArchive& error_custom_neg_formulae(int index) const;
  inline ::TSCE::FormulaArchive* mutable_error_custom_neg_formulae(int index);
  inline ::TSCE::FormulaArchive* add_error_custom_neg_formulae();
  inline const ::google::protobuf::RepeatedPtrField< ::TSCE::FormulaArchive >&
      error_custom_neg_formulae() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSCE::FormulaArchive >*
      mutable_error_custom_neg_formulae();

  // repeated .TSCE.FormulaArchive error_custom_pos_scatterX_formulae = 8;
  inline int error_custom_pos_scatterx_formulae_size() const;
  inline void clear_error_custom_pos_scatterx_formulae();
  static const int kErrorCustomPosScatterXFormulaeFieldNumber = 8;
  inline const ::TSCE::FormulaArchive& error_custom_pos_scatterx_formulae(int index) const;
  inline ::TSCE::FormulaArchive* mutable_error_custom_pos_scatterx_formulae(int index);
  inline ::TSCE::FormulaArchive* add_error_custom_pos_scatterx_formulae();
  inline const ::google::protobuf::RepeatedPtrField< ::TSCE::FormulaArchive >&
      error_custom_pos_scatterx_formulae() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSCE::FormulaArchive >*
      mutable_error_custom_pos_scatterx_formulae();

  // repeated .TSCE.FormulaArchive error_custom_neg_scatterX_formulae = 9;
  inline int error_custom_neg_scatterx_formulae_size() const;
  inline void clear_error_custom_neg_scatterx_formulae();
  static const int kErrorCustomNegScatterXFormulaeFieldNumber = 9;
  inline const ::TSCE::FormulaArchive& error_custom_neg_scatterx_formulae(int index) const;
  inline ::TSCE::FormulaArchive* mutable_error_custom_neg_scatterx_formulae(int index);
  inline ::TSCE::FormulaArchive* add_error_custom_neg_scatterx_formulae();
  inline const ::google::protobuf::RepeatedPtrField< ::TSCE::FormulaArchive >&
      error_custom_neg_scatterx_formulae() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSCE::FormulaArchive >*
      mutable_error_custom_neg_scatterx_formulae();

  // @@protoc_insertion_point(class_scope:TN.ChartMediatorFormulaStorage)
 private:
  inline void set_has_direction();
  inline void clear_has_direction();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::TSCE::FormulaArchive > data_formulae_;
  ::google::protobuf::RepeatedPtrField< ::TSCE::FormulaArchive > row_label_formulae_;
  ::google::protobuf::RepeatedPtrField< ::TSCE::FormulaArchive > col_label_formulae_;
  ::google::protobuf::RepeatedPtrField< ::TSCE::FormulaArchive > error_custom_pos_formulae_;
  ::google::protobuf::RepeatedPtrField< ::TSCE::FormulaArchive > error_custom_neg_formulae_;
  ::google::protobuf::RepeatedPtrField< ::TSCE::FormulaArchive > error_custom_pos_scatterx_formulae_;
  ::google::protobuf::RepeatedPtrField< ::TSCE::FormulaArchive > error_custom_neg_scatterx_formulae_;
  ::google::protobuf::int32 direction_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_TNArchives_2eproto();
  friend void protobuf_AssignDesc_TNArchives_2eproto();
  friend void protobuf_ShutdownFile_TNArchives_2eproto();

  void InitAsDefaultInstance();
  static ChartMediatorFormulaStorage* default_instance_;
};
// -------------------------------------------------------------------

class ChartMediatorArchive : public ::google::protobuf::Message {
 public:
  ChartMediatorArchive();
  virtual ~ChartMediatorArchive();

  ChartMediatorArchive(const ChartMediatorArchive& from);

  inline ChartMediatorArchive& operator=(const ChartMediatorArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChartMediatorArchive& default_instance();

  void Swap(ChartMediatorArchive* other);

  // implements Message ----------------------------------------------

  ChartMediatorArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChartMediatorArchive& from);
  void MergeFrom(const ChartMediatorArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSCH.ChartMediatorArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSCH::ChartMediatorArchive& super() const;
  inline ::TSCH::ChartMediatorArchive* mutable_super();
  inline ::TSCH::ChartMediatorArchive* release_super();
  inline void set_allocated_super(::TSCH::ChartMediatorArchive* super);

  // required string entity_id = 2;
  inline bool has_entity_id() const;
  inline void clear_entity_id();
  static const int kEntityIdFieldNumber = 2;
  inline const ::std::string& entity_id() const;
  inline void set_entity_id(const ::std::string& value);
  inline void set_entity_id(const char* value);
  inline void set_entity_id(const char* value, size_t size);
  inline ::std::string* mutable_entity_id();
  inline ::std::string* release_entity_id();
  inline void set_allocated_entity_id(::std::string* entity_id);

  // optional .TN.ChartMediatorFormulaStorage formulas = 3;
  inline bool has_formulas() const;
  inline void clear_formulas();
  static const int kFormulasFieldNumber = 3;
  inline const ::TN::ChartMediatorFormulaStorage& formulas() const;
  inline ::TN::ChartMediatorFormulaStorage* mutable_formulas();
  inline ::TN::ChartMediatorFormulaStorage* release_formulas();
  inline void set_allocated_formulas(::TN::ChartMediatorFormulaStorage* formulas);

  // optional bool columns_are_series = 4;
  inline bool has_columns_are_series() const;
  inline void clear_columns_are_series();
  static const int kColumnsAreSeriesFieldNumber = 4;
  inline bool columns_are_series() const;
  inline void set_columns_are_series(bool value);

  // optional bool is_registered_with_calc_engine = 5 [deprecated = true];
  inline bool has_is_registered_with_calc_engine() const PROTOBUF_DEPRECATED;
  inline void clear_is_registered_with_calc_engine() PROTOBUF_DEPRECATED;
  static const int kIsRegisteredWithCalcEngineFieldNumber = 5;
  inline bool is_registered_with_calc_engine() const PROTOBUF_DEPRECATED;
  inline void set_is_registered_with_calc_engine(bool value) PROTOBUF_DEPRECATED;

  // @@protoc_insertion_point(class_scope:TN.ChartMediatorArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();
  inline void set_has_entity_id();
  inline void clear_has_entity_id();
  inline void set_has_formulas();
  inline void clear_has_formulas();
  inline void set_has_columns_are_series();
  inline void clear_has_columns_are_series();
  inline void set_has_is_registered_with_calc_engine();
  inline void clear_has_is_registered_with_calc_engine();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSCH::ChartMediatorArchive* super_;
  ::std::string* entity_id_;
  ::TN::ChartMediatorFormulaStorage* formulas_;
  bool columns_are_series_;
  bool is_registered_with_calc_engine_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_TNArchives_2eproto();
  friend void protobuf_AssignDesc_TNArchives_2eproto();
  friend void protobuf_ShutdownFile_TNArchives_2eproto();

  void InitAsDefaultInstance();
  static ChartMediatorArchive* default_instance_;
};
// -------------------------------------------------------------------

class ChartSelectionArchive : public ::google::protobuf::Message {
 public:
  ChartSelectionArchive();
  virtual ~ChartSelectionArchive();

  ChartSelectionArchive(const ChartSelectionArchive& from);

  inline ChartSelectionArchive& operator=(const ChartSelectionArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChartSelectionArchive& default_instance();

  void Swap(ChartSelectionArchive* other);

  // implements Message ----------------------------------------------

  ChartSelectionArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChartSelectionArchive& from);
  void MergeFrom(const ChartSelectionArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .TSCE.RangeReferenceArchive reference = 1;
  inline bool has_reference() const;
  inline void clear_reference();
  static const int kReferenceFieldNumber = 1;
  inline const ::TSCE::RangeReferenceArchive& reference() const;
  inline ::TSCE::RangeReferenceArchive* mutable_reference();
  inline ::TSCE::RangeReferenceArchive* release_reference();
  inline void set_allocated_reference(::TSCE::RangeReferenceArchive* reference);

  // optional .TSCH.ChartSelectionArchive super = 2;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 2;
  inline const ::TSCH::ChartSelectionArchive& super() const;
  inline ::TSCH::ChartSelectionArchive* mutable_super();
  inline ::TSCH::ChartSelectionArchive* release_super();
  inline void set_allocated_super(::TSCH::ChartSelectionArchive* super);

  // @@protoc_insertion_point(class_scope:TN.ChartSelectionArchive)
 private:
  inline void set_has_reference();
  inline void clear_has_reference();
  inline void set_has_super();
  inline void clear_has_super();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSCE::RangeReferenceArchive* reference_;
  ::TSCH::ChartSelectionArchive* super_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_TNArchives_2eproto();
  friend void protobuf_AssignDesc_TNArchives_2eproto();
  friend void protobuf_ShutdownFile_TNArchives_2eproto();

  void InitAsDefaultInstance();
  static ChartSelectionArchive* default_instance_;
};
// ===================================================================


// ===================================================================

// SheetUIStateArchive

// required float view_scale = 1;
inline bool SheetUIStateArchive::has_view_scale() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SheetUIStateArchive::set_has_view_scale() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SheetUIStateArchive::clear_has_view_scale() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SheetUIStateArchive::clear_view_scale() {
  view_scale_ = 0;
  clear_has_view_scale();
}
inline float SheetUIStateArchive::view_scale() const {
  return view_scale_;
}
inline void SheetUIStateArchive::set_view_scale(float value) {
  set_has_view_scale();
  view_scale_ = value;
}

// required .TSP.Point scroll_position = 2;
inline bool SheetUIStateArchive::has_scroll_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SheetUIStateArchive::set_has_scroll_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SheetUIStateArchive::clear_has_scroll_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SheetUIStateArchive::clear_scroll_position() {
  if (scroll_position_ != NULL) scroll_position_->::TSP::Point::Clear();
  clear_has_scroll_position();
}
inline const ::TSP::Point& SheetUIStateArchive::scroll_position() const {
  return scroll_position_ != NULL ? *scroll_position_ : *default_instance_->scroll_position_;
}
inline ::TSP::Point* SheetUIStateArchive::mutable_scroll_position() {
  set_has_scroll_position();
  if (scroll_position_ == NULL) scroll_position_ = new ::TSP::Point;
  return scroll_position_;
}
inline ::TSP::Point* SheetUIStateArchive::release_scroll_position() {
  clear_has_scroll_position();
  ::TSP::Point* temp = scroll_position_;
  scroll_position_ = NULL;
  return temp;
}
inline void SheetUIStateArchive::set_allocated_scroll_position(::TSP::Point* scroll_position) {
  delete scroll_position_;
  scroll_position_ = scroll_position;
  if (scroll_position) {
    set_has_scroll_position();
  } else {
    clear_has_scroll_position();
  }
}

// optional float previous_view_scale = 3;
inline bool SheetUIStateArchive::has_previous_view_scale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SheetUIStateArchive::set_has_previous_view_scale() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SheetUIStateArchive::clear_has_previous_view_scale() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SheetUIStateArchive::clear_previous_view_scale() {
  previous_view_scale_ = 0;
  clear_has_previous_view_scale();
}
inline float SheetUIStateArchive::previous_view_scale() const {
  return previous_view_scale_;
}
inline void SheetUIStateArchive::set_previous_view_scale(float value) {
  set_has_previous_view_scale();
  previous_view_scale_ = value;
}

// optional bool scroll_position_is_unscaled = 4;
inline bool SheetUIStateArchive::has_scroll_position_is_unscaled() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SheetUIStateArchive::set_has_scroll_position_is_unscaled() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SheetUIStateArchive::clear_has_scroll_position_is_unscaled() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SheetUIStateArchive::clear_scroll_position_is_unscaled() {
  scroll_position_is_unscaled_ = false;
  clear_has_scroll_position_is_unscaled();
}
inline bool SheetUIStateArchive::scroll_position_is_unscaled() const {
  return scroll_position_is_unscaled_;
}
inline void SheetUIStateArchive::set_scroll_position_is_unscaled(bool value) {
  set_has_scroll_position_is_unscaled();
  scroll_position_is_unscaled_ = value;
}

// optional .TSP.Point previous_scroll_position = 5;
inline bool SheetUIStateArchive::has_previous_scroll_position() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SheetUIStateArchive::set_has_previous_scroll_position() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SheetUIStateArchive::clear_has_previous_scroll_position() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SheetUIStateArchive::clear_previous_scroll_position() {
  if (previous_scroll_position_ != NULL) previous_scroll_position_->::TSP::Point::Clear();
  clear_has_previous_scroll_position();
}
inline const ::TSP::Point& SheetUIStateArchive::previous_scroll_position() const {
  return previous_scroll_position_ != NULL ? *previous_scroll_position_ : *default_instance_->previous_scroll_position_;
}
inline ::TSP::Point* SheetUIStateArchive::mutable_previous_scroll_position() {
  set_has_previous_scroll_position();
  if (previous_scroll_position_ == NULL) previous_scroll_position_ = new ::TSP::Point;
  return previous_scroll_position_;
}
inline ::TSP::Point* SheetUIStateArchive::release_previous_scroll_position() {
  clear_has_previous_scroll_position();
  ::TSP::Point* temp = previous_scroll_position_;
  previous_scroll_position_ = NULL;
  return temp;
}
inline void SheetUIStateArchive::set_allocated_previous_scroll_position(::TSP::Point* previous_scroll_position) {
  delete previous_scroll_position_;
  previous_scroll_position_ = previous_scroll_position;
  if (previous_scroll_position) {
    set_has_previous_scroll_position();
  } else {
    clear_has_previous_scroll_position();
  }
}

// optional bool scroll_position_valid = 6;
inline bool SheetUIStateArchive::has_scroll_position_valid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SheetUIStateArchive::set_has_scroll_position_valid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SheetUIStateArchive::clear_has_scroll_position_valid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SheetUIStateArchive::clear_scroll_position_valid() {
  scroll_position_valid_ = false;
  clear_has_scroll_position_valid();
}
inline bool SheetUIStateArchive::scroll_position_valid() const {
  return scroll_position_valid_;
}
inline void SheetUIStateArchive::set_scroll_position_valid(bool value) {
  set_has_scroll_position_valid();
  scroll_position_valid_ = value;
}

// optional bool previous_scroll_position_valid = 7;
inline bool SheetUIStateArchive::has_previous_scroll_position_valid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SheetUIStateArchive::set_has_previous_scroll_position_valid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SheetUIStateArchive::clear_has_previous_scroll_position_valid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SheetUIStateArchive::clear_previous_scroll_position_valid() {
  previous_scroll_position_valid_ = false;
  clear_has_previous_scroll_position_valid();
}
inline bool SheetUIStateArchive::previous_scroll_position_valid() const {
  return previous_scroll_position_valid_;
}
inline void SheetUIStateArchive::set_previous_scroll_position_valid(bool value) {
  set_has_previous_scroll_position_valid();
  previous_scroll_position_valid_ = value;
}

// optional .TSP.Size visible_size = 8;
inline bool SheetUIStateArchive::has_visible_size() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SheetUIStateArchive::set_has_visible_size() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SheetUIStateArchive::clear_has_visible_size() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SheetUIStateArchive::clear_visible_size() {
  if (visible_size_ != NULL) visible_size_->::TSP::Size::Clear();
  clear_has_visible_size();
}
inline const ::TSP::Size& SheetUIStateArchive::visible_size() const {
  return visible_size_ != NULL ? *visible_size_ : *default_instance_->visible_size_;
}
inline ::TSP::Size* SheetUIStateArchive::mutable_visible_size() {
  set_has_visible_size();
  if (visible_size_ == NULL) visible_size_ = new ::TSP::Size;
  return visible_size_;
}
inline ::TSP::Size* SheetUIStateArchive::release_visible_size() {
  clear_has_visible_size();
  ::TSP::Size* temp = visible_size_;
  visible_size_ = NULL;
  return temp;
}
inline void SheetUIStateArchive::set_allocated_visible_size(::TSP::Size* visible_size) {
  delete visible_size_;
  visible_size_ = visible_size;
  if (visible_size) {
    set_has_visible_size();
  } else {
    clear_has_visible_size();
  }
}

// optional .TSP.Size previous_visible_size = 9;
inline bool SheetUIStateArchive::has_previous_visible_size() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SheetUIStateArchive::set_has_previous_visible_size() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SheetUIStateArchive::clear_has_previous_visible_size() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SheetUIStateArchive::clear_previous_visible_size() {
  if (previous_visible_size_ != NULL) previous_visible_size_->::TSP::Size::Clear();
  clear_has_previous_visible_size();
}
inline const ::TSP::Size& SheetUIStateArchive::previous_visible_size() const {
  return previous_visible_size_ != NULL ? *previous_visible_size_ : *default_instance_->previous_visible_size_;
}
inline ::TSP::Size* SheetUIStateArchive::mutable_previous_visible_size() {
  set_has_previous_visible_size();
  if (previous_visible_size_ == NULL) previous_visible_size_ = new ::TSP::Size;
  return previous_visible_size_;
}
inline ::TSP::Size* SheetUIStateArchive::release_previous_visible_size() {
  clear_has_previous_visible_size();
  ::TSP::Size* temp = previous_visible_size_;
  previous_visible_size_ = NULL;
  return temp;
}
inline void SheetUIStateArchive::set_allocated_previous_visible_size(::TSP::Size* previous_visible_size) {
  delete previous_visible_size_;
  previous_visible_size_ = previous_visible_size;
  if (previous_visible_size) {
    set_has_previous_visible_size();
  } else {
    clear_has_previous_visible_size();
  }
}

// optional uint32 device_idiom = 10;
inline bool SheetUIStateArchive::has_device_idiom() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SheetUIStateArchive::set_has_device_idiom() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SheetUIStateArchive::clear_has_device_idiom() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SheetUIStateArchive::clear_device_idiom() {
  device_idiom_ = 0u;
  clear_has_device_idiom();
}
inline ::google::protobuf::uint32 SheetUIStateArchive::device_idiom() const {
  return device_idiom_;
}
inline void SheetUIStateArchive::set_device_idiom(::google::protobuf::uint32 value) {
  set_has_device_idiom();
  device_idiom_ = value;
}

// optional uint32 form_focused_record_index = 11;
inline bool SheetUIStateArchive::has_form_focused_record_index() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SheetUIStateArchive::set_has_form_focused_record_index() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SheetUIStateArchive::clear_has_form_focused_record_index() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SheetUIStateArchive::clear_form_focused_record_index() {
  form_focused_record_index_ = 0u;
  clear_has_form_focused_record_index();
}
inline ::google::protobuf::uint32 SheetUIStateArchive::form_focused_record_index() const {
  return form_focused_record_index_;
}
inline void SheetUIStateArchive::set_form_focused_record_index(::google::protobuf::uint32 value) {
  set_has_form_focused_record_index();
  form_focused_record_index_ = value;
}

// optional uint32 form_focused_field_index = 12;
inline bool SheetUIStateArchive::has_form_focused_field_index() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SheetUIStateArchive::set_has_form_focused_field_index() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SheetUIStateArchive::clear_has_form_focused_field_index() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SheetUIStateArchive::clear_form_focused_field_index() {
  form_focused_field_index_ = 0u;
  clear_has_form_focused_field_index();
}
inline ::google::protobuf::uint32 SheetUIStateArchive::form_focused_field_index() const {
  return form_focused_field_index_;
}
inline void SheetUIStateArchive::set_form_focused_field_index(::google::protobuf::uint32 value) {
  set_has_form_focused_field_index();
  form_focused_field_index_ = value;
}

// -------------------------------------------------------------------

// SheetUIStateDictionaryEntryArchive

// required .TSP.Reference sheet = 1;
inline bool SheetUIStateDictionaryEntryArchive::has_sheet() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SheetUIStateDictionaryEntryArchive::set_has_sheet() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SheetUIStateDictionaryEntryArchive::clear_has_sheet() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SheetUIStateDictionaryEntryArchive::clear_sheet() {
  if (sheet_ != NULL) sheet_->::TSP::Reference::Clear();
  clear_has_sheet();
}
inline const ::TSP::Reference& SheetUIStateDictionaryEntryArchive::sheet() const {
  return sheet_ != NULL ? *sheet_ : *default_instance_->sheet_;
}
inline ::TSP::Reference* SheetUIStateDictionaryEntryArchive::mutable_sheet() {
  set_has_sheet();
  if (sheet_ == NULL) sheet_ = new ::TSP::Reference;
  return sheet_;
}
inline ::TSP::Reference* SheetUIStateDictionaryEntryArchive::release_sheet() {
  clear_has_sheet();
  ::TSP::Reference* temp = sheet_;
  sheet_ = NULL;
  return temp;
}
inline void SheetUIStateDictionaryEntryArchive::set_allocated_sheet(::TSP::Reference* sheet) {
  delete sheet_;
  sheet_ = sheet;
  if (sheet) {
    set_has_sheet();
  } else {
    clear_has_sheet();
  }
}

// required .TN.SheetUIStateArchive sheet_uistate = 2;
inline bool SheetUIStateDictionaryEntryArchive::has_sheet_uistate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SheetUIStateDictionaryEntryArchive::set_has_sheet_uistate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SheetUIStateDictionaryEntryArchive::clear_has_sheet_uistate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SheetUIStateDictionaryEntryArchive::clear_sheet_uistate() {
  if (sheet_uistate_ != NULL) sheet_uistate_->::TN::SheetUIStateArchive::Clear();
  clear_has_sheet_uistate();
}
inline const ::TN::SheetUIStateArchive& SheetUIStateDictionaryEntryArchive::sheet_uistate() const {
  return sheet_uistate_ != NULL ? *sheet_uistate_ : *default_instance_->sheet_uistate_;
}
inline ::TN::SheetUIStateArchive* SheetUIStateDictionaryEntryArchive::mutable_sheet_uistate() {
  set_has_sheet_uistate();
  if (sheet_uistate_ == NULL) sheet_uistate_ = new ::TN::SheetUIStateArchive;
  return sheet_uistate_;
}
inline ::TN::SheetUIStateArchive* SheetUIStateDictionaryEntryArchive::release_sheet_uistate() {
  clear_has_sheet_uistate();
  ::TN::SheetUIStateArchive* temp = sheet_uistate_;
  sheet_uistate_ = NULL;
  return temp;
}
inline void SheetUIStateDictionaryEntryArchive::set_allocated_sheet_uistate(::TN::SheetUIStateArchive* sheet_uistate) {
  delete sheet_uistate_;
  sheet_uistate_ = sheet_uistate;
  if (sheet_uistate) {
    set_has_sheet_uistate();
  } else {
    clear_has_sheet_uistate();
  }
}

// -------------------------------------------------------------------

// UIStateArchive

// required uint32 active_sheet_index = 1 [deprecated = true];
inline bool UIStateArchive::has_active_sheet_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UIStateArchive::set_has_active_sheet_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UIStateArchive::clear_has_active_sheet_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UIStateArchive::clear_active_sheet_index() {
  active_sheet_index_ = 0u;
  clear_has_active_sheet_index();
}
inline ::google::protobuf::uint32 UIStateArchive::active_sheet_index() const {
  return active_sheet_index_;
}
inline void UIStateArchive::set_active_sheet_index(::google::protobuf::uint32 value) {
  set_has_active_sheet_index();
  active_sheet_index_ = value;
}

// repeated .TSP.Reference selected_info = 2;
inline int UIStateArchive::selected_info_size() const {
  return selected_info_.size();
}
inline void UIStateArchive::clear_selected_info() {
  selected_info_.Clear();
}
inline const ::TSP::Reference& UIStateArchive::selected_info(int index) const {
  return selected_info_.Get(index);
}
inline ::TSP::Reference* UIStateArchive::mutable_selected_info(int index) {
  return selected_info_.Mutable(index);
}
inline ::TSP::Reference* UIStateArchive::add_selected_info() {
  return selected_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
UIStateArchive::selected_info() const {
  return selected_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
UIStateArchive::mutable_selected_info() {
  return &selected_info_;
}

// repeated .TN.SheetUIStateDictionaryEntryArchive sheet_uistate_dictionary_entry = 3;
inline int UIStateArchive::sheet_uistate_dictionary_entry_size() const {
  return sheet_uistate_dictionary_entry_.size();
}
inline void UIStateArchive::clear_sheet_uistate_dictionary_entry() {
  sheet_uistate_dictionary_entry_.Clear();
}
inline const ::TN::SheetUIStateDictionaryEntryArchive& UIStateArchive::sheet_uistate_dictionary_entry(int index) const {
  return sheet_uistate_dictionary_entry_.Get(index);
}
inline ::TN::SheetUIStateDictionaryEntryArchive* UIStateArchive::mutable_sheet_uistate_dictionary_entry(int index) {
  return sheet_uistate_dictionary_entry_.Mutable(index);
}
inline ::TN::SheetUIStateDictionaryEntryArchive* UIStateArchive::add_sheet_uistate_dictionary_entry() {
  return sheet_uistate_dictionary_entry_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TN::SheetUIStateDictionaryEntryArchive >&
UIStateArchive::sheet_uistate_dictionary_entry() const {
  return sheet_uistate_dictionary_entry_;
}
inline ::google::protobuf::RepeatedPtrField< ::TN::SheetUIStateDictionaryEntryArchive >*
UIStateArchive::mutable_sheet_uistate_dictionary_entry() {
  return &sheet_uistate_dictionary_entry_;
}

// optional .TST.SelectionArchive table_selection = 4;
inline bool UIStateArchive::has_table_selection() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UIStateArchive::set_has_table_selection() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UIStateArchive::clear_has_table_selection() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UIStateArchive::clear_table_selection() {
  if (table_selection_ != NULL) table_selection_->::TST::SelectionArchive::Clear();
  clear_has_table_selection();
}
inline const ::TST::SelectionArchive& UIStateArchive::table_selection() const {
  return table_selection_ != NULL ? *table_selection_ : *default_instance_->table_selection_;
}
inline ::TST::SelectionArchive* UIStateArchive::mutable_table_selection() {
  set_has_table_selection();
  if (table_selection_ == NULL) table_selection_ = new ::TST::SelectionArchive;
  return table_selection_;
}
inline ::TST::SelectionArchive* UIStateArchive::release_table_selection() {
  clear_has_table_selection();
  ::TST::SelectionArchive* temp = table_selection_;
  table_selection_ = NULL;
  return temp;
}
inline void UIStateArchive::set_allocated_table_selection(::TST::SelectionArchive* table_selection) {
  delete table_selection_;
  table_selection_ = table_selection;
  if (table_selection) {
    set_has_table_selection();
  } else {
    clear_has_table_selection();
  }
}

// optional uint32 editing_sheet_index = 5 [deprecated = true];
inline bool UIStateArchive::has_editing_sheet_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UIStateArchive::set_has_editing_sheet_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UIStateArchive::clear_has_editing_sheet_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UIStateArchive::clear_editing_sheet_index() {
  editing_sheet_index_ = 0u;
  clear_has_editing_sheet_index();
}
inline ::google::protobuf::uint32 UIStateArchive::editing_sheet_index() const {
  return editing_sheet_index_;
}
inline void UIStateArchive::set_editing_sheet_index(::google::protobuf::uint32 value) {
  set_has_editing_sheet_index();
  editing_sheet_index_ = value;
}

// optional int32 document_mode = 6;
inline bool UIStateArchive::has_document_mode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UIStateArchive::set_has_document_mode() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UIStateArchive::clear_has_document_mode() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UIStateArchive::clear_document_mode() {
  document_mode_ = 0;
  clear_has_document_mode();
}
inline ::google::protobuf::int32 UIStateArchive::document_mode() const {
  return document_mode_;
}
inline void UIStateArchive::set_document_mode(::google::protobuf::int32 value) {
  set_has_document_mode();
  document_mode_ = value;
}

// repeated .TN.SheetUIStateDictionaryEntryArchive edit_mode_sheet_uistate_dictionary_entry = 7;
inline int UIStateArchive::edit_mode_sheet_uistate_dictionary_entry_size() const {
  return edit_mode_sheet_uistate_dictionary_entry_.size();
}
inline void UIStateArchive::clear_edit_mode_sheet_uistate_dictionary_entry() {
  edit_mode_sheet_uistate_dictionary_entry_.Clear();
}
inline const ::TN::SheetUIStateDictionaryEntryArchive& UIStateArchive::edit_mode_sheet_uistate_dictionary_entry(int index) const {
  return edit_mode_sheet_uistate_dictionary_entry_.Get(index);
}
inline ::TN::SheetUIStateDictionaryEntryArchive* UIStateArchive::mutable_edit_mode_sheet_uistate_dictionary_entry(int index) {
  return edit_mode_sheet_uistate_dictionary_entry_.Mutable(index);
}
inline ::TN::SheetUIStateDictionaryEntryArchive* UIStateArchive::add_edit_mode_sheet_uistate_dictionary_entry() {
  return edit_mode_sheet_uistate_dictionary_entry_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TN::SheetUIStateDictionaryEntryArchive >&
UIStateArchive::edit_mode_sheet_uistate_dictionary_entry() const {
  return edit_mode_sheet_uistate_dictionary_entry_;
}
inline ::google::protobuf::RepeatedPtrField< ::TN::SheetUIStateDictionaryEntryArchive >*
UIStateArchive::mutable_edit_mode_sheet_uistate_dictionary_entry() {
  return &edit_mode_sheet_uistate_dictionary_entry_;
}

// optional int32 table_editing_mode = 8;
inline bool UIStateArchive::has_table_editing_mode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UIStateArchive::set_has_table_editing_mode() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UIStateArchive::clear_has_table_editing_mode() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UIStateArchive::clear_table_editing_mode() {
  table_editing_mode_ = 0;
  clear_has_table_editing_mode();
}
inline ::google::protobuf::int32 UIStateArchive::table_editing_mode() const {
  return table_editing_mode_;
}
inline void UIStateArchive::set_table_editing_mode(::google::protobuf::int32 value) {
  set_has_table_editing_mode();
  table_editing_mode_ = value;
}

// optional uint32 form_focused_record_index = 9 [deprecated = true];
inline bool UIStateArchive::has_form_focused_record_index() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UIStateArchive::set_has_form_focused_record_index() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UIStateArchive::clear_has_form_focused_record_index() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UIStateArchive::clear_form_focused_record_index() {
  form_focused_record_index_ = 0u;
  clear_has_form_focused_record_index();
}
inline ::google::protobuf::uint32 UIStateArchive::form_focused_record_index() const {
  return form_focused_record_index_;
}
inline void UIStateArchive::set_form_focused_record_index(::google::protobuf::uint32 value) {
  set_has_form_focused_record_index();
  form_focused_record_index_ = value;
}

// optional uint32 form_focused_field_index = 10 [deprecated = true];
inline bool UIStateArchive::has_form_focused_field_index() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UIStateArchive::set_has_form_focused_field_index() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UIStateArchive::clear_has_form_focused_field_index() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UIStateArchive::clear_form_focused_field_index() {
  form_focused_field_index_ = 0u;
  clear_has_form_focused_field_index();
}
inline ::google::protobuf::uint32 UIStateArchive::form_focused_field_index() const {
  return form_focused_field_index_;
}
inline void UIStateArchive::set_form_focused_field_index(::google::protobuf::uint32 value) {
  set_has_form_focused_field_index();
  form_focused_field_index_ = value;
}

// optional bool in_chart_mode = 11;
inline bool UIStateArchive::has_in_chart_mode() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UIStateArchive::set_has_in_chart_mode() {
  _has_bits_[0] |= 0x00000400u;
}
inline void UIStateArchive::clear_has_in_chart_mode() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void UIStateArchive::clear_in_chart_mode() {
  in_chart_mode_ = false;
  clear_has_in_chart_mode();
}
inline bool UIStateArchive::in_chart_mode() const {
  return in_chart_mode_;
}
inline void UIStateArchive::set_in_chart_mode(bool value) {
  set_has_in_chart_mode();
  in_chart_mode_ = value;
}

// optional .TN.ChartSelectionArchive chart_selection = 12;
inline bool UIStateArchive::has_chart_selection() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void UIStateArchive::set_has_chart_selection() {
  _has_bits_[0] |= 0x00000800u;
}
inline void UIStateArchive::clear_has_chart_selection() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void UIStateArchive::clear_chart_selection() {
  if (chart_selection_ != NULL) chart_selection_->::TN::ChartSelectionArchive::Clear();
  clear_has_chart_selection();
}
inline const ::TN::ChartSelectionArchive& UIStateArchive::chart_selection() const {
  return chart_selection_ != NULL ? *chart_selection_ : *default_instance_->chart_selection_;
}
inline ::TN::ChartSelectionArchive* UIStateArchive::mutable_chart_selection() {
  set_has_chart_selection();
  if (chart_selection_ == NULL) chart_selection_ = new ::TN::ChartSelectionArchive;
  return chart_selection_;
}
inline ::TN::ChartSelectionArchive* UIStateArchive::release_chart_selection() {
  clear_has_chart_selection();
  ::TN::ChartSelectionArchive* temp = chart_selection_;
  chart_selection_ = NULL;
  return temp;
}
inline void UIStateArchive::set_allocated_chart_selection(::TN::ChartSelectionArchive* chart_selection) {
  delete chart_selection_;
  chart_selection_ = chart_selection;
  if (chart_selection) {
    set_has_chart_selection();
  } else {
    clear_has_chart_selection();
  }
}

// optional .TSP.Reference sheet_selection = 13;
inline bool UIStateArchive::has_sheet_selection() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void UIStateArchive::set_has_sheet_selection() {
  _has_bits_[0] |= 0x00001000u;
}
inline void UIStateArchive::clear_has_sheet_selection() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void UIStateArchive::clear_sheet_selection() {
  if (sheet_selection_ != NULL) sheet_selection_->::TSP::Reference::Clear();
  clear_has_sheet_selection();
}
inline const ::TSP::Reference& UIStateArchive::sheet_selection() const {
  return sheet_selection_ != NULL ? *sheet_selection_ : *default_instance_->sheet_selection_;
}
inline ::TSP::Reference* UIStateArchive::mutable_sheet_selection() {
  set_has_sheet_selection();
  if (sheet_selection_ == NULL) sheet_selection_ = new ::TSP::Reference;
  return sheet_selection_;
}
inline ::TSP::Reference* UIStateArchive::release_sheet_selection() {
  clear_has_sheet_selection();
  ::TSP::Reference* temp = sheet_selection_;
  sheet_selection_ = NULL;
  return temp;
}
inline void UIStateArchive::set_allocated_sheet_selection(::TSP::Reference* sheet_selection) {
  delete sheet_selection_;
  sheet_selection_ = sheet_selection;
  if (sheet_selection) {
    set_has_sheet_selection();
  } else {
    clear_has_sheet_selection();
  }
}

// optional bool inspector_pane_visible = 14 [default = true];
inline bool UIStateArchive::has_inspector_pane_visible() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void UIStateArchive::set_has_inspector_pane_visible() {
  _has_bits_[0] |= 0x00002000u;
}
inline void UIStateArchive::clear_has_inspector_pane_visible() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void UIStateArchive::clear_inspector_pane_visible() {
  inspector_pane_visible_ = true;
  clear_has_inspector_pane_visible();
}
inline bool UIStateArchive::inspector_pane_visible() const {
  return inspector_pane_visible_;
}
inline void UIStateArchive::set_inspector_pane_visible(bool value) {
  set_has_inspector_pane_visible();
  inspector_pane_visible_ = value;
}

// optional .TN.UIStateArchive.InspectorPaneViewMode inspector_pane_view_mode = 15 [default = kInspectorPaneViewModeFormat];
inline bool UIStateArchive::has_inspector_pane_view_mode() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void UIStateArchive::set_has_inspector_pane_view_mode() {
  _has_bits_[0] |= 0x00004000u;
}
inline void UIStateArchive::clear_has_inspector_pane_view_mode() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void UIStateArchive::clear_inspector_pane_view_mode() {
  inspector_pane_view_mode_ = 0;
  clear_has_inspector_pane_view_mode();
}
inline ::TN::UIStateArchive_InspectorPaneViewMode UIStateArchive::inspector_pane_view_mode() const {
  return static_cast< ::TN::UIStateArchive_InspectorPaneViewMode >(inspector_pane_view_mode_);
}
inline void UIStateArchive::set_inspector_pane_view_mode(::TN::UIStateArchive_InspectorPaneViewMode value) {
  assert(::TN::UIStateArchive_InspectorPaneViewMode_IsValid(value));
  set_has_inspector_pane_view_mode();
  inspector_pane_view_mode_ = value;
}

// repeated uint32 selected_quick_calc_functions = 16;
inline int UIStateArchive::selected_quick_calc_functions_size() const {
  return selected_quick_calc_functions_.size();
}
inline void UIStateArchive::clear_selected_quick_calc_functions() {
  selected_quick_calc_functions_.Clear();
}
inline ::google::protobuf::uint32 UIStateArchive::selected_quick_calc_functions(int index) const {
  return selected_quick_calc_functions_.Get(index);
}
inline void UIStateArchive::set_selected_quick_calc_functions(int index, ::google::protobuf::uint32 value) {
  selected_quick_calc_functions_.Set(index, value);
}
inline void UIStateArchive::add_selected_quick_calc_functions(::google::protobuf::uint32 value) {
  selected_quick_calc_functions_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
UIStateArchive::selected_quick_calc_functions() const {
  return selected_quick_calc_functions_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
UIStateArchive::mutable_selected_quick_calc_functions() {
  return &selected_quick_calc_functions_;
}

// optional bool removed_all_quick_calc_functions = 17;
inline bool UIStateArchive::has_removed_all_quick_calc_functions() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void UIStateArchive::set_has_removed_all_quick_calc_functions() {
  _has_bits_[0] |= 0x00010000u;
}
inline void UIStateArchive::clear_has_removed_all_quick_calc_functions() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void UIStateArchive::clear_removed_all_quick_calc_functions() {
  removed_all_quick_calc_functions_ = false;
  clear_has_removed_all_quick_calc_functions();
}
inline bool UIStateArchive::removed_all_quick_calc_functions() const {
  return removed_all_quick_calc_functions_;
}
inline void UIStateArchive::set_removed_all_quick_calc_functions(bool value) {
  set_has_removed_all_quick_calc_functions();
  removed_all_quick_calc_functions_ = value;
}

// optional bool show_canvas_guides = 18;
inline bool UIStateArchive::has_show_canvas_guides() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void UIStateArchive::set_has_show_canvas_guides() {
  _has_bits_[0] |= 0x00020000u;
}
inline void UIStateArchive::clear_has_show_canvas_guides() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void UIStateArchive::clear_show_canvas_guides() {
  show_canvas_guides_ = false;
  clear_has_show_canvas_guides();
}
inline bool UIStateArchive::show_canvas_guides() const {
  return show_canvas_guides_;
}
inline void UIStateArchive::set_show_canvas_guides(bool value) {
  set_has_show_canvas_guides();
  show_canvas_guides_ = value;
}

// optional bool shows_comments = 19;
inline bool UIStateArchive::has_shows_comments() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void UIStateArchive::set_has_shows_comments() {
  _has_bits_[0] |= 0x00040000u;
}
inline void UIStateArchive::clear_has_shows_comments() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void UIStateArchive::clear_shows_comments() {
  shows_comments_ = false;
  clear_has_shows_comments();
}
inline bool UIStateArchive::shows_comments() const {
  return shows_comments_;
}
inline void UIStateArchive::set_shows_comments(bool value) {
  set_has_shows_comments();
  shows_comments_ = value;
}

// -------------------------------------------------------------------

// SheetSelectionArchive

// optional .TSP.Reference sheet = 1;
inline bool SheetSelectionArchive::has_sheet() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SheetSelectionArchive::set_has_sheet() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SheetSelectionArchive::clear_has_sheet() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SheetSelectionArchive::clear_sheet() {
  if (sheet_ != NULL) sheet_->::TSP::Reference::Clear();
  clear_has_sheet();
}
inline const ::TSP::Reference& SheetSelectionArchive::sheet() const {
  return sheet_ != NULL ? *sheet_ : *default_instance_->sheet_;
}
inline ::TSP::Reference* SheetSelectionArchive::mutable_sheet() {
  set_has_sheet();
  if (sheet_ == NULL) sheet_ = new ::TSP::Reference;
  return sheet_;
}
inline ::TSP::Reference* SheetSelectionArchive::release_sheet() {
  clear_has_sheet();
  ::TSP::Reference* temp = sheet_;
  sheet_ = NULL;
  return temp;
}
inline void SheetSelectionArchive::set_allocated_sheet(::TSP::Reference* sheet) {
  delete sheet_;
  sheet_ = sheet;
  if (sheet) {
    set_has_sheet();
  } else {
    clear_has_sheet();
  }
}

// optional bool paginated = 2;
inline bool SheetSelectionArchive::has_paginated() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SheetSelectionArchive::set_has_paginated() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SheetSelectionArchive::clear_has_paginated() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SheetSelectionArchive::clear_paginated() {
  paginated_ = false;
  clear_has_paginated();
}
inline bool SheetSelectionArchive::paginated() const {
  return paginated_;
}
inline void SheetSelectionArchive::set_paginated(bool value) {
  set_has_paginated();
  paginated_ = value;
}

// -------------------------------------------------------------------

// UndoRedoStateArchive

// required .TN.UIStateArchive ui_state = 1;
inline bool UndoRedoStateArchive::has_ui_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UndoRedoStateArchive::set_has_ui_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UndoRedoStateArchive::clear_has_ui_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UndoRedoStateArchive::clear_ui_state() {
  if (ui_state_ != NULL) ui_state_->::TN::UIStateArchive::Clear();
  clear_has_ui_state();
}
inline const ::TN::UIStateArchive& UndoRedoStateArchive::ui_state() const {
  return ui_state_ != NULL ? *ui_state_ : *default_instance_->ui_state_;
}
inline ::TN::UIStateArchive* UndoRedoStateArchive::mutable_ui_state() {
  set_has_ui_state();
  if (ui_state_ == NULL) ui_state_ = new ::TN::UIStateArchive;
  return ui_state_;
}
inline ::TN::UIStateArchive* UndoRedoStateArchive::release_ui_state() {
  clear_has_ui_state();
  ::TN::UIStateArchive* temp = ui_state_;
  ui_state_ = NULL;
  return temp;
}
inline void UndoRedoStateArchive::set_allocated_ui_state(::TN::UIStateArchive* ui_state) {
  delete ui_state_;
  ui_state_ = ui_state;
  if (ui_state) {
    set_has_ui_state();
  } else {
    clear_has_ui_state();
  }
}

// -------------------------------------------------------------------

// DocumentArchive

// repeated .TSP.Reference sheets = 1;
inline int DocumentArchive::sheets_size() const {
  return sheets_.size();
}
inline void DocumentArchive::clear_sheets() {
  sheets_.Clear();
}
inline const ::TSP::Reference& DocumentArchive::sheets(int index) const {
  return sheets_.Get(index);
}
inline ::TSP::Reference* DocumentArchive::mutable_sheets(int index) {
  return sheets_.Mutable(index);
}
inline ::TSP::Reference* DocumentArchive::add_sheets() {
  return sheets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
DocumentArchive::sheets() const {
  return sheets_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
DocumentArchive::mutable_sheets() {
  return &sheets_;
}

// required .TSA.DocumentArchive super = 8;
inline bool DocumentArchive::has_super() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocumentArchive::set_has_super() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocumentArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocumentArchive::clear_super() {
  if (super_ != NULL) super_->::TSA::DocumentArchive::Clear();
  clear_has_super();
}
inline const ::TSA::DocumentArchive& DocumentArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSA::DocumentArchive* DocumentArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSA::DocumentArchive;
  return super_;
}
inline ::TSA::DocumentArchive* DocumentArchive::release_super() {
  clear_has_super();
  ::TSA::DocumentArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void DocumentArchive::set_allocated_super(::TSA::DocumentArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// optional .TSP.Reference calculation_engine = 3 [deprecated = true];
inline bool DocumentArchive::has_calculation_engine() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DocumentArchive::set_has_calculation_engine() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DocumentArchive::clear_has_calculation_engine() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DocumentArchive::clear_calculation_engine() {
  if (calculation_engine_ != NULL) calculation_engine_->::TSP::Reference::Clear();
  clear_has_calculation_engine();
}
inline const ::TSP::Reference& DocumentArchive::calculation_engine() const {
  return calculation_engine_ != NULL ? *calculation_engine_ : *default_instance_->calculation_engine_;
}
inline ::TSP::Reference* DocumentArchive::mutable_calculation_engine() {
  set_has_calculation_engine();
  if (calculation_engine_ == NULL) calculation_engine_ = new ::TSP::Reference;
  return calculation_engine_;
}
inline ::TSP::Reference* DocumentArchive::release_calculation_engine() {
  clear_has_calculation_engine();
  ::TSP::Reference* temp = calculation_engine_;
  calculation_engine_ = NULL;
  return temp;
}
inline void DocumentArchive::set_allocated_calculation_engine(::TSP::Reference* calculation_engine) {
  delete calculation_engine_;
  calculation_engine_ = calculation_engine;
  if (calculation_engine) {
    set_has_calculation_engine();
  } else {
    clear_has_calculation_engine();
  }
}

// required .TSP.Reference stylesheet = 4;
inline bool DocumentArchive::has_stylesheet() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DocumentArchive::set_has_stylesheet() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DocumentArchive::clear_has_stylesheet() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DocumentArchive::clear_stylesheet() {
  if (stylesheet_ != NULL) stylesheet_->::TSP::Reference::Clear();
  clear_has_stylesheet();
}
inline const ::TSP::Reference& DocumentArchive::stylesheet() const {
  return stylesheet_ != NULL ? *stylesheet_ : *default_instance_->stylesheet_;
}
inline ::TSP::Reference* DocumentArchive::mutable_stylesheet() {
  set_has_stylesheet();
  if (stylesheet_ == NULL) stylesheet_ = new ::TSP::Reference;
  return stylesheet_;
}
inline ::TSP::Reference* DocumentArchive::release_stylesheet() {
  clear_has_stylesheet();
  ::TSP::Reference* temp = stylesheet_;
  stylesheet_ = NULL;
  return temp;
}
inline void DocumentArchive::set_allocated_stylesheet(::TSP::Reference* stylesheet) {
  delete stylesheet_;
  stylesheet_ = stylesheet;
  if (stylesheet) {
    set_has_stylesheet();
  } else {
    clear_has_stylesheet();
  }
}

// required .TSP.Reference sidebar_order = 5;
inline bool DocumentArchive::has_sidebar_order() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DocumentArchive::set_has_sidebar_order() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DocumentArchive::clear_has_sidebar_order() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DocumentArchive::clear_sidebar_order() {
  if (sidebar_order_ != NULL) sidebar_order_->::TSP::Reference::Clear();
  clear_has_sidebar_order();
}
inline const ::TSP::Reference& DocumentArchive::sidebar_order() const {
  return sidebar_order_ != NULL ? *sidebar_order_ : *default_instance_->sidebar_order_;
}
inline ::TSP::Reference* DocumentArchive::mutable_sidebar_order() {
  set_has_sidebar_order();
  if (sidebar_order_ == NULL) sidebar_order_ = new ::TSP::Reference;
  return sidebar_order_;
}
inline ::TSP::Reference* DocumentArchive::release_sidebar_order() {
  clear_has_sidebar_order();
  ::TSP::Reference* temp = sidebar_order_;
  sidebar_order_ = NULL;
  return temp;
}
inline void DocumentArchive::set_allocated_sidebar_order(::TSP::Reference* sidebar_order) {
  delete sidebar_order_;
  sidebar_order_ = sidebar_order;
  if (sidebar_order) {
    set_has_sidebar_order();
  } else {
    clear_has_sidebar_order();
  }
}

// required .TSP.Reference theme = 6;
inline bool DocumentArchive::has_theme() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DocumentArchive::set_has_theme() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DocumentArchive::clear_has_theme() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DocumentArchive::clear_theme() {
  if (theme_ != NULL) theme_->::TSP::Reference::Clear();
  clear_has_theme();
}
inline const ::TSP::Reference& DocumentArchive::theme() const {
  return theme_ != NULL ? *theme_ : *default_instance_->theme_;
}
inline ::TSP::Reference* DocumentArchive::mutable_theme() {
  set_has_theme();
  if (theme_ == NULL) theme_ = new ::TSP::Reference;
  return theme_;
}
inline ::TSP::Reference* DocumentArchive::release_theme() {
  clear_has_theme();
  ::TSP::Reference* temp = theme_;
  theme_ = NULL;
  return temp;
}
inline void DocumentArchive::set_allocated_theme(::TSP::Reference* theme) {
  delete theme_;
  theme_ = theme;
  if (theme) {
    set_has_theme();
  } else {
    clear_has_theme();
  }
}

// optional .TN.UIStateArchive uistate = 7;
inline bool DocumentArchive::has_uistate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DocumentArchive::set_has_uistate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DocumentArchive::clear_has_uistate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DocumentArchive::clear_uistate() {
  if (uistate_ != NULL) uistate_->::TN::UIStateArchive::Clear();
  clear_has_uistate();
}
inline const ::TN::UIStateArchive& DocumentArchive::uistate() const {
  return uistate_ != NULL ? *uistate_ : *default_instance_->uistate_;
}
inline ::TN::UIStateArchive* DocumentArchive::mutable_uistate() {
  set_has_uistate();
  if (uistate_ == NULL) uistate_ = new ::TN::UIStateArchive;
  return uistate_;
}
inline ::TN::UIStateArchive* DocumentArchive::release_uistate() {
  clear_has_uistate();
  ::TN::UIStateArchive* temp = uistate_;
  uistate_ = NULL;
  return temp;
}
inline void DocumentArchive::set_allocated_uistate(::TN::UIStateArchive* uistate) {
  delete uistate_;
  uistate_ = uistate;
  if (uistate) {
    set_has_uistate();
  } else {
    clear_has_uistate();
  }
}

// optional .TSP.Reference custom_format_list = 9;
inline bool DocumentArchive::has_custom_format_list() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DocumentArchive::set_has_custom_format_list() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DocumentArchive::clear_has_custom_format_list() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DocumentArchive::clear_custom_format_list() {
  if (custom_format_list_ != NULL) custom_format_list_->::TSP::Reference::Clear();
  clear_has_custom_format_list();
}
inline const ::TSP::Reference& DocumentArchive::custom_format_list() const {
  return custom_format_list_ != NULL ? *custom_format_list_ : *default_instance_->custom_format_list_;
}
inline ::TSP::Reference* DocumentArchive::mutable_custom_format_list() {
  set_has_custom_format_list();
  if (custom_format_list_ == NULL) custom_format_list_ = new ::TSP::Reference;
  return custom_format_list_;
}
inline ::TSP::Reference* DocumentArchive::release_custom_format_list() {
  clear_has_custom_format_list();
  ::TSP::Reference* temp = custom_format_list_;
  custom_format_list_ = NULL;
  return temp;
}
inline void DocumentArchive::set_allocated_custom_format_list(::TSP::Reference* custom_format_list) {
  delete custom_format_list_;
  custom_format_list_ = custom_format_list;
  if (custom_format_list) {
    set_has_custom_format_list();
  } else {
    clear_has_custom_format_list();
  }
}

// optional string printer_id = 10;
inline bool DocumentArchive::has_printer_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DocumentArchive::set_has_printer_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DocumentArchive::clear_has_printer_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DocumentArchive::clear_printer_id() {
  if (printer_id_ != &::google::protobuf::internal::kEmptyString) {
    printer_id_->clear();
  }
  clear_has_printer_id();
}
inline const ::std::string& DocumentArchive::printer_id() const {
  return *printer_id_;
}
inline void DocumentArchive::set_printer_id(const ::std::string& value) {
  set_has_printer_id();
  if (printer_id_ == &::google::protobuf::internal::kEmptyString) {
    printer_id_ = new ::std::string;
  }
  printer_id_->assign(value);
}
inline void DocumentArchive::set_printer_id(const char* value) {
  set_has_printer_id();
  if (printer_id_ == &::google::protobuf::internal::kEmptyString) {
    printer_id_ = new ::std::string;
  }
  printer_id_->assign(value);
}
inline void DocumentArchive::set_printer_id(const char* value, size_t size) {
  set_has_printer_id();
  if (printer_id_ == &::google::protobuf::internal::kEmptyString) {
    printer_id_ = new ::std::string;
  }
  printer_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DocumentArchive::mutable_printer_id() {
  set_has_printer_id();
  if (printer_id_ == &::google::protobuf::internal::kEmptyString) {
    printer_id_ = new ::std::string;
  }
  return printer_id_;
}
inline ::std::string* DocumentArchive::release_printer_id() {
  clear_has_printer_id();
  if (printer_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = printer_id_;
    printer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DocumentArchive::set_allocated_printer_id(::std::string* printer_id) {
  if (printer_id_ != &::google::protobuf::internal::kEmptyString) {
    delete printer_id_;
  }
  if (printer_id) {
    set_has_printer_id();
    printer_id_ = printer_id;
  } else {
    clear_has_printer_id();
    printer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string paper_id = 11;
inline bool DocumentArchive::has_paper_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DocumentArchive::set_has_paper_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DocumentArchive::clear_has_paper_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DocumentArchive::clear_paper_id() {
  if (paper_id_ != &::google::protobuf::internal::kEmptyString) {
    paper_id_->clear();
  }
  clear_has_paper_id();
}
inline const ::std::string& DocumentArchive::paper_id() const {
  return *paper_id_;
}
inline void DocumentArchive::set_paper_id(const ::std::string& value) {
  set_has_paper_id();
  if (paper_id_ == &::google::protobuf::internal::kEmptyString) {
    paper_id_ = new ::std::string;
  }
  paper_id_->assign(value);
}
inline void DocumentArchive::set_paper_id(const char* value) {
  set_has_paper_id();
  if (paper_id_ == &::google::protobuf::internal::kEmptyString) {
    paper_id_ = new ::std::string;
  }
  paper_id_->assign(value);
}
inline void DocumentArchive::set_paper_id(const char* value, size_t size) {
  set_has_paper_id();
  if (paper_id_ == &::google::protobuf::internal::kEmptyString) {
    paper_id_ = new ::std::string;
  }
  paper_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DocumentArchive::mutable_paper_id() {
  set_has_paper_id();
  if (paper_id_ == &::google::protobuf::internal::kEmptyString) {
    paper_id_ = new ::std::string;
  }
  return paper_id_;
}
inline ::std::string* DocumentArchive::release_paper_id() {
  clear_has_paper_id();
  if (paper_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = paper_id_;
    paper_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DocumentArchive::set_allocated_paper_id(::std::string* paper_id) {
  if (paper_id_ != &::google::protobuf::internal::kEmptyString) {
    delete paper_id_;
  }
  if (paper_id) {
    set_has_paper_id();
    paper_id_ = paper_id;
  } else {
    clear_has_paper_id();
    paper_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .TSP.Size page_size = 12;
inline bool DocumentArchive::has_page_size() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DocumentArchive::set_has_page_size() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DocumentArchive::clear_has_page_size() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DocumentArchive::clear_page_size() {
  if (page_size_ != NULL) page_size_->::TSP::Size::Clear();
  clear_has_page_size();
}
inline const ::TSP::Size& DocumentArchive::page_size() const {
  return page_size_ != NULL ? *page_size_ : *default_instance_->page_size_;
}
inline ::TSP::Size* DocumentArchive::mutable_page_size() {
  set_has_page_size();
  if (page_size_ == NULL) page_size_ = new ::TSP::Size;
  return page_size_;
}
inline ::TSP::Size* DocumentArchive::release_page_size() {
  clear_has_page_size();
  ::TSP::Size* temp = page_size_;
  page_size_ = NULL;
  return temp;
}
inline void DocumentArchive::set_allocated_page_size(::TSP::Size* page_size) {
  delete page_size_;
  page_size_ = page_size;
  if (page_size) {
    set_has_page_size();
  } else {
    clear_has_page_size();
  }
}

// -------------------------------------------------------------------

// PlaceholderArchive

// required .TSWP.ShapeInfoArchive super = 1;
inline bool PlaceholderArchive::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlaceholderArchive::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlaceholderArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlaceholderArchive::clear_super() {
  if (super_ != NULL) super_->::TSWP::ShapeInfoArchive::Clear();
  clear_has_super();
}
inline const ::TSWP::ShapeInfoArchive& PlaceholderArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSWP::ShapeInfoArchive* PlaceholderArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSWP::ShapeInfoArchive;
  return super_;
}
inline ::TSWP::ShapeInfoArchive* PlaceholderArchive::release_super() {
  clear_has_super();
  ::TSWP::ShapeInfoArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void PlaceholderArchive::set_allocated_super(::TSWP::ShapeInfoArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// -------------------------------------------------------------------

// SheetArchive

// required string name = 1;
inline bool SheetArchive::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SheetArchive::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SheetArchive::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SheetArchive::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SheetArchive::name() const {
  return *name_;
}
inline void SheetArchive::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SheetArchive::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SheetArchive::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SheetArchive::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SheetArchive::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SheetArchive::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .TSP.Reference drawable_infos = 2;
inline int SheetArchive::drawable_infos_size() const {
  return drawable_infos_.size();
}
inline void SheetArchive::clear_drawable_infos() {
  drawable_infos_.Clear();
}
inline const ::TSP::Reference& SheetArchive::drawable_infos(int index) const {
  return drawable_infos_.Get(index);
}
inline ::TSP::Reference* SheetArchive::mutable_drawable_infos(int index) {
  return drawable_infos_.Mutable(index);
}
inline ::TSP::Reference* SheetArchive::add_drawable_infos() {
  return drawable_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
SheetArchive::drawable_infos() const {
  return drawable_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
SheetArchive::mutable_drawable_infos() {
  return &drawable_infos_;
}

// optional bool in_portrait_page_orientation = 3;
inline bool SheetArchive::has_in_portrait_page_orientation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SheetArchive::set_has_in_portrait_page_orientation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SheetArchive::clear_has_in_portrait_page_orientation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SheetArchive::clear_in_portrait_page_orientation() {
  in_portrait_page_orientation_ = false;
  clear_has_in_portrait_page_orientation();
}
inline bool SheetArchive::in_portrait_page_orientation() const {
  return in_portrait_page_orientation_;
}
inline void SheetArchive::set_in_portrait_page_orientation(bool value) {
  set_has_in_portrait_page_orientation();
  in_portrait_page_orientation_ = value;
}

// optional bool show_repeating_headers = 4 [deprecated = true];
inline bool SheetArchive::has_show_repeating_headers() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SheetArchive::set_has_show_repeating_headers() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SheetArchive::clear_has_show_repeating_headers() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SheetArchive::clear_show_repeating_headers() {
  show_repeating_headers_ = false;
  clear_has_show_repeating_headers();
}
inline bool SheetArchive::show_repeating_headers() const {
  return show_repeating_headers_;
}
inline void SheetArchive::set_show_repeating_headers(bool value) {
  set_has_show_repeating_headers();
  show_repeating_headers_ = value;
}

// optional bool show_page_numbers = 5;
inline bool SheetArchive::has_show_page_numbers() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SheetArchive::set_has_show_page_numbers() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SheetArchive::clear_has_show_page_numbers() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SheetArchive::clear_show_page_numbers() {
  show_page_numbers_ = false;
  clear_has_show_page_numbers();
}
inline bool SheetArchive::show_page_numbers() const {
  return show_page_numbers_;
}
inline void SheetArchive::set_show_page_numbers(bool value) {
  set_has_show_page_numbers();
  show_page_numbers_ = value;
}

// optional bool is_autofit_on = 6;
inline bool SheetArchive::has_is_autofit_on() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SheetArchive::set_has_is_autofit_on() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SheetArchive::clear_has_is_autofit_on() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SheetArchive::clear_is_autofit_on() {
  is_autofit_on_ = false;
  clear_has_is_autofit_on();
}
inline bool SheetArchive::is_autofit_on() const {
  return is_autofit_on_;
}
inline void SheetArchive::set_is_autofit_on(bool value) {
  set_has_is_autofit_on();
  is_autofit_on_ = value;
}

// optional float content_scale = 7;
inline bool SheetArchive::has_content_scale() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SheetArchive::set_has_content_scale() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SheetArchive::clear_has_content_scale() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SheetArchive::clear_content_scale() {
  content_scale_ = 0;
  clear_has_content_scale();
}
inline float SheetArchive::content_scale() const {
  return content_scale_;
}
inline void SheetArchive::set_content_scale(float value) {
  set_has_content_scale();
  content_scale_ = value;
}

// optional .TN.SheetPageOrder page_order = 8;
inline bool SheetArchive::has_page_order() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SheetArchive::set_has_page_order() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SheetArchive::clear_has_page_order() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SheetArchive::clear_page_order() {
  page_order_ = 0;
  clear_has_page_order();
}
inline ::TN::SheetPageOrder SheetArchive::page_order() const {
  return static_cast< ::TN::SheetPageOrder >(page_order_);
}
inline void SheetArchive::set_page_order(::TN::SheetPageOrder value) {
  assert(::TN::SheetPageOrder_IsValid(value));
  set_has_page_order();
  page_order_ = value;
}

// optional .TSD.EdgeInsetsArchive print_margins = 10;
inline bool SheetArchive::has_print_margins() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SheetArchive::set_has_print_margins() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SheetArchive::clear_has_print_margins() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SheetArchive::clear_print_margins() {
  if (print_margins_ != NULL) print_margins_->::TSD::EdgeInsetsArchive::Clear();
  clear_has_print_margins();
}
inline const ::TSD::EdgeInsetsArchive& SheetArchive::print_margins() const {
  return print_margins_ != NULL ? *print_margins_ : *default_instance_->print_margins_;
}
inline ::TSD::EdgeInsetsArchive* SheetArchive::mutable_print_margins() {
  set_has_print_margins();
  if (print_margins_ == NULL) print_margins_ = new ::TSD::EdgeInsetsArchive;
  return print_margins_;
}
inline ::TSD::EdgeInsetsArchive* SheetArchive::release_print_margins() {
  clear_has_print_margins();
  ::TSD::EdgeInsetsArchive* temp = print_margins_;
  print_margins_ = NULL;
  return temp;
}
inline void SheetArchive::set_allocated_print_margins(::TSD::EdgeInsetsArchive* print_margins) {
  delete print_margins_;
  print_margins_ = print_margins;
  if (print_margins) {
    set_has_print_margins();
  } else {
    clear_has_print_margins();
  }
}

// optional bool using_start_page_number = 11;
inline bool SheetArchive::has_using_start_page_number() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SheetArchive::set_has_using_start_page_number() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SheetArchive::clear_has_using_start_page_number() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SheetArchive::clear_using_start_page_number() {
  using_start_page_number_ = false;
  clear_has_using_start_page_number();
}
inline bool SheetArchive::using_start_page_number() const {
  return using_start_page_number_;
}
inline void SheetArchive::set_using_start_page_number(bool value) {
  set_has_using_start_page_number();
  using_start_page_number_ = value;
}

// optional int32 start_page_number = 12;
inline bool SheetArchive::has_start_page_number() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SheetArchive::set_has_start_page_number() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SheetArchive::clear_has_start_page_number() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SheetArchive::clear_start_page_number() {
  start_page_number_ = 0;
  clear_has_start_page_number();
}
inline ::google::protobuf::int32 SheetArchive::start_page_number() const {
  return start_page_number_;
}
inline void SheetArchive::set_start_page_number(::google::protobuf::int32 value) {
  set_has_start_page_number();
  start_page_number_ = value;
}

// optional float page_header_inset = 13;
inline bool SheetArchive::has_page_header_inset() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SheetArchive::set_has_page_header_inset() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SheetArchive::clear_has_page_header_inset() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SheetArchive::clear_page_header_inset() {
  page_header_inset_ = 0;
  clear_has_page_header_inset();
}
inline float SheetArchive::page_header_inset() const {
  return page_header_inset_;
}
inline void SheetArchive::set_page_header_inset(float value) {
  set_has_page_header_inset();
  page_header_inset_ = value;
}

// optional float page_footer_inset = 14;
inline bool SheetArchive::has_page_footer_inset() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SheetArchive::set_has_page_footer_inset() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SheetArchive::clear_has_page_footer_inset() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SheetArchive::clear_page_footer_inset() {
  page_footer_inset_ = 0;
  clear_has_page_footer_inset();
}
inline float SheetArchive::page_footer_inset() const {
  return page_footer_inset_;
}
inline void SheetArchive::set_page_footer_inset(float value) {
  set_has_page_footer_inset();
  page_footer_inset_ = value;
}

// optional .TSP.Reference header_storage = 15;
inline bool SheetArchive::has_header_storage() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SheetArchive::set_has_header_storage() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SheetArchive::clear_has_header_storage() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SheetArchive::clear_header_storage() {
  if (header_storage_ != NULL) header_storage_->::TSP::Reference::Clear();
  clear_has_header_storage();
}
inline const ::TSP::Reference& SheetArchive::header_storage() const {
  return header_storage_ != NULL ? *header_storage_ : *default_instance_->header_storage_;
}
inline ::TSP::Reference* SheetArchive::mutable_header_storage() {
  set_has_header_storage();
  if (header_storage_ == NULL) header_storage_ = new ::TSP::Reference;
  return header_storage_;
}
inline ::TSP::Reference* SheetArchive::release_header_storage() {
  clear_has_header_storage();
  ::TSP::Reference* temp = header_storage_;
  header_storage_ = NULL;
  return temp;
}
inline void SheetArchive::set_allocated_header_storage(::TSP::Reference* header_storage) {
  delete header_storage_;
  header_storage_ = header_storage;
  if (header_storage) {
    set_has_header_storage();
  } else {
    clear_has_header_storage();
  }
}

// optional .TSP.Reference footer_storage = 16;
inline bool SheetArchive::has_footer_storage() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SheetArchive::set_has_footer_storage() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SheetArchive::clear_has_footer_storage() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SheetArchive::clear_footer_storage() {
  if (footer_storage_ != NULL) footer_storage_->::TSP::Reference::Clear();
  clear_has_footer_storage();
}
inline const ::TSP::Reference& SheetArchive::footer_storage() const {
  return footer_storage_ != NULL ? *footer_storage_ : *default_instance_->footer_storage_;
}
inline ::TSP::Reference* SheetArchive::mutable_footer_storage() {
  set_has_footer_storage();
  if (footer_storage_ == NULL) footer_storage_ = new ::TSP::Reference;
  return footer_storage_;
}
inline ::TSP::Reference* SheetArchive::release_footer_storage() {
  clear_has_footer_storage();
  ::TSP::Reference* temp = footer_storage_;
  footer_storage_ = NULL;
  return temp;
}
inline void SheetArchive::set_allocated_footer_storage(::TSP::Reference* footer_storage) {
  delete footer_storage_;
  footer_storage_ = footer_storage;
  if (footer_storage) {
    set_has_footer_storage();
  } else {
    clear_has_footer_storage();
  }
}

// optional .TSP.Reference userDefinedGuideStorage = 17;
inline bool SheetArchive::has_userdefinedguidestorage() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SheetArchive::set_has_userdefinedguidestorage() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SheetArchive::clear_has_userdefinedguidestorage() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SheetArchive::clear_userdefinedguidestorage() {
  if (userdefinedguidestorage_ != NULL) userdefinedguidestorage_->::TSP::Reference::Clear();
  clear_has_userdefinedguidestorage();
}
inline const ::TSP::Reference& SheetArchive::userdefinedguidestorage() const {
  return userdefinedguidestorage_ != NULL ? *userdefinedguidestorage_ : *default_instance_->userdefinedguidestorage_;
}
inline ::TSP::Reference* SheetArchive::mutable_userdefinedguidestorage() {
  set_has_userdefinedguidestorage();
  if (userdefinedguidestorage_ == NULL) userdefinedguidestorage_ = new ::TSP::Reference;
  return userdefinedguidestorage_;
}
inline ::TSP::Reference* SheetArchive::release_userdefinedguidestorage() {
  clear_has_userdefinedguidestorage();
  ::TSP::Reference* temp = userdefinedguidestorage_;
  userdefinedguidestorage_ = NULL;
  return temp;
}
inline void SheetArchive::set_allocated_userdefinedguidestorage(::TSP::Reference* userdefinedguidestorage) {
  delete userdefinedguidestorage_;
  userdefinedguidestorage_ = userdefinedguidestorage;
  if (userdefinedguidestorage) {
    set_has_userdefinedguidestorage();
  } else {
    clear_has_userdefinedguidestorage();
  }
}

// -------------------------------------------------------------------

// FormBasedSheetArchive

// required .TN.SheetArchive super = 1;
inline bool FormBasedSheetArchive::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FormBasedSheetArchive::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FormBasedSheetArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FormBasedSheetArchive::clear_super() {
  if (super_ != NULL) super_->::TN::SheetArchive::Clear();
  clear_has_super();
}
inline const ::TN::SheetArchive& FormBasedSheetArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TN::SheetArchive* FormBasedSheetArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TN::SheetArchive;
  return super_;
}
inline ::TN::SheetArchive* FormBasedSheetArchive::release_super() {
  clear_has_super();
  ::TN::SheetArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void FormBasedSheetArchive::set_allocated_super(::TN::SheetArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// optional .TSCE.CFUUIDArchive table_id = 2;
inline bool FormBasedSheetArchive::has_table_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FormBasedSheetArchive::set_has_table_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FormBasedSheetArchive::clear_has_table_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FormBasedSheetArchive::clear_table_id() {
  if (table_id_ != NULL) table_id_->::TSCE::CFUUIDArchive::Clear();
  clear_has_table_id();
}
inline const ::TSCE::CFUUIDArchive& FormBasedSheetArchive::table_id() const {
  return table_id_ != NULL ? *table_id_ : *default_instance_->table_id_;
}
inline ::TSCE::CFUUIDArchive* FormBasedSheetArchive::mutable_table_id() {
  set_has_table_id();
  if (table_id_ == NULL) table_id_ = new ::TSCE::CFUUIDArchive;
  return table_id_;
}
inline ::TSCE::CFUUIDArchive* FormBasedSheetArchive::release_table_id() {
  clear_has_table_id();
  ::TSCE::CFUUIDArchive* temp = table_id_;
  table_id_ = NULL;
  return temp;
}
inline void FormBasedSheetArchive::set_allocated_table_id(::TSCE::CFUUIDArchive* table_id) {
  delete table_id_;
  table_id_ = table_id;
  if (table_id) {
    set_has_table_id();
  } else {
    clear_has_table_id();
  }
}

// -------------------------------------------------------------------

// ThemeArchive

// required .TSS.ThemeArchive super = 1;
inline bool ThemeArchive::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ThemeArchive::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ThemeArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ThemeArchive::clear_super() {
  if (super_ != NULL) super_->::TSS::ThemeArchive::Clear();
  clear_has_super();
}
inline const ::TSS::ThemeArchive& ThemeArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSS::ThemeArchive* ThemeArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSS::ThemeArchive;
  return super_;
}
inline ::TSS::ThemeArchive* ThemeArchive::release_super() {
  clear_has_super();
  ::TSS::ThemeArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void ThemeArchive::set_allocated_super(::TSS::ThemeArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// repeated .TSP.Reference prototypes = 2;
inline int ThemeArchive::prototypes_size() const {
  return prototypes_.size();
}
inline void ThemeArchive::clear_prototypes() {
  prototypes_.Clear();
}
inline const ::TSP::Reference& ThemeArchive::prototypes(int index) const {
  return prototypes_.Get(index);
}
inline ::TSP::Reference* ThemeArchive::mutable_prototypes(int index) {
  return prototypes_.Mutable(index);
}
inline ::TSP::Reference* ThemeArchive::add_prototypes() {
  return prototypes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
ThemeArchive::prototypes() const {
  return prototypes_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
ThemeArchive::mutable_prototypes() {
  return &prototypes_;
}

// -------------------------------------------------------------------

// ChartMediatorFormulaStorage

// repeated .TSCE.FormulaArchive data_formulae = 1;
inline int ChartMediatorFormulaStorage::data_formulae_size() const {
  return data_formulae_.size();
}
inline void ChartMediatorFormulaStorage::clear_data_formulae() {
  data_formulae_.Clear();
}
inline const ::TSCE::FormulaArchive& ChartMediatorFormulaStorage::data_formulae(int index) const {
  return data_formulae_.Get(index);
}
inline ::TSCE::FormulaArchive* ChartMediatorFormulaStorage::mutable_data_formulae(int index) {
  return data_formulae_.Mutable(index);
}
inline ::TSCE::FormulaArchive* ChartMediatorFormulaStorage::add_data_formulae() {
  return data_formulae_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSCE::FormulaArchive >&
ChartMediatorFormulaStorage::data_formulae() const {
  return data_formulae_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSCE::FormulaArchive >*
ChartMediatorFormulaStorage::mutable_data_formulae() {
  return &data_formulae_;
}

// repeated .TSCE.FormulaArchive row_label_formulae = 3;
inline int ChartMediatorFormulaStorage::row_label_formulae_size() const {
  return row_label_formulae_.size();
}
inline void ChartMediatorFormulaStorage::clear_row_label_formulae() {
  row_label_formulae_.Clear();
}
inline const ::TSCE::FormulaArchive& ChartMediatorFormulaStorage::row_label_formulae(int index) const {
  return row_label_formulae_.Get(index);
}
inline ::TSCE::FormulaArchive* ChartMediatorFormulaStorage::mutable_row_label_formulae(int index) {
  return row_label_formulae_.Mutable(index);
}
inline ::TSCE::FormulaArchive* ChartMediatorFormulaStorage::add_row_label_formulae() {
  return row_label_formulae_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSCE::FormulaArchive >&
ChartMediatorFormulaStorage::row_label_formulae() const {
  return row_label_formulae_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSCE::FormulaArchive >*
ChartMediatorFormulaStorage::mutable_row_label_formulae() {
  return &row_label_formulae_;
}

// repeated .TSCE.FormulaArchive col_label_formulae = 4;
inline int ChartMediatorFormulaStorage::col_label_formulae_size() const {
  return col_label_formulae_.size();
}
inline void ChartMediatorFormulaStorage::clear_col_label_formulae() {
  col_label_formulae_.Clear();
}
inline const ::TSCE::FormulaArchive& ChartMediatorFormulaStorage::col_label_formulae(int index) const {
  return col_label_formulae_.Get(index);
}
inline ::TSCE::FormulaArchive* ChartMediatorFormulaStorage::mutable_col_label_formulae(int index) {
  return col_label_formulae_.Mutable(index);
}
inline ::TSCE::FormulaArchive* ChartMediatorFormulaStorage::add_col_label_formulae() {
  return col_label_formulae_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSCE::FormulaArchive >&
ChartMediatorFormulaStorage::col_label_formulae() const {
  return col_label_formulae_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSCE::FormulaArchive >*
ChartMediatorFormulaStorage::mutable_col_label_formulae() {
  return &col_label_formulae_;
}

// optional int32 direction = 5;
inline bool ChartMediatorFormulaStorage::has_direction() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChartMediatorFormulaStorage::set_has_direction() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChartMediatorFormulaStorage::clear_has_direction() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChartMediatorFormulaStorage::clear_direction() {
  direction_ = 0;
  clear_has_direction();
}
inline ::google::protobuf::int32 ChartMediatorFormulaStorage::direction() const {
  return direction_;
}
inline void ChartMediatorFormulaStorage::set_direction(::google::protobuf::int32 value) {
  set_has_direction();
  direction_ = value;
}

// repeated .TSCE.FormulaArchive error_custom_pos_formulae = 6;
inline int ChartMediatorFormulaStorage::error_custom_pos_formulae_size() const {
  return error_custom_pos_formulae_.size();
}
inline void ChartMediatorFormulaStorage::clear_error_custom_pos_formulae() {
  error_custom_pos_formulae_.Clear();
}
inline const ::TSCE::FormulaArchive& ChartMediatorFormulaStorage::error_custom_pos_formulae(int index) const {
  return error_custom_pos_formulae_.Get(index);
}
inline ::TSCE::FormulaArchive* ChartMediatorFormulaStorage::mutable_error_custom_pos_formulae(int index) {
  return error_custom_pos_formulae_.Mutable(index);
}
inline ::TSCE::FormulaArchive* ChartMediatorFormulaStorage::add_error_custom_pos_formulae() {
  return error_custom_pos_formulae_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSCE::FormulaArchive >&
ChartMediatorFormulaStorage::error_custom_pos_formulae() const {
  return error_custom_pos_formulae_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSCE::FormulaArchive >*
ChartMediatorFormulaStorage::mutable_error_custom_pos_formulae() {
  return &error_custom_pos_formulae_;
}

// repeated .TSCE.FormulaArchive error_custom_neg_formulae = 7;
inline int ChartMediatorFormulaStorage::error_custom_neg_formulae_size() const {
  return error_custom_neg_formulae_.size();
}
inline void ChartMediatorFormulaStorage::clear_error_custom_neg_formulae() {
  error_custom_neg_formulae_.Clear();
}
inline const ::TSCE::FormulaArchive& ChartMediatorFormulaStorage::error_custom_neg_formulae(int index) const {
  return error_custom_neg_formulae_.Get(index);
}
inline ::TSCE::FormulaArchive* ChartMediatorFormulaStorage::mutable_error_custom_neg_formulae(int index) {
  return error_custom_neg_formulae_.Mutable(index);
}
inline ::TSCE::FormulaArchive* ChartMediatorFormulaStorage::add_error_custom_neg_formulae() {
  return error_custom_neg_formulae_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSCE::FormulaArchive >&
ChartMediatorFormulaStorage::error_custom_neg_formulae() const {
  return error_custom_neg_formulae_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSCE::FormulaArchive >*
ChartMediatorFormulaStorage::mutable_error_custom_neg_formulae() {
  return &error_custom_neg_formulae_;
}

// repeated .TSCE.FormulaArchive error_custom_pos_scatterX_formulae = 8;
inline int ChartMediatorFormulaStorage::error_custom_pos_scatterx_formulae_size() const {
  return error_custom_pos_scatterx_formulae_.size();
}
inline void ChartMediatorFormulaStorage::clear_error_custom_pos_scatterx_formulae() {
  error_custom_pos_scatterx_formulae_.Clear();
}
inline const ::TSCE::FormulaArchive& ChartMediatorFormulaStorage::error_custom_pos_scatterx_formulae(int index) const {
  return error_custom_pos_scatterx_formulae_.Get(index);
}
inline ::TSCE::FormulaArchive* ChartMediatorFormulaStorage::mutable_error_custom_pos_scatterx_formulae(int index) {
  return error_custom_pos_scatterx_formulae_.Mutable(index);
}
inline ::TSCE::FormulaArchive* ChartMediatorFormulaStorage::add_error_custom_pos_scatterx_formulae() {
  return error_custom_pos_scatterx_formulae_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSCE::FormulaArchive >&
ChartMediatorFormulaStorage::error_custom_pos_scatterx_formulae() const {
  return error_custom_pos_scatterx_formulae_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSCE::FormulaArchive >*
ChartMediatorFormulaStorage::mutable_error_custom_pos_scatterx_formulae() {
  return &error_custom_pos_scatterx_formulae_;
}

// repeated .TSCE.FormulaArchive error_custom_neg_scatterX_formulae = 9;
inline int ChartMediatorFormulaStorage::error_custom_neg_scatterx_formulae_size() const {
  return error_custom_neg_scatterx_formulae_.size();
}
inline void ChartMediatorFormulaStorage::clear_error_custom_neg_scatterx_formulae() {
  error_custom_neg_scatterx_formulae_.Clear();
}
inline const ::TSCE::FormulaArchive& ChartMediatorFormulaStorage::error_custom_neg_scatterx_formulae(int index) const {
  return error_custom_neg_scatterx_formulae_.Get(index);
}
inline ::TSCE::FormulaArchive* ChartMediatorFormulaStorage::mutable_error_custom_neg_scatterx_formulae(int index) {
  return error_custom_neg_scatterx_formulae_.Mutable(index);
}
inline ::TSCE::FormulaArchive* ChartMediatorFormulaStorage::add_error_custom_neg_scatterx_formulae() {
  return error_custom_neg_scatterx_formulae_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSCE::FormulaArchive >&
ChartMediatorFormulaStorage::error_custom_neg_scatterx_formulae() const {
  return error_custom_neg_scatterx_formulae_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSCE::FormulaArchive >*
ChartMediatorFormulaStorage::mutable_error_custom_neg_scatterx_formulae() {
  return &error_custom_neg_scatterx_formulae_;
}

// -------------------------------------------------------------------

// ChartMediatorArchive

// required .TSCH.ChartMediatorArchive super = 1;
inline bool ChartMediatorArchive::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChartMediatorArchive::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChartMediatorArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChartMediatorArchive::clear_super() {
  if (super_ != NULL) super_->::TSCH::ChartMediatorArchive::Clear();
  clear_has_super();
}
inline const ::TSCH::ChartMediatorArchive& ChartMediatorArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSCH::ChartMediatorArchive* ChartMediatorArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSCH::ChartMediatorArchive;
  return super_;
}
inline ::TSCH::ChartMediatorArchive* ChartMediatorArchive::release_super() {
  clear_has_super();
  ::TSCH::ChartMediatorArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void ChartMediatorArchive::set_allocated_super(::TSCH::ChartMediatorArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// required string entity_id = 2;
inline bool ChartMediatorArchive::has_entity_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChartMediatorArchive::set_has_entity_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChartMediatorArchive::clear_has_entity_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChartMediatorArchive::clear_entity_id() {
  if (entity_id_ != &::google::protobuf::internal::kEmptyString) {
    entity_id_->clear();
  }
  clear_has_entity_id();
}
inline const ::std::string& ChartMediatorArchive::entity_id() const {
  return *entity_id_;
}
inline void ChartMediatorArchive::set_entity_id(const ::std::string& value) {
  set_has_entity_id();
  if (entity_id_ == &::google::protobuf::internal::kEmptyString) {
    entity_id_ = new ::std::string;
  }
  entity_id_->assign(value);
}
inline void ChartMediatorArchive::set_entity_id(const char* value) {
  set_has_entity_id();
  if (entity_id_ == &::google::protobuf::internal::kEmptyString) {
    entity_id_ = new ::std::string;
  }
  entity_id_->assign(value);
}
inline void ChartMediatorArchive::set_entity_id(const char* value, size_t size) {
  set_has_entity_id();
  if (entity_id_ == &::google::protobuf::internal::kEmptyString) {
    entity_id_ = new ::std::string;
  }
  entity_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChartMediatorArchive::mutable_entity_id() {
  set_has_entity_id();
  if (entity_id_ == &::google::protobuf::internal::kEmptyString) {
    entity_id_ = new ::std::string;
  }
  return entity_id_;
}
inline ::std::string* ChartMediatorArchive::release_entity_id() {
  clear_has_entity_id();
  if (entity_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = entity_id_;
    entity_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChartMediatorArchive::set_allocated_entity_id(::std::string* entity_id) {
  if (entity_id_ != &::google::protobuf::internal::kEmptyString) {
    delete entity_id_;
  }
  if (entity_id) {
    set_has_entity_id();
    entity_id_ = entity_id;
  } else {
    clear_has_entity_id();
    entity_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .TN.ChartMediatorFormulaStorage formulas = 3;
inline bool ChartMediatorArchive::has_formulas() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChartMediatorArchive::set_has_formulas() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChartMediatorArchive::clear_has_formulas() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChartMediatorArchive::clear_formulas() {
  if (formulas_ != NULL) formulas_->::TN::ChartMediatorFormulaStorage::Clear();
  clear_has_formulas();
}
inline const ::TN::ChartMediatorFormulaStorage& ChartMediatorArchive::formulas() const {
  return formulas_ != NULL ? *formulas_ : *default_instance_->formulas_;
}
inline ::TN::ChartMediatorFormulaStorage* ChartMediatorArchive::mutable_formulas() {
  set_has_formulas();
  if (formulas_ == NULL) formulas_ = new ::TN::ChartMediatorFormulaStorage;
  return formulas_;
}
inline ::TN::ChartMediatorFormulaStorage* ChartMediatorArchive::release_formulas() {
  clear_has_formulas();
  ::TN::ChartMediatorFormulaStorage* temp = formulas_;
  formulas_ = NULL;
  return temp;
}
inline void ChartMediatorArchive::set_allocated_formulas(::TN::ChartMediatorFormulaStorage* formulas) {
  delete formulas_;
  formulas_ = formulas;
  if (formulas) {
    set_has_formulas();
  } else {
    clear_has_formulas();
  }
}

// optional bool columns_are_series = 4;
inline bool ChartMediatorArchive::has_columns_are_series() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChartMediatorArchive::set_has_columns_are_series() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChartMediatorArchive::clear_has_columns_are_series() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChartMediatorArchive::clear_columns_are_series() {
  columns_are_series_ = false;
  clear_has_columns_are_series();
}
inline bool ChartMediatorArchive::columns_are_series() const {
  return columns_are_series_;
}
inline void ChartMediatorArchive::set_columns_are_series(bool value) {
  set_has_columns_are_series();
  columns_are_series_ = value;
}

// optional bool is_registered_with_calc_engine = 5 [deprecated = true];
inline bool ChartMediatorArchive::has_is_registered_with_calc_engine() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChartMediatorArchive::set_has_is_registered_with_calc_engine() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChartMediatorArchive::clear_has_is_registered_with_calc_engine() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChartMediatorArchive::clear_is_registered_with_calc_engine() {
  is_registered_with_calc_engine_ = false;
  clear_has_is_registered_with_calc_engine();
}
inline bool ChartMediatorArchive::is_registered_with_calc_engine() const {
  return is_registered_with_calc_engine_;
}
inline void ChartMediatorArchive::set_is_registered_with_calc_engine(bool value) {
  set_has_is_registered_with_calc_engine();
  is_registered_with_calc_engine_ = value;
}

// -------------------------------------------------------------------

// ChartSelectionArchive

// optional .TSCE.RangeReferenceArchive reference = 1;
inline bool ChartSelectionArchive::has_reference() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChartSelectionArchive::set_has_reference() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChartSelectionArchive::clear_has_reference() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChartSelectionArchive::clear_reference() {
  if (reference_ != NULL) reference_->::TSCE::RangeReferenceArchive::Clear();
  clear_has_reference();
}
inline const ::TSCE::RangeReferenceArchive& ChartSelectionArchive::reference() const {
  return reference_ != NULL ? *reference_ : *default_instance_->reference_;
}
inline ::TSCE::RangeReferenceArchive* ChartSelectionArchive::mutable_reference() {
  set_has_reference();
  if (reference_ == NULL) reference_ = new ::TSCE::RangeReferenceArchive;
  return reference_;
}
inline ::TSCE::RangeReferenceArchive* ChartSelectionArchive::release_reference() {
  clear_has_reference();
  ::TSCE::RangeReferenceArchive* temp = reference_;
  reference_ = NULL;
  return temp;
}
inline void ChartSelectionArchive::set_allocated_reference(::TSCE::RangeReferenceArchive* reference) {
  delete reference_;
  reference_ = reference;
  if (reference) {
    set_has_reference();
  } else {
    clear_has_reference();
  }
}

// optional .TSCH.ChartSelectionArchive super = 2;
inline bool ChartSelectionArchive::has_super() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChartSelectionArchive::set_has_super() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChartSelectionArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChartSelectionArchive::clear_super() {
  if (super_ != NULL) super_->::TSCH::ChartSelectionArchive::Clear();
  clear_has_super();
}
inline const ::TSCH::ChartSelectionArchive& ChartSelectionArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSCH::ChartSelectionArchive* ChartSelectionArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSCH::ChartSelectionArchive;
  return super_;
}
inline ::TSCH::ChartSelectionArchive* ChartSelectionArchive::release_super() {
  clear_has_super();
  ::TSCH::ChartSelectionArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void ChartSelectionArchive::set_allocated_super(::TSCH::ChartSelectionArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TN

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TN::UIStateArchive_InspectorPaneViewMode>() {
  return ::TN::UIStateArchive_InspectorPaneViewMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TN::SheetPageOrder>() {
  return ::TN::SheetPageOrder_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TNArchives_2eproto__INCLUDED
