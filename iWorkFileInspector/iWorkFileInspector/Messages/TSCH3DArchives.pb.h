// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSCH3DArchives.proto

#ifndef PROTOBUF_TSCH3DArchives_2eproto__INCLUDED
#define PROTOBUF_TSCH3DArchives_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "TSPMessages.pb.h"
#include "TSDArchives.pb.h"
// @@protoc_insertion_point(includes)

namespace TSCH {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TSCH3DArchives_2eproto();
void protobuf_AssignDesc_TSCH3DArchives_2eproto();
void protobuf_ShutdownFile_TSCH3DArchives_2eproto();

class Chart3DEnvironmentPackageArchive;
class Chart3DFillArchive;
class Chart3DPointLightArchive;
class Chart3DDirectionalLightArchive;
class Chart3DSpotLightArchive;
class Chart3DLightArchive;
class Chart3DLightingModelArchive;
class Chart3DLightingPackageArchive;
class Chart3DTexturesMaterialArchive;
class Chart3DEmissiveMaterialArchive;
class Chart3DDiffuseMaterialArchive;
class Chart3DModulateMaterialArchive;
class Chart3DSpecularMaterialArchive;
class Chart3DShininessMaterialArchive;
class Chart3DEnvironmentMaterialArchive;
class Chart3DFixedFunctionLightingModelArchive;
class Chart3DPhongLightingModelArchive;
class Chart3DPhongMaterialPackageArchive;
class Chart3DTSPImageDataTextureArchive;
class Chart3DBaseImageTextureTilingArchive;
class Chart3DImageTextureTilingArchive;
class Chart3DVectorArchive;

enum TextureTilingMode {
  textureTilingModeNone = 0,
  textureTilingModeTallest = 1
};
bool TextureTilingMode_IsValid(int value);
const TextureTilingMode TextureTilingMode_MIN = textureTilingModeNone;
const TextureTilingMode TextureTilingMode_MAX = textureTilingModeTallest;
const int TextureTilingMode_ARRAYSIZE = TextureTilingMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* TextureTilingMode_descriptor();
inline const ::std::string& TextureTilingMode_Name(TextureTilingMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    TextureTilingMode_descriptor(), value);
}
inline bool TextureTilingMode_Parse(
    const ::std::string& name, TextureTilingMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TextureTilingMode>(
    TextureTilingMode_descriptor(), name, value);
}
enum TextureTilingFace {
  textureTilingFaceAll = 0,
  textureTilingFaceTopAndBottom = 1,
  textureTilingFaceSide = 2
};
bool TextureTilingFace_IsValid(int value);
const TextureTilingFace TextureTilingFace_MIN = textureTilingFaceAll;
const TextureTilingFace TextureTilingFace_MAX = textureTilingFaceSide;
const int TextureTilingFace_ARRAYSIZE = TextureTilingFace_MAX + 1;

const ::google::protobuf::EnumDescriptor* TextureTilingFace_descriptor();
inline const ::std::string& TextureTilingFace_Name(TextureTilingFace value) {
  return ::google::protobuf::internal::NameOfEnum(
    TextureTilingFace_descriptor(), value);
}
inline bool TextureTilingFace_Parse(
    const ::std::string& name, TextureTilingFace* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TextureTilingFace>(
    TextureTilingFace_descriptor(), name, value);
}
enum TextureTilingWrap {
  textureTilingWrapProjected = 0,
  textureTilingWrapFaceWrap = 1
};
bool TextureTilingWrap_IsValid(int value);
const TextureTilingWrap TextureTilingWrap_MIN = textureTilingWrapProjected;
const TextureTilingWrap TextureTilingWrap_MAX = textureTilingWrapFaceWrap;
const int TextureTilingWrap_ARRAYSIZE = TextureTilingWrap_MAX + 1;

const ::google::protobuf::EnumDescriptor* TextureTilingWrap_descriptor();
inline const ::std::string& TextureTilingWrap_Name(TextureTilingWrap value) {
  return ::google::protobuf::internal::NameOfEnum(
    TextureTilingWrap_descriptor(), value);
}
inline bool TextureTilingWrap_Parse(
    const ::std::string& name, TextureTilingWrap* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TextureTilingWrap>(
    TextureTilingWrap_descriptor(), name, value);
}
enum TextureTilingXPosition {
  textureTilingXPositionLeft = 0,
  textureTilingXPositionCenter = 1,
  textureTilingXPositionRight = 2
};
bool TextureTilingXPosition_IsValid(int value);
const TextureTilingXPosition TextureTilingXPosition_MIN = textureTilingXPositionLeft;
const TextureTilingXPosition TextureTilingXPosition_MAX = textureTilingXPositionRight;
const int TextureTilingXPosition_ARRAYSIZE = TextureTilingXPosition_MAX + 1;

const ::google::protobuf::EnumDescriptor* TextureTilingXPosition_descriptor();
inline const ::std::string& TextureTilingXPosition_Name(TextureTilingXPosition value) {
  return ::google::protobuf::internal::NameOfEnum(
    TextureTilingXPosition_descriptor(), value);
}
inline bool TextureTilingXPosition_Parse(
    const ::std::string& name, TextureTilingXPosition* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TextureTilingXPosition>(
    TextureTilingXPosition_descriptor(), name, value);
}
enum TextureTilingYPosition {
  textureTilingYPositionTop = 0,
  textureTilingYPositionMiddle = 1,
  textureTilingYPositionBottom = 2
};
bool TextureTilingYPosition_IsValid(int value);
const TextureTilingYPosition TextureTilingYPosition_MIN = textureTilingYPositionTop;
const TextureTilingYPosition TextureTilingYPosition_MAX = textureTilingYPositionBottom;
const int TextureTilingYPosition_ARRAYSIZE = TextureTilingYPosition_MAX + 1;

const ::google::protobuf::EnumDescriptor* TextureTilingYPosition_descriptor();
inline const ::std::string& TextureTilingYPosition_Name(TextureTilingYPosition value) {
  return ::google::protobuf::internal::NameOfEnum(
    TextureTilingYPosition_descriptor(), value);
}
inline bool TextureTilingYPosition_Parse(
    const ::std::string& name, TextureTilingYPosition* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TextureTilingYPosition>(
    TextureTilingYPosition_descriptor(), name, value);
}
enum TextureTilingContinuity {
  textureTilingContinuityNone = 0,
  textureTilingContinuityGlobal = 1,
  textureTilingContinuitySeries = 2,
  textureTilingContinuityJittered = 3
};
bool TextureTilingContinuity_IsValid(int value);
const TextureTilingContinuity TextureTilingContinuity_MIN = textureTilingContinuityNone;
const TextureTilingContinuity TextureTilingContinuity_MAX = textureTilingContinuityJittered;
const int TextureTilingContinuity_ARRAYSIZE = TextureTilingContinuity_MAX + 1;

const ::google::protobuf::EnumDescriptor* TextureTilingContinuity_descriptor();
inline const ::std::string& TextureTilingContinuity_Name(TextureTilingContinuity value) {
  return ::google::protobuf::internal::NameOfEnum(
    TextureTilingContinuity_descriptor(), value);
}
inline bool TextureTilingContinuity_Parse(
    const ::std::string& name, TextureTilingContinuity* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TextureTilingContinuity>(
    TextureTilingContinuity_descriptor(), name, value);
}
enum FillPropertyType {
  fillPropertyTypeUndefined = 0,
  fillPropertyTypeArea = 1,
  fillPropertyTypeBar = 2,
  fillPropertyTypeColumn = 3,
  fillPropertyTypeLine = 4,
  fillPropertyTypePie = 5
};
bool FillPropertyType_IsValid(int value);
const FillPropertyType FillPropertyType_MIN = fillPropertyTypeUndefined;
const FillPropertyType FillPropertyType_MAX = fillPropertyTypePie;
const int FillPropertyType_ARRAYSIZE = FillPropertyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FillPropertyType_descriptor();
inline const ::std::string& FillPropertyType_Name(FillPropertyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FillPropertyType_descriptor(), value);
}
inline bool FillPropertyType_Parse(
    const ::std::string& name, FillPropertyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FillPropertyType>(
    FillPropertyType_descriptor(), name, value);
}
// ===================================================================

class Chart3DEnvironmentPackageArchive : public ::google::protobuf::Message {
 public:
  Chart3DEnvironmentPackageArchive();
  virtual ~Chart3DEnvironmentPackageArchive();

  Chart3DEnvironmentPackageArchive(const Chart3DEnvironmentPackageArchive& from);

  inline Chart3DEnvironmentPackageArchive& operator=(const Chart3DEnvironmentPackageArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Chart3DEnvironmentPackageArchive& default_instance();

  void Swap(Chart3DEnvironmentPackageArchive* other);

  // implements Message ----------------------------------------------

  Chart3DEnvironmentPackageArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Chart3DEnvironmentPackageArchive& from);
  void MergeFrom(const Chart3DEnvironmentPackageArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TSCH.Chart3DEnvironmentMaterialArchive materials = 1;
  inline int materials_size() const;
  inline void clear_materials();
  static const int kMaterialsFieldNumber = 1;
  inline const ::TSCH::Chart3DEnvironmentMaterialArchive& materials(int index) const;
  inline ::TSCH::Chart3DEnvironmentMaterialArchive* mutable_materials(int index);
  inline ::TSCH::Chart3DEnvironmentMaterialArchive* add_materials();
  inline const ::google::protobuf::RepeatedPtrField< ::TSCH::Chart3DEnvironmentMaterialArchive >&
      materials() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSCH::Chart3DEnvironmentMaterialArchive >*
      mutable_materials();

  // @@protoc_insertion_point(class_scope:TSCH.Chart3DEnvironmentPackageArchive)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::TSCH::Chart3DEnvironmentMaterialArchive > materials_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_TSCH3DArchives_2eproto();
  friend void protobuf_AssignDesc_TSCH3DArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCH3DArchives_2eproto();

  void InitAsDefaultInstance();
  static Chart3DEnvironmentPackageArchive* default_instance_;
};
// -------------------------------------------------------------------

class Chart3DFillArchive : public ::google::protobuf::Message {
 public:
  Chart3DFillArchive();
  virtual ~Chart3DFillArchive();

  Chart3DFillArchive(const Chart3DFillArchive& from);

  inline Chart3DFillArchive& operator=(const Chart3DFillArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Chart3DFillArchive& default_instance();

  void Swap(Chart3DFillArchive* other);

  // implements Message ----------------------------------------------

  Chart3DFillArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Chart3DFillArchive& from);
  void MergeFrom(const Chart3DFillArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .TSCH.Chart3DLightingModelArchive lightingmodel = 1;
  inline bool has_lightingmodel() const;
  inline void clear_lightingmodel();
  static const int kLightingmodelFieldNumber = 1;
  inline const ::TSCH::Chart3DLightingModelArchive& lightingmodel() const;
  inline ::TSCH::Chart3DLightingModelArchive* mutable_lightingmodel();
  inline ::TSCH::Chart3DLightingModelArchive* release_lightingmodel();
  inline void set_allocated_lightingmodel(::TSCH::Chart3DLightingModelArchive* lightingmodel);

  // optional string textureset_id = 2;
  inline bool has_textureset_id() const;
  inline void clear_textureset_id();
  static const int kTexturesetIdFieldNumber = 2;
  inline const ::std::string& textureset_id() const;
  inline void set_textureset_id(const ::std::string& value);
  inline void set_textureset_id(const char* value);
  inline void set_textureset_id(const char* value, size_t size);
  inline ::std::string* mutable_textureset_id();
  inline ::std::string* release_textureset_id();
  inline void set_allocated_textureset_id(::std::string* textureset_id);

  // optional .TSCH.FillPropertyType fill_type = 3;
  inline bool has_fill_type() const;
  inline void clear_fill_type();
  static const int kFillTypeFieldNumber = 3;
  inline ::TSCH::FillPropertyType fill_type() const;
  inline void set_fill_type(::TSCH::FillPropertyType value);

  // optional uint32 series_index = 4;
  inline bool has_series_index() const;
  inline void clear_series_index();
  static const int kSeriesIndexFieldNumber = 4;
  inline ::google::protobuf::uint32 series_index() const;
  inline void set_series_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TSCH.Chart3DFillArchive)
 private:
  inline void set_has_lightingmodel();
  inline void clear_has_lightingmodel();
  inline void set_has_textureset_id();
  inline void clear_has_textureset_id();
  inline void set_has_fill_type();
  inline void clear_has_fill_type();
  inline void set_has_series_index();
  inline void clear_has_series_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSCH::Chart3DLightingModelArchive* lightingmodel_;
  ::std::string* textureset_id_;
  int fill_type_;
  ::google::protobuf::uint32 series_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_TSCH3DArchives_2eproto();
  friend void protobuf_AssignDesc_TSCH3DArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCH3DArchives_2eproto();

  void InitAsDefaultInstance();
  static Chart3DFillArchive* default_instance_;
};
// -------------------------------------------------------------------

class Chart3DPointLightArchive : public ::google::protobuf::Message {
 public:
  Chart3DPointLightArchive();
  virtual ~Chart3DPointLightArchive();

  Chart3DPointLightArchive(const Chart3DPointLightArchive& from);

  inline Chart3DPointLightArchive& operator=(const Chart3DPointLightArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Chart3DPointLightArchive& default_instance();

  void Swap(Chart3DPointLightArchive* other);

  // implements Message ----------------------------------------------

  Chart3DPointLightArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Chart3DPointLightArchive& from);
  void MergeFrom(const Chart3DPointLightArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSCH.Chart3DVectorArchive position = 1;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 1;
  inline const ::TSCH::Chart3DVectorArchive& position() const;
  inline ::TSCH::Chart3DVectorArchive* mutable_position();
  inline ::TSCH::Chart3DVectorArchive* release_position();
  inline void set_allocated_position(::TSCH::Chart3DVectorArchive* position);

  // @@protoc_insertion_point(class_scope:TSCH.Chart3DPointLightArchive)
 private:
  inline void set_has_position();
  inline void clear_has_position();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSCH::Chart3DVectorArchive* position_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_TSCH3DArchives_2eproto();
  friend void protobuf_AssignDesc_TSCH3DArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCH3DArchives_2eproto();

  void InitAsDefaultInstance();
  static Chart3DPointLightArchive* default_instance_;
};
// -------------------------------------------------------------------

class Chart3DDirectionalLightArchive : public ::google::protobuf::Message {
 public:
  Chart3DDirectionalLightArchive();
  virtual ~Chart3DDirectionalLightArchive();

  Chart3DDirectionalLightArchive(const Chart3DDirectionalLightArchive& from);

  inline Chart3DDirectionalLightArchive& operator=(const Chart3DDirectionalLightArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Chart3DDirectionalLightArchive& default_instance();

  void Swap(Chart3DDirectionalLightArchive* other);

  // implements Message ----------------------------------------------

  Chart3DDirectionalLightArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Chart3DDirectionalLightArchive& from);
  void MergeFrom(const Chart3DDirectionalLightArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSCH.Chart3DVectorArchive direction = 1;
  inline bool has_direction() const;
  inline void clear_direction();
  static const int kDirectionFieldNumber = 1;
  inline const ::TSCH::Chart3DVectorArchive& direction() const;
  inline ::TSCH::Chart3DVectorArchive* mutable_direction();
  inline ::TSCH::Chart3DVectorArchive* release_direction();
  inline void set_allocated_direction(::TSCH::Chart3DVectorArchive* direction);

  // @@protoc_insertion_point(class_scope:TSCH.Chart3DDirectionalLightArchive)
 private:
  inline void set_has_direction();
  inline void clear_has_direction();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSCH::Chart3DVectorArchive* direction_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_TSCH3DArchives_2eproto();
  friend void protobuf_AssignDesc_TSCH3DArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCH3DArchives_2eproto();

  void InitAsDefaultInstance();
  static Chart3DDirectionalLightArchive* default_instance_;
};
// -------------------------------------------------------------------

class Chart3DSpotLightArchive : public ::google::protobuf::Message {
 public:
  Chart3DSpotLightArchive();
  virtual ~Chart3DSpotLightArchive();

  Chart3DSpotLightArchive(const Chart3DSpotLightArchive& from);

  inline Chart3DSpotLightArchive& operator=(const Chart3DSpotLightArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Chart3DSpotLightArchive& default_instance();

  void Swap(Chart3DSpotLightArchive* other);

  // implements Message ----------------------------------------------

  Chart3DSpotLightArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Chart3DSpotLightArchive& from);
  void MergeFrom(const Chart3DSpotLightArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSCH.Chart3DVectorArchive position = 1;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 1;
  inline const ::TSCH::Chart3DVectorArchive& position() const;
  inline ::TSCH::Chart3DVectorArchive* mutable_position();
  inline ::TSCH::Chart3DVectorArchive* release_position();
  inline void set_allocated_position(::TSCH::Chart3DVectorArchive* position);

  // required .TSCH.Chart3DVectorArchive direction = 2;
  inline bool has_direction() const;
  inline void clear_direction();
  static const int kDirectionFieldNumber = 2;
  inline const ::TSCH::Chart3DVectorArchive& direction() const;
  inline ::TSCH::Chart3DVectorArchive* mutable_direction();
  inline ::TSCH::Chart3DVectorArchive* release_direction();
  inline void set_allocated_direction(::TSCH::Chart3DVectorArchive* direction);

  // required float cutoff = 3;
  inline bool has_cutoff() const;
  inline void clear_cutoff();
  static const int kCutoffFieldNumber = 3;
  inline float cutoff() const;
  inline void set_cutoff(float value);

  // required float dropoff = 4;
  inline bool has_dropoff() const;
  inline void clear_dropoff();
  static const int kDropoffFieldNumber = 4;
  inline float dropoff() const;
  inline void set_dropoff(float value);

  // @@protoc_insertion_point(class_scope:TSCH.Chart3DSpotLightArchive)
 private:
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_direction();
  inline void clear_has_direction();
  inline void set_has_cutoff();
  inline void clear_has_cutoff();
  inline void set_has_dropoff();
  inline void clear_has_dropoff();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSCH::Chart3DVectorArchive* position_;
  ::TSCH::Chart3DVectorArchive* direction_;
  float cutoff_;
  float dropoff_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_TSCH3DArchives_2eproto();
  friend void protobuf_AssignDesc_TSCH3DArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCH3DArchives_2eproto();

  void InitAsDefaultInstance();
  static Chart3DSpotLightArchive* default_instance_;
};
// -------------------------------------------------------------------

class Chart3DLightArchive : public ::google::protobuf::Message {
 public:
  Chart3DLightArchive();
  virtual ~Chart3DLightArchive();

  Chart3DLightArchive(const Chart3DLightArchive& from);

  inline Chart3DLightArchive& operator=(const Chart3DLightArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Chart3DLightArchive& default_instance();

  void Swap(Chart3DLightArchive* other);

  // implements Message ----------------------------------------------

  Chart3DLightArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Chart3DLightArchive& from);
  void MergeFrom(const Chart3DLightArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required .TSCH.Chart3DVectorArchive ambient_color = 2;
  inline bool has_ambient_color() const;
  inline void clear_ambient_color();
  static const int kAmbientColorFieldNumber = 2;
  inline const ::TSCH::Chart3DVectorArchive& ambient_color() const;
  inline ::TSCH::Chart3DVectorArchive* mutable_ambient_color();
  inline ::TSCH::Chart3DVectorArchive* release_ambient_color();
  inline void set_allocated_ambient_color(::TSCH::Chart3DVectorArchive* ambient_color);

  // required .TSCH.Chart3DVectorArchive diffuse_color = 3;
  inline bool has_diffuse_color() const;
  inline void clear_diffuse_color();
  static const int kDiffuseColorFieldNumber = 3;
  inline const ::TSCH::Chart3DVectorArchive& diffuse_color() const;
  inline ::TSCH::Chart3DVectorArchive* mutable_diffuse_color();
  inline ::TSCH::Chart3DVectorArchive* release_diffuse_color();
  inline void set_allocated_diffuse_color(::TSCH::Chart3DVectorArchive* diffuse_color);

  // required .TSCH.Chart3DVectorArchive specular_color = 4;
  inline bool has_specular_color() const;
  inline void clear_specular_color();
  static const int kSpecularColorFieldNumber = 4;
  inline const ::TSCH::Chart3DVectorArchive& specular_color() const;
  inline ::TSCH::Chart3DVectorArchive* mutable_specular_color();
  inline ::TSCH::Chart3DVectorArchive* release_specular_color();
  inline void set_allocated_specular_color(::TSCH::Chart3DVectorArchive* specular_color);

  // required float intensity = 5;
  inline bool has_intensity() const;
  inline void clear_intensity();
  static const int kIntensityFieldNumber = 5;
  inline float intensity() const;
  inline void set_intensity(float value);

  // required .TSCH.Chart3DVectorArchive attenuation = 6;
  inline bool has_attenuation() const;
  inline void clear_attenuation();
  static const int kAttenuationFieldNumber = 6;
  inline const ::TSCH::Chart3DVectorArchive& attenuation() const;
  inline ::TSCH::Chart3DVectorArchive* mutable_attenuation();
  inline ::TSCH::Chart3DVectorArchive* release_attenuation();
  inline void set_allocated_attenuation(::TSCH::Chart3DVectorArchive* attenuation);

  // required uint32 coordinate_space = 7;
  inline bool has_coordinate_space() const;
  inline void clear_coordinate_space();
  static const int kCoordinateSpaceFieldNumber = 7;
  inline ::google::protobuf::uint32 coordinate_space() const;
  inline void set_coordinate_space(::google::protobuf::uint32 value);

  // required bool enabled = 8;
  inline bool has_enabled() const;
  inline void clear_enabled();
  static const int kEnabledFieldNumber = 8;
  inline bool enabled() const;
  inline void set_enabled(bool value);

  // optional .TSCH.Chart3DPointLightArchive point_light = 9;
  inline bool has_point_light() const;
  inline void clear_point_light();
  static const int kPointLightFieldNumber = 9;
  inline const ::TSCH::Chart3DPointLightArchive& point_light() const;
  inline ::TSCH::Chart3DPointLightArchive* mutable_point_light();
  inline ::TSCH::Chart3DPointLightArchive* release_point_light();
  inline void set_allocated_point_light(::TSCH::Chart3DPointLightArchive* point_light);

  // optional .TSCH.Chart3DDirectionalLightArchive directional_light = 10;
  inline bool has_directional_light() const;
  inline void clear_directional_light();
  static const int kDirectionalLightFieldNumber = 10;
  inline const ::TSCH::Chart3DDirectionalLightArchive& directional_light() const;
  inline ::TSCH::Chart3DDirectionalLightArchive* mutable_directional_light();
  inline ::TSCH::Chart3DDirectionalLightArchive* release_directional_light();
  inline void set_allocated_directional_light(::TSCH::Chart3DDirectionalLightArchive* directional_light);

  // optional .TSCH.Chart3DSpotLightArchive spot_light = 11;
  inline bool has_spot_light() const;
  inline void clear_spot_light();
  static const int kSpotLightFieldNumber = 11;
  inline const ::TSCH::Chart3DSpotLightArchive& spot_light() const;
  inline ::TSCH::Chart3DSpotLightArchive* mutable_spot_light();
  inline ::TSCH::Chart3DSpotLightArchive* release_spot_light();
  inline void set_allocated_spot_light(::TSCH::Chart3DSpotLightArchive* spot_light);

  // @@protoc_insertion_point(class_scope:TSCH.Chart3DLightArchive)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_ambient_color();
  inline void clear_has_ambient_color();
  inline void set_has_diffuse_color();
  inline void clear_has_diffuse_color();
  inline void set_has_specular_color();
  inline void clear_has_specular_color();
  inline void set_has_intensity();
  inline void clear_has_intensity();
  inline void set_has_attenuation();
  inline void clear_has_attenuation();
  inline void set_has_coordinate_space();
  inline void clear_has_coordinate_space();
  inline void set_has_enabled();
  inline void clear_has_enabled();
  inline void set_has_point_light();
  inline void clear_has_point_light();
  inline void set_has_directional_light();
  inline void clear_has_directional_light();
  inline void set_has_spot_light();
  inline void clear_has_spot_light();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::TSCH::Chart3DVectorArchive* ambient_color_;
  ::TSCH::Chart3DVectorArchive* diffuse_color_;
  ::TSCH::Chart3DVectorArchive* specular_color_;
  ::TSCH::Chart3DVectorArchive* attenuation_;
  float intensity_;
  ::google::protobuf::uint32 coordinate_space_;
  ::TSCH::Chart3DPointLightArchive* point_light_;
  ::TSCH::Chart3DDirectionalLightArchive* directional_light_;
  ::TSCH::Chart3DSpotLightArchive* spot_light_;
  bool enabled_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_TSCH3DArchives_2eproto();
  friend void protobuf_AssignDesc_TSCH3DArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCH3DArchives_2eproto();

  void InitAsDefaultInstance();
  static Chart3DLightArchive* default_instance_;
};
// -------------------------------------------------------------------

class Chart3DLightingModelArchive : public ::google::protobuf::Message {
 public:
  Chart3DLightingModelArchive();
  virtual ~Chart3DLightingModelArchive();

  Chart3DLightingModelArchive(const Chart3DLightingModelArchive& from);

  inline Chart3DLightingModelArchive& operator=(const Chart3DLightingModelArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Chart3DLightingModelArchive& default_instance();

  void Swap(Chart3DLightingModelArchive* other);

  // implements Message ----------------------------------------------

  Chart3DLightingModelArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Chart3DLightingModelArchive& from);
  void MergeFrom(const Chart3DLightingModelArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .TSCH.Chart3DPhongLightingModelArchive phong = 1;
  inline bool has_phong() const;
  inline void clear_phong();
  static const int kPhongFieldNumber = 1;
  inline const ::TSCH::Chart3DPhongLightingModelArchive& phong() const;
  inline ::TSCH::Chart3DPhongLightingModelArchive* mutable_phong();
  inline ::TSCH::Chart3DPhongLightingModelArchive* release_phong();
  inline void set_allocated_phong(::TSCH::Chart3DPhongLightingModelArchive* phong);

  // optional .TSCH.Chart3DFixedFunctionLightingModelArchive fixed_function = 2;
  inline bool has_fixed_function() const;
  inline void clear_fixed_function();
  static const int kFixedFunctionFieldNumber = 2;
  inline const ::TSCH::Chart3DFixedFunctionLightingModelArchive& fixed_function() const;
  inline ::TSCH::Chart3DFixedFunctionLightingModelArchive* mutable_fixed_function();
  inline ::TSCH::Chart3DFixedFunctionLightingModelArchive* release_fixed_function();
  inline void set_allocated_fixed_function(::TSCH::Chart3DFixedFunctionLightingModelArchive* fixed_function);

  // optional .TSCH.Chart3DEnvironmentPackageArchive environment = 3;
  inline bool has_environment() const;
  inline void clear_environment();
  static const int kEnvironmentFieldNumber = 3;
  inline const ::TSCH::Chart3DEnvironmentPackageArchive& environment() const;
  inline ::TSCH::Chart3DEnvironmentPackageArchive* mutable_environment();
  inline ::TSCH::Chart3DEnvironmentPackageArchive* release_environment();
  inline void set_allocated_environment(::TSCH::Chart3DEnvironmentPackageArchive* environment);

  // @@protoc_insertion_point(class_scope:TSCH.Chart3DLightingModelArchive)
 private:
  inline void set_has_phong();
  inline void clear_has_phong();
  inline void set_has_fixed_function();
  inline void clear_has_fixed_function();
  inline void set_has_environment();
  inline void clear_has_environment();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSCH::Chart3DPhongLightingModelArchive* phong_;
  ::TSCH::Chart3DFixedFunctionLightingModelArchive* fixed_function_;
  ::TSCH::Chart3DEnvironmentPackageArchive* environment_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_TSCH3DArchives_2eproto();
  friend void protobuf_AssignDesc_TSCH3DArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCH3DArchives_2eproto();

  void InitAsDefaultInstance();
  static Chart3DLightingModelArchive* default_instance_;
};
// -------------------------------------------------------------------

class Chart3DLightingPackageArchive : public ::google::protobuf::Message {
 public:
  Chart3DLightingPackageArchive();
  virtual ~Chart3DLightingPackageArchive();

  Chart3DLightingPackageArchive(const Chart3DLightingPackageArchive& from);

  inline Chart3DLightingPackageArchive& operator=(const Chart3DLightingPackageArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Chart3DLightingPackageArchive& default_instance();

  void Swap(Chart3DLightingPackageArchive* other);

  // implements Message ----------------------------------------------

  Chart3DLightingPackageArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Chart3DLightingPackageArchive& from);
  void MergeFrom(const Chart3DLightingPackageArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .TSCH.Chart3DLightArchive lights = 2;
  inline int lights_size() const;
  inline void clear_lights();
  static const int kLightsFieldNumber = 2;
  inline const ::TSCH::Chart3DLightArchive& lights(int index) const;
  inline ::TSCH::Chart3DLightArchive* mutable_lights(int index);
  inline ::TSCH::Chart3DLightArchive* add_lights();
  inline const ::google::protobuf::RepeatedPtrField< ::TSCH::Chart3DLightArchive >&
      lights() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSCH::Chart3DLightArchive >*
      mutable_lights();

  // @@protoc_insertion_point(class_scope:TSCH.Chart3DLightingPackageArchive)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::TSCH::Chart3DLightArchive > lights_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_TSCH3DArchives_2eproto();
  friend void protobuf_AssignDesc_TSCH3DArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCH3DArchives_2eproto();

  void InitAsDefaultInstance();
  static Chart3DLightingPackageArchive* default_instance_;
};
// -------------------------------------------------------------------

class Chart3DTexturesMaterialArchive : public ::google::protobuf::Message {
 public:
  Chart3DTexturesMaterialArchive();
  virtual ~Chart3DTexturesMaterialArchive();

  Chart3DTexturesMaterialArchive(const Chart3DTexturesMaterialArchive& from);

  inline Chart3DTexturesMaterialArchive& operator=(const Chart3DTexturesMaterialArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Chart3DTexturesMaterialArchive& default_instance();

  void Swap(Chart3DTexturesMaterialArchive* other);

  // implements Message ----------------------------------------------

  Chart3DTexturesMaterialArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Chart3DTexturesMaterialArchive& from);
  void MergeFrom(const Chart3DTexturesMaterialArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSCH.Chart3DVectorArchive color = 1;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 1;
  inline const ::TSCH::Chart3DVectorArchive& color() const;
  inline ::TSCH::Chart3DVectorArchive* mutable_color();
  inline ::TSCH::Chart3DVectorArchive* release_color();
  inline void set_allocated_color(::TSCH::Chart3DVectorArchive* color);

  // repeated .TSCH.Chart3DTSPImageDataTextureArchive textures = 2;
  inline int textures_size() const;
  inline void clear_textures();
  static const int kTexturesFieldNumber = 2;
  inline const ::TSCH::Chart3DTSPImageDataTextureArchive& textures(int index) const;
  inline ::TSCH::Chart3DTSPImageDataTextureArchive* mutable_textures(int index);
  inline ::TSCH::Chart3DTSPImageDataTextureArchive* add_textures();
  inline const ::google::protobuf::RepeatedPtrField< ::TSCH::Chart3DTSPImageDataTextureArchive >&
      textures() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSCH::Chart3DTSPImageDataTextureArchive >*
      mutable_textures();

  // @@protoc_insertion_point(class_scope:TSCH.Chart3DTexturesMaterialArchive)
 private:
  inline void set_has_color();
  inline void clear_has_color();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSCH::Chart3DVectorArchive* color_;
  ::google::protobuf::RepeatedPtrField< ::TSCH::Chart3DTSPImageDataTextureArchive > textures_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_TSCH3DArchives_2eproto();
  friend void protobuf_AssignDesc_TSCH3DArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCH3DArchives_2eproto();

  void InitAsDefaultInstance();
  static Chart3DTexturesMaterialArchive* default_instance_;
};
// -------------------------------------------------------------------

class Chart3DEmissiveMaterialArchive : public ::google::protobuf::Message {
 public:
  Chart3DEmissiveMaterialArchive();
  virtual ~Chart3DEmissiveMaterialArchive();

  Chart3DEmissiveMaterialArchive(const Chart3DEmissiveMaterialArchive& from);

  inline Chart3DEmissiveMaterialArchive& operator=(const Chart3DEmissiveMaterialArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Chart3DEmissiveMaterialArchive& default_instance();

  void Swap(Chart3DEmissiveMaterialArchive* other);

  // implements Message ----------------------------------------------

  Chart3DEmissiveMaterialArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Chart3DEmissiveMaterialArchive& from);
  void MergeFrom(const Chart3DEmissiveMaterialArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSCH.Chart3DTexturesMaterialArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSCH::Chart3DTexturesMaterialArchive& super() const;
  inline ::TSCH::Chart3DTexturesMaterialArchive* mutable_super();
  inline ::TSCH::Chart3DTexturesMaterialArchive* release_super();
  inline void set_allocated_super(::TSCH::Chart3DTexturesMaterialArchive* super);

  // repeated .TSCH.Chart3DImageTextureTilingArchive tilings = 2;
  inline int tilings_size() const;
  inline void clear_tilings();
  static const int kTilingsFieldNumber = 2;
  inline const ::TSCH::Chart3DImageTextureTilingArchive& tilings(int index) const;
  inline ::TSCH::Chart3DImageTextureTilingArchive* mutable_tilings(int index);
  inline ::TSCH::Chart3DImageTextureTilingArchive* add_tilings();
  inline const ::google::protobuf::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive >&
      tilings() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive >*
      mutable_tilings();

  // @@protoc_insertion_point(class_scope:TSCH.Chart3DEmissiveMaterialArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSCH::Chart3DTexturesMaterialArchive* super_;
  ::google::protobuf::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive > tilings_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_TSCH3DArchives_2eproto();
  friend void protobuf_AssignDesc_TSCH3DArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCH3DArchives_2eproto();

  void InitAsDefaultInstance();
  static Chart3DEmissiveMaterialArchive* default_instance_;
};
// -------------------------------------------------------------------

class Chart3DDiffuseMaterialArchive : public ::google::protobuf::Message {
 public:
  Chart3DDiffuseMaterialArchive();
  virtual ~Chart3DDiffuseMaterialArchive();

  Chart3DDiffuseMaterialArchive(const Chart3DDiffuseMaterialArchive& from);

  inline Chart3DDiffuseMaterialArchive& operator=(const Chart3DDiffuseMaterialArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Chart3DDiffuseMaterialArchive& default_instance();

  void Swap(Chart3DDiffuseMaterialArchive* other);

  // implements Message ----------------------------------------------

  Chart3DDiffuseMaterialArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Chart3DDiffuseMaterialArchive& from);
  void MergeFrom(const Chart3DDiffuseMaterialArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSCH.Chart3DTexturesMaterialArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSCH::Chart3DTexturesMaterialArchive& super() const;
  inline ::TSCH::Chart3DTexturesMaterialArchive* mutable_super();
  inline ::TSCH::Chart3DTexturesMaterialArchive* release_super();
  inline void set_allocated_super(::TSCH::Chart3DTexturesMaterialArchive* super);

  // repeated .TSCH.Chart3DImageTextureTilingArchive tilings = 2;
  inline int tilings_size() const;
  inline void clear_tilings();
  static const int kTilingsFieldNumber = 2;
  inline const ::TSCH::Chart3DImageTextureTilingArchive& tilings(int index) const;
  inline ::TSCH::Chart3DImageTextureTilingArchive* mutable_tilings(int index);
  inline ::TSCH::Chart3DImageTextureTilingArchive* add_tilings();
  inline const ::google::protobuf::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive >&
      tilings() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive >*
      mutable_tilings();

  // @@protoc_insertion_point(class_scope:TSCH.Chart3DDiffuseMaterialArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSCH::Chart3DTexturesMaterialArchive* super_;
  ::google::protobuf::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive > tilings_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_TSCH3DArchives_2eproto();
  friend void protobuf_AssignDesc_TSCH3DArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCH3DArchives_2eproto();

  void InitAsDefaultInstance();
  static Chart3DDiffuseMaterialArchive* default_instance_;
};
// -------------------------------------------------------------------

class Chart3DModulateMaterialArchive : public ::google::protobuf::Message {
 public:
  Chart3DModulateMaterialArchive();
  virtual ~Chart3DModulateMaterialArchive();

  Chart3DModulateMaterialArchive(const Chart3DModulateMaterialArchive& from);

  inline Chart3DModulateMaterialArchive& operator=(const Chart3DModulateMaterialArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Chart3DModulateMaterialArchive& default_instance();

  void Swap(Chart3DModulateMaterialArchive* other);

  // implements Message ----------------------------------------------

  Chart3DModulateMaterialArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Chart3DModulateMaterialArchive& from);
  void MergeFrom(const Chart3DModulateMaterialArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSCH.Chart3DTexturesMaterialArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSCH::Chart3DTexturesMaterialArchive& super() const;
  inline ::TSCH::Chart3DTexturesMaterialArchive* mutable_super();
  inline ::TSCH::Chart3DTexturesMaterialArchive* release_super();
  inline void set_allocated_super(::TSCH::Chart3DTexturesMaterialArchive* super);

  // repeated .TSCH.Chart3DImageTextureTilingArchive tilings = 2;
  inline int tilings_size() const;
  inline void clear_tilings();
  static const int kTilingsFieldNumber = 2;
  inline const ::TSCH::Chart3DImageTextureTilingArchive& tilings(int index) const;
  inline ::TSCH::Chart3DImageTextureTilingArchive* mutable_tilings(int index);
  inline ::TSCH::Chart3DImageTextureTilingArchive* add_tilings();
  inline const ::google::protobuf::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive >&
      tilings() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive >*
      mutable_tilings();

  // @@protoc_insertion_point(class_scope:TSCH.Chart3DModulateMaterialArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSCH::Chart3DTexturesMaterialArchive* super_;
  ::google::protobuf::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive > tilings_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_TSCH3DArchives_2eproto();
  friend void protobuf_AssignDesc_TSCH3DArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCH3DArchives_2eproto();

  void InitAsDefaultInstance();
  static Chart3DModulateMaterialArchive* default_instance_;
};
// -------------------------------------------------------------------

class Chart3DSpecularMaterialArchive : public ::google::protobuf::Message {
 public:
  Chart3DSpecularMaterialArchive();
  virtual ~Chart3DSpecularMaterialArchive();

  Chart3DSpecularMaterialArchive(const Chart3DSpecularMaterialArchive& from);

  inline Chart3DSpecularMaterialArchive& operator=(const Chart3DSpecularMaterialArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Chart3DSpecularMaterialArchive& default_instance();

  void Swap(Chart3DSpecularMaterialArchive* other);

  // implements Message ----------------------------------------------

  Chart3DSpecularMaterialArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Chart3DSpecularMaterialArchive& from);
  void MergeFrom(const Chart3DSpecularMaterialArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSCH.Chart3DTexturesMaterialArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSCH::Chart3DTexturesMaterialArchive& super() const;
  inline ::TSCH::Chart3DTexturesMaterialArchive* mutable_super();
  inline ::TSCH::Chart3DTexturesMaterialArchive* release_super();
  inline void set_allocated_super(::TSCH::Chart3DTexturesMaterialArchive* super);

  // repeated .TSCH.Chart3DImageTextureTilingArchive tilings = 2;
  inline int tilings_size() const;
  inline void clear_tilings();
  static const int kTilingsFieldNumber = 2;
  inline const ::TSCH::Chart3DImageTextureTilingArchive& tilings(int index) const;
  inline ::TSCH::Chart3DImageTextureTilingArchive* mutable_tilings(int index);
  inline ::TSCH::Chart3DImageTextureTilingArchive* add_tilings();
  inline const ::google::protobuf::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive >&
      tilings() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive >*
      mutable_tilings();

  // @@protoc_insertion_point(class_scope:TSCH.Chart3DSpecularMaterialArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSCH::Chart3DTexturesMaterialArchive* super_;
  ::google::protobuf::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive > tilings_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_TSCH3DArchives_2eproto();
  friend void protobuf_AssignDesc_TSCH3DArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCH3DArchives_2eproto();

  void InitAsDefaultInstance();
  static Chart3DSpecularMaterialArchive* default_instance_;
};
// -------------------------------------------------------------------

class Chart3DShininessMaterialArchive : public ::google::protobuf::Message {
 public:
  Chart3DShininessMaterialArchive();
  virtual ~Chart3DShininessMaterialArchive();

  Chart3DShininessMaterialArchive(const Chart3DShininessMaterialArchive& from);

  inline Chart3DShininessMaterialArchive& operator=(const Chart3DShininessMaterialArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Chart3DShininessMaterialArchive& default_instance();

  void Swap(Chart3DShininessMaterialArchive* other);

  // implements Message ----------------------------------------------

  Chart3DShininessMaterialArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Chart3DShininessMaterialArchive& from);
  void MergeFrom(const Chart3DShininessMaterialArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSCH.Chart3DTexturesMaterialArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSCH::Chart3DTexturesMaterialArchive& super() const;
  inline ::TSCH::Chart3DTexturesMaterialArchive* mutable_super();
  inline ::TSCH::Chart3DTexturesMaterialArchive* release_super();
  inline void set_allocated_super(::TSCH::Chart3DTexturesMaterialArchive* super);

  // repeated .TSCH.Chart3DImageTextureTilingArchive tilings = 2;
  inline int tilings_size() const;
  inline void clear_tilings();
  static const int kTilingsFieldNumber = 2;
  inline const ::TSCH::Chart3DImageTextureTilingArchive& tilings(int index) const;
  inline ::TSCH::Chart3DImageTextureTilingArchive* mutable_tilings(int index);
  inline ::TSCH::Chart3DImageTextureTilingArchive* add_tilings();
  inline const ::google::protobuf::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive >&
      tilings() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive >*
      mutable_tilings();

  // @@protoc_insertion_point(class_scope:TSCH.Chart3DShininessMaterialArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSCH::Chart3DTexturesMaterialArchive* super_;
  ::google::protobuf::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive > tilings_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_TSCH3DArchives_2eproto();
  friend void protobuf_AssignDesc_TSCH3DArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCH3DArchives_2eproto();

  void InitAsDefaultInstance();
  static Chart3DShininessMaterialArchive* default_instance_;
};
// -------------------------------------------------------------------

class Chart3DEnvironmentMaterialArchive : public ::google::protobuf::Message {
 public:
  Chart3DEnvironmentMaterialArchive();
  virtual ~Chart3DEnvironmentMaterialArchive();

  Chart3DEnvironmentMaterialArchive(const Chart3DEnvironmentMaterialArchive& from);

  inline Chart3DEnvironmentMaterialArchive& operator=(const Chart3DEnvironmentMaterialArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Chart3DEnvironmentMaterialArchive& default_instance();

  void Swap(Chart3DEnvironmentMaterialArchive* other);

  // implements Message ----------------------------------------------

  Chart3DEnvironmentMaterialArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Chart3DEnvironmentMaterialArchive& from);
  void MergeFrom(const Chart3DEnvironmentMaterialArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSCH.Chart3DTexturesMaterialArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSCH::Chart3DTexturesMaterialArchive& super() const;
  inline ::TSCH::Chart3DTexturesMaterialArchive* mutable_super();
  inline ::TSCH::Chart3DTexturesMaterialArchive* release_super();
  inline void set_allocated_super(::TSCH::Chart3DTexturesMaterialArchive* super);

  // repeated .TSCH.Chart3DBaseImageTextureTilingArchive OBSOLETE_tilings = 2;
  inline int obsolete_tilings_size() const;
  inline void clear_obsolete_tilings();
  static const int kOBSOLETETilingsFieldNumber = 2;
  inline const ::TSCH::Chart3DBaseImageTextureTilingArchive& obsolete_tilings(int index) const;
  inline ::TSCH::Chart3DBaseImageTextureTilingArchive* mutable_obsolete_tilings(int index);
  inline ::TSCH::Chart3DBaseImageTextureTilingArchive* add_obsolete_tilings();
  inline const ::google::protobuf::RepeatedPtrField< ::TSCH::Chart3DBaseImageTextureTilingArchive >&
      obsolete_tilings() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSCH::Chart3DBaseImageTextureTilingArchive >*
      mutable_obsolete_tilings();

  // optional bool decalMode = 3;
  inline bool has_decalmode() const;
  inline void clear_decalmode();
  static const int kDecalModeFieldNumber = 3;
  inline bool decalmode() const;
  inline void set_decalmode(bool value);

  // repeated .TSCH.Chart3DImageTextureTilingArchive tilings = 4;
  inline int tilings_size() const;
  inline void clear_tilings();
  static const int kTilingsFieldNumber = 4;
  inline const ::TSCH::Chart3DImageTextureTilingArchive& tilings(int index) const;
  inline ::TSCH::Chart3DImageTextureTilingArchive* mutable_tilings(int index);
  inline ::TSCH::Chart3DImageTextureTilingArchive* add_tilings();
  inline const ::google::protobuf::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive >&
      tilings() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive >*
      mutable_tilings();

  // @@protoc_insertion_point(class_scope:TSCH.Chart3DEnvironmentMaterialArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();
  inline void set_has_decalmode();
  inline void clear_has_decalmode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSCH::Chart3DTexturesMaterialArchive* super_;
  ::google::protobuf::RepeatedPtrField< ::TSCH::Chart3DBaseImageTextureTilingArchive > obsolete_tilings_;
  ::google::protobuf::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive > tilings_;
  bool decalmode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_TSCH3DArchives_2eproto();
  friend void protobuf_AssignDesc_TSCH3DArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCH3DArchives_2eproto();

  void InitAsDefaultInstance();
  static Chart3DEnvironmentMaterialArchive* default_instance_;
};
// -------------------------------------------------------------------

class Chart3DFixedFunctionLightingModelArchive : public ::google::protobuf::Message {
 public:
  Chart3DFixedFunctionLightingModelArchive();
  virtual ~Chart3DFixedFunctionLightingModelArchive();

  Chart3DFixedFunctionLightingModelArchive(const Chart3DFixedFunctionLightingModelArchive& from);

  inline Chart3DFixedFunctionLightingModelArchive& operator=(const Chart3DFixedFunctionLightingModelArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Chart3DFixedFunctionLightingModelArchive& default_instance();

  void Swap(Chart3DFixedFunctionLightingModelArchive* other);

  // implements Message ----------------------------------------------

  Chart3DFixedFunctionLightingModelArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Chart3DFixedFunctionLightingModelArchive& from);
  void MergeFrom(const Chart3DFixedFunctionLightingModelArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSCH.Chart3DPhongMaterialPackageArchive materials = 1;
  inline bool has_materials() const;
  inline void clear_materials();
  static const int kMaterialsFieldNumber = 1;
  inline const ::TSCH::Chart3DPhongMaterialPackageArchive& materials() const;
  inline ::TSCH::Chart3DPhongMaterialPackageArchive* mutable_materials();
  inline ::TSCH::Chart3DPhongMaterialPackageArchive* release_materials();
  inline void set_allocated_materials(::TSCH::Chart3DPhongMaterialPackageArchive* materials);

  // @@protoc_insertion_point(class_scope:TSCH.Chart3DFixedFunctionLightingModelArchive)
 private:
  inline void set_has_materials();
  inline void clear_has_materials();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSCH::Chart3DPhongMaterialPackageArchive* materials_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_TSCH3DArchives_2eproto();
  friend void protobuf_AssignDesc_TSCH3DArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCH3DArchives_2eproto();

  void InitAsDefaultInstance();
  static Chart3DFixedFunctionLightingModelArchive* default_instance_;
};
// -------------------------------------------------------------------

class Chart3DPhongLightingModelArchive : public ::google::protobuf::Message {
 public:
  Chart3DPhongLightingModelArchive();
  virtual ~Chart3DPhongLightingModelArchive();

  Chart3DPhongLightingModelArchive(const Chart3DPhongLightingModelArchive& from);

  inline Chart3DPhongLightingModelArchive& operator=(const Chart3DPhongLightingModelArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Chart3DPhongLightingModelArchive& default_instance();

  void Swap(Chart3DPhongLightingModelArchive* other);

  // implements Message ----------------------------------------------

  Chart3DPhongLightingModelArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Chart3DPhongLightingModelArchive& from);
  void MergeFrom(const Chart3DPhongLightingModelArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSCH.Chart3DPhongMaterialPackageArchive materials = 1;
  inline bool has_materials() const;
  inline void clear_materials();
  static const int kMaterialsFieldNumber = 1;
  inline const ::TSCH::Chart3DPhongMaterialPackageArchive& materials() const;
  inline ::TSCH::Chart3DPhongMaterialPackageArchive* mutable_materials();
  inline ::TSCH::Chart3DPhongMaterialPackageArchive* release_materials();
  inline void set_allocated_materials(::TSCH::Chart3DPhongMaterialPackageArchive* materials);

  // @@protoc_insertion_point(class_scope:TSCH.Chart3DPhongLightingModelArchive)
 private:
  inline void set_has_materials();
  inline void clear_has_materials();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSCH::Chart3DPhongMaterialPackageArchive* materials_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_TSCH3DArchives_2eproto();
  friend void protobuf_AssignDesc_TSCH3DArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCH3DArchives_2eproto();

  void InitAsDefaultInstance();
  static Chart3DPhongLightingModelArchive* default_instance_;
};
// -------------------------------------------------------------------

class Chart3DPhongMaterialPackageArchive : public ::google::protobuf::Message {
 public:
  Chart3DPhongMaterialPackageArchive();
  virtual ~Chart3DPhongMaterialPackageArchive();

  Chart3DPhongMaterialPackageArchive(const Chart3DPhongMaterialPackageArchive& from);

  inline Chart3DPhongMaterialPackageArchive& operator=(const Chart3DPhongMaterialPackageArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Chart3DPhongMaterialPackageArchive& default_instance();

  void Swap(Chart3DPhongMaterialPackageArchive* other);

  // implements Message ----------------------------------------------

  Chart3DPhongMaterialPackageArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Chart3DPhongMaterialPackageArchive& from);
  void MergeFrom(const Chart3DPhongMaterialPackageArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .TSCH.Chart3DEmissiveMaterialArchive emissive = 1;
  inline bool has_emissive() const;
  inline void clear_emissive();
  static const int kEmissiveFieldNumber = 1;
  inline const ::TSCH::Chart3DEmissiveMaterialArchive& emissive() const;
  inline ::TSCH::Chart3DEmissiveMaterialArchive* mutable_emissive();
  inline ::TSCH::Chart3DEmissiveMaterialArchive* release_emissive();
  inline void set_allocated_emissive(::TSCH::Chart3DEmissiveMaterialArchive* emissive);

  // optional .TSCH.Chart3DDiffuseMaterialArchive diffuse = 2;
  inline bool has_diffuse() const;
  inline void clear_diffuse();
  static const int kDiffuseFieldNumber = 2;
  inline const ::TSCH::Chart3DDiffuseMaterialArchive& diffuse() const;
  inline ::TSCH::Chart3DDiffuseMaterialArchive* mutable_diffuse();
  inline ::TSCH::Chart3DDiffuseMaterialArchive* release_diffuse();
  inline void set_allocated_diffuse(::TSCH::Chart3DDiffuseMaterialArchive* diffuse);

  // optional .TSCH.Chart3DModulateMaterialArchive modulate = 3;
  inline bool has_modulate() const;
  inline void clear_modulate();
  static const int kModulateFieldNumber = 3;
  inline const ::TSCH::Chart3DModulateMaterialArchive& modulate() const;
  inline ::TSCH::Chart3DModulateMaterialArchive* mutable_modulate();
  inline ::TSCH::Chart3DModulateMaterialArchive* release_modulate();
  inline void set_allocated_modulate(::TSCH::Chart3DModulateMaterialArchive* modulate);

  // optional .TSCH.Chart3DSpecularMaterialArchive specular = 4;
  inline bool has_specular() const;
  inline void clear_specular();
  static const int kSpecularFieldNumber = 4;
  inline const ::TSCH::Chart3DSpecularMaterialArchive& specular() const;
  inline ::TSCH::Chart3DSpecularMaterialArchive* mutable_specular();
  inline ::TSCH::Chart3DSpecularMaterialArchive* release_specular();
  inline void set_allocated_specular(::TSCH::Chart3DSpecularMaterialArchive* specular);

  // optional .TSCH.Chart3DShininessMaterialArchive shininess = 5;
  inline bool has_shininess() const;
  inline void clear_shininess();
  static const int kShininessFieldNumber = 5;
  inline const ::TSCH::Chart3DShininessMaterialArchive& shininess() const;
  inline ::TSCH::Chart3DShininessMaterialArchive* mutable_shininess();
  inline ::TSCH::Chart3DShininessMaterialArchive* release_shininess();
  inline void set_allocated_shininess(::TSCH::Chart3DShininessMaterialArchive* shininess);

  // @@protoc_insertion_point(class_scope:TSCH.Chart3DPhongMaterialPackageArchive)
 private:
  inline void set_has_emissive();
  inline void clear_has_emissive();
  inline void set_has_diffuse();
  inline void clear_has_diffuse();
  inline void set_has_modulate();
  inline void clear_has_modulate();
  inline void set_has_specular();
  inline void clear_has_specular();
  inline void set_has_shininess();
  inline void clear_has_shininess();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSCH::Chart3DEmissiveMaterialArchive* emissive_;
  ::TSCH::Chart3DDiffuseMaterialArchive* diffuse_;
  ::TSCH::Chart3DModulateMaterialArchive* modulate_;
  ::TSCH::Chart3DSpecularMaterialArchive* specular_;
  ::TSCH::Chart3DShininessMaterialArchive* shininess_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_TSCH3DArchives_2eproto();
  friend void protobuf_AssignDesc_TSCH3DArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCH3DArchives_2eproto();

  void InitAsDefaultInstance();
  static Chart3DPhongMaterialPackageArchive* default_instance_;
};
// -------------------------------------------------------------------

class Chart3DTSPImageDataTextureArchive : public ::google::protobuf::Message {
 public:
  Chart3DTSPImageDataTextureArchive();
  virtual ~Chart3DTSPImageDataTextureArchive();

  Chart3DTSPImageDataTextureArchive(const Chart3DTSPImageDataTextureArchive& from);

  inline Chart3DTSPImageDataTextureArchive& operator=(const Chart3DTSPImageDataTextureArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Chart3DTSPImageDataTextureArchive& default_instance();

  void Swap(Chart3DTSPImageDataTextureArchive* other);

  // implements Message ----------------------------------------------

  Chart3DTSPImageDataTextureArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Chart3DTSPImageDataTextureArchive& from);
  void MergeFrom(const Chart3DTSPImageDataTextureArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .TSP.DataReference data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::TSP::DataReference& data() const;
  inline ::TSP::DataReference* mutable_data();
  inline ::TSP::DataReference* release_data();
  inline void set_allocated_data(::TSP::DataReference* data);

  // optional .TSP.DataReference mipmapdata = 4;
  inline bool has_mipmapdata() const;
  inline void clear_mipmapdata();
  static const int kMipmapdataFieldNumber = 4;
  inline const ::TSP::DataReference& mipmapdata() const;
  inline ::TSP::DataReference* mutable_mipmapdata();
  inline ::TSP::DataReference* release_mipmapdata();
  inline void set_allocated_mipmapdata(::TSP::DataReference* mipmapdata);

  // optional .TSP.Reference database_data = 1;
  inline bool has_database_data() const;
  inline void clear_database_data();
  static const int kDatabaseDataFieldNumber = 1;
  inline const ::TSP::Reference& database_data() const;
  inline ::TSP::Reference* mutable_database_data();
  inline ::TSP::Reference* release_database_data();
  inline void set_allocated_database_data(::TSP::Reference* database_data);

  // optional .TSP.Reference database_mipmapdata = 2;
  inline bool has_database_mipmapdata() const;
  inline void clear_database_mipmapdata();
  static const int kDatabaseMipmapdataFieldNumber = 2;
  inline const ::TSP::Reference& database_mipmapdata() const;
  inline ::TSP::Reference* mutable_database_mipmapdata();
  inline ::TSP::Reference* release_database_mipmapdata();
  inline void set_allocated_database_mipmapdata(::TSP::Reference* database_mipmapdata);

  // @@protoc_insertion_point(class_scope:TSCH.Chart3DTSPImageDataTextureArchive)
 private:
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_mipmapdata();
  inline void clear_has_mipmapdata();
  inline void set_has_database_data();
  inline void clear_has_database_data();
  inline void set_has_database_mipmapdata();
  inline void clear_has_database_mipmapdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSP::DataReference* data_;
  ::TSP::DataReference* mipmapdata_;
  ::TSP::Reference* database_data_;
  ::TSP::Reference* database_mipmapdata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_TSCH3DArchives_2eproto();
  friend void protobuf_AssignDesc_TSCH3DArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCH3DArchives_2eproto();

  void InitAsDefaultInstance();
  static Chart3DTSPImageDataTextureArchive* default_instance_;
};
// -------------------------------------------------------------------

class Chart3DBaseImageTextureTilingArchive : public ::google::protobuf::Message {
 public:
  Chart3DBaseImageTextureTilingArchive();
  virtual ~Chart3DBaseImageTextureTilingArchive();

  Chart3DBaseImageTextureTilingArchive(const Chart3DBaseImageTextureTilingArchive& from);

  inline Chart3DBaseImageTextureTilingArchive& operator=(const Chart3DBaseImageTextureTilingArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Chart3DBaseImageTextureTilingArchive& default_instance();

  void Swap(Chart3DBaseImageTextureTilingArchive* other);

  // implements Message ----------------------------------------------

  Chart3DBaseImageTextureTilingArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Chart3DBaseImageTextureTilingArchive& from);
  void MergeFrom(const Chart3DBaseImageTextureTilingArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .TSCH.Chart3DVectorArchive scale = 1;
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 1;
  inline const ::TSCH::Chart3DVectorArchive& scale() const;
  inline ::TSCH::Chart3DVectorArchive* mutable_scale();
  inline ::TSCH::Chart3DVectorArchive* release_scale();
  inline void set_allocated_scale(::TSCH::Chart3DVectorArchive* scale);

  // optional float rotation = 2;
  inline bool has_rotation() const;
  inline void clear_rotation();
  static const int kRotationFieldNumber = 2;
  inline float rotation() const;
  inline void set_rotation(float value);

  // @@protoc_insertion_point(class_scope:TSCH.Chart3DBaseImageTextureTilingArchive)
 private:
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_rotation();
  inline void clear_has_rotation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSCH::Chart3DVectorArchive* scale_;
  float rotation_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_TSCH3DArchives_2eproto();
  friend void protobuf_AssignDesc_TSCH3DArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCH3DArchives_2eproto();

  void InitAsDefaultInstance();
  static Chart3DBaseImageTextureTilingArchive* default_instance_;
};
// -------------------------------------------------------------------

class Chart3DImageTextureTilingArchive : public ::google::protobuf::Message {
 public:
  Chart3DImageTextureTilingArchive();
  virtual ~Chart3DImageTextureTilingArchive();

  Chart3DImageTextureTilingArchive(const Chart3DImageTextureTilingArchive& from);

  inline Chart3DImageTextureTilingArchive& operator=(const Chart3DImageTextureTilingArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Chart3DImageTextureTilingArchive& default_instance();

  void Swap(Chart3DImageTextureTilingArchive* other);

  // implements Message ----------------------------------------------

  Chart3DImageTextureTilingArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Chart3DImageTextureTilingArchive& from);
  void MergeFrom(const Chart3DImageTextureTilingArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSCH.Chart3DBaseImageTextureTilingArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSCH::Chart3DBaseImageTextureTilingArchive& super() const;
  inline ::TSCH::Chart3DBaseImageTextureTilingArchive* mutable_super();
  inline ::TSCH::Chart3DBaseImageTextureTilingArchive* release_super();
  inline void set_allocated_super(::TSCH::Chart3DBaseImageTextureTilingArchive* super);

  // optional .TSCH.TextureTilingMode mode = 2;
  inline bool has_mode() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 2;
  inline ::TSCH::TextureTilingMode mode() const;
  inline void set_mode(::TSCH::TextureTilingMode value);

  // optional .TSCH.TextureTilingWrap wrap = 3;
  inline bool has_wrap() const;
  inline void clear_wrap();
  static const int kWrapFieldNumber = 3;
  inline ::TSCH::TextureTilingWrap wrap() const;
  inline void set_wrap(::TSCH::TextureTilingWrap value);

  // optional .TSCH.TextureTilingFace face = 4;
  inline bool has_face() const;
  inline void clear_face();
  static const int kFaceFieldNumber = 4;
  inline ::TSCH::TextureTilingFace face() const;
  inline void set_face(::TSCH::TextureTilingFace value);

  // optional .TSCH.TextureTilingXPosition xposition = 5;
  inline bool has_xposition() const;
  inline void clear_xposition();
  static const int kXpositionFieldNumber = 5;
  inline ::TSCH::TextureTilingXPosition xposition() const;
  inline void set_xposition(::TSCH::TextureTilingXPosition value);

  // optional .TSCH.TextureTilingYPosition yposition = 6;
  inline bool has_yposition() const;
  inline void clear_yposition();
  static const int kYpositionFieldNumber = 6;
  inline ::TSCH::TextureTilingYPosition yposition() const;
  inline void set_yposition(::TSCH::TextureTilingYPosition value);

  // optional .TSCH.TextureTilingContinuity scontinuity = 7;
  inline bool has_scontinuity() const;
  inline void clear_scontinuity();
  static const int kScontinuityFieldNumber = 7;
  inline ::TSCH::TextureTilingContinuity scontinuity() const;
  inline void set_scontinuity(::TSCH::TextureTilingContinuity value);

  // optional .TSCH.TextureTilingContinuity tcontinuity = 8;
  inline bool has_tcontinuity() const;
  inline void clear_tcontinuity();
  static const int kTcontinuityFieldNumber = 8;
  inline ::TSCH::TextureTilingContinuity tcontinuity() const;
  inline void set_tcontinuity(::TSCH::TextureTilingContinuity value);

  // optional bool reveal = 9;
  inline bool has_reveal() const;
  inline void clear_reveal();
  static const int kRevealFieldNumber = 9;
  inline bool reveal() const;
  inline void set_reveal(bool value);

  // @@protoc_insertion_point(class_scope:TSCH.Chart3DImageTextureTilingArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();
  inline void set_has_mode();
  inline void clear_has_mode();
  inline void set_has_wrap();
  inline void clear_has_wrap();
  inline void set_has_face();
  inline void clear_has_face();
  inline void set_has_xposition();
  inline void clear_has_xposition();
  inline void set_has_yposition();
  inline void clear_has_yposition();
  inline void set_has_scontinuity();
  inline void clear_has_scontinuity();
  inline void set_has_tcontinuity();
  inline void clear_has_tcontinuity();
  inline void set_has_reveal();
  inline void clear_has_reveal();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSCH::Chart3DBaseImageTextureTilingArchive* super_;
  int mode_;
  int wrap_;
  int face_;
  int xposition_;
  int yposition_;
  int scontinuity_;
  int tcontinuity_;
  bool reveal_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_TSCH3DArchives_2eproto();
  friend void protobuf_AssignDesc_TSCH3DArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCH3DArchives_2eproto();

  void InitAsDefaultInstance();
  static Chart3DImageTextureTilingArchive* default_instance_;
};
// -------------------------------------------------------------------

class Chart3DVectorArchive : public ::google::protobuf::Message {
 public:
  Chart3DVectorArchive();
  virtual ~Chart3DVectorArchive();

  Chart3DVectorArchive(const Chart3DVectorArchive& from);

  inline Chart3DVectorArchive& operator=(const Chart3DVectorArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Chart3DVectorArchive& default_instance();

  void Swap(Chart3DVectorArchive* other);

  // implements Message ----------------------------------------------

  Chart3DVectorArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Chart3DVectorArchive& from);
  void MergeFrom(const Chart3DVectorArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // required float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);

  // required float w = 4;
  inline bool has_w() const;
  inline void clear_w();
  static const int kWFieldNumber = 4;
  inline float w() const;
  inline void set_w(float value);

  // @@protoc_insertion_point(class_scope:TSCH.Chart3DVectorArchive)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_w();
  inline void clear_has_w();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float x_;
  float y_;
  float z_;
  float w_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_TSCH3DArchives_2eproto();
  friend void protobuf_AssignDesc_TSCH3DArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCH3DArchives_2eproto();

  void InitAsDefaultInstance();
  static Chart3DVectorArchive* default_instance_;
};
// ===================================================================

static const int kFill3DFieldNumber = 100;
extern ::google::protobuf::internal::ExtensionIdentifier< ::TSD::FillArchive,
    ::google::protobuf::internal::MessageTypeTraits< ::TSCH::Chart3DFillArchive >, 11, false >
  fill3d;

// ===================================================================

// Chart3DEnvironmentPackageArchive

// repeated .TSCH.Chart3DEnvironmentMaterialArchive materials = 1;
inline int Chart3DEnvironmentPackageArchive::materials_size() const {
  return materials_.size();
}
inline void Chart3DEnvironmentPackageArchive::clear_materials() {
  materials_.Clear();
}
inline const ::TSCH::Chart3DEnvironmentMaterialArchive& Chart3DEnvironmentPackageArchive::materials(int index) const {
  return materials_.Get(index);
}
inline ::TSCH::Chart3DEnvironmentMaterialArchive* Chart3DEnvironmentPackageArchive::mutable_materials(int index) {
  return materials_.Mutable(index);
}
inline ::TSCH::Chart3DEnvironmentMaterialArchive* Chart3DEnvironmentPackageArchive::add_materials() {
  return materials_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSCH::Chart3DEnvironmentMaterialArchive >&
Chart3DEnvironmentPackageArchive::materials() const {
  return materials_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSCH::Chart3DEnvironmentMaterialArchive >*
Chart3DEnvironmentPackageArchive::mutable_materials() {
  return &materials_;
}

// -------------------------------------------------------------------

// Chart3DFillArchive

// optional .TSCH.Chart3DLightingModelArchive lightingmodel = 1;
inline bool Chart3DFillArchive::has_lightingmodel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Chart3DFillArchive::set_has_lightingmodel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Chart3DFillArchive::clear_has_lightingmodel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Chart3DFillArchive::clear_lightingmodel() {
  if (lightingmodel_ != NULL) lightingmodel_->::TSCH::Chart3DLightingModelArchive::Clear();
  clear_has_lightingmodel();
}
inline const ::TSCH::Chart3DLightingModelArchive& Chart3DFillArchive::lightingmodel() const {
  return lightingmodel_ != NULL ? *lightingmodel_ : *default_instance_->lightingmodel_;
}
inline ::TSCH::Chart3DLightingModelArchive* Chart3DFillArchive::mutable_lightingmodel() {
  set_has_lightingmodel();
  if (lightingmodel_ == NULL) lightingmodel_ = new ::TSCH::Chart3DLightingModelArchive;
  return lightingmodel_;
}
inline ::TSCH::Chart3DLightingModelArchive* Chart3DFillArchive::release_lightingmodel() {
  clear_has_lightingmodel();
  ::TSCH::Chart3DLightingModelArchive* temp = lightingmodel_;
  lightingmodel_ = NULL;
  return temp;
}
inline void Chart3DFillArchive::set_allocated_lightingmodel(::TSCH::Chart3DLightingModelArchive* lightingmodel) {
  delete lightingmodel_;
  lightingmodel_ = lightingmodel;
  if (lightingmodel) {
    set_has_lightingmodel();
  } else {
    clear_has_lightingmodel();
  }
}

// optional string textureset_id = 2;
inline bool Chart3DFillArchive::has_textureset_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Chart3DFillArchive::set_has_textureset_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Chart3DFillArchive::clear_has_textureset_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Chart3DFillArchive::clear_textureset_id() {
  if (textureset_id_ != &::google::protobuf::internal::kEmptyString) {
    textureset_id_->clear();
  }
  clear_has_textureset_id();
}
inline const ::std::string& Chart3DFillArchive::textureset_id() const {
  return *textureset_id_;
}
inline void Chart3DFillArchive::set_textureset_id(const ::std::string& value) {
  set_has_textureset_id();
  if (textureset_id_ == &::google::protobuf::internal::kEmptyString) {
    textureset_id_ = new ::std::string;
  }
  textureset_id_->assign(value);
}
inline void Chart3DFillArchive::set_textureset_id(const char* value) {
  set_has_textureset_id();
  if (textureset_id_ == &::google::protobuf::internal::kEmptyString) {
    textureset_id_ = new ::std::string;
  }
  textureset_id_->assign(value);
}
inline void Chart3DFillArchive::set_textureset_id(const char* value, size_t size) {
  set_has_textureset_id();
  if (textureset_id_ == &::google::protobuf::internal::kEmptyString) {
    textureset_id_ = new ::std::string;
  }
  textureset_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Chart3DFillArchive::mutable_textureset_id() {
  set_has_textureset_id();
  if (textureset_id_ == &::google::protobuf::internal::kEmptyString) {
    textureset_id_ = new ::std::string;
  }
  return textureset_id_;
}
inline ::std::string* Chart3DFillArchive::release_textureset_id() {
  clear_has_textureset_id();
  if (textureset_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = textureset_id_;
    textureset_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Chart3DFillArchive::set_allocated_textureset_id(::std::string* textureset_id) {
  if (textureset_id_ != &::google::protobuf::internal::kEmptyString) {
    delete textureset_id_;
  }
  if (textureset_id) {
    set_has_textureset_id();
    textureset_id_ = textureset_id;
  } else {
    clear_has_textureset_id();
    textureset_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .TSCH.FillPropertyType fill_type = 3;
inline bool Chart3DFillArchive::has_fill_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Chart3DFillArchive::set_has_fill_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Chart3DFillArchive::clear_has_fill_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Chart3DFillArchive::clear_fill_type() {
  fill_type_ = 0;
  clear_has_fill_type();
}
inline ::TSCH::FillPropertyType Chart3DFillArchive::fill_type() const {
  return static_cast< ::TSCH::FillPropertyType >(fill_type_);
}
inline void Chart3DFillArchive::set_fill_type(::TSCH::FillPropertyType value) {
  assert(::TSCH::FillPropertyType_IsValid(value));
  set_has_fill_type();
  fill_type_ = value;
}

// optional uint32 series_index = 4;
inline bool Chart3DFillArchive::has_series_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Chart3DFillArchive::set_has_series_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Chart3DFillArchive::clear_has_series_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Chart3DFillArchive::clear_series_index() {
  series_index_ = 0u;
  clear_has_series_index();
}
inline ::google::protobuf::uint32 Chart3DFillArchive::series_index() const {
  return series_index_;
}
inline void Chart3DFillArchive::set_series_index(::google::protobuf::uint32 value) {
  set_has_series_index();
  series_index_ = value;
}

// -------------------------------------------------------------------

// Chart3DPointLightArchive

// required .TSCH.Chart3DVectorArchive position = 1;
inline bool Chart3DPointLightArchive::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Chart3DPointLightArchive::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Chart3DPointLightArchive::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Chart3DPointLightArchive::clear_position() {
  if (position_ != NULL) position_->::TSCH::Chart3DVectorArchive::Clear();
  clear_has_position();
}
inline const ::TSCH::Chart3DVectorArchive& Chart3DPointLightArchive::position() const {
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::TSCH::Chart3DVectorArchive* Chart3DPointLightArchive::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::TSCH::Chart3DVectorArchive;
  return position_;
}
inline ::TSCH::Chart3DVectorArchive* Chart3DPointLightArchive::release_position() {
  clear_has_position();
  ::TSCH::Chart3DVectorArchive* temp = position_;
  position_ = NULL;
  return temp;
}
inline void Chart3DPointLightArchive::set_allocated_position(::TSCH::Chart3DVectorArchive* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
}

// -------------------------------------------------------------------

// Chart3DDirectionalLightArchive

// required .TSCH.Chart3DVectorArchive direction = 1;
inline bool Chart3DDirectionalLightArchive::has_direction() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Chart3DDirectionalLightArchive::set_has_direction() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Chart3DDirectionalLightArchive::clear_has_direction() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Chart3DDirectionalLightArchive::clear_direction() {
  if (direction_ != NULL) direction_->::TSCH::Chart3DVectorArchive::Clear();
  clear_has_direction();
}
inline const ::TSCH::Chart3DVectorArchive& Chart3DDirectionalLightArchive::direction() const {
  return direction_ != NULL ? *direction_ : *default_instance_->direction_;
}
inline ::TSCH::Chart3DVectorArchive* Chart3DDirectionalLightArchive::mutable_direction() {
  set_has_direction();
  if (direction_ == NULL) direction_ = new ::TSCH::Chart3DVectorArchive;
  return direction_;
}
inline ::TSCH::Chart3DVectorArchive* Chart3DDirectionalLightArchive::release_direction() {
  clear_has_direction();
  ::TSCH::Chart3DVectorArchive* temp = direction_;
  direction_ = NULL;
  return temp;
}
inline void Chart3DDirectionalLightArchive::set_allocated_direction(::TSCH::Chart3DVectorArchive* direction) {
  delete direction_;
  direction_ = direction;
  if (direction) {
    set_has_direction();
  } else {
    clear_has_direction();
  }
}

// -------------------------------------------------------------------

// Chart3DSpotLightArchive

// required .TSCH.Chart3DVectorArchive position = 1;
inline bool Chart3DSpotLightArchive::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Chart3DSpotLightArchive::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Chart3DSpotLightArchive::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Chart3DSpotLightArchive::clear_position() {
  if (position_ != NULL) position_->::TSCH::Chart3DVectorArchive::Clear();
  clear_has_position();
}
inline const ::TSCH::Chart3DVectorArchive& Chart3DSpotLightArchive::position() const {
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::TSCH::Chart3DVectorArchive* Chart3DSpotLightArchive::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::TSCH::Chart3DVectorArchive;
  return position_;
}
inline ::TSCH::Chart3DVectorArchive* Chart3DSpotLightArchive::release_position() {
  clear_has_position();
  ::TSCH::Chart3DVectorArchive* temp = position_;
  position_ = NULL;
  return temp;
}
inline void Chart3DSpotLightArchive::set_allocated_position(::TSCH::Chart3DVectorArchive* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
}

// required .TSCH.Chart3DVectorArchive direction = 2;
inline bool Chart3DSpotLightArchive::has_direction() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Chart3DSpotLightArchive::set_has_direction() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Chart3DSpotLightArchive::clear_has_direction() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Chart3DSpotLightArchive::clear_direction() {
  if (direction_ != NULL) direction_->::TSCH::Chart3DVectorArchive::Clear();
  clear_has_direction();
}
inline const ::TSCH::Chart3DVectorArchive& Chart3DSpotLightArchive::direction() const {
  return direction_ != NULL ? *direction_ : *default_instance_->direction_;
}
inline ::TSCH::Chart3DVectorArchive* Chart3DSpotLightArchive::mutable_direction() {
  set_has_direction();
  if (direction_ == NULL) direction_ = new ::TSCH::Chart3DVectorArchive;
  return direction_;
}
inline ::TSCH::Chart3DVectorArchive* Chart3DSpotLightArchive::release_direction() {
  clear_has_direction();
  ::TSCH::Chart3DVectorArchive* temp = direction_;
  direction_ = NULL;
  return temp;
}
inline void Chart3DSpotLightArchive::set_allocated_direction(::TSCH::Chart3DVectorArchive* direction) {
  delete direction_;
  direction_ = direction;
  if (direction) {
    set_has_direction();
  } else {
    clear_has_direction();
  }
}

// required float cutoff = 3;
inline bool Chart3DSpotLightArchive::has_cutoff() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Chart3DSpotLightArchive::set_has_cutoff() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Chart3DSpotLightArchive::clear_has_cutoff() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Chart3DSpotLightArchive::clear_cutoff() {
  cutoff_ = 0;
  clear_has_cutoff();
}
inline float Chart3DSpotLightArchive::cutoff() const {
  return cutoff_;
}
inline void Chart3DSpotLightArchive::set_cutoff(float value) {
  set_has_cutoff();
  cutoff_ = value;
}

// required float dropoff = 4;
inline bool Chart3DSpotLightArchive::has_dropoff() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Chart3DSpotLightArchive::set_has_dropoff() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Chart3DSpotLightArchive::clear_has_dropoff() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Chart3DSpotLightArchive::clear_dropoff() {
  dropoff_ = 0;
  clear_has_dropoff();
}
inline float Chart3DSpotLightArchive::dropoff() const {
  return dropoff_;
}
inline void Chart3DSpotLightArchive::set_dropoff(float value) {
  set_has_dropoff();
  dropoff_ = value;
}

// -------------------------------------------------------------------

// Chart3DLightArchive

// required string name = 1;
inline bool Chart3DLightArchive::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Chart3DLightArchive::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Chart3DLightArchive::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Chart3DLightArchive::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Chart3DLightArchive::name() const {
  return *name_;
}
inline void Chart3DLightArchive::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Chart3DLightArchive::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Chart3DLightArchive::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Chart3DLightArchive::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Chart3DLightArchive::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Chart3DLightArchive::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .TSCH.Chart3DVectorArchive ambient_color = 2;
inline bool Chart3DLightArchive::has_ambient_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Chart3DLightArchive::set_has_ambient_color() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Chart3DLightArchive::clear_has_ambient_color() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Chart3DLightArchive::clear_ambient_color() {
  if (ambient_color_ != NULL) ambient_color_->::TSCH::Chart3DVectorArchive::Clear();
  clear_has_ambient_color();
}
inline const ::TSCH::Chart3DVectorArchive& Chart3DLightArchive::ambient_color() const {
  return ambient_color_ != NULL ? *ambient_color_ : *default_instance_->ambient_color_;
}
inline ::TSCH::Chart3DVectorArchive* Chart3DLightArchive::mutable_ambient_color() {
  set_has_ambient_color();
  if (ambient_color_ == NULL) ambient_color_ = new ::TSCH::Chart3DVectorArchive;
  return ambient_color_;
}
inline ::TSCH::Chart3DVectorArchive* Chart3DLightArchive::release_ambient_color() {
  clear_has_ambient_color();
  ::TSCH::Chart3DVectorArchive* temp = ambient_color_;
  ambient_color_ = NULL;
  return temp;
}
inline void Chart3DLightArchive::set_allocated_ambient_color(::TSCH::Chart3DVectorArchive* ambient_color) {
  delete ambient_color_;
  ambient_color_ = ambient_color;
  if (ambient_color) {
    set_has_ambient_color();
  } else {
    clear_has_ambient_color();
  }
}

// required .TSCH.Chart3DVectorArchive diffuse_color = 3;
inline bool Chart3DLightArchive::has_diffuse_color() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Chart3DLightArchive::set_has_diffuse_color() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Chart3DLightArchive::clear_has_diffuse_color() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Chart3DLightArchive::clear_diffuse_color() {
  if (diffuse_color_ != NULL) diffuse_color_->::TSCH::Chart3DVectorArchive::Clear();
  clear_has_diffuse_color();
}
inline const ::TSCH::Chart3DVectorArchive& Chart3DLightArchive::diffuse_color() const {
  return diffuse_color_ != NULL ? *diffuse_color_ : *default_instance_->diffuse_color_;
}
inline ::TSCH::Chart3DVectorArchive* Chart3DLightArchive::mutable_diffuse_color() {
  set_has_diffuse_color();
  if (diffuse_color_ == NULL) diffuse_color_ = new ::TSCH::Chart3DVectorArchive;
  return diffuse_color_;
}
inline ::TSCH::Chart3DVectorArchive* Chart3DLightArchive::release_diffuse_color() {
  clear_has_diffuse_color();
  ::TSCH::Chart3DVectorArchive* temp = diffuse_color_;
  diffuse_color_ = NULL;
  return temp;
}
inline void Chart3DLightArchive::set_allocated_diffuse_color(::TSCH::Chart3DVectorArchive* diffuse_color) {
  delete diffuse_color_;
  diffuse_color_ = diffuse_color;
  if (diffuse_color) {
    set_has_diffuse_color();
  } else {
    clear_has_diffuse_color();
  }
}

// required .TSCH.Chart3DVectorArchive specular_color = 4;
inline bool Chart3DLightArchive::has_specular_color() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Chart3DLightArchive::set_has_specular_color() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Chart3DLightArchive::clear_has_specular_color() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Chart3DLightArchive::clear_specular_color() {
  if (specular_color_ != NULL) specular_color_->::TSCH::Chart3DVectorArchive::Clear();
  clear_has_specular_color();
}
inline const ::TSCH::Chart3DVectorArchive& Chart3DLightArchive::specular_color() const {
  return specular_color_ != NULL ? *specular_color_ : *default_instance_->specular_color_;
}
inline ::TSCH::Chart3DVectorArchive* Chart3DLightArchive::mutable_specular_color() {
  set_has_specular_color();
  if (specular_color_ == NULL) specular_color_ = new ::TSCH::Chart3DVectorArchive;
  return specular_color_;
}
inline ::TSCH::Chart3DVectorArchive* Chart3DLightArchive::release_specular_color() {
  clear_has_specular_color();
  ::TSCH::Chart3DVectorArchive* temp = specular_color_;
  specular_color_ = NULL;
  return temp;
}
inline void Chart3DLightArchive::set_allocated_specular_color(::TSCH::Chart3DVectorArchive* specular_color) {
  delete specular_color_;
  specular_color_ = specular_color;
  if (specular_color) {
    set_has_specular_color();
  } else {
    clear_has_specular_color();
  }
}

// required float intensity = 5;
inline bool Chart3DLightArchive::has_intensity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Chart3DLightArchive::set_has_intensity() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Chart3DLightArchive::clear_has_intensity() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Chart3DLightArchive::clear_intensity() {
  intensity_ = 0;
  clear_has_intensity();
}
inline float Chart3DLightArchive::intensity() const {
  return intensity_;
}
inline void Chart3DLightArchive::set_intensity(float value) {
  set_has_intensity();
  intensity_ = value;
}

// required .TSCH.Chart3DVectorArchive attenuation = 6;
inline bool Chart3DLightArchive::has_attenuation() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Chart3DLightArchive::set_has_attenuation() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Chart3DLightArchive::clear_has_attenuation() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Chart3DLightArchive::clear_attenuation() {
  if (attenuation_ != NULL) attenuation_->::TSCH::Chart3DVectorArchive::Clear();
  clear_has_attenuation();
}
inline const ::TSCH::Chart3DVectorArchive& Chart3DLightArchive::attenuation() const {
  return attenuation_ != NULL ? *attenuation_ : *default_instance_->attenuation_;
}
inline ::TSCH::Chart3DVectorArchive* Chart3DLightArchive::mutable_attenuation() {
  set_has_attenuation();
  if (attenuation_ == NULL) attenuation_ = new ::TSCH::Chart3DVectorArchive;
  return attenuation_;
}
inline ::TSCH::Chart3DVectorArchive* Chart3DLightArchive::release_attenuation() {
  clear_has_attenuation();
  ::TSCH::Chart3DVectorArchive* temp = attenuation_;
  attenuation_ = NULL;
  return temp;
}
inline void Chart3DLightArchive::set_allocated_attenuation(::TSCH::Chart3DVectorArchive* attenuation) {
  delete attenuation_;
  attenuation_ = attenuation;
  if (attenuation) {
    set_has_attenuation();
  } else {
    clear_has_attenuation();
  }
}

// required uint32 coordinate_space = 7;
inline bool Chart3DLightArchive::has_coordinate_space() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Chart3DLightArchive::set_has_coordinate_space() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Chart3DLightArchive::clear_has_coordinate_space() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Chart3DLightArchive::clear_coordinate_space() {
  coordinate_space_ = 0u;
  clear_has_coordinate_space();
}
inline ::google::protobuf::uint32 Chart3DLightArchive::coordinate_space() const {
  return coordinate_space_;
}
inline void Chart3DLightArchive::set_coordinate_space(::google::protobuf::uint32 value) {
  set_has_coordinate_space();
  coordinate_space_ = value;
}

// required bool enabled = 8;
inline bool Chart3DLightArchive::has_enabled() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Chart3DLightArchive::set_has_enabled() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Chart3DLightArchive::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Chart3DLightArchive::clear_enabled() {
  enabled_ = false;
  clear_has_enabled();
}
inline bool Chart3DLightArchive::enabled() const {
  return enabled_;
}
inline void Chart3DLightArchive::set_enabled(bool value) {
  set_has_enabled();
  enabled_ = value;
}

// optional .TSCH.Chart3DPointLightArchive point_light = 9;
inline bool Chart3DLightArchive::has_point_light() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Chart3DLightArchive::set_has_point_light() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Chart3DLightArchive::clear_has_point_light() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Chart3DLightArchive::clear_point_light() {
  if (point_light_ != NULL) point_light_->::TSCH::Chart3DPointLightArchive::Clear();
  clear_has_point_light();
}
inline const ::TSCH::Chart3DPointLightArchive& Chart3DLightArchive::point_light() const {
  return point_light_ != NULL ? *point_light_ : *default_instance_->point_light_;
}
inline ::TSCH::Chart3DPointLightArchive* Chart3DLightArchive::mutable_point_light() {
  set_has_point_light();
  if (point_light_ == NULL) point_light_ = new ::TSCH::Chart3DPointLightArchive;
  return point_light_;
}
inline ::TSCH::Chart3DPointLightArchive* Chart3DLightArchive::release_point_light() {
  clear_has_point_light();
  ::TSCH::Chart3DPointLightArchive* temp = point_light_;
  point_light_ = NULL;
  return temp;
}
inline void Chart3DLightArchive::set_allocated_point_light(::TSCH::Chart3DPointLightArchive* point_light) {
  delete point_light_;
  point_light_ = point_light;
  if (point_light) {
    set_has_point_light();
  } else {
    clear_has_point_light();
  }
}

// optional .TSCH.Chart3DDirectionalLightArchive directional_light = 10;
inline bool Chart3DLightArchive::has_directional_light() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Chart3DLightArchive::set_has_directional_light() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Chart3DLightArchive::clear_has_directional_light() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Chart3DLightArchive::clear_directional_light() {
  if (directional_light_ != NULL) directional_light_->::TSCH::Chart3DDirectionalLightArchive::Clear();
  clear_has_directional_light();
}
inline const ::TSCH::Chart3DDirectionalLightArchive& Chart3DLightArchive::directional_light() const {
  return directional_light_ != NULL ? *directional_light_ : *default_instance_->directional_light_;
}
inline ::TSCH::Chart3DDirectionalLightArchive* Chart3DLightArchive::mutable_directional_light() {
  set_has_directional_light();
  if (directional_light_ == NULL) directional_light_ = new ::TSCH::Chart3DDirectionalLightArchive;
  return directional_light_;
}
inline ::TSCH::Chart3DDirectionalLightArchive* Chart3DLightArchive::release_directional_light() {
  clear_has_directional_light();
  ::TSCH::Chart3DDirectionalLightArchive* temp = directional_light_;
  directional_light_ = NULL;
  return temp;
}
inline void Chart3DLightArchive::set_allocated_directional_light(::TSCH::Chart3DDirectionalLightArchive* directional_light) {
  delete directional_light_;
  directional_light_ = directional_light;
  if (directional_light) {
    set_has_directional_light();
  } else {
    clear_has_directional_light();
  }
}

// optional .TSCH.Chart3DSpotLightArchive spot_light = 11;
inline bool Chart3DLightArchive::has_spot_light() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Chart3DLightArchive::set_has_spot_light() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Chart3DLightArchive::clear_has_spot_light() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Chart3DLightArchive::clear_spot_light() {
  if (spot_light_ != NULL) spot_light_->::TSCH::Chart3DSpotLightArchive::Clear();
  clear_has_spot_light();
}
inline const ::TSCH::Chart3DSpotLightArchive& Chart3DLightArchive::spot_light() const {
  return spot_light_ != NULL ? *spot_light_ : *default_instance_->spot_light_;
}
inline ::TSCH::Chart3DSpotLightArchive* Chart3DLightArchive::mutable_spot_light() {
  set_has_spot_light();
  if (spot_light_ == NULL) spot_light_ = new ::TSCH::Chart3DSpotLightArchive;
  return spot_light_;
}
inline ::TSCH::Chart3DSpotLightArchive* Chart3DLightArchive::release_spot_light() {
  clear_has_spot_light();
  ::TSCH::Chart3DSpotLightArchive* temp = spot_light_;
  spot_light_ = NULL;
  return temp;
}
inline void Chart3DLightArchive::set_allocated_spot_light(::TSCH::Chart3DSpotLightArchive* spot_light) {
  delete spot_light_;
  spot_light_ = spot_light;
  if (spot_light) {
    set_has_spot_light();
  } else {
    clear_has_spot_light();
  }
}

// -------------------------------------------------------------------

// Chart3DLightingModelArchive

// optional .TSCH.Chart3DPhongLightingModelArchive phong = 1;
inline bool Chart3DLightingModelArchive::has_phong() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Chart3DLightingModelArchive::set_has_phong() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Chart3DLightingModelArchive::clear_has_phong() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Chart3DLightingModelArchive::clear_phong() {
  if (phong_ != NULL) phong_->::TSCH::Chart3DPhongLightingModelArchive::Clear();
  clear_has_phong();
}
inline const ::TSCH::Chart3DPhongLightingModelArchive& Chart3DLightingModelArchive::phong() const {
  return phong_ != NULL ? *phong_ : *default_instance_->phong_;
}
inline ::TSCH::Chart3DPhongLightingModelArchive* Chart3DLightingModelArchive::mutable_phong() {
  set_has_phong();
  if (phong_ == NULL) phong_ = new ::TSCH::Chart3DPhongLightingModelArchive;
  return phong_;
}
inline ::TSCH::Chart3DPhongLightingModelArchive* Chart3DLightingModelArchive::release_phong() {
  clear_has_phong();
  ::TSCH::Chart3DPhongLightingModelArchive* temp = phong_;
  phong_ = NULL;
  return temp;
}
inline void Chart3DLightingModelArchive::set_allocated_phong(::TSCH::Chart3DPhongLightingModelArchive* phong) {
  delete phong_;
  phong_ = phong;
  if (phong) {
    set_has_phong();
  } else {
    clear_has_phong();
  }
}

// optional .TSCH.Chart3DFixedFunctionLightingModelArchive fixed_function = 2;
inline bool Chart3DLightingModelArchive::has_fixed_function() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Chart3DLightingModelArchive::set_has_fixed_function() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Chart3DLightingModelArchive::clear_has_fixed_function() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Chart3DLightingModelArchive::clear_fixed_function() {
  if (fixed_function_ != NULL) fixed_function_->::TSCH::Chart3DFixedFunctionLightingModelArchive::Clear();
  clear_has_fixed_function();
}
inline const ::TSCH::Chart3DFixedFunctionLightingModelArchive& Chart3DLightingModelArchive::fixed_function() const {
  return fixed_function_ != NULL ? *fixed_function_ : *default_instance_->fixed_function_;
}
inline ::TSCH::Chart3DFixedFunctionLightingModelArchive* Chart3DLightingModelArchive::mutable_fixed_function() {
  set_has_fixed_function();
  if (fixed_function_ == NULL) fixed_function_ = new ::TSCH::Chart3DFixedFunctionLightingModelArchive;
  return fixed_function_;
}
inline ::TSCH::Chart3DFixedFunctionLightingModelArchive* Chart3DLightingModelArchive::release_fixed_function() {
  clear_has_fixed_function();
  ::TSCH::Chart3DFixedFunctionLightingModelArchive* temp = fixed_function_;
  fixed_function_ = NULL;
  return temp;
}
inline void Chart3DLightingModelArchive::set_allocated_fixed_function(::TSCH::Chart3DFixedFunctionLightingModelArchive* fixed_function) {
  delete fixed_function_;
  fixed_function_ = fixed_function;
  if (fixed_function) {
    set_has_fixed_function();
  } else {
    clear_has_fixed_function();
  }
}

// optional .TSCH.Chart3DEnvironmentPackageArchive environment = 3;
inline bool Chart3DLightingModelArchive::has_environment() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Chart3DLightingModelArchive::set_has_environment() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Chart3DLightingModelArchive::clear_has_environment() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Chart3DLightingModelArchive::clear_environment() {
  if (environment_ != NULL) environment_->::TSCH::Chart3DEnvironmentPackageArchive::Clear();
  clear_has_environment();
}
inline const ::TSCH::Chart3DEnvironmentPackageArchive& Chart3DLightingModelArchive::environment() const {
  return environment_ != NULL ? *environment_ : *default_instance_->environment_;
}
inline ::TSCH::Chart3DEnvironmentPackageArchive* Chart3DLightingModelArchive::mutable_environment() {
  set_has_environment();
  if (environment_ == NULL) environment_ = new ::TSCH::Chart3DEnvironmentPackageArchive;
  return environment_;
}
inline ::TSCH::Chart3DEnvironmentPackageArchive* Chart3DLightingModelArchive::release_environment() {
  clear_has_environment();
  ::TSCH::Chart3DEnvironmentPackageArchive* temp = environment_;
  environment_ = NULL;
  return temp;
}
inline void Chart3DLightingModelArchive::set_allocated_environment(::TSCH::Chart3DEnvironmentPackageArchive* environment) {
  delete environment_;
  environment_ = environment;
  if (environment) {
    set_has_environment();
  } else {
    clear_has_environment();
  }
}

// -------------------------------------------------------------------

// Chart3DLightingPackageArchive

// required string name = 1;
inline bool Chart3DLightingPackageArchive::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Chart3DLightingPackageArchive::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Chart3DLightingPackageArchive::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Chart3DLightingPackageArchive::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Chart3DLightingPackageArchive::name() const {
  return *name_;
}
inline void Chart3DLightingPackageArchive::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Chart3DLightingPackageArchive::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Chart3DLightingPackageArchive::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Chart3DLightingPackageArchive::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Chart3DLightingPackageArchive::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Chart3DLightingPackageArchive::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .TSCH.Chart3DLightArchive lights = 2;
inline int Chart3DLightingPackageArchive::lights_size() const {
  return lights_.size();
}
inline void Chart3DLightingPackageArchive::clear_lights() {
  lights_.Clear();
}
inline const ::TSCH::Chart3DLightArchive& Chart3DLightingPackageArchive::lights(int index) const {
  return lights_.Get(index);
}
inline ::TSCH::Chart3DLightArchive* Chart3DLightingPackageArchive::mutable_lights(int index) {
  return lights_.Mutable(index);
}
inline ::TSCH::Chart3DLightArchive* Chart3DLightingPackageArchive::add_lights() {
  return lights_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSCH::Chart3DLightArchive >&
Chart3DLightingPackageArchive::lights() const {
  return lights_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSCH::Chart3DLightArchive >*
Chart3DLightingPackageArchive::mutable_lights() {
  return &lights_;
}

// -------------------------------------------------------------------

// Chart3DTexturesMaterialArchive

// required .TSCH.Chart3DVectorArchive color = 1;
inline bool Chart3DTexturesMaterialArchive::has_color() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Chart3DTexturesMaterialArchive::set_has_color() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Chart3DTexturesMaterialArchive::clear_has_color() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Chart3DTexturesMaterialArchive::clear_color() {
  if (color_ != NULL) color_->::TSCH::Chart3DVectorArchive::Clear();
  clear_has_color();
}
inline const ::TSCH::Chart3DVectorArchive& Chart3DTexturesMaterialArchive::color() const {
  return color_ != NULL ? *color_ : *default_instance_->color_;
}
inline ::TSCH::Chart3DVectorArchive* Chart3DTexturesMaterialArchive::mutable_color() {
  set_has_color();
  if (color_ == NULL) color_ = new ::TSCH::Chart3DVectorArchive;
  return color_;
}
inline ::TSCH::Chart3DVectorArchive* Chart3DTexturesMaterialArchive::release_color() {
  clear_has_color();
  ::TSCH::Chart3DVectorArchive* temp = color_;
  color_ = NULL;
  return temp;
}
inline void Chart3DTexturesMaterialArchive::set_allocated_color(::TSCH::Chart3DVectorArchive* color) {
  delete color_;
  color_ = color;
  if (color) {
    set_has_color();
  } else {
    clear_has_color();
  }
}

// repeated .TSCH.Chart3DTSPImageDataTextureArchive textures = 2;
inline int Chart3DTexturesMaterialArchive::textures_size() const {
  return textures_.size();
}
inline void Chart3DTexturesMaterialArchive::clear_textures() {
  textures_.Clear();
}
inline const ::TSCH::Chart3DTSPImageDataTextureArchive& Chart3DTexturesMaterialArchive::textures(int index) const {
  return textures_.Get(index);
}
inline ::TSCH::Chart3DTSPImageDataTextureArchive* Chart3DTexturesMaterialArchive::mutable_textures(int index) {
  return textures_.Mutable(index);
}
inline ::TSCH::Chart3DTSPImageDataTextureArchive* Chart3DTexturesMaterialArchive::add_textures() {
  return textures_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSCH::Chart3DTSPImageDataTextureArchive >&
Chart3DTexturesMaterialArchive::textures() const {
  return textures_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSCH::Chart3DTSPImageDataTextureArchive >*
Chart3DTexturesMaterialArchive::mutable_textures() {
  return &textures_;
}

// -------------------------------------------------------------------

// Chart3DEmissiveMaterialArchive

// required .TSCH.Chart3DTexturesMaterialArchive super = 1;
inline bool Chart3DEmissiveMaterialArchive::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Chart3DEmissiveMaterialArchive::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Chart3DEmissiveMaterialArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Chart3DEmissiveMaterialArchive::clear_super() {
  if (super_ != NULL) super_->::TSCH::Chart3DTexturesMaterialArchive::Clear();
  clear_has_super();
}
inline const ::TSCH::Chart3DTexturesMaterialArchive& Chart3DEmissiveMaterialArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSCH::Chart3DTexturesMaterialArchive* Chart3DEmissiveMaterialArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSCH::Chart3DTexturesMaterialArchive;
  return super_;
}
inline ::TSCH::Chart3DTexturesMaterialArchive* Chart3DEmissiveMaterialArchive::release_super() {
  clear_has_super();
  ::TSCH::Chart3DTexturesMaterialArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void Chart3DEmissiveMaterialArchive::set_allocated_super(::TSCH::Chart3DTexturesMaterialArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// repeated .TSCH.Chart3DImageTextureTilingArchive tilings = 2;
inline int Chart3DEmissiveMaterialArchive::tilings_size() const {
  return tilings_.size();
}
inline void Chart3DEmissiveMaterialArchive::clear_tilings() {
  tilings_.Clear();
}
inline const ::TSCH::Chart3DImageTextureTilingArchive& Chart3DEmissiveMaterialArchive::tilings(int index) const {
  return tilings_.Get(index);
}
inline ::TSCH::Chart3DImageTextureTilingArchive* Chart3DEmissiveMaterialArchive::mutable_tilings(int index) {
  return tilings_.Mutable(index);
}
inline ::TSCH::Chart3DImageTextureTilingArchive* Chart3DEmissiveMaterialArchive::add_tilings() {
  return tilings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive >&
Chart3DEmissiveMaterialArchive::tilings() const {
  return tilings_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive >*
Chart3DEmissiveMaterialArchive::mutable_tilings() {
  return &tilings_;
}

// -------------------------------------------------------------------

// Chart3DDiffuseMaterialArchive

// required .TSCH.Chart3DTexturesMaterialArchive super = 1;
inline bool Chart3DDiffuseMaterialArchive::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Chart3DDiffuseMaterialArchive::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Chart3DDiffuseMaterialArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Chart3DDiffuseMaterialArchive::clear_super() {
  if (super_ != NULL) super_->::TSCH::Chart3DTexturesMaterialArchive::Clear();
  clear_has_super();
}
inline const ::TSCH::Chart3DTexturesMaterialArchive& Chart3DDiffuseMaterialArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSCH::Chart3DTexturesMaterialArchive* Chart3DDiffuseMaterialArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSCH::Chart3DTexturesMaterialArchive;
  return super_;
}
inline ::TSCH::Chart3DTexturesMaterialArchive* Chart3DDiffuseMaterialArchive::release_super() {
  clear_has_super();
  ::TSCH::Chart3DTexturesMaterialArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void Chart3DDiffuseMaterialArchive::set_allocated_super(::TSCH::Chart3DTexturesMaterialArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// repeated .TSCH.Chart3DImageTextureTilingArchive tilings = 2;
inline int Chart3DDiffuseMaterialArchive::tilings_size() const {
  return tilings_.size();
}
inline void Chart3DDiffuseMaterialArchive::clear_tilings() {
  tilings_.Clear();
}
inline const ::TSCH::Chart3DImageTextureTilingArchive& Chart3DDiffuseMaterialArchive::tilings(int index) const {
  return tilings_.Get(index);
}
inline ::TSCH::Chart3DImageTextureTilingArchive* Chart3DDiffuseMaterialArchive::mutable_tilings(int index) {
  return tilings_.Mutable(index);
}
inline ::TSCH::Chart3DImageTextureTilingArchive* Chart3DDiffuseMaterialArchive::add_tilings() {
  return tilings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive >&
Chart3DDiffuseMaterialArchive::tilings() const {
  return tilings_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive >*
Chart3DDiffuseMaterialArchive::mutable_tilings() {
  return &tilings_;
}

// -------------------------------------------------------------------

// Chart3DModulateMaterialArchive

// required .TSCH.Chart3DTexturesMaterialArchive super = 1;
inline bool Chart3DModulateMaterialArchive::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Chart3DModulateMaterialArchive::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Chart3DModulateMaterialArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Chart3DModulateMaterialArchive::clear_super() {
  if (super_ != NULL) super_->::TSCH::Chart3DTexturesMaterialArchive::Clear();
  clear_has_super();
}
inline const ::TSCH::Chart3DTexturesMaterialArchive& Chart3DModulateMaterialArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSCH::Chart3DTexturesMaterialArchive* Chart3DModulateMaterialArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSCH::Chart3DTexturesMaterialArchive;
  return super_;
}
inline ::TSCH::Chart3DTexturesMaterialArchive* Chart3DModulateMaterialArchive::release_super() {
  clear_has_super();
  ::TSCH::Chart3DTexturesMaterialArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void Chart3DModulateMaterialArchive::set_allocated_super(::TSCH::Chart3DTexturesMaterialArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// repeated .TSCH.Chart3DImageTextureTilingArchive tilings = 2;
inline int Chart3DModulateMaterialArchive::tilings_size() const {
  return tilings_.size();
}
inline void Chart3DModulateMaterialArchive::clear_tilings() {
  tilings_.Clear();
}
inline const ::TSCH::Chart3DImageTextureTilingArchive& Chart3DModulateMaterialArchive::tilings(int index) const {
  return tilings_.Get(index);
}
inline ::TSCH::Chart3DImageTextureTilingArchive* Chart3DModulateMaterialArchive::mutable_tilings(int index) {
  return tilings_.Mutable(index);
}
inline ::TSCH::Chart3DImageTextureTilingArchive* Chart3DModulateMaterialArchive::add_tilings() {
  return tilings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive >&
Chart3DModulateMaterialArchive::tilings() const {
  return tilings_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive >*
Chart3DModulateMaterialArchive::mutable_tilings() {
  return &tilings_;
}

// -------------------------------------------------------------------

// Chart3DSpecularMaterialArchive

// required .TSCH.Chart3DTexturesMaterialArchive super = 1;
inline bool Chart3DSpecularMaterialArchive::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Chart3DSpecularMaterialArchive::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Chart3DSpecularMaterialArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Chart3DSpecularMaterialArchive::clear_super() {
  if (super_ != NULL) super_->::TSCH::Chart3DTexturesMaterialArchive::Clear();
  clear_has_super();
}
inline const ::TSCH::Chart3DTexturesMaterialArchive& Chart3DSpecularMaterialArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSCH::Chart3DTexturesMaterialArchive* Chart3DSpecularMaterialArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSCH::Chart3DTexturesMaterialArchive;
  return super_;
}
inline ::TSCH::Chart3DTexturesMaterialArchive* Chart3DSpecularMaterialArchive::release_super() {
  clear_has_super();
  ::TSCH::Chart3DTexturesMaterialArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void Chart3DSpecularMaterialArchive::set_allocated_super(::TSCH::Chart3DTexturesMaterialArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// repeated .TSCH.Chart3DImageTextureTilingArchive tilings = 2;
inline int Chart3DSpecularMaterialArchive::tilings_size() const {
  return tilings_.size();
}
inline void Chart3DSpecularMaterialArchive::clear_tilings() {
  tilings_.Clear();
}
inline const ::TSCH::Chart3DImageTextureTilingArchive& Chart3DSpecularMaterialArchive::tilings(int index) const {
  return tilings_.Get(index);
}
inline ::TSCH::Chart3DImageTextureTilingArchive* Chart3DSpecularMaterialArchive::mutable_tilings(int index) {
  return tilings_.Mutable(index);
}
inline ::TSCH::Chart3DImageTextureTilingArchive* Chart3DSpecularMaterialArchive::add_tilings() {
  return tilings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive >&
Chart3DSpecularMaterialArchive::tilings() const {
  return tilings_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive >*
Chart3DSpecularMaterialArchive::mutable_tilings() {
  return &tilings_;
}

// -------------------------------------------------------------------

// Chart3DShininessMaterialArchive

// required .TSCH.Chart3DTexturesMaterialArchive super = 1;
inline bool Chart3DShininessMaterialArchive::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Chart3DShininessMaterialArchive::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Chart3DShininessMaterialArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Chart3DShininessMaterialArchive::clear_super() {
  if (super_ != NULL) super_->::TSCH::Chart3DTexturesMaterialArchive::Clear();
  clear_has_super();
}
inline const ::TSCH::Chart3DTexturesMaterialArchive& Chart3DShininessMaterialArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSCH::Chart3DTexturesMaterialArchive* Chart3DShininessMaterialArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSCH::Chart3DTexturesMaterialArchive;
  return super_;
}
inline ::TSCH::Chart3DTexturesMaterialArchive* Chart3DShininessMaterialArchive::release_super() {
  clear_has_super();
  ::TSCH::Chart3DTexturesMaterialArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void Chart3DShininessMaterialArchive::set_allocated_super(::TSCH::Chart3DTexturesMaterialArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// repeated .TSCH.Chart3DImageTextureTilingArchive tilings = 2;
inline int Chart3DShininessMaterialArchive::tilings_size() const {
  return tilings_.size();
}
inline void Chart3DShininessMaterialArchive::clear_tilings() {
  tilings_.Clear();
}
inline const ::TSCH::Chart3DImageTextureTilingArchive& Chart3DShininessMaterialArchive::tilings(int index) const {
  return tilings_.Get(index);
}
inline ::TSCH::Chart3DImageTextureTilingArchive* Chart3DShininessMaterialArchive::mutable_tilings(int index) {
  return tilings_.Mutable(index);
}
inline ::TSCH::Chart3DImageTextureTilingArchive* Chart3DShininessMaterialArchive::add_tilings() {
  return tilings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive >&
Chart3DShininessMaterialArchive::tilings() const {
  return tilings_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive >*
Chart3DShininessMaterialArchive::mutable_tilings() {
  return &tilings_;
}

// -------------------------------------------------------------------

// Chart3DEnvironmentMaterialArchive

// required .TSCH.Chart3DTexturesMaterialArchive super = 1;
inline bool Chart3DEnvironmentMaterialArchive::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Chart3DEnvironmentMaterialArchive::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Chart3DEnvironmentMaterialArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Chart3DEnvironmentMaterialArchive::clear_super() {
  if (super_ != NULL) super_->::TSCH::Chart3DTexturesMaterialArchive::Clear();
  clear_has_super();
}
inline const ::TSCH::Chart3DTexturesMaterialArchive& Chart3DEnvironmentMaterialArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSCH::Chart3DTexturesMaterialArchive* Chart3DEnvironmentMaterialArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSCH::Chart3DTexturesMaterialArchive;
  return super_;
}
inline ::TSCH::Chart3DTexturesMaterialArchive* Chart3DEnvironmentMaterialArchive::release_super() {
  clear_has_super();
  ::TSCH::Chart3DTexturesMaterialArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void Chart3DEnvironmentMaterialArchive::set_allocated_super(::TSCH::Chart3DTexturesMaterialArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// repeated .TSCH.Chart3DBaseImageTextureTilingArchive OBSOLETE_tilings = 2;
inline int Chart3DEnvironmentMaterialArchive::obsolete_tilings_size() const {
  return obsolete_tilings_.size();
}
inline void Chart3DEnvironmentMaterialArchive::clear_obsolete_tilings() {
  obsolete_tilings_.Clear();
}
inline const ::TSCH::Chart3DBaseImageTextureTilingArchive& Chart3DEnvironmentMaterialArchive::obsolete_tilings(int index) const {
  return obsolete_tilings_.Get(index);
}
inline ::TSCH::Chart3DBaseImageTextureTilingArchive* Chart3DEnvironmentMaterialArchive::mutable_obsolete_tilings(int index) {
  return obsolete_tilings_.Mutable(index);
}
inline ::TSCH::Chart3DBaseImageTextureTilingArchive* Chart3DEnvironmentMaterialArchive::add_obsolete_tilings() {
  return obsolete_tilings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSCH::Chart3DBaseImageTextureTilingArchive >&
Chart3DEnvironmentMaterialArchive::obsolete_tilings() const {
  return obsolete_tilings_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSCH::Chart3DBaseImageTextureTilingArchive >*
Chart3DEnvironmentMaterialArchive::mutable_obsolete_tilings() {
  return &obsolete_tilings_;
}

// optional bool decalMode = 3;
inline bool Chart3DEnvironmentMaterialArchive::has_decalmode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Chart3DEnvironmentMaterialArchive::set_has_decalmode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Chart3DEnvironmentMaterialArchive::clear_has_decalmode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Chart3DEnvironmentMaterialArchive::clear_decalmode() {
  decalmode_ = false;
  clear_has_decalmode();
}
inline bool Chart3DEnvironmentMaterialArchive::decalmode() const {
  return decalmode_;
}
inline void Chart3DEnvironmentMaterialArchive::set_decalmode(bool value) {
  set_has_decalmode();
  decalmode_ = value;
}

// repeated .TSCH.Chart3DImageTextureTilingArchive tilings = 4;
inline int Chart3DEnvironmentMaterialArchive::tilings_size() const {
  return tilings_.size();
}
inline void Chart3DEnvironmentMaterialArchive::clear_tilings() {
  tilings_.Clear();
}
inline const ::TSCH::Chart3DImageTextureTilingArchive& Chart3DEnvironmentMaterialArchive::tilings(int index) const {
  return tilings_.Get(index);
}
inline ::TSCH::Chart3DImageTextureTilingArchive* Chart3DEnvironmentMaterialArchive::mutable_tilings(int index) {
  return tilings_.Mutable(index);
}
inline ::TSCH::Chart3DImageTextureTilingArchive* Chart3DEnvironmentMaterialArchive::add_tilings() {
  return tilings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive >&
Chart3DEnvironmentMaterialArchive::tilings() const {
  return tilings_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive >*
Chart3DEnvironmentMaterialArchive::mutable_tilings() {
  return &tilings_;
}

// -------------------------------------------------------------------

// Chart3DFixedFunctionLightingModelArchive

// required .TSCH.Chart3DPhongMaterialPackageArchive materials = 1;
inline bool Chart3DFixedFunctionLightingModelArchive::has_materials() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Chart3DFixedFunctionLightingModelArchive::set_has_materials() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Chart3DFixedFunctionLightingModelArchive::clear_has_materials() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Chart3DFixedFunctionLightingModelArchive::clear_materials() {
  if (materials_ != NULL) materials_->::TSCH::Chart3DPhongMaterialPackageArchive::Clear();
  clear_has_materials();
}
inline const ::TSCH::Chart3DPhongMaterialPackageArchive& Chart3DFixedFunctionLightingModelArchive::materials() const {
  return materials_ != NULL ? *materials_ : *default_instance_->materials_;
}
inline ::TSCH::Chart3DPhongMaterialPackageArchive* Chart3DFixedFunctionLightingModelArchive::mutable_materials() {
  set_has_materials();
  if (materials_ == NULL) materials_ = new ::TSCH::Chart3DPhongMaterialPackageArchive;
  return materials_;
}
inline ::TSCH::Chart3DPhongMaterialPackageArchive* Chart3DFixedFunctionLightingModelArchive::release_materials() {
  clear_has_materials();
  ::TSCH::Chart3DPhongMaterialPackageArchive* temp = materials_;
  materials_ = NULL;
  return temp;
}
inline void Chart3DFixedFunctionLightingModelArchive::set_allocated_materials(::TSCH::Chart3DPhongMaterialPackageArchive* materials) {
  delete materials_;
  materials_ = materials;
  if (materials) {
    set_has_materials();
  } else {
    clear_has_materials();
  }
}

// -------------------------------------------------------------------

// Chart3DPhongLightingModelArchive

// required .TSCH.Chart3DPhongMaterialPackageArchive materials = 1;
inline bool Chart3DPhongLightingModelArchive::has_materials() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Chart3DPhongLightingModelArchive::set_has_materials() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Chart3DPhongLightingModelArchive::clear_has_materials() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Chart3DPhongLightingModelArchive::clear_materials() {
  if (materials_ != NULL) materials_->::TSCH::Chart3DPhongMaterialPackageArchive::Clear();
  clear_has_materials();
}
inline const ::TSCH::Chart3DPhongMaterialPackageArchive& Chart3DPhongLightingModelArchive::materials() const {
  return materials_ != NULL ? *materials_ : *default_instance_->materials_;
}
inline ::TSCH::Chart3DPhongMaterialPackageArchive* Chart3DPhongLightingModelArchive::mutable_materials() {
  set_has_materials();
  if (materials_ == NULL) materials_ = new ::TSCH::Chart3DPhongMaterialPackageArchive;
  return materials_;
}
inline ::TSCH::Chart3DPhongMaterialPackageArchive* Chart3DPhongLightingModelArchive::release_materials() {
  clear_has_materials();
  ::TSCH::Chart3DPhongMaterialPackageArchive* temp = materials_;
  materials_ = NULL;
  return temp;
}
inline void Chart3DPhongLightingModelArchive::set_allocated_materials(::TSCH::Chart3DPhongMaterialPackageArchive* materials) {
  delete materials_;
  materials_ = materials;
  if (materials) {
    set_has_materials();
  } else {
    clear_has_materials();
  }
}

// -------------------------------------------------------------------

// Chart3DPhongMaterialPackageArchive

// optional .TSCH.Chart3DEmissiveMaterialArchive emissive = 1;
inline bool Chart3DPhongMaterialPackageArchive::has_emissive() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Chart3DPhongMaterialPackageArchive::set_has_emissive() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Chart3DPhongMaterialPackageArchive::clear_has_emissive() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Chart3DPhongMaterialPackageArchive::clear_emissive() {
  if (emissive_ != NULL) emissive_->::TSCH::Chart3DEmissiveMaterialArchive::Clear();
  clear_has_emissive();
}
inline const ::TSCH::Chart3DEmissiveMaterialArchive& Chart3DPhongMaterialPackageArchive::emissive() const {
  return emissive_ != NULL ? *emissive_ : *default_instance_->emissive_;
}
inline ::TSCH::Chart3DEmissiveMaterialArchive* Chart3DPhongMaterialPackageArchive::mutable_emissive() {
  set_has_emissive();
  if (emissive_ == NULL) emissive_ = new ::TSCH::Chart3DEmissiveMaterialArchive;
  return emissive_;
}
inline ::TSCH::Chart3DEmissiveMaterialArchive* Chart3DPhongMaterialPackageArchive::release_emissive() {
  clear_has_emissive();
  ::TSCH::Chart3DEmissiveMaterialArchive* temp = emissive_;
  emissive_ = NULL;
  return temp;
}
inline void Chart3DPhongMaterialPackageArchive::set_allocated_emissive(::TSCH::Chart3DEmissiveMaterialArchive* emissive) {
  delete emissive_;
  emissive_ = emissive;
  if (emissive) {
    set_has_emissive();
  } else {
    clear_has_emissive();
  }
}

// optional .TSCH.Chart3DDiffuseMaterialArchive diffuse = 2;
inline bool Chart3DPhongMaterialPackageArchive::has_diffuse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Chart3DPhongMaterialPackageArchive::set_has_diffuse() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Chart3DPhongMaterialPackageArchive::clear_has_diffuse() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Chart3DPhongMaterialPackageArchive::clear_diffuse() {
  if (diffuse_ != NULL) diffuse_->::TSCH::Chart3DDiffuseMaterialArchive::Clear();
  clear_has_diffuse();
}
inline const ::TSCH::Chart3DDiffuseMaterialArchive& Chart3DPhongMaterialPackageArchive::diffuse() const {
  return diffuse_ != NULL ? *diffuse_ : *default_instance_->diffuse_;
}
inline ::TSCH::Chart3DDiffuseMaterialArchive* Chart3DPhongMaterialPackageArchive::mutable_diffuse() {
  set_has_diffuse();
  if (diffuse_ == NULL) diffuse_ = new ::TSCH::Chart3DDiffuseMaterialArchive;
  return diffuse_;
}
inline ::TSCH::Chart3DDiffuseMaterialArchive* Chart3DPhongMaterialPackageArchive::release_diffuse() {
  clear_has_diffuse();
  ::TSCH::Chart3DDiffuseMaterialArchive* temp = diffuse_;
  diffuse_ = NULL;
  return temp;
}
inline void Chart3DPhongMaterialPackageArchive::set_allocated_diffuse(::TSCH::Chart3DDiffuseMaterialArchive* diffuse) {
  delete diffuse_;
  diffuse_ = diffuse;
  if (diffuse) {
    set_has_diffuse();
  } else {
    clear_has_diffuse();
  }
}

// optional .TSCH.Chart3DModulateMaterialArchive modulate = 3;
inline bool Chart3DPhongMaterialPackageArchive::has_modulate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Chart3DPhongMaterialPackageArchive::set_has_modulate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Chart3DPhongMaterialPackageArchive::clear_has_modulate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Chart3DPhongMaterialPackageArchive::clear_modulate() {
  if (modulate_ != NULL) modulate_->::TSCH::Chart3DModulateMaterialArchive::Clear();
  clear_has_modulate();
}
inline const ::TSCH::Chart3DModulateMaterialArchive& Chart3DPhongMaterialPackageArchive::modulate() const {
  return modulate_ != NULL ? *modulate_ : *default_instance_->modulate_;
}
inline ::TSCH::Chart3DModulateMaterialArchive* Chart3DPhongMaterialPackageArchive::mutable_modulate() {
  set_has_modulate();
  if (modulate_ == NULL) modulate_ = new ::TSCH::Chart3DModulateMaterialArchive;
  return modulate_;
}
inline ::TSCH::Chart3DModulateMaterialArchive* Chart3DPhongMaterialPackageArchive::release_modulate() {
  clear_has_modulate();
  ::TSCH::Chart3DModulateMaterialArchive* temp = modulate_;
  modulate_ = NULL;
  return temp;
}
inline void Chart3DPhongMaterialPackageArchive::set_allocated_modulate(::TSCH::Chart3DModulateMaterialArchive* modulate) {
  delete modulate_;
  modulate_ = modulate;
  if (modulate) {
    set_has_modulate();
  } else {
    clear_has_modulate();
  }
}

// optional .TSCH.Chart3DSpecularMaterialArchive specular = 4;
inline bool Chart3DPhongMaterialPackageArchive::has_specular() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Chart3DPhongMaterialPackageArchive::set_has_specular() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Chart3DPhongMaterialPackageArchive::clear_has_specular() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Chart3DPhongMaterialPackageArchive::clear_specular() {
  if (specular_ != NULL) specular_->::TSCH::Chart3DSpecularMaterialArchive::Clear();
  clear_has_specular();
}
inline const ::TSCH::Chart3DSpecularMaterialArchive& Chart3DPhongMaterialPackageArchive::specular() const {
  return specular_ != NULL ? *specular_ : *default_instance_->specular_;
}
inline ::TSCH::Chart3DSpecularMaterialArchive* Chart3DPhongMaterialPackageArchive::mutable_specular() {
  set_has_specular();
  if (specular_ == NULL) specular_ = new ::TSCH::Chart3DSpecularMaterialArchive;
  return specular_;
}
inline ::TSCH::Chart3DSpecularMaterialArchive* Chart3DPhongMaterialPackageArchive::release_specular() {
  clear_has_specular();
  ::TSCH::Chart3DSpecularMaterialArchive* temp = specular_;
  specular_ = NULL;
  return temp;
}
inline void Chart3DPhongMaterialPackageArchive::set_allocated_specular(::TSCH::Chart3DSpecularMaterialArchive* specular) {
  delete specular_;
  specular_ = specular;
  if (specular) {
    set_has_specular();
  } else {
    clear_has_specular();
  }
}

// optional .TSCH.Chart3DShininessMaterialArchive shininess = 5;
inline bool Chart3DPhongMaterialPackageArchive::has_shininess() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Chart3DPhongMaterialPackageArchive::set_has_shininess() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Chart3DPhongMaterialPackageArchive::clear_has_shininess() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Chart3DPhongMaterialPackageArchive::clear_shininess() {
  if (shininess_ != NULL) shininess_->::TSCH::Chart3DShininessMaterialArchive::Clear();
  clear_has_shininess();
}
inline const ::TSCH::Chart3DShininessMaterialArchive& Chart3DPhongMaterialPackageArchive::shininess() const {
  return shininess_ != NULL ? *shininess_ : *default_instance_->shininess_;
}
inline ::TSCH::Chart3DShininessMaterialArchive* Chart3DPhongMaterialPackageArchive::mutable_shininess() {
  set_has_shininess();
  if (shininess_ == NULL) shininess_ = new ::TSCH::Chart3DShininessMaterialArchive;
  return shininess_;
}
inline ::TSCH::Chart3DShininessMaterialArchive* Chart3DPhongMaterialPackageArchive::release_shininess() {
  clear_has_shininess();
  ::TSCH::Chart3DShininessMaterialArchive* temp = shininess_;
  shininess_ = NULL;
  return temp;
}
inline void Chart3DPhongMaterialPackageArchive::set_allocated_shininess(::TSCH::Chart3DShininessMaterialArchive* shininess) {
  delete shininess_;
  shininess_ = shininess;
  if (shininess) {
    set_has_shininess();
  } else {
    clear_has_shininess();
  }
}

// -------------------------------------------------------------------

// Chart3DTSPImageDataTextureArchive

// optional .TSP.DataReference data = 3;
inline bool Chart3DTSPImageDataTextureArchive::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Chart3DTSPImageDataTextureArchive::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Chart3DTSPImageDataTextureArchive::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Chart3DTSPImageDataTextureArchive::clear_data() {
  if (data_ != NULL) data_->::TSP::DataReference::Clear();
  clear_has_data();
}
inline const ::TSP::DataReference& Chart3DTSPImageDataTextureArchive::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::TSP::DataReference* Chart3DTSPImageDataTextureArchive::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::TSP::DataReference;
  return data_;
}
inline ::TSP::DataReference* Chart3DTSPImageDataTextureArchive::release_data() {
  clear_has_data();
  ::TSP::DataReference* temp = data_;
  data_ = NULL;
  return temp;
}
inline void Chart3DTSPImageDataTextureArchive::set_allocated_data(::TSP::DataReference* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// optional .TSP.DataReference mipmapdata = 4;
inline bool Chart3DTSPImageDataTextureArchive::has_mipmapdata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Chart3DTSPImageDataTextureArchive::set_has_mipmapdata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Chart3DTSPImageDataTextureArchive::clear_has_mipmapdata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Chart3DTSPImageDataTextureArchive::clear_mipmapdata() {
  if (mipmapdata_ != NULL) mipmapdata_->::TSP::DataReference::Clear();
  clear_has_mipmapdata();
}
inline const ::TSP::DataReference& Chart3DTSPImageDataTextureArchive::mipmapdata() const {
  return mipmapdata_ != NULL ? *mipmapdata_ : *default_instance_->mipmapdata_;
}
inline ::TSP::DataReference* Chart3DTSPImageDataTextureArchive::mutable_mipmapdata() {
  set_has_mipmapdata();
  if (mipmapdata_ == NULL) mipmapdata_ = new ::TSP::DataReference;
  return mipmapdata_;
}
inline ::TSP::DataReference* Chart3DTSPImageDataTextureArchive::release_mipmapdata() {
  clear_has_mipmapdata();
  ::TSP::DataReference* temp = mipmapdata_;
  mipmapdata_ = NULL;
  return temp;
}
inline void Chart3DTSPImageDataTextureArchive::set_allocated_mipmapdata(::TSP::DataReference* mipmapdata) {
  delete mipmapdata_;
  mipmapdata_ = mipmapdata;
  if (mipmapdata) {
    set_has_mipmapdata();
  } else {
    clear_has_mipmapdata();
  }
}

// optional .TSP.Reference database_data = 1;
inline bool Chart3DTSPImageDataTextureArchive::has_database_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Chart3DTSPImageDataTextureArchive::set_has_database_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Chart3DTSPImageDataTextureArchive::clear_has_database_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Chart3DTSPImageDataTextureArchive::clear_database_data() {
  if (database_data_ != NULL) database_data_->::TSP::Reference::Clear();
  clear_has_database_data();
}
inline const ::TSP::Reference& Chart3DTSPImageDataTextureArchive::database_data() const {
  return database_data_ != NULL ? *database_data_ : *default_instance_->database_data_;
}
inline ::TSP::Reference* Chart3DTSPImageDataTextureArchive::mutable_database_data() {
  set_has_database_data();
  if (database_data_ == NULL) database_data_ = new ::TSP::Reference;
  return database_data_;
}
inline ::TSP::Reference* Chart3DTSPImageDataTextureArchive::release_database_data() {
  clear_has_database_data();
  ::TSP::Reference* temp = database_data_;
  database_data_ = NULL;
  return temp;
}
inline void Chart3DTSPImageDataTextureArchive::set_allocated_database_data(::TSP::Reference* database_data) {
  delete database_data_;
  database_data_ = database_data;
  if (database_data) {
    set_has_database_data();
  } else {
    clear_has_database_data();
  }
}

// optional .TSP.Reference database_mipmapdata = 2;
inline bool Chart3DTSPImageDataTextureArchive::has_database_mipmapdata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Chart3DTSPImageDataTextureArchive::set_has_database_mipmapdata() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Chart3DTSPImageDataTextureArchive::clear_has_database_mipmapdata() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Chart3DTSPImageDataTextureArchive::clear_database_mipmapdata() {
  if (database_mipmapdata_ != NULL) database_mipmapdata_->::TSP::Reference::Clear();
  clear_has_database_mipmapdata();
}
inline const ::TSP::Reference& Chart3DTSPImageDataTextureArchive::database_mipmapdata() const {
  return database_mipmapdata_ != NULL ? *database_mipmapdata_ : *default_instance_->database_mipmapdata_;
}
inline ::TSP::Reference* Chart3DTSPImageDataTextureArchive::mutable_database_mipmapdata() {
  set_has_database_mipmapdata();
  if (database_mipmapdata_ == NULL) database_mipmapdata_ = new ::TSP::Reference;
  return database_mipmapdata_;
}
inline ::TSP::Reference* Chart3DTSPImageDataTextureArchive::release_database_mipmapdata() {
  clear_has_database_mipmapdata();
  ::TSP::Reference* temp = database_mipmapdata_;
  database_mipmapdata_ = NULL;
  return temp;
}
inline void Chart3DTSPImageDataTextureArchive::set_allocated_database_mipmapdata(::TSP::Reference* database_mipmapdata) {
  delete database_mipmapdata_;
  database_mipmapdata_ = database_mipmapdata;
  if (database_mipmapdata) {
    set_has_database_mipmapdata();
  } else {
    clear_has_database_mipmapdata();
  }
}

// -------------------------------------------------------------------

// Chart3DBaseImageTextureTilingArchive

// optional .TSCH.Chart3DVectorArchive scale = 1;
inline bool Chart3DBaseImageTextureTilingArchive::has_scale() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Chart3DBaseImageTextureTilingArchive::set_has_scale() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Chart3DBaseImageTextureTilingArchive::clear_has_scale() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Chart3DBaseImageTextureTilingArchive::clear_scale() {
  if (scale_ != NULL) scale_->::TSCH::Chart3DVectorArchive::Clear();
  clear_has_scale();
}
inline const ::TSCH::Chart3DVectorArchive& Chart3DBaseImageTextureTilingArchive::scale() const {
  return scale_ != NULL ? *scale_ : *default_instance_->scale_;
}
inline ::TSCH::Chart3DVectorArchive* Chart3DBaseImageTextureTilingArchive::mutable_scale() {
  set_has_scale();
  if (scale_ == NULL) scale_ = new ::TSCH::Chart3DVectorArchive;
  return scale_;
}
inline ::TSCH::Chart3DVectorArchive* Chart3DBaseImageTextureTilingArchive::release_scale() {
  clear_has_scale();
  ::TSCH::Chart3DVectorArchive* temp = scale_;
  scale_ = NULL;
  return temp;
}
inline void Chart3DBaseImageTextureTilingArchive::set_allocated_scale(::TSCH::Chart3DVectorArchive* scale) {
  delete scale_;
  scale_ = scale;
  if (scale) {
    set_has_scale();
  } else {
    clear_has_scale();
  }
}

// optional float rotation = 2;
inline bool Chart3DBaseImageTextureTilingArchive::has_rotation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Chart3DBaseImageTextureTilingArchive::set_has_rotation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Chart3DBaseImageTextureTilingArchive::clear_has_rotation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Chart3DBaseImageTextureTilingArchive::clear_rotation() {
  rotation_ = 0;
  clear_has_rotation();
}
inline float Chart3DBaseImageTextureTilingArchive::rotation() const {
  return rotation_;
}
inline void Chart3DBaseImageTextureTilingArchive::set_rotation(float value) {
  set_has_rotation();
  rotation_ = value;
}

// -------------------------------------------------------------------

// Chart3DImageTextureTilingArchive

// required .TSCH.Chart3DBaseImageTextureTilingArchive super = 1;
inline bool Chart3DImageTextureTilingArchive::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Chart3DImageTextureTilingArchive::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Chart3DImageTextureTilingArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Chart3DImageTextureTilingArchive::clear_super() {
  if (super_ != NULL) super_->::TSCH::Chart3DBaseImageTextureTilingArchive::Clear();
  clear_has_super();
}
inline const ::TSCH::Chart3DBaseImageTextureTilingArchive& Chart3DImageTextureTilingArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSCH::Chart3DBaseImageTextureTilingArchive* Chart3DImageTextureTilingArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSCH::Chart3DBaseImageTextureTilingArchive;
  return super_;
}
inline ::TSCH::Chart3DBaseImageTextureTilingArchive* Chart3DImageTextureTilingArchive::release_super() {
  clear_has_super();
  ::TSCH::Chart3DBaseImageTextureTilingArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void Chart3DImageTextureTilingArchive::set_allocated_super(::TSCH::Chart3DBaseImageTextureTilingArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// optional .TSCH.TextureTilingMode mode = 2;
inline bool Chart3DImageTextureTilingArchive::has_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Chart3DImageTextureTilingArchive::set_has_mode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Chart3DImageTextureTilingArchive::clear_has_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Chart3DImageTextureTilingArchive::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline ::TSCH::TextureTilingMode Chart3DImageTextureTilingArchive::mode() const {
  return static_cast< ::TSCH::TextureTilingMode >(mode_);
}
inline void Chart3DImageTextureTilingArchive::set_mode(::TSCH::TextureTilingMode value) {
  assert(::TSCH::TextureTilingMode_IsValid(value));
  set_has_mode();
  mode_ = value;
}

// optional .TSCH.TextureTilingWrap wrap = 3;
inline bool Chart3DImageTextureTilingArchive::has_wrap() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Chart3DImageTextureTilingArchive::set_has_wrap() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Chart3DImageTextureTilingArchive::clear_has_wrap() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Chart3DImageTextureTilingArchive::clear_wrap() {
  wrap_ = 0;
  clear_has_wrap();
}
inline ::TSCH::TextureTilingWrap Chart3DImageTextureTilingArchive::wrap() const {
  return static_cast< ::TSCH::TextureTilingWrap >(wrap_);
}
inline void Chart3DImageTextureTilingArchive::set_wrap(::TSCH::TextureTilingWrap value) {
  assert(::TSCH::TextureTilingWrap_IsValid(value));
  set_has_wrap();
  wrap_ = value;
}

// optional .TSCH.TextureTilingFace face = 4;
inline bool Chart3DImageTextureTilingArchive::has_face() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Chart3DImageTextureTilingArchive::set_has_face() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Chart3DImageTextureTilingArchive::clear_has_face() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Chart3DImageTextureTilingArchive::clear_face() {
  face_ = 0;
  clear_has_face();
}
inline ::TSCH::TextureTilingFace Chart3DImageTextureTilingArchive::face() const {
  return static_cast< ::TSCH::TextureTilingFace >(face_);
}
inline void Chart3DImageTextureTilingArchive::set_face(::TSCH::TextureTilingFace value) {
  assert(::TSCH::TextureTilingFace_IsValid(value));
  set_has_face();
  face_ = value;
}

// optional .TSCH.TextureTilingXPosition xposition = 5;
inline bool Chart3DImageTextureTilingArchive::has_xposition() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Chart3DImageTextureTilingArchive::set_has_xposition() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Chart3DImageTextureTilingArchive::clear_has_xposition() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Chart3DImageTextureTilingArchive::clear_xposition() {
  xposition_ = 0;
  clear_has_xposition();
}
inline ::TSCH::TextureTilingXPosition Chart3DImageTextureTilingArchive::xposition() const {
  return static_cast< ::TSCH::TextureTilingXPosition >(xposition_);
}
inline void Chart3DImageTextureTilingArchive::set_xposition(::TSCH::TextureTilingXPosition value) {
  assert(::TSCH::TextureTilingXPosition_IsValid(value));
  set_has_xposition();
  xposition_ = value;
}

// optional .TSCH.TextureTilingYPosition yposition = 6;
inline bool Chart3DImageTextureTilingArchive::has_yposition() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Chart3DImageTextureTilingArchive::set_has_yposition() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Chart3DImageTextureTilingArchive::clear_has_yposition() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Chart3DImageTextureTilingArchive::clear_yposition() {
  yposition_ = 0;
  clear_has_yposition();
}
inline ::TSCH::TextureTilingYPosition Chart3DImageTextureTilingArchive::yposition() const {
  return static_cast< ::TSCH::TextureTilingYPosition >(yposition_);
}
inline void Chart3DImageTextureTilingArchive::set_yposition(::TSCH::TextureTilingYPosition value) {
  assert(::TSCH::TextureTilingYPosition_IsValid(value));
  set_has_yposition();
  yposition_ = value;
}

// optional .TSCH.TextureTilingContinuity scontinuity = 7;
inline bool Chart3DImageTextureTilingArchive::has_scontinuity() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Chart3DImageTextureTilingArchive::set_has_scontinuity() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Chart3DImageTextureTilingArchive::clear_has_scontinuity() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Chart3DImageTextureTilingArchive::clear_scontinuity() {
  scontinuity_ = 0;
  clear_has_scontinuity();
}
inline ::TSCH::TextureTilingContinuity Chart3DImageTextureTilingArchive::scontinuity() const {
  return static_cast< ::TSCH::TextureTilingContinuity >(scontinuity_);
}
inline void Chart3DImageTextureTilingArchive::set_scontinuity(::TSCH::TextureTilingContinuity value) {
  assert(::TSCH::TextureTilingContinuity_IsValid(value));
  set_has_scontinuity();
  scontinuity_ = value;
}

// optional .TSCH.TextureTilingContinuity tcontinuity = 8;
inline bool Chart3DImageTextureTilingArchive::has_tcontinuity() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Chart3DImageTextureTilingArchive::set_has_tcontinuity() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Chart3DImageTextureTilingArchive::clear_has_tcontinuity() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Chart3DImageTextureTilingArchive::clear_tcontinuity() {
  tcontinuity_ = 0;
  clear_has_tcontinuity();
}
inline ::TSCH::TextureTilingContinuity Chart3DImageTextureTilingArchive::tcontinuity() const {
  return static_cast< ::TSCH::TextureTilingContinuity >(tcontinuity_);
}
inline void Chart3DImageTextureTilingArchive::set_tcontinuity(::TSCH::TextureTilingContinuity value) {
  assert(::TSCH::TextureTilingContinuity_IsValid(value));
  set_has_tcontinuity();
  tcontinuity_ = value;
}

// optional bool reveal = 9;
inline bool Chart3DImageTextureTilingArchive::has_reveal() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Chart3DImageTextureTilingArchive::set_has_reveal() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Chart3DImageTextureTilingArchive::clear_has_reveal() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Chart3DImageTextureTilingArchive::clear_reveal() {
  reveal_ = false;
  clear_has_reveal();
}
inline bool Chart3DImageTextureTilingArchive::reveal() const {
  return reveal_;
}
inline void Chart3DImageTextureTilingArchive::set_reveal(bool value) {
  set_has_reveal();
  reveal_ = value;
}

// -------------------------------------------------------------------

// Chart3DVectorArchive

// required float x = 1;
inline bool Chart3DVectorArchive::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Chart3DVectorArchive::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Chart3DVectorArchive::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Chart3DVectorArchive::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Chart3DVectorArchive::x() const {
  return x_;
}
inline void Chart3DVectorArchive::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 2;
inline bool Chart3DVectorArchive::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Chart3DVectorArchive::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Chart3DVectorArchive::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Chart3DVectorArchive::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Chart3DVectorArchive::y() const {
  return y_;
}
inline void Chart3DVectorArchive::set_y(float value) {
  set_has_y();
  y_ = value;
}

// required float z = 3;
inline bool Chart3DVectorArchive::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Chart3DVectorArchive::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Chart3DVectorArchive::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Chart3DVectorArchive::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float Chart3DVectorArchive::z() const {
  return z_;
}
inline void Chart3DVectorArchive::set_z(float value) {
  set_has_z();
  z_ = value;
}

// required float w = 4;
inline bool Chart3DVectorArchive::has_w() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Chart3DVectorArchive::set_has_w() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Chart3DVectorArchive::clear_has_w() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Chart3DVectorArchive::clear_w() {
  w_ = 0;
  clear_has_w();
}
inline float Chart3DVectorArchive::w() const {
  return w_;
}
inline void Chart3DVectorArchive::set_w(float value) {
  set_has_w();
  w_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TSCH

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSCH::TextureTilingMode>() {
  return ::TSCH::TextureTilingMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSCH::TextureTilingFace>() {
  return ::TSCH::TextureTilingFace_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSCH::TextureTilingWrap>() {
  return ::TSCH::TextureTilingWrap_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSCH::TextureTilingXPosition>() {
  return ::TSCH::TextureTilingXPosition_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSCH::TextureTilingYPosition>() {
  return ::TSCH::TextureTilingYPosition_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSCH::TextureTilingContinuity>() {
  return ::TSCH::TextureTilingContinuity_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSCH::FillPropertyType>() {
  return ::TSCH::FillPropertyType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TSCH3DArchives_2eproto__INCLUDED
