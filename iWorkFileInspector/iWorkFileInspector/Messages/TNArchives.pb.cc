// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TNArchives.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TNArchives.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace TN {

namespace {

const ::google::protobuf::Descriptor* SheetUIStateArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SheetUIStateArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* SheetUIStateDictionaryEntryArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SheetUIStateDictionaryEntryArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* UIStateArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UIStateArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* UIStateArchive_InspectorPaneViewMode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SheetSelectionArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SheetSelectionArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* UndoRedoStateArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UndoRedoStateArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* DocumentArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DocumentArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlaceholderArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlaceholderArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* SheetArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SheetArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* FormBasedSheetArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FormBasedSheetArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ThemeArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ThemeArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChartMediatorFormulaStorage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartMediatorFormulaStorage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChartMediatorArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartMediatorArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChartSelectionArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartSelectionArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SheetPageOrder_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_TNArchives_2eproto() {
  protobuf_AddDesc_TNArchives_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TNArchives.proto");
  GOOGLE_CHECK(file != NULL);
  SheetUIStateArchive_descriptor_ = file->message_type(0);
  static const int SheetUIStateArchive_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SheetUIStateArchive, view_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SheetUIStateArchive, scroll_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SheetUIStateArchive, previous_view_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SheetUIStateArchive, scroll_position_is_unscaled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SheetUIStateArchive, previous_scroll_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SheetUIStateArchive, scroll_position_valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SheetUIStateArchive, previous_scroll_position_valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SheetUIStateArchive, visible_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SheetUIStateArchive, previous_visible_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SheetUIStateArchive, device_idiom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SheetUIStateArchive, form_focused_record_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SheetUIStateArchive, form_focused_field_index_),
  };
  SheetUIStateArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SheetUIStateArchive_descriptor_,
      SheetUIStateArchive::default_instance_,
      SheetUIStateArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SheetUIStateArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SheetUIStateArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SheetUIStateArchive));
  SheetUIStateDictionaryEntryArchive_descriptor_ = file->message_type(1);
  static const int SheetUIStateDictionaryEntryArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SheetUIStateDictionaryEntryArchive, sheet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SheetUIStateDictionaryEntryArchive, sheet_uistate_),
  };
  SheetUIStateDictionaryEntryArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SheetUIStateDictionaryEntryArchive_descriptor_,
      SheetUIStateDictionaryEntryArchive::default_instance_,
      SheetUIStateDictionaryEntryArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SheetUIStateDictionaryEntryArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SheetUIStateDictionaryEntryArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SheetUIStateDictionaryEntryArchive));
  UIStateArchive_descriptor_ = file->message_type(2);
  static const int UIStateArchive_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, active_sheet_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, selected_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, sheet_uistate_dictionary_entry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, table_selection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, editing_sheet_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, document_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, edit_mode_sheet_uistate_dictionary_entry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, table_editing_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, form_focused_record_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, form_focused_field_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, in_chart_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, chart_selection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, sheet_selection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, inspector_pane_visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, inspector_pane_view_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, selected_quick_calc_functions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, removed_all_quick_calc_functions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, show_canvas_guides_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, shows_comments_),
  };
  UIStateArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UIStateArchive_descriptor_,
      UIStateArchive::default_instance_,
      UIStateArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UIStateArchive));
  UIStateArchive_InspectorPaneViewMode_descriptor_ = UIStateArchive_descriptor_->enum_type(0);
  SheetSelectionArchive_descriptor_ = file->message_type(3);
  static const int SheetSelectionArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SheetSelectionArchive, sheet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SheetSelectionArchive, paginated_),
  };
  SheetSelectionArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SheetSelectionArchive_descriptor_,
      SheetSelectionArchive::default_instance_,
      SheetSelectionArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SheetSelectionArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SheetSelectionArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SheetSelectionArchive));
  UndoRedoStateArchive_descriptor_ = file->message_type(4);
  static const int UndoRedoStateArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoRedoStateArchive, ui_state_),
  };
  UndoRedoStateArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UndoRedoStateArchive_descriptor_,
      UndoRedoStateArchive::default_instance_,
      UndoRedoStateArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoRedoStateArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoRedoStateArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UndoRedoStateArchive));
  DocumentArchive_descriptor_ = file->message_type(5);
  static const int DocumentArchive_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, sheets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, calculation_engine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, stylesheet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, sidebar_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, theme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, uistate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, custom_format_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, printer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, paper_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, page_size_),
  };
  DocumentArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DocumentArchive_descriptor_,
      DocumentArchive::default_instance_,
      DocumentArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DocumentArchive));
  PlaceholderArchive_descriptor_ = file->message_type(6);
  static const int PlaceholderArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceholderArchive, super_),
  };
  PlaceholderArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlaceholderArchive_descriptor_,
      PlaceholderArchive::default_instance_,
      PlaceholderArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceholderArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceholderArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlaceholderArchive));
  SheetArchive_descriptor_ = file->message_type(7);
  static const int SheetArchive_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SheetArchive, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SheetArchive, drawable_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SheetArchive, in_portrait_page_orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SheetArchive, show_repeating_headers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SheetArchive, show_page_numbers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SheetArchive, is_autofit_on_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SheetArchive, content_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SheetArchive, page_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SheetArchive, print_margins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SheetArchive, using_start_page_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SheetArchive, start_page_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SheetArchive, page_header_inset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SheetArchive, page_footer_inset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SheetArchive, header_storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SheetArchive, footer_storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SheetArchive, userdefinedguidestorage_),
  };
  SheetArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SheetArchive_descriptor_,
      SheetArchive::default_instance_,
      SheetArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SheetArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SheetArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SheetArchive));
  FormBasedSheetArchive_descriptor_ = file->message_type(8);
  static const int FormBasedSheetArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormBasedSheetArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormBasedSheetArchive, table_id_),
  };
  FormBasedSheetArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FormBasedSheetArchive_descriptor_,
      FormBasedSheetArchive::default_instance_,
      FormBasedSheetArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormBasedSheetArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormBasedSheetArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FormBasedSheetArchive));
  ThemeArchive_descriptor_ = file->message_type(9);
  static const int ThemeArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeArchive, prototypes_),
  };
  ThemeArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ThemeArchive_descriptor_,
      ThemeArchive::default_instance_,
      ThemeArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ThemeArchive));
  ChartMediatorFormulaStorage_descriptor_ = file->message_type(10);
  static const int ChartMediatorFormulaStorage_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartMediatorFormulaStorage, data_formulae_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartMediatorFormulaStorage, row_label_formulae_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartMediatorFormulaStorage, col_label_formulae_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartMediatorFormulaStorage, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartMediatorFormulaStorage, error_custom_pos_formulae_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartMediatorFormulaStorage, error_custom_neg_formulae_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartMediatorFormulaStorage, error_custom_pos_scatterx_formulae_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartMediatorFormulaStorage, error_custom_neg_scatterx_formulae_),
  };
  ChartMediatorFormulaStorage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartMediatorFormulaStorage_descriptor_,
      ChartMediatorFormulaStorage::default_instance_,
      ChartMediatorFormulaStorage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartMediatorFormulaStorage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartMediatorFormulaStorage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartMediatorFormulaStorage));
  ChartMediatorArchive_descriptor_ = file->message_type(11);
  static const int ChartMediatorArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartMediatorArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartMediatorArchive, entity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartMediatorArchive, formulas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartMediatorArchive, columns_are_series_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartMediatorArchive, is_registered_with_calc_engine_),
  };
  ChartMediatorArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartMediatorArchive_descriptor_,
      ChartMediatorArchive::default_instance_,
      ChartMediatorArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartMediatorArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartMediatorArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartMediatorArchive));
  ChartSelectionArchive_descriptor_ = file->message_type(12);
  static const int ChartSelectionArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSelectionArchive, reference_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSelectionArchive, super_),
  };
  ChartSelectionArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartSelectionArchive_descriptor_,
      ChartSelectionArchive::default_instance_,
      ChartSelectionArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSelectionArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSelectionArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartSelectionArchive));
  SheetPageOrder_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TNArchives_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SheetUIStateArchive_descriptor_, &SheetUIStateArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SheetUIStateDictionaryEntryArchive_descriptor_, &SheetUIStateDictionaryEntryArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UIStateArchive_descriptor_, &UIStateArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SheetSelectionArchive_descriptor_, &SheetSelectionArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UndoRedoStateArchive_descriptor_, &UndoRedoStateArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DocumentArchive_descriptor_, &DocumentArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlaceholderArchive_descriptor_, &PlaceholderArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SheetArchive_descriptor_, &SheetArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FormBasedSheetArchive_descriptor_, &FormBasedSheetArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ThemeArchive_descriptor_, &ThemeArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartMediatorFormulaStorage_descriptor_, &ChartMediatorFormulaStorage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartMediatorArchive_descriptor_, &ChartMediatorArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartSelectionArchive_descriptor_, &ChartSelectionArchive::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TNArchives_2eproto() {
  delete SheetUIStateArchive::default_instance_;
  delete SheetUIStateArchive_reflection_;
  delete SheetUIStateDictionaryEntryArchive::default_instance_;
  delete SheetUIStateDictionaryEntryArchive_reflection_;
  delete UIStateArchive::default_instance_;
  delete UIStateArchive_reflection_;
  delete SheetSelectionArchive::default_instance_;
  delete SheetSelectionArchive_reflection_;
  delete UndoRedoStateArchive::default_instance_;
  delete UndoRedoStateArchive_reflection_;
  delete DocumentArchive::default_instance_;
  delete DocumentArchive_reflection_;
  delete PlaceholderArchive::default_instance_;
  delete PlaceholderArchive_reflection_;
  delete SheetArchive::default_instance_;
  delete SheetArchive_reflection_;
  delete FormBasedSheetArchive::default_instance_;
  delete FormBasedSheetArchive_reflection_;
  delete ThemeArchive::default_instance_;
  delete ThemeArchive_reflection_;
  delete ChartMediatorFormulaStorage::default_instance_;
  delete ChartMediatorFormulaStorage_reflection_;
  delete ChartMediatorArchive::default_instance_;
  delete ChartMediatorArchive_reflection_;
  delete ChartSelectionArchive::default_instance_;
  delete ChartSelectionArchive_reflection_;
}

void protobuf_AddDesc_TNArchives_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::TSP::protobuf_AddDesc_TSPMessages_2eproto();
  ::TSK::protobuf_AddDesc_TSKArchives_2eproto();
  ::TSCH::protobuf_AddDesc_TSCHArchives_2eproto();
  ::TSCE::protobuf_AddDesc_TSCEArchives_2eproto();
  ::TSS::protobuf_AddDesc_TSSArchives_2eproto();
  ::TSD::protobuf_AddDesc_TSDArchives_2eproto();
  ::TSWP::protobuf_AddDesc_TSWPArchives_2eproto();
  ::TSA::protobuf_AddDesc_TSAArchives_2eproto();
  ::TST::protobuf_AddDesc_TSTArchives_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020TNArchives.proto\022\002TN\032\021TSPMessages.prot"
    "o\032\021TSKArchives.proto\032\022TSCHArchives.proto"
    "\032\022TSCEArchives.proto\032\021TSSArchives.proto\032"
    "\021TSDArchives.proto\032\022TSWPArchives.proto\032\021"
    "TSAArchives.proto\032\021TSTArchives.proto\"\253\003\n"
    "\023SheetUIStateArchive\022\022\n\nview_scale\030\001 \002(\002"
    "\022#\n\017scroll_position\030\002 \002(\0132\n.TSP.Point\022\033\n"
    "\023previous_view_scale\030\003 \001(\002\022#\n\033scroll_pos"
    "ition_is_unscaled\030\004 \001(\010\022,\n\030previous_scro"
    "ll_position\030\005 \001(\0132\n.TSP.Point\022\035\n\025scroll_"
    "position_valid\030\006 \001(\010\022&\n\036previous_scroll_"
    "position_valid\030\007 \001(\010\022\037\n\014visible_size\030\010 \001"
    "(\0132\t.TSP.Size\022(\n\025previous_visible_size\030\t"
    " \001(\0132\t.TSP.Size\022\024\n\014device_idiom\030\n \001(\r\022!\n"
    "\031form_focused_record_index\030\013 \001(\r\022 \n\030form"
    "_focused_field_index\030\014 \001(\r\"s\n\"SheetUISta"
    "teDictionaryEntryArchive\022\035\n\005sheet\030\001 \002(\0132"
    "\016.TSP.Reference\022.\n\rsheet_uistate\030\002 \002(\0132\027"
    ".TN.SheetUIStateArchive\"\270\007\n\016UIStateArchi"
    "ve\022\036\n\022active_sheet_index\030\001 \002(\rB\002\030\001\022%\n\rse"
    "lected_info\030\002 \003(\0132\016.TSP.Reference\022N\n\036she"
    "et_uistate_dictionary_entry\030\003 \003(\0132&.TN.S"
    "heetUIStateDictionaryEntryArchive\022.\n\017tab"
    "le_selection\030\004 \001(\0132\025.TST.SelectionArchiv"
    "e\022\037\n\023editing_sheet_index\030\005 \001(\rB\002\030\001\022\025\n\rdo"
    "cument_mode\030\006 \001(\005\022X\n(edit_mode_sheet_uis"
    "tate_dictionary_entry\030\007 \003(\0132&.TN.SheetUI"
    "StateDictionaryEntryArchive\022\032\n\022table_edi"
    "ting_mode\030\010 \001(\005\022%\n\031form_focused_record_i"
    "ndex\030\t \001(\rB\002\030\001\022$\n\030form_focused_field_ind"
    "ex\030\n \001(\rB\002\030\001\022\025\n\rin_chart_mode\030\013 \001(\010\0222\n\017c"
    "hart_selection\030\014 \001(\0132\031.TN.ChartSelection"
    "Archive\022\'\n\017sheet_selection\030\r \001(\0132\016.TSP.R"
    "eference\022$\n\026inspector_pane_visible\030\016 \001(\010"
    ":\004true\022h\n\030inspector_pane_view_mode\030\017 \001(\016"
    "2(.TN.UIStateArchive.InspectorPaneViewMo"
    "de:\034kInspectorPaneViewModeFormat\022%\n\035sele"
    "cted_quick_calc_functions\030\020 \003(\r\022(\n remov"
    "ed_all_quick_calc_functions\030\021 \001(\010\022\032\n\022sho"
    "w_canvas_guides\030\022 \001(\010\022\026\n\016shows_comments\030"
    "\023 \001(\010\"[\n\025InspectorPaneViewMode\022 \n\034kInspe"
    "ctorPaneViewModeFormat\020\000\022 \n\034kInspectorPa"
    "neViewModeFilter\020\001\"I\n\025SheetSelectionArch"
    "ive\022\035\n\005sheet\030\001 \001(\0132\016.TSP.Reference\022\021\n\tpa"
    "ginated\030\002 \001(\010\"<\n\024UndoRedoStateArchive\022$\n"
    "\010ui_state\030\001 \002(\0132\022.TN.UIStateArchive\"\205\003\n\017"
    "DocumentArchive\022\036\n\006sheets\030\001 \003(\0132\016.TSP.Re"
    "ference\022#\n\005super\030\010 \002(\0132\024.TSA.DocumentArc"
    "hive\022.\n\022calculation_engine\030\003 \001(\0132\016.TSP.R"
    "eferenceB\002\030\001\022\"\n\nstylesheet\030\004 \002(\0132\016.TSP.R"
    "eference\022%\n\rsidebar_order\030\005 \002(\0132\016.TSP.Re"
    "ference\022\035\n\005theme\030\006 \002(\0132\016.TSP.Reference\022#"
    "\n\007uistate\030\007 \001(\0132\022.TN.UIStateArchive\022*\n\022c"
    "ustom_format_list\030\t \001(\0132\016.TSP.Reference\022"
    "\022\n\nprinter_id\030\n \001(\t\022\020\n\010paper_id\030\013 \001(\t\022\034\n"
    "\tpage_size\030\014 \001(\0132\t.TSP.Size\";\n\022Placehold"
    "erArchive\022%\n\005super\030\001 \002(\0132\026.TSWP.ShapeInf"
    "oArchive\"\241\004\n\014SheetArchive\022\014\n\004name\030\001 \002(\t\022"
    "&\n\016drawable_infos\030\002 \003(\0132\016.TSP.Reference\022"
    "$\n\034in_portrait_page_orientation\030\003 \001(\010\022\"\n"
    "\026show_repeating_headers\030\004 \001(\010B\002\030\001\022\031\n\021sho"
    "w_page_numbers\030\005 \001(\010\022\025\n\ris_autofit_on\030\006 "
    "\001(\010\022\025\n\rcontent_scale\030\007 \001(\002\022&\n\npage_order"
    "\030\010 \001(\0162\022.TN.SheetPageOrder\022-\n\rprint_marg"
    "ins\030\n \001(\0132\026.TSD.EdgeInsetsArchive\022\037\n\027usi"
    "ng_start_page_number\030\013 \001(\010\022\031\n\021start_page"
    "_number\030\014 \001(\005\022\031\n\021page_header_inset\030\r \001(\002"
    "\022\031\n\021page_footer_inset\030\016 \001(\002\022&\n\016header_st"
    "orage\030\017 \001(\0132\016.TSP.Reference\022&\n\016footer_st"
    "orage\030\020 \001(\0132\016.TSP.Reference\022/\n\027userDefin"
    "edGuideStorage\030\021 \001(\0132\016.TSP.Reference\"_\n\025"
    "FormBasedSheetArchive\022\037\n\005super\030\001 \002(\0132\020.T"
    "N.SheetArchive\022%\n\010table_id\030\002 \001(\0132\023.TSCE."
    "CFUUIDArchive\"T\n\014ThemeArchive\022 \n\005super\030\001"
    " \002(\0132\021.TSS.ThemeArchive\022\"\n\nprototypes\030\002 "
    "\003(\0132\016.TSP.Reference\"\267\003\n\033ChartMediatorFor"
    "mulaStorage\022+\n\rdata_formulae\030\001 \003(\0132\024.TSC"
    "E.FormulaArchive\0220\n\022row_label_formulae\030\003"
    " \003(\0132\024.TSCE.FormulaArchive\0220\n\022col_label_"
    "formulae\030\004 \003(\0132\024.TSCE.FormulaArchive\022\021\n\t"
    "direction\030\005 \001(\005\0227\n\031error_custom_pos_form"
    "ulae\030\006 \003(\0132\024.TSCE.FormulaArchive\0227\n\031erro"
    "r_custom_neg_formulae\030\007 \003(\0132\024.TSCE.Formu"
    "laArchive\022@\n\"error_custom_pos_scatterX_f"
    "ormulae\030\010 \003(\0132\024.TSCE.FormulaArchive\022@\n\"e"
    "rror_custom_neg_scatterX_formulae\030\t \003(\0132"
    "\024.TSCE.FormulaArchive\"\317\001\n\024ChartMediatorA"
    "rchive\022)\n\005super\030\001 \002(\0132\032.TSCH.ChartMediat"
    "orArchive\022\021\n\tentity_id\030\002 \002(\t\0221\n\010formulas"
    "\030\003 \001(\0132\037.TN.ChartMediatorFormulaStorage\022"
    "\032\n\022columns_are_series\030\004 \001(\010\022*\n\036is_regist"
    "ered_with_calc_engine\030\005 \001(\010B\002\030\001\"s\n\025Chart"
    "SelectionArchive\022.\n\treference\030\001 \001(\0132\033.TS"
    "CE.RangeReferenceArchive\022*\n\005super\030\002 \001(\0132"
    "\033.TSCH.ChartSelectionArchive*N\n\016SheetPag"
    "eOrder\022\035\n\031SheetPageOrderTopToBottom\020\000\022\035\n"
    "\031SheetPageOrderLeftToRight\020\001", 3868);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TNArchives.proto", &protobuf_RegisterTypes);
  SheetUIStateArchive::default_instance_ = new SheetUIStateArchive();
  SheetUIStateDictionaryEntryArchive::default_instance_ = new SheetUIStateDictionaryEntryArchive();
  UIStateArchive::default_instance_ = new UIStateArchive();
  SheetSelectionArchive::default_instance_ = new SheetSelectionArchive();
  UndoRedoStateArchive::default_instance_ = new UndoRedoStateArchive();
  DocumentArchive::default_instance_ = new DocumentArchive();
  PlaceholderArchive::default_instance_ = new PlaceholderArchive();
  SheetArchive::default_instance_ = new SheetArchive();
  FormBasedSheetArchive::default_instance_ = new FormBasedSheetArchive();
  ThemeArchive::default_instance_ = new ThemeArchive();
  ChartMediatorFormulaStorage::default_instance_ = new ChartMediatorFormulaStorage();
  ChartMediatorArchive::default_instance_ = new ChartMediatorArchive();
  ChartSelectionArchive::default_instance_ = new ChartSelectionArchive();
  SheetUIStateArchive::default_instance_->InitAsDefaultInstance();
  SheetUIStateDictionaryEntryArchive::default_instance_->InitAsDefaultInstance();
  UIStateArchive::default_instance_->InitAsDefaultInstance();
  SheetSelectionArchive::default_instance_->InitAsDefaultInstance();
  UndoRedoStateArchive::default_instance_->InitAsDefaultInstance();
  DocumentArchive::default_instance_->InitAsDefaultInstance();
  PlaceholderArchive::default_instance_->InitAsDefaultInstance();
  SheetArchive::default_instance_->InitAsDefaultInstance();
  FormBasedSheetArchive::default_instance_->InitAsDefaultInstance();
  ThemeArchive::default_instance_->InitAsDefaultInstance();
  ChartMediatorFormulaStorage::default_instance_->InitAsDefaultInstance();
  ChartMediatorArchive::default_instance_->InitAsDefaultInstance();
  ChartSelectionArchive::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TNArchives_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TNArchives_2eproto {
  StaticDescriptorInitializer_TNArchives_2eproto() {
    protobuf_AddDesc_TNArchives_2eproto();
  }
} static_descriptor_initializer_TNArchives_2eproto_;
const ::google::protobuf::EnumDescriptor* SheetPageOrder_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SheetPageOrder_descriptor_;
}
bool SheetPageOrder_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int SheetUIStateArchive::kViewScaleFieldNumber;
const int SheetUIStateArchive::kScrollPositionFieldNumber;
const int SheetUIStateArchive::kPreviousViewScaleFieldNumber;
const int SheetUIStateArchive::kScrollPositionIsUnscaledFieldNumber;
const int SheetUIStateArchive::kPreviousScrollPositionFieldNumber;
const int SheetUIStateArchive::kScrollPositionValidFieldNumber;
const int SheetUIStateArchive::kPreviousScrollPositionValidFieldNumber;
const int SheetUIStateArchive::kVisibleSizeFieldNumber;
const int SheetUIStateArchive::kPreviousVisibleSizeFieldNumber;
const int SheetUIStateArchive::kDeviceIdiomFieldNumber;
const int SheetUIStateArchive::kFormFocusedRecordIndexFieldNumber;
const int SheetUIStateArchive::kFormFocusedFieldIndexFieldNumber;
#endif  // !_MSC_VER

SheetUIStateArchive::SheetUIStateArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SheetUIStateArchive::InitAsDefaultInstance() {
  scroll_position_ = const_cast< ::TSP::Point*>(&::TSP::Point::default_instance());
  previous_scroll_position_ = const_cast< ::TSP::Point*>(&::TSP::Point::default_instance());
  visible_size_ = const_cast< ::TSP::Size*>(&::TSP::Size::default_instance());
  previous_visible_size_ = const_cast< ::TSP::Size*>(&::TSP::Size::default_instance());
}

SheetUIStateArchive::SheetUIStateArchive(const SheetUIStateArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SheetUIStateArchive::SharedCtor() {
  _cached_size_ = 0;
  view_scale_ = 0;
  scroll_position_ = NULL;
  previous_view_scale_ = 0;
  scroll_position_is_unscaled_ = false;
  previous_scroll_position_ = NULL;
  scroll_position_valid_ = false;
  previous_scroll_position_valid_ = false;
  visible_size_ = NULL;
  previous_visible_size_ = NULL;
  device_idiom_ = 0u;
  form_focused_record_index_ = 0u;
  form_focused_field_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SheetUIStateArchive::~SheetUIStateArchive() {
  SharedDtor();
}

void SheetUIStateArchive::SharedDtor() {
  if (this != default_instance_) {
    delete scroll_position_;
    delete previous_scroll_position_;
    delete visible_size_;
    delete previous_visible_size_;
  }
}

void SheetUIStateArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SheetUIStateArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SheetUIStateArchive_descriptor_;
}

const SheetUIStateArchive& SheetUIStateArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TNArchives_2eproto();
  return *default_instance_;
}

SheetUIStateArchive* SheetUIStateArchive::default_instance_ = NULL;

SheetUIStateArchive* SheetUIStateArchive::New() const {
  return new SheetUIStateArchive;
}

void SheetUIStateArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    view_scale_ = 0;
    if (has_scroll_position()) {
      if (scroll_position_ != NULL) scroll_position_->::TSP::Point::Clear();
    }
    previous_view_scale_ = 0;
    scroll_position_is_unscaled_ = false;
    if (has_previous_scroll_position()) {
      if (previous_scroll_position_ != NULL) previous_scroll_position_->::TSP::Point::Clear();
    }
    scroll_position_valid_ = false;
    previous_scroll_position_valid_ = false;
    if (has_visible_size()) {
      if (visible_size_ != NULL) visible_size_->::TSP::Size::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_previous_visible_size()) {
      if (previous_visible_size_ != NULL) previous_visible_size_->::TSP::Size::Clear();
    }
    device_idiom_ = 0u;
    form_focused_record_index_ = 0u;
    form_focused_field_index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SheetUIStateArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float view_scale = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &view_scale_)));
          set_has_view_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_scroll_position;
        break;
      }

      // required .TSP.Point scroll_position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scroll_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scroll_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_previous_view_scale;
        break;
      }

      // optional float previous_view_scale = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_previous_view_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &previous_view_scale_)));
          set_has_previous_view_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_scroll_position_is_unscaled;
        break;
      }

      // optional bool scroll_position_is_unscaled = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scroll_position_is_unscaled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &scroll_position_is_unscaled_)));
          set_has_scroll_position_is_unscaled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_previous_scroll_position;
        break;
      }

      // optional .TSP.Point previous_scroll_position = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_previous_scroll_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_previous_scroll_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_scroll_position_valid;
        break;
      }

      // optional bool scroll_position_valid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scroll_position_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &scroll_position_valid_)));
          set_has_scroll_position_valid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_previous_scroll_position_valid;
        break;
      }

      // optional bool previous_scroll_position_valid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_previous_scroll_position_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &previous_scroll_position_valid_)));
          set_has_previous_scroll_position_valid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_visible_size;
        break;
      }

      // optional .TSP.Size visible_size = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_visible_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_visible_size()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_previous_visible_size;
        break;
      }

      // optional .TSP.Size previous_visible_size = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_previous_visible_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_previous_visible_size()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_device_idiom;
        break;
      }

      // optional uint32 device_idiom = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_device_idiom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_idiom_)));
          set_has_device_idiom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_form_focused_record_index;
        break;
      }

      // optional uint32 form_focused_record_index = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_form_focused_record_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &form_focused_record_index_)));
          set_has_form_focused_record_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_form_focused_field_index;
        break;
      }

      // optional uint32 form_focused_field_index = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_form_focused_field_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &form_focused_field_index_)));
          set_has_form_focused_field_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SheetUIStateArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float view_scale = 1;
  if (has_view_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->view_scale(), output);
  }

  // required .TSP.Point scroll_position = 2;
  if (has_scroll_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->scroll_position(), output);
  }

  // optional float previous_view_scale = 3;
  if (has_previous_view_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->previous_view_scale(), output);
  }

  // optional bool scroll_position_is_unscaled = 4;
  if (has_scroll_position_is_unscaled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->scroll_position_is_unscaled(), output);
  }

  // optional .TSP.Point previous_scroll_position = 5;
  if (has_previous_scroll_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->previous_scroll_position(), output);
  }

  // optional bool scroll_position_valid = 6;
  if (has_scroll_position_valid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->scroll_position_valid(), output);
  }

  // optional bool previous_scroll_position_valid = 7;
  if (has_previous_scroll_position_valid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->previous_scroll_position_valid(), output);
  }

  // optional .TSP.Size visible_size = 8;
  if (has_visible_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->visible_size(), output);
  }

  // optional .TSP.Size previous_visible_size = 9;
  if (has_previous_visible_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->previous_visible_size(), output);
  }

  // optional uint32 device_idiom = 10;
  if (has_device_idiom()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->device_idiom(), output);
  }

  // optional uint32 form_focused_record_index = 11;
  if (has_form_focused_record_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->form_focused_record_index(), output);
  }

  // optional uint32 form_focused_field_index = 12;
  if (has_form_focused_field_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->form_focused_field_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SheetUIStateArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float view_scale = 1;
  if (has_view_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->view_scale(), target);
  }

  // required .TSP.Point scroll_position = 2;
  if (has_scroll_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->scroll_position(), target);
  }

  // optional float previous_view_scale = 3;
  if (has_previous_view_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->previous_view_scale(), target);
  }

  // optional bool scroll_position_is_unscaled = 4;
  if (has_scroll_position_is_unscaled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->scroll_position_is_unscaled(), target);
  }

  // optional .TSP.Point previous_scroll_position = 5;
  if (has_previous_scroll_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->previous_scroll_position(), target);
  }

  // optional bool scroll_position_valid = 6;
  if (has_scroll_position_valid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->scroll_position_valid(), target);
  }

  // optional bool previous_scroll_position_valid = 7;
  if (has_previous_scroll_position_valid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->previous_scroll_position_valid(), target);
  }

  // optional .TSP.Size visible_size = 8;
  if (has_visible_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->visible_size(), target);
  }

  // optional .TSP.Size previous_visible_size = 9;
  if (has_previous_visible_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->previous_visible_size(), target);
  }

  // optional uint32 device_idiom = 10;
  if (has_device_idiom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->device_idiom(), target);
  }

  // optional uint32 form_focused_record_index = 11;
  if (has_form_focused_record_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->form_focused_record_index(), target);
  }

  // optional uint32 form_focused_field_index = 12;
  if (has_form_focused_field_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->form_focused_field_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SheetUIStateArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float view_scale = 1;
    if (has_view_scale()) {
      total_size += 1 + 4;
    }

    // required .TSP.Point scroll_position = 2;
    if (has_scroll_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scroll_position());
    }

    // optional float previous_view_scale = 3;
    if (has_previous_view_scale()) {
      total_size += 1 + 4;
    }

    // optional bool scroll_position_is_unscaled = 4;
    if (has_scroll_position_is_unscaled()) {
      total_size += 1 + 1;
    }

    // optional .TSP.Point previous_scroll_position = 5;
    if (has_previous_scroll_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->previous_scroll_position());
    }

    // optional bool scroll_position_valid = 6;
    if (has_scroll_position_valid()) {
      total_size += 1 + 1;
    }

    // optional bool previous_scroll_position_valid = 7;
    if (has_previous_scroll_position_valid()) {
      total_size += 1 + 1;
    }

    // optional .TSP.Size visible_size = 8;
    if (has_visible_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->visible_size());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .TSP.Size previous_visible_size = 9;
    if (has_previous_visible_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->previous_visible_size());
    }

    // optional uint32 device_idiom = 10;
    if (has_device_idiom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->device_idiom());
    }

    // optional uint32 form_focused_record_index = 11;
    if (has_form_focused_record_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->form_focused_record_index());
    }

    // optional uint32 form_focused_field_index = 12;
    if (has_form_focused_field_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->form_focused_field_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SheetUIStateArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SheetUIStateArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SheetUIStateArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SheetUIStateArchive::MergeFrom(const SheetUIStateArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_view_scale()) {
      set_view_scale(from.view_scale());
    }
    if (from.has_scroll_position()) {
      mutable_scroll_position()->::TSP::Point::MergeFrom(from.scroll_position());
    }
    if (from.has_previous_view_scale()) {
      set_previous_view_scale(from.previous_view_scale());
    }
    if (from.has_scroll_position_is_unscaled()) {
      set_scroll_position_is_unscaled(from.scroll_position_is_unscaled());
    }
    if (from.has_previous_scroll_position()) {
      mutable_previous_scroll_position()->::TSP::Point::MergeFrom(from.previous_scroll_position());
    }
    if (from.has_scroll_position_valid()) {
      set_scroll_position_valid(from.scroll_position_valid());
    }
    if (from.has_previous_scroll_position_valid()) {
      set_previous_scroll_position_valid(from.previous_scroll_position_valid());
    }
    if (from.has_visible_size()) {
      mutable_visible_size()->::TSP::Size::MergeFrom(from.visible_size());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_previous_visible_size()) {
      mutable_previous_visible_size()->::TSP::Size::MergeFrom(from.previous_visible_size());
    }
    if (from.has_device_idiom()) {
      set_device_idiom(from.device_idiom());
    }
    if (from.has_form_focused_record_index()) {
      set_form_focused_record_index(from.form_focused_record_index());
    }
    if (from.has_form_focused_field_index()) {
      set_form_focused_field_index(from.form_focused_field_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SheetUIStateArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SheetUIStateArchive::CopyFrom(const SheetUIStateArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SheetUIStateArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_scroll_position()) {
    if (!this->scroll_position().IsInitialized()) return false;
  }
  if (has_previous_scroll_position()) {
    if (!this->previous_scroll_position().IsInitialized()) return false;
  }
  if (has_visible_size()) {
    if (!this->visible_size().IsInitialized()) return false;
  }
  if (has_previous_visible_size()) {
    if (!this->previous_visible_size().IsInitialized()) return false;
  }
  return true;
}

void SheetUIStateArchive::Swap(SheetUIStateArchive* other) {
  if (other != this) {
    std::swap(view_scale_, other->view_scale_);
    std::swap(scroll_position_, other->scroll_position_);
    std::swap(previous_view_scale_, other->previous_view_scale_);
    std::swap(scroll_position_is_unscaled_, other->scroll_position_is_unscaled_);
    std::swap(previous_scroll_position_, other->previous_scroll_position_);
    std::swap(scroll_position_valid_, other->scroll_position_valid_);
    std::swap(previous_scroll_position_valid_, other->previous_scroll_position_valid_);
    std::swap(visible_size_, other->visible_size_);
    std::swap(previous_visible_size_, other->previous_visible_size_);
    std::swap(device_idiom_, other->device_idiom_);
    std::swap(form_focused_record_index_, other->form_focused_record_index_);
    std::swap(form_focused_field_index_, other->form_focused_field_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SheetUIStateArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SheetUIStateArchive_descriptor_;
  metadata.reflection = SheetUIStateArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SheetUIStateDictionaryEntryArchive::kSheetFieldNumber;
const int SheetUIStateDictionaryEntryArchive::kSheetUistateFieldNumber;
#endif  // !_MSC_VER

SheetUIStateDictionaryEntryArchive::SheetUIStateDictionaryEntryArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SheetUIStateDictionaryEntryArchive::InitAsDefaultInstance() {
  sheet_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  sheet_uistate_ = const_cast< ::TN::SheetUIStateArchive*>(&::TN::SheetUIStateArchive::default_instance());
}

SheetUIStateDictionaryEntryArchive::SheetUIStateDictionaryEntryArchive(const SheetUIStateDictionaryEntryArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SheetUIStateDictionaryEntryArchive::SharedCtor() {
  _cached_size_ = 0;
  sheet_ = NULL;
  sheet_uistate_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SheetUIStateDictionaryEntryArchive::~SheetUIStateDictionaryEntryArchive() {
  SharedDtor();
}

void SheetUIStateDictionaryEntryArchive::SharedDtor() {
  if (this != default_instance_) {
    delete sheet_;
    delete sheet_uistate_;
  }
}

void SheetUIStateDictionaryEntryArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SheetUIStateDictionaryEntryArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SheetUIStateDictionaryEntryArchive_descriptor_;
}

const SheetUIStateDictionaryEntryArchive& SheetUIStateDictionaryEntryArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TNArchives_2eproto();
  return *default_instance_;
}

SheetUIStateDictionaryEntryArchive* SheetUIStateDictionaryEntryArchive::default_instance_ = NULL;

SheetUIStateDictionaryEntryArchive* SheetUIStateDictionaryEntryArchive::New() const {
  return new SheetUIStateDictionaryEntryArchive;
}

void SheetUIStateDictionaryEntryArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sheet()) {
      if (sheet_ != NULL) sheet_->::TSP::Reference::Clear();
    }
    if (has_sheet_uistate()) {
      if (sheet_uistate_ != NULL) sheet_uistate_->::TN::SheetUIStateArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SheetUIStateDictionaryEntryArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSP.Reference sheet = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sheet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sheet_uistate;
        break;
      }

      // required .TN.SheetUIStateArchive sheet_uistate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sheet_uistate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sheet_uistate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SheetUIStateDictionaryEntryArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSP.Reference sheet = 1;
  if (has_sheet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sheet(), output);
  }

  // required .TN.SheetUIStateArchive sheet_uistate = 2;
  if (has_sheet_uistate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sheet_uistate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SheetUIStateDictionaryEntryArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSP.Reference sheet = 1;
  if (has_sheet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sheet(), target);
  }

  // required .TN.SheetUIStateArchive sheet_uistate = 2;
  if (has_sheet_uistate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sheet_uistate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SheetUIStateDictionaryEntryArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSP.Reference sheet = 1;
    if (has_sheet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sheet());
    }

    // required .TN.SheetUIStateArchive sheet_uistate = 2;
    if (has_sheet_uistate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sheet_uistate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SheetUIStateDictionaryEntryArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SheetUIStateDictionaryEntryArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SheetUIStateDictionaryEntryArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SheetUIStateDictionaryEntryArchive::MergeFrom(const SheetUIStateDictionaryEntryArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sheet()) {
      mutable_sheet()->::TSP::Reference::MergeFrom(from.sheet());
    }
    if (from.has_sheet_uistate()) {
      mutable_sheet_uistate()->::TN::SheetUIStateArchive::MergeFrom(from.sheet_uistate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SheetUIStateDictionaryEntryArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SheetUIStateDictionaryEntryArchive::CopyFrom(const SheetUIStateDictionaryEntryArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SheetUIStateDictionaryEntryArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_sheet()) {
    if (!this->sheet().IsInitialized()) return false;
  }
  if (has_sheet_uistate()) {
    if (!this->sheet_uistate().IsInitialized()) return false;
  }
  return true;
}

void SheetUIStateDictionaryEntryArchive::Swap(SheetUIStateDictionaryEntryArchive* other) {
  if (other != this) {
    std::swap(sheet_, other->sheet_);
    std::swap(sheet_uistate_, other->sheet_uistate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SheetUIStateDictionaryEntryArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SheetUIStateDictionaryEntryArchive_descriptor_;
  metadata.reflection = SheetUIStateDictionaryEntryArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* UIStateArchive_InspectorPaneViewMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UIStateArchive_InspectorPaneViewMode_descriptor_;
}
bool UIStateArchive_InspectorPaneViewMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const UIStateArchive_InspectorPaneViewMode UIStateArchive::kInspectorPaneViewModeFormat;
const UIStateArchive_InspectorPaneViewMode UIStateArchive::kInspectorPaneViewModeFilter;
const UIStateArchive_InspectorPaneViewMode UIStateArchive::InspectorPaneViewMode_MIN;
const UIStateArchive_InspectorPaneViewMode UIStateArchive::InspectorPaneViewMode_MAX;
const int UIStateArchive::InspectorPaneViewMode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int UIStateArchive::kActiveSheetIndexFieldNumber;
const int UIStateArchive::kSelectedInfoFieldNumber;
const int UIStateArchive::kSheetUistateDictionaryEntryFieldNumber;
const int UIStateArchive::kTableSelectionFieldNumber;
const int UIStateArchive::kEditingSheetIndexFieldNumber;
const int UIStateArchive::kDocumentModeFieldNumber;
const int UIStateArchive::kEditModeSheetUistateDictionaryEntryFieldNumber;
const int UIStateArchive::kTableEditingModeFieldNumber;
const int UIStateArchive::kFormFocusedRecordIndexFieldNumber;
const int UIStateArchive::kFormFocusedFieldIndexFieldNumber;
const int UIStateArchive::kInChartModeFieldNumber;
const int UIStateArchive::kChartSelectionFieldNumber;
const int UIStateArchive::kSheetSelectionFieldNumber;
const int UIStateArchive::kInspectorPaneVisibleFieldNumber;
const int UIStateArchive::kInspectorPaneViewModeFieldNumber;
const int UIStateArchive::kSelectedQuickCalcFunctionsFieldNumber;
const int UIStateArchive::kRemovedAllQuickCalcFunctionsFieldNumber;
const int UIStateArchive::kShowCanvasGuidesFieldNumber;
const int UIStateArchive::kShowsCommentsFieldNumber;
#endif  // !_MSC_VER

UIStateArchive::UIStateArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UIStateArchive::InitAsDefaultInstance() {
  table_selection_ = const_cast< ::TST::SelectionArchive*>(&::TST::SelectionArchive::default_instance());
  chart_selection_ = const_cast< ::TN::ChartSelectionArchive*>(&::TN::ChartSelectionArchive::default_instance());
  sheet_selection_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

UIStateArchive::UIStateArchive(const UIStateArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UIStateArchive::SharedCtor() {
  _cached_size_ = 0;
  active_sheet_index_ = 0u;
  table_selection_ = NULL;
  editing_sheet_index_ = 0u;
  document_mode_ = 0;
  table_editing_mode_ = 0;
  form_focused_record_index_ = 0u;
  form_focused_field_index_ = 0u;
  in_chart_mode_ = false;
  chart_selection_ = NULL;
  sheet_selection_ = NULL;
  inspector_pane_visible_ = true;
  inspector_pane_view_mode_ = 0;
  removed_all_quick_calc_functions_ = false;
  show_canvas_guides_ = false;
  shows_comments_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UIStateArchive::~UIStateArchive() {
  SharedDtor();
}

void UIStateArchive::SharedDtor() {
  if (this != default_instance_) {
    delete table_selection_;
    delete chart_selection_;
    delete sheet_selection_;
  }
}

void UIStateArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UIStateArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UIStateArchive_descriptor_;
}

const UIStateArchive& UIStateArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TNArchives_2eproto();
  return *default_instance_;
}

UIStateArchive* UIStateArchive::default_instance_ = NULL;

UIStateArchive* UIStateArchive::New() const {
  return new UIStateArchive;
}

void UIStateArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    active_sheet_index_ = 0u;
    if (has_table_selection()) {
      if (table_selection_ != NULL) table_selection_->::TST::SelectionArchive::Clear();
    }
    editing_sheet_index_ = 0u;
    document_mode_ = 0;
    table_editing_mode_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    form_focused_record_index_ = 0u;
    form_focused_field_index_ = 0u;
    in_chart_mode_ = false;
    if (has_chart_selection()) {
      if (chart_selection_ != NULL) chart_selection_->::TN::ChartSelectionArchive::Clear();
    }
    if (has_sheet_selection()) {
      if (sheet_selection_ != NULL) sheet_selection_->::TSP::Reference::Clear();
    }
    inspector_pane_visible_ = true;
    inspector_pane_view_mode_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    removed_all_quick_calc_functions_ = false;
    show_canvas_guides_ = false;
    shows_comments_ = false;
  }
  selected_info_.Clear();
  sheet_uistate_dictionary_entry_.Clear();
  edit_mode_sheet_uistate_dictionary_entry_.Clear();
  selected_quick_calc_functions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UIStateArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 active_sheet_index = 1 [deprecated = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_sheet_index_)));
          set_has_active_sheet_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_selected_info;
        break;
      }

      // repeated .TSP.Reference selected_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selected_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_selected_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_selected_info;
        if (input->ExpectTag(26)) goto parse_sheet_uistate_dictionary_entry;
        break;
      }

      // repeated .TN.SheetUIStateDictionaryEntryArchive sheet_uistate_dictionary_entry = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sheet_uistate_dictionary_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sheet_uistate_dictionary_entry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sheet_uistate_dictionary_entry;
        if (input->ExpectTag(34)) goto parse_table_selection;
        break;
      }

      // optional .TST.SelectionArchive table_selection = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_selection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_selection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_editing_sheet_index;
        break;
      }

      // optional uint32 editing_sheet_index = 5 [deprecated = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_editing_sheet_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &editing_sheet_index_)));
          set_has_editing_sheet_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_document_mode;
        break;
      }

      // optional int32 document_mode = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_document_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &document_mode_)));
          set_has_document_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_edit_mode_sheet_uistate_dictionary_entry;
        break;
      }

      // repeated .TN.SheetUIStateDictionaryEntryArchive edit_mode_sheet_uistate_dictionary_entry = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_edit_mode_sheet_uistate_dictionary_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_edit_mode_sheet_uistate_dictionary_entry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_edit_mode_sheet_uistate_dictionary_entry;
        if (input->ExpectTag(64)) goto parse_table_editing_mode;
        break;
      }

      // optional int32 table_editing_mode = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_editing_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_editing_mode_)));
          set_has_table_editing_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_form_focused_record_index;
        break;
      }

      // optional uint32 form_focused_record_index = 9 [deprecated = true];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_form_focused_record_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &form_focused_record_index_)));
          set_has_form_focused_record_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_form_focused_field_index;
        break;
      }

      // optional uint32 form_focused_field_index = 10 [deprecated = true];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_form_focused_field_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &form_focused_field_index_)));
          set_has_form_focused_field_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_in_chart_mode;
        break;
      }

      // optional bool in_chart_mode = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_in_chart_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_chart_mode_)));
          set_has_in_chart_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_chart_selection;
        break;
      }

      // optional .TN.ChartSelectionArchive chart_selection = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chart_selection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chart_selection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_sheet_selection;
        break;
      }

      // optional .TSP.Reference sheet_selection = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sheet_selection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sheet_selection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_inspector_pane_visible;
        break;
      }

      // optional bool inspector_pane_visible = 14 [default = true];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inspector_pane_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inspector_pane_visible_)));
          set_has_inspector_pane_visible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_inspector_pane_view_mode;
        break;
      }

      // optional .TN.UIStateArchive.InspectorPaneViewMode inspector_pane_view_mode = 15 [default = kInspectorPaneViewModeFormat];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inspector_pane_view_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TN::UIStateArchive_InspectorPaneViewMode_IsValid(value)) {
            set_inspector_pane_view_mode(static_cast< ::TN::UIStateArchive_InspectorPaneViewMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_selected_quick_calc_functions;
        break;
      }

      // repeated uint32 selected_quick_calc_functions = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selected_quick_calc_functions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 128, input, this->mutable_selected_quick_calc_functions())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_selected_quick_calc_functions())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_selected_quick_calc_functions;
        if (input->ExpectTag(136)) goto parse_removed_all_quick_calc_functions;
        break;
      }

      // optional bool removed_all_quick_calc_functions = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_removed_all_quick_calc_functions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &removed_all_quick_calc_functions_)));
          set_has_removed_all_quick_calc_functions();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_show_canvas_guides;
        break;
      }

      // optional bool show_canvas_guides = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_canvas_guides:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_canvas_guides_)));
          set_has_show_canvas_guides();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_shows_comments;
        break;
      }

      // optional bool shows_comments = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shows_comments:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shows_comments_)));
          set_has_shows_comments();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UIStateArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 active_sheet_index = 1 [deprecated = true];
  if (has_active_sheet_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->active_sheet_index(), output);
  }

  // repeated .TSP.Reference selected_info = 2;
  for (int i = 0; i < this->selected_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->selected_info(i), output);
  }

  // repeated .TN.SheetUIStateDictionaryEntryArchive sheet_uistate_dictionary_entry = 3;
  for (int i = 0; i < this->sheet_uistate_dictionary_entry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sheet_uistate_dictionary_entry(i), output);
  }

  // optional .TST.SelectionArchive table_selection = 4;
  if (has_table_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->table_selection(), output);
  }

  // optional uint32 editing_sheet_index = 5 [deprecated = true];
  if (has_editing_sheet_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->editing_sheet_index(), output);
  }

  // optional int32 document_mode = 6;
  if (has_document_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->document_mode(), output);
  }

  // repeated .TN.SheetUIStateDictionaryEntryArchive edit_mode_sheet_uistate_dictionary_entry = 7;
  for (int i = 0; i < this->edit_mode_sheet_uistate_dictionary_entry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->edit_mode_sheet_uistate_dictionary_entry(i), output);
  }

  // optional int32 table_editing_mode = 8;
  if (has_table_editing_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->table_editing_mode(), output);
  }

  // optional uint32 form_focused_record_index = 9 [deprecated = true];
  if (has_form_focused_record_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->form_focused_record_index(), output);
  }

  // optional uint32 form_focused_field_index = 10 [deprecated = true];
  if (has_form_focused_field_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->form_focused_field_index(), output);
  }

  // optional bool in_chart_mode = 11;
  if (has_in_chart_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->in_chart_mode(), output);
  }

  // optional .TN.ChartSelectionArchive chart_selection = 12;
  if (has_chart_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->chart_selection(), output);
  }

  // optional .TSP.Reference sheet_selection = 13;
  if (has_sheet_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->sheet_selection(), output);
  }

  // optional bool inspector_pane_visible = 14 [default = true];
  if (has_inspector_pane_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->inspector_pane_visible(), output);
  }

  // optional .TN.UIStateArchive.InspectorPaneViewMode inspector_pane_view_mode = 15 [default = kInspectorPaneViewModeFormat];
  if (has_inspector_pane_view_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->inspector_pane_view_mode(), output);
  }

  // repeated uint32 selected_quick_calc_functions = 16;
  for (int i = 0; i < this->selected_quick_calc_functions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      16, this->selected_quick_calc_functions(i), output);
  }

  // optional bool removed_all_quick_calc_functions = 17;
  if (has_removed_all_quick_calc_functions()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->removed_all_quick_calc_functions(), output);
  }

  // optional bool show_canvas_guides = 18;
  if (has_show_canvas_guides()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->show_canvas_guides(), output);
  }

  // optional bool shows_comments = 19;
  if (has_shows_comments()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->shows_comments(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UIStateArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 active_sheet_index = 1 [deprecated = true];
  if (has_active_sheet_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->active_sheet_index(), target);
  }

  // repeated .TSP.Reference selected_info = 2;
  for (int i = 0; i < this->selected_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->selected_info(i), target);
  }

  // repeated .TN.SheetUIStateDictionaryEntryArchive sheet_uistate_dictionary_entry = 3;
  for (int i = 0; i < this->sheet_uistate_dictionary_entry_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sheet_uistate_dictionary_entry(i), target);
  }

  // optional .TST.SelectionArchive table_selection = 4;
  if (has_table_selection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->table_selection(), target);
  }

  // optional uint32 editing_sheet_index = 5 [deprecated = true];
  if (has_editing_sheet_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->editing_sheet_index(), target);
  }

  // optional int32 document_mode = 6;
  if (has_document_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->document_mode(), target);
  }

  // repeated .TN.SheetUIStateDictionaryEntryArchive edit_mode_sheet_uistate_dictionary_entry = 7;
  for (int i = 0; i < this->edit_mode_sheet_uistate_dictionary_entry_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->edit_mode_sheet_uistate_dictionary_entry(i), target);
  }

  // optional int32 table_editing_mode = 8;
  if (has_table_editing_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->table_editing_mode(), target);
  }

  // optional uint32 form_focused_record_index = 9 [deprecated = true];
  if (has_form_focused_record_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->form_focused_record_index(), target);
  }

  // optional uint32 form_focused_field_index = 10 [deprecated = true];
  if (has_form_focused_field_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->form_focused_field_index(), target);
  }

  // optional bool in_chart_mode = 11;
  if (has_in_chart_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->in_chart_mode(), target);
  }

  // optional .TN.ChartSelectionArchive chart_selection = 12;
  if (has_chart_selection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->chart_selection(), target);
  }

  // optional .TSP.Reference sheet_selection = 13;
  if (has_sheet_selection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->sheet_selection(), target);
  }

  // optional bool inspector_pane_visible = 14 [default = true];
  if (has_inspector_pane_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->inspector_pane_visible(), target);
  }

  // optional .TN.UIStateArchive.InspectorPaneViewMode inspector_pane_view_mode = 15 [default = kInspectorPaneViewModeFormat];
  if (has_inspector_pane_view_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->inspector_pane_view_mode(), target);
  }

  // repeated uint32 selected_quick_calc_functions = 16;
  for (int i = 0; i < this->selected_quick_calc_functions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(16, this->selected_quick_calc_functions(i), target);
  }

  // optional bool removed_all_quick_calc_functions = 17;
  if (has_removed_all_quick_calc_functions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->removed_all_quick_calc_functions(), target);
  }

  // optional bool show_canvas_guides = 18;
  if (has_show_canvas_guides()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->show_canvas_guides(), target);
  }

  // optional bool shows_comments = 19;
  if (has_shows_comments()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->shows_comments(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UIStateArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 active_sheet_index = 1 [deprecated = true];
    if (has_active_sheet_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active_sheet_index());
    }

    // optional .TST.SelectionArchive table_selection = 4;
    if (has_table_selection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_selection());
    }

    // optional uint32 editing_sheet_index = 5 [deprecated = true];
    if (has_editing_sheet_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->editing_sheet_index());
    }

    // optional int32 document_mode = 6;
    if (has_document_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->document_mode());
    }

    // optional int32 table_editing_mode = 8;
    if (has_table_editing_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->table_editing_mode());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 form_focused_record_index = 9 [deprecated = true];
    if (has_form_focused_record_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->form_focused_record_index());
    }

    // optional uint32 form_focused_field_index = 10 [deprecated = true];
    if (has_form_focused_field_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->form_focused_field_index());
    }

    // optional bool in_chart_mode = 11;
    if (has_in_chart_mode()) {
      total_size += 1 + 1;
    }

    // optional .TN.ChartSelectionArchive chart_selection = 12;
    if (has_chart_selection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chart_selection());
    }

    // optional .TSP.Reference sheet_selection = 13;
    if (has_sheet_selection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sheet_selection());
    }

    // optional bool inspector_pane_visible = 14 [default = true];
    if (has_inspector_pane_visible()) {
      total_size += 1 + 1;
    }

    // optional .TN.UIStateArchive.InspectorPaneViewMode inspector_pane_view_mode = 15 [default = kInspectorPaneViewModeFormat];
    if (has_inspector_pane_view_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->inspector_pane_view_mode());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool removed_all_quick_calc_functions = 17;
    if (has_removed_all_quick_calc_functions()) {
      total_size += 2 + 1;
    }

    // optional bool show_canvas_guides = 18;
    if (has_show_canvas_guides()) {
      total_size += 2 + 1;
    }

    // optional bool shows_comments = 19;
    if (has_shows_comments()) {
      total_size += 2 + 1;
    }

  }
  // repeated .TSP.Reference selected_info = 2;
  total_size += 1 * this->selected_info_size();
  for (int i = 0; i < this->selected_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->selected_info(i));
  }

  // repeated .TN.SheetUIStateDictionaryEntryArchive sheet_uistate_dictionary_entry = 3;
  total_size += 1 * this->sheet_uistate_dictionary_entry_size();
  for (int i = 0; i < this->sheet_uistate_dictionary_entry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sheet_uistate_dictionary_entry(i));
  }

  // repeated .TN.SheetUIStateDictionaryEntryArchive edit_mode_sheet_uistate_dictionary_entry = 7;
  total_size += 1 * this->edit_mode_sheet_uistate_dictionary_entry_size();
  for (int i = 0; i < this->edit_mode_sheet_uistate_dictionary_entry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->edit_mode_sheet_uistate_dictionary_entry(i));
  }

  // repeated uint32 selected_quick_calc_functions = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->selected_quick_calc_functions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->selected_quick_calc_functions(i));
    }
    total_size += 2 * this->selected_quick_calc_functions_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UIStateArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UIStateArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UIStateArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UIStateArchive::MergeFrom(const UIStateArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  selected_info_.MergeFrom(from.selected_info_);
  sheet_uistate_dictionary_entry_.MergeFrom(from.sheet_uistate_dictionary_entry_);
  edit_mode_sheet_uistate_dictionary_entry_.MergeFrom(from.edit_mode_sheet_uistate_dictionary_entry_);
  selected_quick_calc_functions_.MergeFrom(from.selected_quick_calc_functions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active_sheet_index()) {
      set_active_sheet_index(from.active_sheet_index());
    }
    if (from.has_table_selection()) {
      mutable_table_selection()->::TST::SelectionArchive::MergeFrom(from.table_selection());
    }
    if (from.has_editing_sheet_index()) {
      set_editing_sheet_index(from.editing_sheet_index());
    }
    if (from.has_document_mode()) {
      set_document_mode(from.document_mode());
    }
    if (from.has_table_editing_mode()) {
      set_table_editing_mode(from.table_editing_mode());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_form_focused_record_index()) {
      set_form_focused_record_index(from.form_focused_record_index());
    }
    if (from.has_form_focused_field_index()) {
      set_form_focused_field_index(from.form_focused_field_index());
    }
    if (from.has_in_chart_mode()) {
      set_in_chart_mode(from.in_chart_mode());
    }
    if (from.has_chart_selection()) {
      mutable_chart_selection()->::TN::ChartSelectionArchive::MergeFrom(from.chart_selection());
    }
    if (from.has_sheet_selection()) {
      mutable_sheet_selection()->::TSP::Reference::MergeFrom(from.sheet_selection());
    }
    if (from.has_inspector_pane_visible()) {
      set_inspector_pane_visible(from.inspector_pane_visible());
    }
    if (from.has_inspector_pane_view_mode()) {
      set_inspector_pane_view_mode(from.inspector_pane_view_mode());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_removed_all_quick_calc_functions()) {
      set_removed_all_quick_calc_functions(from.removed_all_quick_calc_functions());
    }
    if (from.has_show_canvas_guides()) {
      set_show_canvas_guides(from.show_canvas_guides());
    }
    if (from.has_shows_comments()) {
      set_shows_comments(from.shows_comments());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UIStateArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UIStateArchive::CopyFrom(const UIStateArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UIStateArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < selected_info_size(); i++) {
    if (!this->selected_info(i).IsInitialized()) return false;
  }
  for (int i = 0; i < sheet_uistate_dictionary_entry_size(); i++) {
    if (!this->sheet_uistate_dictionary_entry(i).IsInitialized()) return false;
  }
  if (has_table_selection()) {
    if (!this->table_selection().IsInitialized()) return false;
  }
  for (int i = 0; i < edit_mode_sheet_uistate_dictionary_entry_size(); i++) {
    if (!this->edit_mode_sheet_uistate_dictionary_entry(i).IsInitialized()) return false;
  }
  if (has_chart_selection()) {
    if (!this->chart_selection().IsInitialized()) return false;
  }
  if (has_sheet_selection()) {
    if (!this->sheet_selection().IsInitialized()) return false;
  }
  return true;
}

void UIStateArchive::Swap(UIStateArchive* other) {
  if (other != this) {
    std::swap(active_sheet_index_, other->active_sheet_index_);
    selected_info_.Swap(&other->selected_info_);
    sheet_uistate_dictionary_entry_.Swap(&other->sheet_uistate_dictionary_entry_);
    std::swap(table_selection_, other->table_selection_);
    std::swap(editing_sheet_index_, other->editing_sheet_index_);
    std::swap(document_mode_, other->document_mode_);
    edit_mode_sheet_uistate_dictionary_entry_.Swap(&other->edit_mode_sheet_uistate_dictionary_entry_);
    std::swap(table_editing_mode_, other->table_editing_mode_);
    std::swap(form_focused_record_index_, other->form_focused_record_index_);
    std::swap(form_focused_field_index_, other->form_focused_field_index_);
    std::swap(in_chart_mode_, other->in_chart_mode_);
    std::swap(chart_selection_, other->chart_selection_);
    std::swap(sheet_selection_, other->sheet_selection_);
    std::swap(inspector_pane_visible_, other->inspector_pane_visible_);
    std::swap(inspector_pane_view_mode_, other->inspector_pane_view_mode_);
    selected_quick_calc_functions_.Swap(&other->selected_quick_calc_functions_);
    std::swap(removed_all_quick_calc_functions_, other->removed_all_quick_calc_functions_);
    std::swap(show_canvas_guides_, other->show_canvas_guides_);
    std::swap(shows_comments_, other->shows_comments_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UIStateArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UIStateArchive_descriptor_;
  metadata.reflection = UIStateArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SheetSelectionArchive::kSheetFieldNumber;
const int SheetSelectionArchive::kPaginatedFieldNumber;
#endif  // !_MSC_VER

SheetSelectionArchive::SheetSelectionArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SheetSelectionArchive::InitAsDefaultInstance() {
  sheet_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

SheetSelectionArchive::SheetSelectionArchive(const SheetSelectionArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SheetSelectionArchive::SharedCtor() {
  _cached_size_ = 0;
  sheet_ = NULL;
  paginated_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SheetSelectionArchive::~SheetSelectionArchive() {
  SharedDtor();
}

void SheetSelectionArchive::SharedDtor() {
  if (this != default_instance_) {
    delete sheet_;
  }
}

void SheetSelectionArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SheetSelectionArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SheetSelectionArchive_descriptor_;
}

const SheetSelectionArchive& SheetSelectionArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TNArchives_2eproto();
  return *default_instance_;
}

SheetSelectionArchive* SheetSelectionArchive::default_instance_ = NULL;

SheetSelectionArchive* SheetSelectionArchive::New() const {
  return new SheetSelectionArchive;
}

void SheetSelectionArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sheet()) {
      if (sheet_ != NULL) sheet_->::TSP::Reference::Clear();
    }
    paginated_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SheetSelectionArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Reference sheet = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sheet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_paginated;
        break;
      }

      // optional bool paginated = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_paginated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &paginated_)));
          set_has_paginated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SheetSelectionArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Reference sheet = 1;
  if (has_sheet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sheet(), output);
  }

  // optional bool paginated = 2;
  if (has_paginated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->paginated(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SheetSelectionArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Reference sheet = 1;
  if (has_sheet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sheet(), target);
  }

  // optional bool paginated = 2;
  if (has_paginated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->paginated(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SheetSelectionArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.Reference sheet = 1;
    if (has_sheet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sheet());
    }

    // optional bool paginated = 2;
    if (has_paginated()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SheetSelectionArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SheetSelectionArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SheetSelectionArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SheetSelectionArchive::MergeFrom(const SheetSelectionArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sheet()) {
      mutable_sheet()->::TSP::Reference::MergeFrom(from.sheet());
    }
    if (from.has_paginated()) {
      set_paginated(from.paginated());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SheetSelectionArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SheetSelectionArchive::CopyFrom(const SheetSelectionArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SheetSelectionArchive::IsInitialized() const {

  if (has_sheet()) {
    if (!this->sheet().IsInitialized()) return false;
  }
  return true;
}

void SheetSelectionArchive::Swap(SheetSelectionArchive* other) {
  if (other != this) {
    std::swap(sheet_, other->sheet_);
    std::swap(paginated_, other->paginated_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SheetSelectionArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SheetSelectionArchive_descriptor_;
  metadata.reflection = SheetSelectionArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UndoRedoStateArchive::kUiStateFieldNumber;
#endif  // !_MSC_VER

UndoRedoStateArchive::UndoRedoStateArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UndoRedoStateArchive::InitAsDefaultInstance() {
  ui_state_ = const_cast< ::TN::UIStateArchive*>(&::TN::UIStateArchive::default_instance());
}

UndoRedoStateArchive::UndoRedoStateArchive(const UndoRedoStateArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UndoRedoStateArchive::SharedCtor() {
  _cached_size_ = 0;
  ui_state_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UndoRedoStateArchive::~UndoRedoStateArchive() {
  SharedDtor();
}

void UndoRedoStateArchive::SharedDtor() {
  if (this != default_instance_) {
    delete ui_state_;
  }
}

void UndoRedoStateArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UndoRedoStateArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UndoRedoStateArchive_descriptor_;
}

const UndoRedoStateArchive& UndoRedoStateArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TNArchives_2eproto();
  return *default_instance_;
}

UndoRedoStateArchive* UndoRedoStateArchive::default_instance_ = NULL;

UndoRedoStateArchive* UndoRedoStateArchive::New() const {
  return new UndoRedoStateArchive;
}

void UndoRedoStateArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ui_state()) {
      if (ui_state_ != NULL) ui_state_->::TN::UIStateArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UndoRedoStateArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TN.UIStateArchive ui_state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ui_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UndoRedoStateArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TN.UIStateArchive ui_state = 1;
  if (has_ui_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ui_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UndoRedoStateArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TN.UIStateArchive ui_state = 1;
  if (has_ui_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ui_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UndoRedoStateArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TN.UIStateArchive ui_state = 1;
    if (has_ui_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ui_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UndoRedoStateArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UndoRedoStateArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UndoRedoStateArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UndoRedoStateArchive::MergeFrom(const UndoRedoStateArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ui_state()) {
      mutable_ui_state()->::TN::UIStateArchive::MergeFrom(from.ui_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UndoRedoStateArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UndoRedoStateArchive::CopyFrom(const UndoRedoStateArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoRedoStateArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_ui_state()) {
    if (!this->ui_state().IsInitialized()) return false;
  }
  return true;
}

void UndoRedoStateArchive::Swap(UndoRedoStateArchive* other) {
  if (other != this) {
    std::swap(ui_state_, other->ui_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UndoRedoStateArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UndoRedoStateArchive_descriptor_;
  metadata.reflection = UndoRedoStateArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DocumentArchive::kSheetsFieldNumber;
const int DocumentArchive::kSuperFieldNumber;
const int DocumentArchive::kCalculationEngineFieldNumber;
const int DocumentArchive::kStylesheetFieldNumber;
const int DocumentArchive::kSidebarOrderFieldNumber;
const int DocumentArchive::kThemeFieldNumber;
const int DocumentArchive::kUistateFieldNumber;
const int DocumentArchive::kCustomFormatListFieldNumber;
const int DocumentArchive::kPrinterIdFieldNumber;
const int DocumentArchive::kPaperIdFieldNumber;
const int DocumentArchive::kPageSizeFieldNumber;
#endif  // !_MSC_VER

DocumentArchive::DocumentArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DocumentArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSA::DocumentArchive*>(&::TSA::DocumentArchive::default_instance());
  calculation_engine_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  stylesheet_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  sidebar_order_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  theme_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  uistate_ = const_cast< ::TN::UIStateArchive*>(&::TN::UIStateArchive::default_instance());
  custom_format_list_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  page_size_ = const_cast< ::TSP::Size*>(&::TSP::Size::default_instance());
}

DocumentArchive::DocumentArchive(const DocumentArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DocumentArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  calculation_engine_ = NULL;
  stylesheet_ = NULL;
  sidebar_order_ = NULL;
  theme_ = NULL;
  uistate_ = NULL;
  custom_format_list_ = NULL;
  printer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  paper_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  page_size_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DocumentArchive::~DocumentArchive() {
  SharedDtor();
}

void DocumentArchive::SharedDtor() {
  if (printer_id_ != &::google::protobuf::internal::kEmptyString) {
    delete printer_id_;
  }
  if (paper_id_ != &::google::protobuf::internal::kEmptyString) {
    delete paper_id_;
  }
  if (this != default_instance_) {
    delete super_;
    delete calculation_engine_;
    delete stylesheet_;
    delete sidebar_order_;
    delete theme_;
    delete uistate_;
    delete custom_format_list_;
    delete page_size_;
  }
}

void DocumentArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DocumentArchive_descriptor_;
}

const DocumentArchive& DocumentArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TNArchives_2eproto();
  return *default_instance_;
}

DocumentArchive* DocumentArchive::default_instance_ = NULL;

DocumentArchive* DocumentArchive::New() const {
  return new DocumentArchive;
}

void DocumentArchive::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSA::DocumentArchive::Clear();
    }
    if (has_calculation_engine()) {
      if (calculation_engine_ != NULL) calculation_engine_->::TSP::Reference::Clear();
    }
    if (has_stylesheet()) {
      if (stylesheet_ != NULL) stylesheet_->::TSP::Reference::Clear();
    }
    if (has_sidebar_order()) {
      if (sidebar_order_ != NULL) sidebar_order_->::TSP::Reference::Clear();
    }
    if (has_theme()) {
      if (theme_ != NULL) theme_->::TSP::Reference::Clear();
    }
    if (has_uistate()) {
      if (uistate_ != NULL) uistate_->::TN::UIStateArchive::Clear();
    }
    if (has_custom_format_list()) {
      if (custom_format_list_ != NULL) custom_format_list_->::TSP::Reference::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_printer_id()) {
      if (printer_id_ != &::google::protobuf::internal::kEmptyString) {
        printer_id_->clear();
      }
    }
    if (has_paper_id()) {
      if (paper_id_ != &::google::protobuf::internal::kEmptyString) {
        paper_id_->clear();
      }
    }
    if (has_page_size()) {
      if (page_size_ != NULL) page_size_->::TSP::Size::Clear();
    }
  }
  sheets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DocumentArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TSP.Reference sheets = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sheets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sheets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_sheets;
        if (input->ExpectTag(26)) goto parse_calculation_engine;
        break;
      }

      // optional .TSP.Reference calculation_engine = 3 [deprecated = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_calculation_engine:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_calculation_engine()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stylesheet;
        break;
      }

      // required .TSP.Reference stylesheet = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stylesheet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stylesheet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_sidebar_order;
        break;
      }

      // required .TSP.Reference sidebar_order = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sidebar_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sidebar_order()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_theme;
        break;
      }

      // required .TSP.Reference theme = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_theme:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_theme()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_uistate;
        break;
      }

      // optional .TN.UIStateArchive uistate = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uistate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uistate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_super;
        break;
      }

      // required .TSA.DocumentArchive super = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_custom_format_list;
        break;
      }

      // optional .TSP.Reference custom_format_list = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_custom_format_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_custom_format_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_printer_id;
        break;
      }

      // optional string printer_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_printer_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_printer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->printer_id().data(), this->printer_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_paper_id;
        break;
      }

      // optional string paper_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_paper_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_paper_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->paper_id().data(), this->paper_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_page_size;
        break;
      }

      // optional .TSP.Size page_size = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_page_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_page_size()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DocumentArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TSP.Reference sheets = 1;
  for (int i = 0; i < this->sheets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sheets(i), output);
  }

  // optional .TSP.Reference calculation_engine = 3 [deprecated = true];
  if (has_calculation_engine()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->calculation_engine(), output);
  }

  // required .TSP.Reference stylesheet = 4;
  if (has_stylesheet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stylesheet(), output);
  }

  // required .TSP.Reference sidebar_order = 5;
  if (has_sidebar_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->sidebar_order(), output);
  }

  // required .TSP.Reference theme = 6;
  if (has_theme()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->theme(), output);
  }

  // optional .TN.UIStateArchive uistate = 7;
  if (has_uistate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->uistate(), output);
  }

  // required .TSA.DocumentArchive super = 8;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->super(), output);
  }

  // optional .TSP.Reference custom_format_list = 9;
  if (has_custom_format_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->custom_format_list(), output);
  }

  // optional string printer_id = 10;
  if (has_printer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->printer_id().data(), this->printer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->printer_id(), output);
  }

  // optional string paper_id = 11;
  if (has_paper_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->paper_id().data(), this->paper_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->paper_id(), output);
  }

  // optional .TSP.Size page_size = 12;
  if (has_page_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->page_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DocumentArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TSP.Reference sheets = 1;
  for (int i = 0; i < this->sheets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sheets(i), target);
  }

  // optional .TSP.Reference calculation_engine = 3 [deprecated = true];
  if (has_calculation_engine()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->calculation_engine(), target);
  }

  // required .TSP.Reference stylesheet = 4;
  if (has_stylesheet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->stylesheet(), target);
  }

  // required .TSP.Reference sidebar_order = 5;
  if (has_sidebar_order()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->sidebar_order(), target);
  }

  // required .TSP.Reference theme = 6;
  if (has_theme()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->theme(), target);
  }

  // optional .TN.UIStateArchive uistate = 7;
  if (has_uistate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->uistate(), target);
  }

  // required .TSA.DocumentArchive super = 8;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->super(), target);
  }

  // optional .TSP.Reference custom_format_list = 9;
  if (has_custom_format_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->custom_format_list(), target);
  }

  // optional string printer_id = 10;
  if (has_printer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->printer_id().data(), this->printer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->printer_id(), target);
  }

  // optional string paper_id = 11;
  if (has_paper_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->paper_id().data(), this->paper_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->paper_id(), target);
  }

  // optional .TSP.Size page_size = 12;
  if (has_page_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->page_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DocumentArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .TSA.DocumentArchive super = 8;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference calculation_engine = 3 [deprecated = true];
    if (has_calculation_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->calculation_engine());
    }

    // required .TSP.Reference stylesheet = 4;
    if (has_stylesheet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stylesheet());
    }

    // required .TSP.Reference sidebar_order = 5;
    if (has_sidebar_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sidebar_order());
    }

    // required .TSP.Reference theme = 6;
    if (has_theme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->theme());
    }

    // optional .TN.UIStateArchive uistate = 7;
    if (has_uistate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uistate());
    }

    // optional .TSP.Reference custom_format_list = 9;
    if (has_custom_format_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->custom_format_list());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string printer_id = 10;
    if (has_printer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->printer_id());
    }

    // optional string paper_id = 11;
    if (has_paper_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->paper_id());
    }

    // optional .TSP.Size page_size = 12;
    if (has_page_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->page_size());
    }

  }
  // repeated .TSP.Reference sheets = 1;
  total_size += 1 * this->sheets_size();
  for (int i = 0; i < this->sheets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sheets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DocumentArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DocumentArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DocumentArchive::MergeFrom(const DocumentArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  sheets_.MergeFrom(from.sheets_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSA::DocumentArchive::MergeFrom(from.super());
    }
    if (from.has_calculation_engine()) {
      mutable_calculation_engine()->::TSP::Reference::MergeFrom(from.calculation_engine());
    }
    if (from.has_stylesheet()) {
      mutable_stylesheet()->::TSP::Reference::MergeFrom(from.stylesheet());
    }
    if (from.has_sidebar_order()) {
      mutable_sidebar_order()->::TSP::Reference::MergeFrom(from.sidebar_order());
    }
    if (from.has_theme()) {
      mutable_theme()->::TSP::Reference::MergeFrom(from.theme());
    }
    if (from.has_uistate()) {
      mutable_uistate()->::TN::UIStateArchive::MergeFrom(from.uistate());
    }
    if (from.has_custom_format_list()) {
      mutable_custom_format_list()->::TSP::Reference::MergeFrom(from.custom_format_list());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_printer_id()) {
      set_printer_id(from.printer_id());
    }
    if (from.has_paper_id()) {
      set_paper_id(from.paper_id());
    }
    if (from.has_page_size()) {
      mutable_page_size()->::TSP::Size::MergeFrom(from.page_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DocumentArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentArchive::CopyFrom(const DocumentArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003a) != 0x0000003a) return false;

  for (int i = 0; i < sheets_size(); i++) {
    if (!this->sheets(i).IsInitialized()) return false;
  }
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_calculation_engine()) {
    if (!this->calculation_engine().IsInitialized()) return false;
  }
  if (has_stylesheet()) {
    if (!this->stylesheet().IsInitialized()) return false;
  }
  if (has_sidebar_order()) {
    if (!this->sidebar_order().IsInitialized()) return false;
  }
  if (has_theme()) {
    if (!this->theme().IsInitialized()) return false;
  }
  if (has_uistate()) {
    if (!this->uistate().IsInitialized()) return false;
  }
  if (has_custom_format_list()) {
    if (!this->custom_format_list().IsInitialized()) return false;
  }
  if (has_page_size()) {
    if (!this->page_size().IsInitialized()) return false;
  }
  return true;
}

void DocumentArchive::Swap(DocumentArchive* other) {
  if (other != this) {
    sheets_.Swap(&other->sheets_);
    std::swap(super_, other->super_);
    std::swap(calculation_engine_, other->calculation_engine_);
    std::swap(stylesheet_, other->stylesheet_);
    std::swap(sidebar_order_, other->sidebar_order_);
    std::swap(theme_, other->theme_);
    std::swap(uistate_, other->uistate_);
    std::swap(custom_format_list_, other->custom_format_list_);
    std::swap(printer_id_, other->printer_id_);
    std::swap(paper_id_, other->paper_id_);
    std::swap(page_size_, other->page_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DocumentArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DocumentArchive_descriptor_;
  metadata.reflection = DocumentArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlaceholderArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

PlaceholderArchive::PlaceholderArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlaceholderArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSWP::ShapeInfoArchive*>(&::TSWP::ShapeInfoArchive::default_instance());
}

PlaceholderArchive::PlaceholderArchive(const PlaceholderArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlaceholderArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlaceholderArchive::~PlaceholderArchive() {
  SharedDtor();
}

void PlaceholderArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void PlaceholderArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlaceholderArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlaceholderArchive_descriptor_;
}

const PlaceholderArchive& PlaceholderArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TNArchives_2eproto();
  return *default_instance_;
}

PlaceholderArchive* PlaceholderArchive::default_instance_ = NULL;

PlaceholderArchive* PlaceholderArchive::New() const {
  return new PlaceholderArchive;
}

void PlaceholderArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSWP::ShapeInfoArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlaceholderArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSWP.ShapeInfoArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlaceholderArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSWP.ShapeInfoArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlaceholderArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSWP.ShapeInfoArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlaceholderArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSWP.ShapeInfoArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlaceholderArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlaceholderArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlaceholderArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlaceholderArchive::MergeFrom(const PlaceholderArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSWP::ShapeInfoArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlaceholderArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaceholderArchive::CopyFrom(const PlaceholderArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceholderArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void PlaceholderArchive::Swap(PlaceholderArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlaceholderArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlaceholderArchive_descriptor_;
  metadata.reflection = PlaceholderArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SheetArchive::kNameFieldNumber;
const int SheetArchive::kDrawableInfosFieldNumber;
const int SheetArchive::kInPortraitPageOrientationFieldNumber;
const int SheetArchive::kShowRepeatingHeadersFieldNumber;
const int SheetArchive::kShowPageNumbersFieldNumber;
const int SheetArchive::kIsAutofitOnFieldNumber;
const int SheetArchive::kContentScaleFieldNumber;
const int SheetArchive::kPageOrderFieldNumber;
const int SheetArchive::kPrintMarginsFieldNumber;
const int SheetArchive::kUsingStartPageNumberFieldNumber;
const int SheetArchive::kStartPageNumberFieldNumber;
const int SheetArchive::kPageHeaderInsetFieldNumber;
const int SheetArchive::kPageFooterInsetFieldNumber;
const int SheetArchive::kHeaderStorageFieldNumber;
const int SheetArchive::kFooterStorageFieldNumber;
const int SheetArchive::kUserDefinedGuideStorageFieldNumber;
#endif  // !_MSC_VER

SheetArchive::SheetArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SheetArchive::InitAsDefaultInstance() {
  print_margins_ = const_cast< ::TSD::EdgeInsetsArchive*>(&::TSD::EdgeInsetsArchive::default_instance());
  header_storage_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  footer_storage_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  userdefinedguidestorage_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

SheetArchive::SheetArchive(const SheetArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SheetArchive::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  in_portrait_page_orientation_ = false;
  show_repeating_headers_ = false;
  show_page_numbers_ = false;
  is_autofit_on_ = false;
  content_scale_ = 0;
  page_order_ = 0;
  print_margins_ = NULL;
  using_start_page_number_ = false;
  start_page_number_ = 0;
  page_header_inset_ = 0;
  page_footer_inset_ = 0;
  header_storage_ = NULL;
  footer_storage_ = NULL;
  userdefinedguidestorage_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SheetArchive::~SheetArchive() {
  SharedDtor();
}

void SheetArchive::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete print_margins_;
    delete header_storage_;
    delete footer_storage_;
    delete userdefinedguidestorage_;
  }
}

void SheetArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SheetArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SheetArchive_descriptor_;
}

const SheetArchive& SheetArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TNArchives_2eproto();
  return *default_instance_;
}

SheetArchive* SheetArchive::default_instance_ = NULL;

SheetArchive* SheetArchive::New() const {
  return new SheetArchive;
}

void SheetArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    in_portrait_page_orientation_ = false;
    show_repeating_headers_ = false;
    show_page_numbers_ = false;
    is_autofit_on_ = false;
    content_scale_ = 0;
    page_order_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_print_margins()) {
      if (print_margins_ != NULL) print_margins_->::TSD::EdgeInsetsArchive::Clear();
    }
    using_start_page_number_ = false;
    start_page_number_ = 0;
    page_header_inset_ = 0;
    page_footer_inset_ = 0;
    if (has_header_storage()) {
      if (header_storage_ != NULL) header_storage_->::TSP::Reference::Clear();
    }
    if (has_footer_storage()) {
      if (footer_storage_ != NULL) footer_storage_->::TSP::Reference::Clear();
    }
    if (has_userdefinedguidestorage()) {
      if (userdefinedguidestorage_ != NULL) userdefinedguidestorage_->::TSP::Reference::Clear();
    }
  }
  drawable_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SheetArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_drawable_infos;
        break;
      }

      // repeated .TSP.Reference drawable_infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drawable_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_drawable_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_drawable_infos;
        if (input->ExpectTag(24)) goto parse_in_portrait_page_orientation;
        break;
      }

      // optional bool in_portrait_page_orientation = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_in_portrait_page_orientation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_portrait_page_orientation_)));
          set_has_in_portrait_page_orientation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_show_repeating_headers;
        break;
      }

      // optional bool show_repeating_headers = 4 [deprecated = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_repeating_headers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_repeating_headers_)));
          set_has_show_repeating_headers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_show_page_numbers;
        break;
      }

      // optional bool show_page_numbers = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_page_numbers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_page_numbers_)));
          set_has_show_page_numbers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_autofit_on;
        break;
      }

      // optional bool is_autofit_on = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_autofit_on:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_autofit_on_)));
          set_has_is_autofit_on();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_content_scale;
        break;
      }

      // optional float content_scale = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_content_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &content_scale_)));
          set_has_content_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_page_order;
        break;
      }

      // optional .TN.SheetPageOrder page_order = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page_order:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TN::SheetPageOrder_IsValid(value)) {
            set_page_order(static_cast< ::TN::SheetPageOrder >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_print_margins;
        break;
      }

      // optional .TSD.EdgeInsetsArchive print_margins = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_print_margins:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_print_margins()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_using_start_page_number;
        break;
      }

      // optional bool using_start_page_number = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_using_start_page_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &using_start_page_number_)));
          set_has_using_start_page_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_start_page_number;
        break;
      }

      // optional int32 start_page_number = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_page_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_page_number_)));
          set_has_start_page_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_page_header_inset;
        break;
      }

      // optional float page_header_inset = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_page_header_inset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &page_header_inset_)));
          set_has_page_header_inset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_page_footer_inset;
        break;
      }

      // optional float page_footer_inset = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_page_footer_inset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &page_footer_inset_)));
          set_has_page_footer_inset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_header_storage;
        break;
      }

      // optional .TSP.Reference header_storage = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header_storage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_footer_storage;
        break;
      }

      // optional .TSP.Reference footer_storage = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_footer_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_footer_storage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_userDefinedGuideStorage;
        break;
      }

      // optional .TSP.Reference userDefinedGuideStorage = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userDefinedGuideStorage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userdefinedguidestorage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SheetArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated .TSP.Reference drawable_infos = 2;
  for (int i = 0; i < this->drawable_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->drawable_infos(i), output);
  }

  // optional bool in_portrait_page_orientation = 3;
  if (has_in_portrait_page_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->in_portrait_page_orientation(), output);
  }

  // optional bool show_repeating_headers = 4 [deprecated = true];
  if (has_show_repeating_headers()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->show_repeating_headers(), output);
  }

  // optional bool show_page_numbers = 5;
  if (has_show_page_numbers()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->show_page_numbers(), output);
  }

  // optional bool is_autofit_on = 6;
  if (has_is_autofit_on()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_autofit_on(), output);
  }

  // optional float content_scale = 7;
  if (has_content_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->content_scale(), output);
  }

  // optional .TN.SheetPageOrder page_order = 8;
  if (has_page_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->page_order(), output);
  }

  // optional .TSD.EdgeInsetsArchive print_margins = 10;
  if (has_print_margins()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->print_margins(), output);
  }

  // optional bool using_start_page_number = 11;
  if (has_using_start_page_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->using_start_page_number(), output);
  }

  // optional int32 start_page_number = 12;
  if (has_start_page_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->start_page_number(), output);
  }

  // optional float page_header_inset = 13;
  if (has_page_header_inset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->page_header_inset(), output);
  }

  // optional float page_footer_inset = 14;
  if (has_page_footer_inset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->page_footer_inset(), output);
  }

  // optional .TSP.Reference header_storage = 15;
  if (has_header_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->header_storage(), output);
  }

  // optional .TSP.Reference footer_storage = 16;
  if (has_footer_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->footer_storage(), output);
  }

  // optional .TSP.Reference userDefinedGuideStorage = 17;
  if (has_userdefinedguidestorage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->userdefinedguidestorage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SheetArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .TSP.Reference drawable_infos = 2;
  for (int i = 0; i < this->drawable_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->drawable_infos(i), target);
  }

  // optional bool in_portrait_page_orientation = 3;
  if (has_in_portrait_page_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->in_portrait_page_orientation(), target);
  }

  // optional bool show_repeating_headers = 4 [deprecated = true];
  if (has_show_repeating_headers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->show_repeating_headers(), target);
  }

  // optional bool show_page_numbers = 5;
  if (has_show_page_numbers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->show_page_numbers(), target);
  }

  // optional bool is_autofit_on = 6;
  if (has_is_autofit_on()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_autofit_on(), target);
  }

  // optional float content_scale = 7;
  if (has_content_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->content_scale(), target);
  }

  // optional .TN.SheetPageOrder page_order = 8;
  if (has_page_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->page_order(), target);
  }

  // optional .TSD.EdgeInsetsArchive print_margins = 10;
  if (has_print_margins()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->print_margins(), target);
  }

  // optional bool using_start_page_number = 11;
  if (has_using_start_page_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->using_start_page_number(), target);
  }

  // optional int32 start_page_number = 12;
  if (has_start_page_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->start_page_number(), target);
  }

  // optional float page_header_inset = 13;
  if (has_page_header_inset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->page_header_inset(), target);
  }

  // optional float page_footer_inset = 14;
  if (has_page_footer_inset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->page_footer_inset(), target);
  }

  // optional .TSP.Reference header_storage = 15;
  if (has_header_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->header_storage(), target);
  }

  // optional .TSP.Reference footer_storage = 16;
  if (has_footer_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->footer_storage(), target);
  }

  // optional .TSP.Reference userDefinedGuideStorage = 17;
  if (has_userdefinedguidestorage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->userdefinedguidestorage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SheetArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool in_portrait_page_orientation = 3;
    if (has_in_portrait_page_orientation()) {
      total_size += 1 + 1;
    }

    // optional bool show_repeating_headers = 4 [deprecated = true];
    if (has_show_repeating_headers()) {
      total_size += 1 + 1;
    }

    // optional bool show_page_numbers = 5;
    if (has_show_page_numbers()) {
      total_size += 1 + 1;
    }

    // optional bool is_autofit_on = 6;
    if (has_is_autofit_on()) {
      total_size += 1 + 1;
    }

    // optional float content_scale = 7;
    if (has_content_scale()) {
      total_size += 1 + 4;
    }

    // optional .TN.SheetPageOrder page_order = 8;
    if (has_page_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->page_order());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .TSD.EdgeInsetsArchive print_margins = 10;
    if (has_print_margins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->print_margins());
    }

    // optional bool using_start_page_number = 11;
    if (has_using_start_page_number()) {
      total_size += 1 + 1;
    }

    // optional int32 start_page_number = 12;
    if (has_start_page_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_page_number());
    }

    // optional float page_header_inset = 13;
    if (has_page_header_inset()) {
      total_size += 1 + 4;
    }

    // optional float page_footer_inset = 14;
    if (has_page_footer_inset()) {
      total_size += 1 + 4;
    }

    // optional .TSP.Reference header_storage = 15;
    if (has_header_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header_storage());
    }

    // optional .TSP.Reference footer_storage = 16;
    if (has_footer_storage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->footer_storage());
    }

    // optional .TSP.Reference userDefinedGuideStorage = 17;
    if (has_userdefinedguidestorage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userdefinedguidestorage());
    }

  }
  // repeated .TSP.Reference drawable_infos = 2;
  total_size += 1 * this->drawable_infos_size();
  for (int i = 0; i < this->drawable_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->drawable_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SheetArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SheetArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SheetArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SheetArchive::MergeFrom(const SheetArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  drawable_infos_.MergeFrom(from.drawable_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_in_portrait_page_orientation()) {
      set_in_portrait_page_orientation(from.in_portrait_page_orientation());
    }
    if (from.has_show_repeating_headers()) {
      set_show_repeating_headers(from.show_repeating_headers());
    }
    if (from.has_show_page_numbers()) {
      set_show_page_numbers(from.show_page_numbers());
    }
    if (from.has_is_autofit_on()) {
      set_is_autofit_on(from.is_autofit_on());
    }
    if (from.has_content_scale()) {
      set_content_scale(from.content_scale());
    }
    if (from.has_page_order()) {
      set_page_order(from.page_order());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_print_margins()) {
      mutable_print_margins()->::TSD::EdgeInsetsArchive::MergeFrom(from.print_margins());
    }
    if (from.has_using_start_page_number()) {
      set_using_start_page_number(from.using_start_page_number());
    }
    if (from.has_start_page_number()) {
      set_start_page_number(from.start_page_number());
    }
    if (from.has_page_header_inset()) {
      set_page_header_inset(from.page_header_inset());
    }
    if (from.has_page_footer_inset()) {
      set_page_footer_inset(from.page_footer_inset());
    }
    if (from.has_header_storage()) {
      mutable_header_storage()->::TSP::Reference::MergeFrom(from.header_storage());
    }
    if (from.has_footer_storage()) {
      mutable_footer_storage()->::TSP::Reference::MergeFrom(from.footer_storage());
    }
    if (from.has_userdefinedguidestorage()) {
      mutable_userdefinedguidestorage()->::TSP::Reference::MergeFrom(from.userdefinedguidestorage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SheetArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SheetArchive::CopyFrom(const SheetArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SheetArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < drawable_infos_size(); i++) {
    if (!this->drawable_infos(i).IsInitialized()) return false;
  }
  if (has_print_margins()) {
    if (!this->print_margins().IsInitialized()) return false;
  }
  if (has_header_storage()) {
    if (!this->header_storage().IsInitialized()) return false;
  }
  if (has_footer_storage()) {
    if (!this->footer_storage().IsInitialized()) return false;
  }
  if (has_userdefinedguidestorage()) {
    if (!this->userdefinedguidestorage().IsInitialized()) return false;
  }
  return true;
}

void SheetArchive::Swap(SheetArchive* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    drawable_infos_.Swap(&other->drawable_infos_);
    std::swap(in_portrait_page_orientation_, other->in_portrait_page_orientation_);
    std::swap(show_repeating_headers_, other->show_repeating_headers_);
    std::swap(show_page_numbers_, other->show_page_numbers_);
    std::swap(is_autofit_on_, other->is_autofit_on_);
    std::swap(content_scale_, other->content_scale_);
    std::swap(page_order_, other->page_order_);
    std::swap(print_margins_, other->print_margins_);
    std::swap(using_start_page_number_, other->using_start_page_number_);
    std::swap(start_page_number_, other->start_page_number_);
    std::swap(page_header_inset_, other->page_header_inset_);
    std::swap(page_footer_inset_, other->page_footer_inset_);
    std::swap(header_storage_, other->header_storage_);
    std::swap(footer_storage_, other->footer_storage_);
    std::swap(userdefinedguidestorage_, other->userdefinedguidestorage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SheetArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SheetArchive_descriptor_;
  metadata.reflection = SheetArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FormBasedSheetArchive::kSuperFieldNumber;
const int FormBasedSheetArchive::kTableIdFieldNumber;
#endif  // !_MSC_VER

FormBasedSheetArchive::FormBasedSheetArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FormBasedSheetArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TN::SheetArchive*>(&::TN::SheetArchive::default_instance());
  table_id_ = const_cast< ::TSCE::CFUUIDArchive*>(&::TSCE::CFUUIDArchive::default_instance());
}

FormBasedSheetArchive::FormBasedSheetArchive(const FormBasedSheetArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FormBasedSheetArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  table_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FormBasedSheetArchive::~FormBasedSheetArchive() {
  SharedDtor();
}

void FormBasedSheetArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete table_id_;
  }
}

void FormBasedSheetArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FormBasedSheetArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FormBasedSheetArchive_descriptor_;
}

const FormBasedSheetArchive& FormBasedSheetArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TNArchives_2eproto();
  return *default_instance_;
}

FormBasedSheetArchive* FormBasedSheetArchive::default_instance_ = NULL;

FormBasedSheetArchive* FormBasedSheetArchive::New() const {
  return new FormBasedSheetArchive;
}

void FormBasedSheetArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TN::SheetArchive::Clear();
    }
    if (has_table_id()) {
      if (table_id_ != NULL) table_id_->::TSCE::CFUUIDArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FormBasedSheetArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TN.SheetArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table_id;
        break;
      }

      // optional .TSCE.CFUUIDArchive table_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FormBasedSheetArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TN.SheetArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSCE.CFUUIDArchive table_id = 2;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->table_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FormBasedSheetArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TN.SheetArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSCE.CFUUIDArchive table_id = 2;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->table_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FormBasedSheetArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TN.SheetArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSCE.CFUUIDArchive table_id = 2;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FormBasedSheetArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FormBasedSheetArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FormBasedSheetArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FormBasedSheetArchive::MergeFrom(const FormBasedSheetArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TN::SheetArchive::MergeFrom(from.super());
    }
    if (from.has_table_id()) {
      mutable_table_id()->::TSCE::CFUUIDArchive::MergeFrom(from.table_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FormBasedSheetArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FormBasedSheetArchive::CopyFrom(const FormBasedSheetArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormBasedSheetArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void FormBasedSheetArchive::Swap(FormBasedSheetArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(table_id_, other->table_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FormBasedSheetArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FormBasedSheetArchive_descriptor_;
  metadata.reflection = FormBasedSheetArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ThemeArchive::kSuperFieldNumber;
const int ThemeArchive::kPrototypesFieldNumber;
#endif  // !_MSC_VER

ThemeArchive::ThemeArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ThemeArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSS::ThemeArchive*>(&::TSS::ThemeArchive::default_instance());
}

ThemeArchive::ThemeArchive(const ThemeArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ThemeArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThemeArchive::~ThemeArchive() {
  SharedDtor();
}

void ThemeArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void ThemeArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThemeArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThemeArchive_descriptor_;
}

const ThemeArchive& ThemeArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TNArchives_2eproto();
  return *default_instance_;
}

ThemeArchive* ThemeArchive::default_instance_ = NULL;

ThemeArchive* ThemeArchive::New() const {
  return new ThemeArchive;
}

void ThemeArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSS::ThemeArchive::Clear();
    }
  }
  prototypes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ThemeArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSS.ThemeArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_prototypes;
        break;
      }

      // repeated .TSP.Reference prototypes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prototypes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prototypes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_prototypes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ThemeArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSS.ThemeArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // repeated .TSP.Reference prototypes = 2;
  for (int i = 0; i < this->prototypes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->prototypes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ThemeArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSS.ThemeArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // repeated .TSP.Reference prototypes = 2;
  for (int i = 0; i < this->prototypes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->prototypes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ThemeArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSS.ThemeArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  // repeated .TSP.Reference prototypes = 2;
  total_size += 1 * this->prototypes_size();
  for (int i = 0; i < this->prototypes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prototypes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThemeArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ThemeArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ThemeArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ThemeArchive::MergeFrom(const ThemeArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  prototypes_.MergeFrom(from.prototypes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSS::ThemeArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ThemeArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThemeArchive::CopyFrom(const ThemeArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemeArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  for (int i = 0; i < prototypes_size(); i++) {
    if (!this->prototypes(i).IsInitialized()) return false;
  }
  return true;
}

void ThemeArchive::Swap(ThemeArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    prototypes_.Swap(&other->prototypes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ThemeArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ThemeArchive_descriptor_;
  metadata.reflection = ThemeArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChartMediatorFormulaStorage::kDataFormulaeFieldNumber;
const int ChartMediatorFormulaStorage::kRowLabelFormulaeFieldNumber;
const int ChartMediatorFormulaStorage::kColLabelFormulaeFieldNumber;
const int ChartMediatorFormulaStorage::kDirectionFieldNumber;
const int ChartMediatorFormulaStorage::kErrorCustomPosFormulaeFieldNumber;
const int ChartMediatorFormulaStorage::kErrorCustomNegFormulaeFieldNumber;
const int ChartMediatorFormulaStorage::kErrorCustomPosScatterXFormulaeFieldNumber;
const int ChartMediatorFormulaStorage::kErrorCustomNegScatterXFormulaeFieldNumber;
#endif  // !_MSC_VER

ChartMediatorFormulaStorage::ChartMediatorFormulaStorage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartMediatorFormulaStorage::InitAsDefaultInstance() {
}

ChartMediatorFormulaStorage::ChartMediatorFormulaStorage(const ChartMediatorFormulaStorage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartMediatorFormulaStorage::SharedCtor() {
  _cached_size_ = 0;
  direction_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartMediatorFormulaStorage::~ChartMediatorFormulaStorage() {
  SharedDtor();
}

void ChartMediatorFormulaStorage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChartMediatorFormulaStorage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartMediatorFormulaStorage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartMediatorFormulaStorage_descriptor_;
}

const ChartMediatorFormulaStorage& ChartMediatorFormulaStorage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TNArchives_2eproto();
  return *default_instance_;
}

ChartMediatorFormulaStorage* ChartMediatorFormulaStorage::default_instance_ = NULL;

ChartMediatorFormulaStorage* ChartMediatorFormulaStorage::New() const {
  return new ChartMediatorFormulaStorage;
}

void ChartMediatorFormulaStorage::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    direction_ = 0;
  }
  data_formulae_.Clear();
  row_label_formulae_.Clear();
  col_label_formulae_.Clear();
  error_custom_pos_formulae_.Clear();
  error_custom_neg_formulae_.Clear();
  error_custom_pos_scatterx_formulae_.Clear();
  error_custom_neg_scatterx_formulae_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartMediatorFormulaStorage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TSCE.FormulaArchive data_formulae = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_formulae:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data_formulae()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data_formulae;
        if (input->ExpectTag(26)) goto parse_row_label_formulae;
        break;
      }

      // repeated .TSCE.FormulaArchive row_label_formulae = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_row_label_formulae:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_row_label_formulae()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_row_label_formulae;
        if (input->ExpectTag(34)) goto parse_col_label_formulae;
        break;
      }

      // repeated .TSCE.FormulaArchive col_label_formulae = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_col_label_formulae:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_col_label_formulae()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_col_label_formulae;
        if (input->ExpectTag(40)) goto parse_direction;
        break;
      }

      // optional int32 direction = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_error_custom_pos_formulae;
        break;
      }

      // repeated .TSCE.FormulaArchive error_custom_pos_formulae = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_custom_pos_formulae:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_error_custom_pos_formulae()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_error_custom_pos_formulae;
        if (input->ExpectTag(58)) goto parse_error_custom_neg_formulae;
        break;
      }

      // repeated .TSCE.FormulaArchive error_custom_neg_formulae = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_custom_neg_formulae:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_error_custom_neg_formulae()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_error_custom_neg_formulae;
        if (input->ExpectTag(66)) goto parse_error_custom_pos_scatterX_formulae;
        break;
      }

      // repeated .TSCE.FormulaArchive error_custom_pos_scatterX_formulae = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_custom_pos_scatterX_formulae:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_error_custom_pos_scatterx_formulae()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_error_custom_pos_scatterX_formulae;
        if (input->ExpectTag(74)) goto parse_error_custom_neg_scatterX_formulae;
        break;
      }

      // repeated .TSCE.FormulaArchive error_custom_neg_scatterX_formulae = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_custom_neg_scatterX_formulae:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_error_custom_neg_scatterx_formulae()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_error_custom_neg_scatterX_formulae;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChartMediatorFormulaStorage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TSCE.FormulaArchive data_formulae = 1;
  for (int i = 0; i < this->data_formulae_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data_formulae(i), output);
  }

  // repeated .TSCE.FormulaArchive row_label_formulae = 3;
  for (int i = 0; i < this->row_label_formulae_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->row_label_formulae(i), output);
  }

  // repeated .TSCE.FormulaArchive col_label_formulae = 4;
  for (int i = 0; i < this->col_label_formulae_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->col_label_formulae(i), output);
  }

  // optional int32 direction = 5;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->direction(), output);
  }

  // repeated .TSCE.FormulaArchive error_custom_pos_formulae = 6;
  for (int i = 0; i < this->error_custom_pos_formulae_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->error_custom_pos_formulae(i), output);
  }

  // repeated .TSCE.FormulaArchive error_custom_neg_formulae = 7;
  for (int i = 0; i < this->error_custom_neg_formulae_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->error_custom_neg_formulae(i), output);
  }

  // repeated .TSCE.FormulaArchive error_custom_pos_scatterX_formulae = 8;
  for (int i = 0; i < this->error_custom_pos_scatterx_formulae_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->error_custom_pos_scatterx_formulae(i), output);
  }

  // repeated .TSCE.FormulaArchive error_custom_neg_scatterX_formulae = 9;
  for (int i = 0; i < this->error_custom_neg_scatterx_formulae_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->error_custom_neg_scatterx_formulae(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartMediatorFormulaStorage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TSCE.FormulaArchive data_formulae = 1;
  for (int i = 0; i < this->data_formulae_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data_formulae(i), target);
  }

  // repeated .TSCE.FormulaArchive row_label_formulae = 3;
  for (int i = 0; i < this->row_label_formulae_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->row_label_formulae(i), target);
  }

  // repeated .TSCE.FormulaArchive col_label_formulae = 4;
  for (int i = 0; i < this->col_label_formulae_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->col_label_formulae(i), target);
  }

  // optional int32 direction = 5;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->direction(), target);
  }

  // repeated .TSCE.FormulaArchive error_custom_pos_formulae = 6;
  for (int i = 0; i < this->error_custom_pos_formulae_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->error_custom_pos_formulae(i), target);
  }

  // repeated .TSCE.FormulaArchive error_custom_neg_formulae = 7;
  for (int i = 0; i < this->error_custom_neg_formulae_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->error_custom_neg_formulae(i), target);
  }

  // repeated .TSCE.FormulaArchive error_custom_pos_scatterX_formulae = 8;
  for (int i = 0; i < this->error_custom_pos_scatterx_formulae_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->error_custom_pos_scatterx_formulae(i), target);
  }

  // repeated .TSCE.FormulaArchive error_custom_neg_scatterX_formulae = 9;
  for (int i = 0; i < this->error_custom_neg_scatterx_formulae_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->error_custom_neg_scatterx_formulae(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartMediatorFormulaStorage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional int32 direction = 5;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->direction());
    }

  }
  // repeated .TSCE.FormulaArchive data_formulae = 1;
  total_size += 1 * this->data_formulae_size();
  for (int i = 0; i < this->data_formulae_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data_formulae(i));
  }

  // repeated .TSCE.FormulaArchive row_label_formulae = 3;
  total_size += 1 * this->row_label_formulae_size();
  for (int i = 0; i < this->row_label_formulae_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->row_label_formulae(i));
  }

  // repeated .TSCE.FormulaArchive col_label_formulae = 4;
  total_size += 1 * this->col_label_formulae_size();
  for (int i = 0; i < this->col_label_formulae_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->col_label_formulae(i));
  }

  // repeated .TSCE.FormulaArchive error_custom_pos_formulae = 6;
  total_size += 1 * this->error_custom_pos_formulae_size();
  for (int i = 0; i < this->error_custom_pos_formulae_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->error_custom_pos_formulae(i));
  }

  // repeated .TSCE.FormulaArchive error_custom_neg_formulae = 7;
  total_size += 1 * this->error_custom_neg_formulae_size();
  for (int i = 0; i < this->error_custom_neg_formulae_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->error_custom_neg_formulae(i));
  }

  // repeated .TSCE.FormulaArchive error_custom_pos_scatterX_formulae = 8;
  total_size += 1 * this->error_custom_pos_scatterx_formulae_size();
  for (int i = 0; i < this->error_custom_pos_scatterx_formulae_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->error_custom_pos_scatterx_formulae(i));
  }

  // repeated .TSCE.FormulaArchive error_custom_neg_scatterX_formulae = 9;
  total_size += 1 * this->error_custom_neg_scatterx_formulae_size();
  for (int i = 0; i < this->error_custom_neg_scatterx_formulae_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->error_custom_neg_scatterx_formulae(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartMediatorFormulaStorage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartMediatorFormulaStorage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartMediatorFormulaStorage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartMediatorFormulaStorage::MergeFrom(const ChartMediatorFormulaStorage& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_formulae_.MergeFrom(from.data_formulae_);
  row_label_formulae_.MergeFrom(from.row_label_formulae_);
  col_label_formulae_.MergeFrom(from.col_label_formulae_);
  error_custom_pos_formulae_.MergeFrom(from.error_custom_pos_formulae_);
  error_custom_neg_formulae_.MergeFrom(from.error_custom_neg_formulae_);
  error_custom_pos_scatterx_formulae_.MergeFrom(from.error_custom_pos_scatterx_formulae_);
  error_custom_neg_scatterx_formulae_.MergeFrom(from.error_custom_neg_scatterx_formulae_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_direction()) {
      set_direction(from.direction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartMediatorFormulaStorage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartMediatorFormulaStorage::CopyFrom(const ChartMediatorFormulaStorage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartMediatorFormulaStorage::IsInitialized() const {

  for (int i = 0; i < data_formulae_size(); i++) {
    if (!this->data_formulae(i).IsInitialized()) return false;
  }
  for (int i = 0; i < row_label_formulae_size(); i++) {
    if (!this->row_label_formulae(i).IsInitialized()) return false;
  }
  for (int i = 0; i < col_label_formulae_size(); i++) {
    if (!this->col_label_formulae(i).IsInitialized()) return false;
  }
  for (int i = 0; i < error_custom_pos_formulae_size(); i++) {
    if (!this->error_custom_pos_formulae(i).IsInitialized()) return false;
  }
  for (int i = 0; i < error_custom_neg_formulae_size(); i++) {
    if (!this->error_custom_neg_formulae(i).IsInitialized()) return false;
  }
  for (int i = 0; i < error_custom_pos_scatterx_formulae_size(); i++) {
    if (!this->error_custom_pos_scatterx_formulae(i).IsInitialized()) return false;
  }
  for (int i = 0; i < error_custom_neg_scatterx_formulae_size(); i++) {
    if (!this->error_custom_neg_scatterx_formulae(i).IsInitialized()) return false;
  }
  return true;
}

void ChartMediatorFormulaStorage::Swap(ChartMediatorFormulaStorage* other) {
  if (other != this) {
    data_formulae_.Swap(&other->data_formulae_);
    row_label_formulae_.Swap(&other->row_label_formulae_);
    col_label_formulae_.Swap(&other->col_label_formulae_);
    std::swap(direction_, other->direction_);
    error_custom_pos_formulae_.Swap(&other->error_custom_pos_formulae_);
    error_custom_neg_formulae_.Swap(&other->error_custom_neg_formulae_);
    error_custom_pos_scatterx_formulae_.Swap(&other->error_custom_pos_scatterx_formulae_);
    error_custom_neg_scatterx_formulae_.Swap(&other->error_custom_neg_scatterx_formulae_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChartMediatorFormulaStorage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartMediatorFormulaStorage_descriptor_;
  metadata.reflection = ChartMediatorFormulaStorage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChartMediatorArchive::kSuperFieldNumber;
const int ChartMediatorArchive::kEntityIdFieldNumber;
const int ChartMediatorArchive::kFormulasFieldNumber;
const int ChartMediatorArchive::kColumnsAreSeriesFieldNumber;
const int ChartMediatorArchive::kIsRegisteredWithCalcEngineFieldNumber;
#endif  // !_MSC_VER

ChartMediatorArchive::ChartMediatorArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartMediatorArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSCH::ChartMediatorArchive*>(&::TSCH::ChartMediatorArchive::default_instance());
  formulas_ = const_cast< ::TN::ChartMediatorFormulaStorage*>(&::TN::ChartMediatorFormulaStorage::default_instance());
}

ChartMediatorArchive::ChartMediatorArchive(const ChartMediatorArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartMediatorArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  entity_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  formulas_ = NULL;
  columns_are_series_ = false;
  is_registered_with_calc_engine_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartMediatorArchive::~ChartMediatorArchive() {
  SharedDtor();
}

void ChartMediatorArchive::SharedDtor() {
  if (entity_id_ != &::google::protobuf::internal::kEmptyString) {
    delete entity_id_;
  }
  if (this != default_instance_) {
    delete super_;
    delete formulas_;
  }
}

void ChartMediatorArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartMediatorArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartMediatorArchive_descriptor_;
}

const ChartMediatorArchive& ChartMediatorArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TNArchives_2eproto();
  return *default_instance_;
}

ChartMediatorArchive* ChartMediatorArchive::default_instance_ = NULL;

ChartMediatorArchive* ChartMediatorArchive::New() const {
  return new ChartMediatorArchive;
}

void ChartMediatorArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSCH::ChartMediatorArchive::Clear();
    }
    if (has_entity_id()) {
      if (entity_id_ != &::google::protobuf::internal::kEmptyString) {
        entity_id_->clear();
      }
    }
    if (has_formulas()) {
      if (formulas_ != NULL) formulas_->::TN::ChartMediatorFormulaStorage::Clear();
    }
    columns_are_series_ = false;
    is_registered_with_calc_engine_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartMediatorArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSCH.ChartMediatorArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entity_id;
        break;
      }

      // required string entity_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entity_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entity_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->entity_id().data(), this->entity_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_formulas;
        break;
      }

      // optional .TN.ChartMediatorFormulaStorage formulas = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_formulas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_formulas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_columns_are_series;
        break;
      }

      // optional bool columns_are_series = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_columns_are_series:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &columns_are_series_)));
          set_has_columns_are_series();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_registered_with_calc_engine;
        break;
      }

      // optional bool is_registered_with_calc_engine = 5 [deprecated = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_registered_with_calc_engine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_registered_with_calc_engine_)));
          set_has_is_registered_with_calc_engine();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChartMediatorArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSCH.ChartMediatorArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required string entity_id = 2;
  if (has_entity_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->entity_id().data(), this->entity_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->entity_id(), output);
  }

  // optional .TN.ChartMediatorFormulaStorage formulas = 3;
  if (has_formulas()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->formulas(), output);
  }

  // optional bool columns_are_series = 4;
  if (has_columns_are_series()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->columns_are_series(), output);
  }

  // optional bool is_registered_with_calc_engine = 5 [deprecated = true];
  if (has_is_registered_with_calc_engine()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_registered_with_calc_engine(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartMediatorArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSCH.ChartMediatorArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required string entity_id = 2;
  if (has_entity_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->entity_id().data(), this->entity_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->entity_id(), target);
  }

  // optional .TN.ChartMediatorFormulaStorage formulas = 3;
  if (has_formulas()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->formulas(), target);
  }

  // optional bool columns_are_series = 4;
  if (has_columns_are_series()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->columns_are_series(), target);
  }

  // optional bool is_registered_with_calc_engine = 5 [deprecated = true];
  if (has_is_registered_with_calc_engine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_registered_with_calc_engine(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartMediatorArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSCH.ChartMediatorArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required string entity_id = 2;
    if (has_entity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->entity_id());
    }

    // optional .TN.ChartMediatorFormulaStorage formulas = 3;
    if (has_formulas()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->formulas());
    }

    // optional bool columns_are_series = 4;
    if (has_columns_are_series()) {
      total_size += 1 + 1;
    }

    // optional bool is_registered_with_calc_engine = 5 [deprecated = true];
    if (has_is_registered_with_calc_engine()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartMediatorArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartMediatorArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartMediatorArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartMediatorArchive::MergeFrom(const ChartMediatorArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSCH::ChartMediatorArchive::MergeFrom(from.super());
    }
    if (from.has_entity_id()) {
      set_entity_id(from.entity_id());
    }
    if (from.has_formulas()) {
      mutable_formulas()->::TN::ChartMediatorFormulaStorage::MergeFrom(from.formulas());
    }
    if (from.has_columns_are_series()) {
      set_columns_are_series(from.columns_are_series());
    }
    if (from.has_is_registered_with_calc_engine()) {
      set_is_registered_with_calc_engine(from.is_registered_with_calc_engine());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartMediatorArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartMediatorArchive::CopyFrom(const ChartMediatorArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartMediatorArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_formulas()) {
    if (!this->formulas().IsInitialized()) return false;
  }
  return true;
}

void ChartMediatorArchive::Swap(ChartMediatorArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(entity_id_, other->entity_id_);
    std::swap(formulas_, other->formulas_);
    std::swap(columns_are_series_, other->columns_are_series_);
    std::swap(is_registered_with_calc_engine_, other->is_registered_with_calc_engine_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChartMediatorArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartMediatorArchive_descriptor_;
  metadata.reflection = ChartMediatorArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChartSelectionArchive::kReferenceFieldNumber;
const int ChartSelectionArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

ChartSelectionArchive::ChartSelectionArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartSelectionArchive::InitAsDefaultInstance() {
  reference_ = const_cast< ::TSCE::RangeReferenceArchive*>(&::TSCE::RangeReferenceArchive::default_instance());
  super_ = const_cast< ::TSCH::ChartSelectionArchive*>(&::TSCH::ChartSelectionArchive::default_instance());
}

ChartSelectionArchive::ChartSelectionArchive(const ChartSelectionArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartSelectionArchive::SharedCtor() {
  _cached_size_ = 0;
  reference_ = NULL;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartSelectionArchive::~ChartSelectionArchive() {
  SharedDtor();
}

void ChartSelectionArchive::SharedDtor() {
  if (this != default_instance_) {
    delete reference_;
    delete super_;
  }
}

void ChartSelectionArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartSelectionArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartSelectionArchive_descriptor_;
}

const ChartSelectionArchive& ChartSelectionArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TNArchives_2eproto();
  return *default_instance_;
}

ChartSelectionArchive* ChartSelectionArchive::default_instance_ = NULL;

ChartSelectionArchive* ChartSelectionArchive::New() const {
  return new ChartSelectionArchive;
}

void ChartSelectionArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_reference()) {
      if (reference_ != NULL) reference_->::TSCE::RangeReferenceArchive::Clear();
    }
    if (has_super()) {
      if (super_ != NULL) super_->::TSCH::ChartSelectionArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartSelectionArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSCE.RangeReferenceArchive reference = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reference()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_super;
        break;
      }

      // optional .TSCH.ChartSelectionArchive super = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChartSelectionArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSCE.RangeReferenceArchive reference = 1;
  if (has_reference()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reference(), output);
  }

  // optional .TSCH.ChartSelectionArchive super = 2;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->super(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartSelectionArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSCE.RangeReferenceArchive reference = 1;
  if (has_reference()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reference(), target);
  }

  // optional .TSCH.ChartSelectionArchive super = 2;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->super(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartSelectionArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSCE.RangeReferenceArchive reference = 1;
    if (has_reference()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reference());
    }

    // optional .TSCH.ChartSelectionArchive super = 2;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartSelectionArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartSelectionArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartSelectionArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartSelectionArchive::MergeFrom(const ChartSelectionArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reference()) {
      mutable_reference()->::TSCE::RangeReferenceArchive::MergeFrom(from.reference());
    }
    if (from.has_super()) {
      mutable_super()->::TSCH::ChartSelectionArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartSelectionArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartSelectionArchive::CopyFrom(const ChartSelectionArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartSelectionArchive::IsInitialized() const {

  if (has_reference()) {
    if (!this->reference().IsInitialized()) return false;
  }
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void ChartSelectionArchive::Swap(ChartSelectionArchive* other) {
  if (other != this) {
    std::swap(reference_, other->reference_);
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChartSelectionArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartSelectionArchive_descriptor_;
  metadata.reflection = ChartSelectionArchive_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TN

// @@protoc_insertion_point(global_scope)
