// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TPArchives.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TPArchives.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace TP {

namespace {

const ::google::protobuf::Descriptor* DocumentArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DocumentArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ThemeArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ThemeArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* SettingsArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SettingsArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SettingsArchive_FootnoteKind_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SettingsArchive_FootnoteFormat_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SettingsArchive_FootnoteNumbering_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PlaceholderArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlaceholderArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* FloatingDrawablesArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FloatingDrawablesArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* FloatingDrawablesArchive_DrawableEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FloatingDrawablesArchive_DrawableEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* FloatingDrawablesArchive_PageGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FloatingDrawablesArchive_PageGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* DrawablesZOrderArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DrawablesZOrderArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* PageMasterArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PageMasterArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* SectionArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SectionArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnchorPosArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnchorPosArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* TargetHintArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TargetHintArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* PageHintArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PageHintArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PageHintArchive_PageKind_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SectionHintArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SectionHintArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* TextboxHintArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TextboxHintArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* TopicNumberEntryArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopicNumberEntryArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* TopicNumberHintsArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopicNumberHintsArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* LayoutStateArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LayoutStateArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CanvasSelectionArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CanvasSelectionArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ViewStateArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ViewStateArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* UIStateArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UIStateArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ViewScaleMode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_TPArchives_2eproto() {
  protobuf_AddDesc_TPArchives_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TPArchives.proto");
  GOOGLE_CHECK(file != NULL);
  DocumentArchive_descriptor_ = file->message_type(0);
  static const int DocumentArchive_offsets_[30] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, stylesheet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, floating_drawables_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, body_storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, section_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, theme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, settings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, deprecated_layout_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, deprecated_view_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, citation_records_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, toc_styles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, change_sessions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, drawables_zorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, uses_single_header_footer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, page_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, page_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, left_margin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, right_margin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, top_margin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, bottom_margin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, header_margin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, footer_margin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, page_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, layout_body_vertically_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, change_tracking_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, tables_custom_format_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, printer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, paper_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, change_tracking_paused_),
  };
  DocumentArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DocumentArchive_descriptor_,
      DocumentArchive::default_instance_,
      DocumentArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DocumentArchive));
  ThemeArchive_descriptor_ = file->message_type(1);
  static const int ThemeArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeArchive, super_),
  };
  ThemeArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ThemeArchive_descriptor_,
      ThemeArchive::default_instance_,
      ThemeArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ThemeArchive));
  SettingsArchive_descriptor_ = file->message_type(2);
  static const int SettingsArchive_offsets_[31] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingsArchive, body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingsArchive, headers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingsArchive, footers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingsArchive, preview_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingsArchive, copy_movies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingsArchive, copy_assets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingsArchive, placeholder_authoring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingsArchive, links_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingsArchive, hyphenation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingsArchive, use_ligatures_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingsArchive, toc_links_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingsArchive, show_ct_markup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingsArchive, show_ct_deletions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingsArchive, ct_bubbles_visibility_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingsArchive, change_bars_visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingsArchive, format_changes_visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingsArchive, annotations_visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingsArchive, document_is_rtl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingsArchive, decimal_tab_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingsArchive, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingsArchive, hyphenation_language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingsArchive, creation_locale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingsArchive, last_locale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingsArchive, orig_template_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingsArchive, creation_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingsArchive, bibliography_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingsArchive, footnote_kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingsArchive, footnote_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingsArchive, footnote_numbering_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingsArchive, footnote_gap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingsArchive, section_authoring_),
  };
  SettingsArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SettingsArchive_descriptor_,
      SettingsArchive::default_instance_,
      SettingsArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingsArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingsArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SettingsArchive));
  SettingsArchive_FootnoteKind_descriptor_ = SettingsArchive_descriptor_->enum_type(0);
  SettingsArchive_FootnoteFormat_descriptor_ = SettingsArchive_descriptor_->enum_type(1);
  SettingsArchive_FootnoteNumbering_descriptor_ = SettingsArchive_descriptor_->enum_type(2);
  PlaceholderArchive_descriptor_ = file->message_type(3);
  static const int PlaceholderArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceholderArchive, super_),
  };
  PlaceholderArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlaceholderArchive_descriptor_,
      PlaceholderArchive::default_instance_,
      PlaceholderArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceholderArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceholderArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlaceholderArchive));
  FloatingDrawablesArchive_descriptor_ = file->message_type(4);
  static const int FloatingDrawablesArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatingDrawablesArchive, page_groups_),
  };
  FloatingDrawablesArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FloatingDrawablesArchive_descriptor_,
      FloatingDrawablesArchive::default_instance_,
      FloatingDrawablesArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatingDrawablesArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatingDrawablesArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FloatingDrawablesArchive));
  FloatingDrawablesArchive_DrawableEntry_descriptor_ = FloatingDrawablesArchive_descriptor_->nested_type(0);
  static const int FloatingDrawablesArchive_DrawableEntry_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatingDrawablesArchive_DrawableEntry, drawable_),
  };
  FloatingDrawablesArchive_DrawableEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FloatingDrawablesArchive_DrawableEntry_descriptor_,
      FloatingDrawablesArchive_DrawableEntry::default_instance_,
      FloatingDrawablesArchive_DrawableEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatingDrawablesArchive_DrawableEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatingDrawablesArchive_DrawableEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FloatingDrawablesArchive_DrawableEntry));
  FloatingDrawablesArchive_PageGroup_descriptor_ = FloatingDrawablesArchive_descriptor_->nested_type(1);
  static const int FloatingDrawablesArchive_PageGroup_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatingDrawablesArchive_PageGroup, page_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatingDrawablesArchive_PageGroup, background_drawables_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatingDrawablesArchive_PageGroup, foreground_drawables_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatingDrawablesArchive_PageGroup, drawables_),
  };
  FloatingDrawablesArchive_PageGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FloatingDrawablesArchive_PageGroup_descriptor_,
      FloatingDrawablesArchive_PageGroup::default_instance_,
      FloatingDrawablesArchive_PageGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatingDrawablesArchive_PageGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatingDrawablesArchive_PageGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FloatingDrawablesArchive_PageGroup));
  DrawablesZOrderArchive_descriptor_ = file->message_type(5);
  static const int DrawablesZOrderArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawablesZOrderArchive, drawables_),
  };
  DrawablesZOrderArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DrawablesZOrderArchive_descriptor_,
      DrawablesZOrderArchive::default_instance_,
      DrawablesZOrderArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawablesZOrderArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawablesZOrderArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DrawablesZOrderArchive));
  PageMasterArchive_descriptor_ = file->message_type(6);
  static const int PageMasterArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PageMasterArchive, headers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PageMasterArchive, footers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PageMasterArchive, master_drawables_),
  };
  PageMasterArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PageMasterArchive_descriptor_,
      PageMasterArchive::default_instance_,
      PageMasterArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PageMasterArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PageMasterArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PageMasterArchive));
  SectionArchive_descriptor_ = file->message_type(7);
  static const int SectionArchive_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionArchive, obsolete_shows_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionArchive, obsolete_shows_footer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionArchive, obsolete_headers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionArchive, obsolete_footers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionArchive, obsolete_left_margin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionArchive, obsolete_right_margin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionArchive, obsolete_top_margin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionArchive, obsolete_bottom_margin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionArchive, obsolete_header_padding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionArchive, obsolete_footer_padding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionArchive, obsolete_paper_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionArchive, obsolete_paper_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionArchive, obsolete_landscape_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionArchive, obsolete_master_drawables_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionArchive, obsolete_header_margin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionArchive, obsolete_footer_margin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionArchive, inherit_previous_header_footer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionArchive, page_master_first_page_different_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionArchive, page_master_even_odd_pages_different_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionArchive, section_start_kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionArchive, section_page_number_kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionArchive, section_page_number_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionArchive, first_page_master_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionArchive, even_page_master_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionArchive, odd_page_master_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionArchive, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionArchive, page_master_first_page_hides_header_footer_),
  };
  SectionArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SectionArchive_descriptor_,
      SectionArchive::default_instance_,
      SectionArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SectionArchive));
  AnchorPosArchive_descriptor_ = file->message_type(8);
  static const int AnchorPosArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnchorPosArchive, attachment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnchorPosArchive, position_),
  };
  AnchorPosArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnchorPosArchive_descriptor_,
      AnchorPosArchive::default_instance_,
      AnchorPosArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnchorPosArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnchorPosArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnchorPosArchive));
  TargetHintArchive_descriptor_ = file->message_type(9);
  static const int TargetHintArchive_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetHintArchive, frame_origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetHintArchive, frame_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetHintArchive, range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetHintArchive, next_widow_pulls_down_from_char_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetHintArchive, anchored_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetHintArchive, column_count_),
  };
  TargetHintArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TargetHintArchive_descriptor_,
      TargetHintArchive::default_instance_,
      TargetHintArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetHintArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetHintArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TargetHintArchive));
  PageHintArchive_descriptor_ = file->message_type(10);
  static const int PageHintArchive_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PageHintArchive, page_kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PageHintArchive, target_hints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PageHintArchive, footnote_auto_number_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PageHintArchive, footnote_layout_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PageHintArchive, first_child_hint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PageHintArchive, last_child_hint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PageHintArchive, anchored_attachments_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PageHintArchive, topic_numbers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PageHintArchive, version_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PageHintArchive, platform_id_),
  };
  PageHintArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PageHintArchive_descriptor_,
      PageHintArchive::default_instance_,
      PageHintArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PageHintArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PageHintArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PageHintArchive));
  PageHintArchive_PageKind_descriptor_ = PageHintArchive_descriptor_->enum_type(0);
  SectionHintArchive_descriptor_ = file->message_type(11);
  static const int SectionHintArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHintArchive, page_hints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHintArchive, start_page_index_),
  };
  SectionHintArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SectionHintArchive_descriptor_,
      SectionHintArchive::default_instance_,
      SectionHintArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHintArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHintArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SectionHintArchive));
  TextboxHintArchive_descriptor_ = file->message_type(12);
  static const int TextboxHintArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextboxHintArchive, range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextboxHintArchive, size_),
  };
  TextboxHintArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TextboxHintArchive_descriptor_,
      TextboxHintArchive::default_instance_,
      TextboxHintArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextboxHintArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextboxHintArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TextboxHintArchive));
  TopicNumberEntryArchive_descriptor_ = file->message_type(13);
  static const int TopicNumberEntryArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicNumberEntryArchive, list_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicNumberEntryArchive, topic_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicNumberEntryArchive, character_index_),
  };
  TopicNumberEntryArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TopicNumberEntryArchive_descriptor_,
      TopicNumberEntryArchive::default_instance_,
      TopicNumberEntryArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicNumberEntryArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicNumberEntryArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TopicNumberEntryArchive));
  TopicNumberHintsArchive_descriptor_ = file->message_type(14);
  static const int TopicNumberHintsArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicNumberHintsArchive, charindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicNumberHintsArchive, topic_numbers_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicNumberHintsArchive, valid_through_char_index_),
  };
  TopicNumberHintsArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TopicNumberHintsArchive_descriptor_,
      TopicNumberHintsArchive::default_instance_,
      TopicNumberHintsArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicNumberHintsArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicNumberHintsArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TopicNumberHintsArchive));
  LayoutStateArchive_descriptor_ = file->message_type(15);
  static const int LayoutStateArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutStateArchive, section_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutStateArchive, section_page_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutStateArchive, document_page_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutStateArchive, last_page_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutStateArchive, section_hints_),
  };
  LayoutStateArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LayoutStateArchive_descriptor_,
      LayoutStateArchive::default_instance_,
      LayoutStateArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutStateArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutStateArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LayoutStateArchive));
  CanvasSelectionArchive_descriptor_ = file->message_type(16);
  static const int CanvasSelectionArchive_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanvasSelectionArchive, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanvasSelectionArchive, range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanvasSelectionArchive, style_insertion_behavior_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanvasSelectionArchive, caret_affinity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanvasSelectionArchive, infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanvasSelectionArchive, excluded_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanvasSelectionArchive, additional_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanvasSelectionArchive, container_),
  };
  CanvasSelectionArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CanvasSelectionArchive_descriptor_,
      CanvasSelectionArchive::default_instance_,
      CanvasSelectionArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanvasSelectionArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanvasSelectionArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CanvasSelectionArchive));
  ViewStateArchive_descriptor_ = file->message_type(17);
  static const int ViewStateArchive_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewStateArchive, obsolete_view_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewStateArchive, visible_rect_origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewStateArchive, obsolete_landscape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewStateArchive, selection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewStateArchive, selection_model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewStateArchive, master_drawables_selectable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewStateArchive, visible_rect_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewStateArchive, chart_ui_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewStateArchive, ruler_visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewStateArchive, layout_borders_visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewStateArchive, word_count_hud_visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewStateArchive, shows_comments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewStateArchive, shows_page_navigator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewStateArchive, view_scale_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewStateArchive, view_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewStateArchive, window_frame_origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewStateArchive, window_frame_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewStateArchive, selected_inspector_switch_segment_identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewStateArchive, inspector_hidden_),
  };
  ViewStateArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ViewStateArchive_descriptor_,
      ViewStateArchive::default_instance_,
      ViewStateArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewStateArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewStateArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ViewStateArchive));
  UIStateArchive_descriptor_ = file->message_type(18);
  static const int UIStateArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, layout_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, view_state_),
  };
  UIStateArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UIStateArchive_descriptor_,
      UIStateArchive::default_instance_,
      UIStateArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UIStateArchive));
  ViewScaleMode_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TPArchives_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DocumentArchive_descriptor_, &DocumentArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ThemeArchive_descriptor_, &ThemeArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SettingsArchive_descriptor_, &SettingsArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlaceholderArchive_descriptor_, &PlaceholderArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FloatingDrawablesArchive_descriptor_, &FloatingDrawablesArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FloatingDrawablesArchive_DrawableEntry_descriptor_, &FloatingDrawablesArchive_DrawableEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FloatingDrawablesArchive_PageGroup_descriptor_, &FloatingDrawablesArchive_PageGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DrawablesZOrderArchive_descriptor_, &DrawablesZOrderArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PageMasterArchive_descriptor_, &PageMasterArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SectionArchive_descriptor_, &SectionArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnchorPosArchive_descriptor_, &AnchorPosArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TargetHintArchive_descriptor_, &TargetHintArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PageHintArchive_descriptor_, &PageHintArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SectionHintArchive_descriptor_, &SectionHintArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TextboxHintArchive_descriptor_, &TextboxHintArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TopicNumberEntryArchive_descriptor_, &TopicNumberEntryArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TopicNumberHintsArchive_descriptor_, &TopicNumberHintsArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LayoutStateArchive_descriptor_, &LayoutStateArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CanvasSelectionArchive_descriptor_, &CanvasSelectionArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ViewStateArchive_descriptor_, &ViewStateArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UIStateArchive_descriptor_, &UIStateArchive::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TPArchives_2eproto() {
  delete DocumentArchive::default_instance_;
  delete DocumentArchive_reflection_;
  delete ThemeArchive::default_instance_;
  delete ThemeArchive_reflection_;
  delete SettingsArchive::default_instance_;
  delete SettingsArchive_reflection_;
  delete PlaceholderArchive::default_instance_;
  delete PlaceholderArchive_reflection_;
  delete FloatingDrawablesArchive::default_instance_;
  delete FloatingDrawablesArchive_reflection_;
  delete FloatingDrawablesArchive_DrawableEntry::default_instance_;
  delete FloatingDrawablesArchive_DrawableEntry_reflection_;
  delete FloatingDrawablesArchive_PageGroup::default_instance_;
  delete FloatingDrawablesArchive_PageGroup_reflection_;
  delete DrawablesZOrderArchive::default_instance_;
  delete DrawablesZOrderArchive_reflection_;
  delete PageMasterArchive::default_instance_;
  delete PageMasterArchive_reflection_;
  delete SectionArchive::default_instance_;
  delete SectionArchive_reflection_;
  delete AnchorPosArchive::default_instance_;
  delete AnchorPosArchive_reflection_;
  delete TargetHintArchive::default_instance_;
  delete TargetHintArchive_reflection_;
  delete PageHintArchive::default_instance_;
  delete PageHintArchive_reflection_;
  delete SectionHintArchive::default_instance_;
  delete SectionHintArchive_reflection_;
  delete TextboxHintArchive::default_instance_;
  delete TextboxHintArchive_reflection_;
  delete TopicNumberEntryArchive::default_instance_;
  delete TopicNumberEntryArchive_reflection_;
  delete TopicNumberHintsArchive::default_instance_;
  delete TopicNumberHintsArchive_reflection_;
  delete LayoutStateArchive::default_instance_;
  delete LayoutStateArchive_reflection_;
  delete CanvasSelectionArchive::default_instance_;
  delete CanvasSelectionArchive_reflection_;
  delete ViewStateArchive::default_instance_;
  delete ViewStateArchive_reflection_;
  delete UIStateArchive::default_instance_;
  delete UIStateArchive_reflection_;
}

void protobuf_AddDesc_TPArchives_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::TSD::protobuf_AddDesc_TSDArchives_2eproto();
  ::TSK::protobuf_AddDesc_TSKArchives_2eproto();
  ::TSP::protobuf_AddDesc_TSPMessages_2eproto();
  ::TSWP::protobuf_AddDesc_TSWPArchives_2eproto();
  ::TSS::protobuf_AddDesc_TSSArchives_2eproto();
  ::TSA::protobuf_AddDesc_TSAArchives_2eproto();
  ::TSCH::protobuf_AddDesc_TSCHArchives_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020TPArchives.proto\022\002TP\032\021TSDArchives.prot"
    "o\032\021TSKArchives.proto\032\021TSPMessages.proto\032"
    "\022TSWPArchives.proto\032\021TSSArchives.proto\032\021"
    "TSAArchives.proto\032\022TSCHArchives.proto\"\305\007"
    "\n\017DocumentArchive\022#\n\005super\030\017 \002(\0132\024.TSA.D"
    "ocumentArchive\022\"\n\nstylesheet\030\002 \001(\0132\016.TSP"
    ".Reference\022*\n\022floating_drawables\030\003 \001(\0132\016"
    ".TSP.Reference\022$\n\014body_storage\030\004 \001(\0132\016.T"
    "SP.Reference\022\037\n\007section\030\005 \001(\0132\016.TSP.Refe"
    "rence\022\035\n\005theme\030\006 \001(\0132\016.TSP.Reference\022 \n\010"
    "settings\030\007 \001(\0132\016.TSP.Reference\022/\n\027deprec"
    "ated_layout_state\030\013 \001(\0132\016.TSP.Reference\022"
    "-\n\025deprecated_view_state\030\014 \001(\0132\016.TSP.Ref"
    "erence\022(\n\020citation_records\030\r \003(\0132\016.TSP.R"
    "eference\022\"\n\ntoc_styles\030\016 \003(\0132\016.TSP.Refer"
    "ence\022\'\n\017change_sessions\030\020 \003(\0132\016.TSP.Refe"
    "rence\022(\n\020drawables_zorder\030\024 \001(\0132\016.TSP.Re"
    "ference\022!\n\031uses_single_header_footer\030\025 \001"
    "(\010\022\022\n\npage_width\030\036 \001(\002\022\023\n\013page_height\030\037 "
    "\001(\002\022\023\n\013left_margin\030  \001(\002\022\024\n\014right_margin"
    "\030! \001(\002\022\022\n\ntop_margin\030\" \001(\002\022\025\n\rbottom_mar"
    "gin\030# \001(\002\022\025\n\rheader_margin\030$ \001(\002\022\025\n\rfoot"
    "er_margin\030% \001(\002\022\022\n\npage_scale\030& \001(\002\022\036\n\026l"
    "ayout_body_vertically\030\' \001(\010\022\037\n\027change_tr"
    "acking_enabled\030( \001(\010\0221\n\031tables_custom_fo"
    "rmat_list\030) \001(\0132\016.TSP.Reference\022\026\n\013orien"
    "tation\030* \001(\r:\0010\022\022\n\nprinter_id\030+ \001(\t\022\020\n\010p"
    "aper_id\030, \001(\t\022\036\n\026change_tracking_paused\030"
    "- \001(\010\"0\n\014ThemeArchive\022 \n\005super\030\001 \002(\0132\021.T"
    "SS.ThemeArchive\"\204\013\n\017SettingsArchive\022\022\n\004b"
    "ody\030\001 \001(\010:\004true\022\025\n\007headers\030\002 \001(\010:\004true\022\025"
    "\n\007footers\030\003 \001(\010:\004true\022\025\n\007preview\030\004 \001(\010:\004"
    "true\022\031\n\013copy_movies\030\005 \001(\010:\004true\022\031\n\013copy_"
    "assets\030\006 \001(\010:\004true\022$\n\025placeholder_author"
    "ing\030\007 \001(\010:\005false\022\033\n\rlinks_enabled\030\010 \001(\010:"
    "\004true\022\032\n\013hyphenation\030\t \001(\010:\005false\022\034\n\ruse"
    "_ligatures\030\n \001(\010:\005false\022 \n\021toc_links_ena"
    "bled\030\013 \001(\010:\005false\022\034\n\016show_ct_markup\030\014 \001("
    "\010:\004true\022\037\n\021show_ct_deletions\030\r \001(\010:\004true"
    "\022\035\n\025ct_bubbles_visibility\030\016 \001(\005\022!\n\023chang"
    "e_bars_visible\030\017 \001(\010:\004true\022$\n\026format_cha"
    "nges_visible\030\020 \001(\010:\004true\022!\n\023annotations_"
    "visible\030\021 \001(\010:\004true\022\036\n\017document_is_rtl\030\022"
    " \001(\010:\005false\022\023\n\013decimal_tab\030\024 \001(\t\022\020\n\010lang"
    "uage\030\025 \001(\t\022\034\n\024hyphenation_language\030\026 \001(\t"
    "\022\027\n\017creation_locale\030\027 \001(\t\022\023\n\013last_locale"
    "\030\030 \001(\t\022\025\n\rorig_template\030\031 \001(\t\022\025\n\rcreatio"
    "n_date\030\032 \001(\t\022\033\n\023bibliography_format\030\033 \001("
    "\t\0227\n\rfootnote_kind\030\036 \001(\0162 .TP.SettingsAr"
    "chive.FootnoteKind\022;\n\017footnote_format\030\037 "
    "\001(\0162\".TP.SettingsArchive.FootnoteFormat\022"
    "A\n\022footnote_numbering\030  \001(\0162%.TP.Setting"
    "sArchive.FootnoteNumbering\022\024\n\014footnote_g"
    "ap\030! \001(\005\022 \n\021section_authoring\030( \001(\010:\005fal"
    "se\"o\n\014FootnoteKind\022\032\n\026kFootnoteKindFootn"
    "otes\020\000\022!\n\035kFootnoteKindDocumentEndnotes\020"
    "\001\022 \n\034kFootnoteKindSectionEndnotes\020\002\"\257\001\n\016"
    "FootnoteFormat\022\032\n\026kFootnoteFormatNumeric"
    "\020\000\022\030\n\024kFootnoteFormatRoman\020\001\022\033\n\027kFootnot"
    "eFormatSymbolic\020\002\022\"\n\036kFootnoteFormatJapa"
    "neseNumeric\020\003\022&\n\"kFootnoteFormatJapanese"
    "Ideographic\020\004\"\206\001\n\021FootnoteNumbering\022 \n\034k"
    "FootnoteNumberingContinuous\020\000\022%\n!kFootno"
    "teNumberingRestartEachPage\020\001\022(\n$kFootnot"
    "eNumberingRestartEachSection\020\002\";\n\022Placeh"
    "olderArchive\022%\n\005super\030\001 \002(\0132\026.TSWP.Shape"
    "InfoArchive\"\377\002\n\030FloatingDrawablesArchive"
    "\022;\n\013page_groups\030\001 \003(\0132&.TP.FloatingDrawa"
    "blesArchive.PageGroup\0321\n\rDrawableEntry\022 "
    "\n\010drawable\030\001 \001(\0132\016.TSP.Reference\032\362\001\n\tPag"
    "eGroup\022\022\n\npage_index\030\001 \002(\r\022H\n\024background"
    "_drawables\030\002 \003(\0132*.TP.FloatingDrawablesA"
    "rchive.DrawableEntry\022H\n\024foreground_drawa"
    "bles\030\003 \003(\0132*.TP.FloatingDrawablesArchive"
    ".DrawableEntry\022=\n\tdrawables\030\004 \003(\0132*.TP.F"
    "loatingDrawablesArchive.DrawableEntry\";\n"
    "\026DrawablesZOrderArchive\022!\n\tdrawables\030\001 \003"
    "(\0132\016.TSP.Reference\"\177\n\021PageMasterArchive\022"
    "\037\n\007headers\030\001 \003(\0132\016.TSP.Reference\022\037\n\007foot"
    "ers\030\002 \003(\0132\016.TSP.Reference\022(\n\020master_draw"
    "ables\030\003 \003(\0132\016.TSP.Reference\"\320\007\n\016SectionA"
    "rchive\022\035\n\025OBSOLETE_shows_header\030\001 \001(\010\022\035\n"
    "\025OBSOLETE_shows_footer\030\002 \001(\010\022(\n\020OBSOLETE"
    "_headers\030\003 \003(\0132\016.TSP.Reference\022(\n\020OBSOLE"
    "TE_footers\030\004 \003(\0132\016.TSP.Reference\022\034\n\024OBSO"
    "LETE_left_margin\030\005 \001(\002\022\035\n\025OBSOLETE_right"
    "_margin\030\006 \001(\002\022\033\n\023OBSOLETE_top_margin\030\007 \001"
    "(\002\022\036\n\026OBSOLETE_bottom_margin\030\010 \001(\002\022\037\n\027OB"
    "SOLETE_header_padding\030\t \001(\002\022\037\n\027OBSOLETE_"
    "footer_padding\030\n \001(\002\022\034\n\024OBSOLETE_paper_w"
    "idth\030\013 \001(\002\022\035\n\025OBSOLETE_paper_height\030\014 \001("
    "\002\022\037\n\027OBSOLETE_landscape_mode\030\r \001(\010\0221\n\031OB"
    "SOLETE_master_drawables\030\016 \003(\0132\016.TSP.Refe"
    "rence\022\036\n\026OBSOLETE_header_margin\030\017 \001(\002\022\036\n"
    "\026OBSOLETE_footer_margin\030\020 \001(\002\022&\n\036inherit"
    "_previous_header_footer\030\021 \001(\010\022(\n page_ma"
    "ster_first_page_different\030\022 \001(\010\022,\n$page_"
    "master_even_odd_pages_different\030\023 \001(\010\022\032\n"
    "\022section_start_kind\030\024 \001(\r\022 \n\030section_pag"
    "e_number_kind\030\025 \001(\r\022!\n\031section_page_numb"
    "er_start\030\026 \001(\r\022)\n\021first_page_master\030\027 \001("
    "\0132\016.TSP.Reference\022(\n\020even_page_master\030\030 "
    "\001(\0132\016.TSP.Reference\022\'\n\017odd_page_master\030\031"
    " \001(\0132\016.TSP.Reference\022\014\n\004name\030\032 \001(\t\0222\n*pa"
    "ge_master_first_page_hides_header_footer"
    "\030\034 \001(\010\"T\n\020AnchorPosArchive\022\"\n\nattachment"
    "\030\001 \001(\0132\016.TSP.Reference\022\034\n\010position\030\002 \001(\013"
    "2\n.TSP.Point\"\330\001\n\021TargetHintArchive\022 \n\014fr"
    "ame_origin\030\001 \001(\0132\n.TSP.Point\022\035\n\nframe_si"
    "ze\030\002 \001(\0132\t.TSP.Size\022\031\n\005range\030\003 \001(\0132\n.TSP"
    ".Range\022-\n%next_widow_pulls_down_from_cha"
    "r_index\030\004 \001(\005\022\"\n\016anchored_range\030\005 \001(\0132\n."
    "TSP.Range\022\024\n\014column_count\030\006 \001(\005\"\330\004\n\017Page"
    "HintArchive\022/\n\tpage_kind\030\001 \001(\0162\034.TP.Page"
    "HintArchive.PageKind\022+\n\014target_hints\030\002 \003"
    "(\0132\025.TP.TargetHintArchive\022.\n\032footnote_au"
    "to_number_range\030\003 \001(\0132\n.TSP.Range\022)\n\025foo"
    "tnote_layout_range\030\004 \001(\0132\n.TSP.Range\022(\n\020"
    "first_child_hint\030\006 \001(\0132\016.TSP.Reference\022\'"
    "\n\017last_child_hint\030\007 \001(\0132\016.TSP.Reference\022"
    "6\n\030anchored_attachments_map\030\010 \003(\0132\024.TP.A"
    "nchorPosArchive\0222\n\rtopic_numbers\030\t \001(\0132\033"
    ".TP.TopicNumberHintsArchive\022\026\n\016version_n"
    "umber\030\n \001(\r\022\023\n\013platform_id\030\013 \001(\r\"\237\001\n\010Pag"
    "eKind\022\021\n\rkPageKindNone\020\000\022\021\n\rkPageKindTex"
    "t\020\001\022\023\n\017kPageKindFiller\020\002\022\023\n\017kPageKindOrp"
    "han\020\003\022\024\n\020kPageKindEndnote\020\004\022\022\n\016kPageKind"
    "Dirty\020\005\022\031\n\025kTPPageKindPageLayout\020\006\"W\n\022Se"
    "ctionHintArchive\022\'\n\npage_hints\030\001 \003(\0132\023.T"
    "P.PageHintArchive\022\030\n\020start_page_index\030\002 "
    "\001(\r\"H\n\022TextboxHintArchive\022\031\n\005range\030\001 \002(\013"
    "2\n.TSP.Range\022\027\n\004size\030\002 \002(\0132\t.TSP.Size\"l\n"
    "\027TopicNumberEntryArchive\022\"\n\nlist_style\030\001"
    " \002(\0132\016.TSP.Reference\022\024\n\014topic_number\030\002 \003"
    "(\r\022\027\n\017character_index\030\003 \003(\r\"\206\001\n\027TopicNum"
    "berHintsArchive\022\021\n\tcharIndex\030\001 \001(\r\0226\n\021to"
    "pic_numbers_map\030\002 \003(\0132\033.TP.TopicNumberEn"
    "tryArchive\022 \n\030valid_through_char_index\030\003"
    " \001(\r\"\254\001\n\022LayoutStateArchive\022\025\n\rsection_i"
    "ndex\030\001 \001(\r\022\032\n\022section_page_index\030\002 \001(\r\022\033"
    "\n\023document_page_index\030\003 \001(\r\022\027\n\017last_page"
    "_count\030\004 \001(\r\022-\n\rsection_hints\030\005 \003(\0132\026.TP"
    ".SectionHintArchive\"\327\002\n\026CanvasSelectionA"
    "rchive\022!\n\004type\030\001 \002(\0162\023.TSWP.SelectionTyp"
    "e\022\031\n\005range\030\002 \002(\0132\n.TSP.Range\022>\n\030style_in"
    "sertion_behavior\030\003 \002(\0162\034.TSWP.StyleInser"
    "tionBehavior\022+\n\016caret_affinity\030\004 \002(\0162\023.T"
    "SWP.CaretAffinity\022\035\n\005infos\030\005 \003(\0132\016.TSP.R"
    "eference\022&\n\016excluded_infos\030\006 \003(\0132\016.TSP.R"
    "eference\022(\n\020additional_infos\030\007 \003(\0132\016.TSP"
    ".Reference\022!\n\tcontainer\030\010 \001(\0132\016.TSP.Refe"
    "rence\"\345\005\n\020ViewStateArchive\022\033\n\023OBSOLETE_v"
    "iew_scale\030\001 \001(\002\022\'\n\023visible_rect_origin\030\002"
    " \001(\0132\n.TSP.Point\022\032\n\022OBSOLETE_landscape\030\003"
    " \001(\010\022!\n\tselection\030\004 \001(\0132\016.TSP.Reference\022"
    "\'\n\017selection_model\030\005 \001(\0132\016.TSP.Reference"
    "\022#\n\033master_drawables_selectable\030\006 \001(\010\022$\n"
    "\021visible_rect_size\030\007 \001(\0132\t.TSP.Size\022*\n\016c"
    "hart_ui_state\030\010 \003(\0132\022.TSCH.ChartUIState\022"
    "\033\n\rruler_visible\030\t \001(\010:\004true\022%\n\026layout_b"
    "orders_visible\030\n \001(\010:\005false\022%\n\026word_coun"
    "t_hud_visible\030\013 \001(\010:\005false\022\034\n\016shows_comm"
    "ents\030\014 \001(\010:\004true\022#\n\024shows_page_navigator"
    "\030\r \001(\010:\005false\022E\n\017view_scale_mode\030\016 \001(\0162\021"
    ".TP.ViewScaleMode:\031ViewScaleMode_UserDef"
    "ined\022\030\n\nview_scale\030\017 \001(\002:\0041.25\022\'\n\023window"
    "_frame_origin\030\020 \001(\0132\n.TSP.Point\022$\n\021windo"
    "w_frame_size\030\021 \001(\0132\t.TSP.Size\0224\n,selecte"
    "d_inspector_switch_segment_identifier\030\022 "
    "\001(\t\022\030\n\020inspector_hidden\030\023 \001(\010\"Z\n\016UIState"
    "Archive\022$\n\014layout_state\030\001 \001(\0132\016.TSP.Refe"
    "rence\022\"\n\nview_state\030\002 \001(\0132\016.TSP.Referenc"
    "e*e\n\rViewScaleMode\022\035\n\031ViewScaleMode_User"
    "Defined\020\000\022\032\n\026ViewScaleMode_FitWidth\020\001\022\031\n"
    "\025ViewScaleMode_FirPage\020\002", 6984);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TPArchives.proto", &protobuf_RegisterTypes);
  DocumentArchive::default_instance_ = new DocumentArchive();
  ThemeArchive::default_instance_ = new ThemeArchive();
  SettingsArchive::default_instance_ = new SettingsArchive();
  PlaceholderArchive::default_instance_ = new PlaceholderArchive();
  FloatingDrawablesArchive::default_instance_ = new FloatingDrawablesArchive();
  FloatingDrawablesArchive_DrawableEntry::default_instance_ = new FloatingDrawablesArchive_DrawableEntry();
  FloatingDrawablesArchive_PageGroup::default_instance_ = new FloatingDrawablesArchive_PageGroup();
  DrawablesZOrderArchive::default_instance_ = new DrawablesZOrderArchive();
  PageMasterArchive::default_instance_ = new PageMasterArchive();
  SectionArchive::default_instance_ = new SectionArchive();
  AnchorPosArchive::default_instance_ = new AnchorPosArchive();
  TargetHintArchive::default_instance_ = new TargetHintArchive();
  PageHintArchive::default_instance_ = new PageHintArchive();
  SectionHintArchive::default_instance_ = new SectionHintArchive();
  TextboxHintArchive::default_instance_ = new TextboxHintArchive();
  TopicNumberEntryArchive::default_instance_ = new TopicNumberEntryArchive();
  TopicNumberHintsArchive::default_instance_ = new TopicNumberHintsArchive();
  LayoutStateArchive::default_instance_ = new LayoutStateArchive();
  CanvasSelectionArchive::default_instance_ = new CanvasSelectionArchive();
  ViewStateArchive::default_instance_ = new ViewStateArchive();
  UIStateArchive::default_instance_ = new UIStateArchive();
  DocumentArchive::default_instance_->InitAsDefaultInstance();
  ThemeArchive::default_instance_->InitAsDefaultInstance();
  SettingsArchive::default_instance_->InitAsDefaultInstance();
  PlaceholderArchive::default_instance_->InitAsDefaultInstance();
  FloatingDrawablesArchive::default_instance_->InitAsDefaultInstance();
  FloatingDrawablesArchive_DrawableEntry::default_instance_->InitAsDefaultInstance();
  FloatingDrawablesArchive_PageGroup::default_instance_->InitAsDefaultInstance();
  DrawablesZOrderArchive::default_instance_->InitAsDefaultInstance();
  PageMasterArchive::default_instance_->InitAsDefaultInstance();
  SectionArchive::default_instance_->InitAsDefaultInstance();
  AnchorPosArchive::default_instance_->InitAsDefaultInstance();
  TargetHintArchive::default_instance_->InitAsDefaultInstance();
  PageHintArchive::default_instance_->InitAsDefaultInstance();
  SectionHintArchive::default_instance_->InitAsDefaultInstance();
  TextboxHintArchive::default_instance_->InitAsDefaultInstance();
  TopicNumberEntryArchive::default_instance_->InitAsDefaultInstance();
  TopicNumberHintsArchive::default_instance_->InitAsDefaultInstance();
  LayoutStateArchive::default_instance_->InitAsDefaultInstance();
  CanvasSelectionArchive::default_instance_->InitAsDefaultInstance();
  ViewStateArchive::default_instance_->InitAsDefaultInstance();
  UIStateArchive::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TPArchives_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TPArchives_2eproto {
  StaticDescriptorInitializer_TPArchives_2eproto() {
    protobuf_AddDesc_TPArchives_2eproto();
  }
} static_descriptor_initializer_TPArchives_2eproto_;
const ::google::protobuf::EnumDescriptor* ViewScaleMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ViewScaleMode_descriptor_;
}
bool ViewScaleMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int DocumentArchive::kSuperFieldNumber;
const int DocumentArchive::kStylesheetFieldNumber;
const int DocumentArchive::kFloatingDrawablesFieldNumber;
const int DocumentArchive::kBodyStorageFieldNumber;
const int DocumentArchive::kSectionFieldNumber;
const int DocumentArchive::kThemeFieldNumber;
const int DocumentArchive::kSettingsFieldNumber;
const int DocumentArchive::kDeprecatedLayoutStateFieldNumber;
const int DocumentArchive::kDeprecatedViewStateFieldNumber;
const int DocumentArchive::kCitationRecordsFieldNumber;
const int DocumentArchive::kTocStylesFieldNumber;
const int DocumentArchive::kChangeSessionsFieldNumber;
const int DocumentArchive::kDrawablesZorderFieldNumber;
const int DocumentArchive::kUsesSingleHeaderFooterFieldNumber;
const int DocumentArchive::kPageWidthFieldNumber;
const int DocumentArchive::kPageHeightFieldNumber;
const int DocumentArchive::kLeftMarginFieldNumber;
const int DocumentArchive::kRightMarginFieldNumber;
const int DocumentArchive::kTopMarginFieldNumber;
const int DocumentArchive::kBottomMarginFieldNumber;
const int DocumentArchive::kHeaderMarginFieldNumber;
const int DocumentArchive::kFooterMarginFieldNumber;
const int DocumentArchive::kPageScaleFieldNumber;
const int DocumentArchive::kLayoutBodyVerticallyFieldNumber;
const int DocumentArchive::kChangeTrackingEnabledFieldNumber;
const int DocumentArchive::kTablesCustomFormatListFieldNumber;
const int DocumentArchive::kOrientationFieldNumber;
const int DocumentArchive::kPrinterIdFieldNumber;
const int DocumentArchive::kPaperIdFieldNumber;
const int DocumentArchive::kChangeTrackingPausedFieldNumber;
#endif  // !_MSC_VER

DocumentArchive::DocumentArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DocumentArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSA::DocumentArchive*>(&::TSA::DocumentArchive::default_instance());
  stylesheet_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  floating_drawables_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  body_storage_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  section_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  theme_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  settings_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  deprecated_layout_state_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  deprecated_view_state_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  drawables_zorder_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  tables_custom_format_list_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

DocumentArchive::DocumentArchive(const DocumentArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DocumentArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  stylesheet_ = NULL;
  floating_drawables_ = NULL;
  body_storage_ = NULL;
  section_ = NULL;
  theme_ = NULL;
  settings_ = NULL;
  deprecated_layout_state_ = NULL;
  deprecated_view_state_ = NULL;
  drawables_zorder_ = NULL;
  uses_single_header_footer_ = false;
  page_width_ = 0;
  page_height_ = 0;
  left_margin_ = 0;
  right_margin_ = 0;
  top_margin_ = 0;
  bottom_margin_ = 0;
  header_margin_ = 0;
  footer_margin_ = 0;
  page_scale_ = 0;
  layout_body_vertically_ = false;
  change_tracking_enabled_ = false;
  tables_custom_format_list_ = NULL;
  orientation_ = 0u;
  printer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  paper_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  change_tracking_paused_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DocumentArchive::~DocumentArchive() {
  SharedDtor();
}

void DocumentArchive::SharedDtor() {
  if (printer_id_ != &::google::protobuf::internal::kEmptyString) {
    delete printer_id_;
  }
  if (paper_id_ != &::google::protobuf::internal::kEmptyString) {
    delete paper_id_;
  }
  if (this != default_instance_) {
    delete super_;
    delete stylesheet_;
    delete floating_drawables_;
    delete body_storage_;
    delete section_;
    delete theme_;
    delete settings_;
    delete deprecated_layout_state_;
    delete deprecated_view_state_;
    delete drawables_zorder_;
    delete tables_custom_format_list_;
  }
}

void DocumentArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DocumentArchive_descriptor_;
}

const DocumentArchive& DocumentArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPArchives_2eproto();
  return *default_instance_;
}

DocumentArchive* DocumentArchive::default_instance_ = NULL;

DocumentArchive* DocumentArchive::New() const {
  return new DocumentArchive;
}

void DocumentArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSA::DocumentArchive::Clear();
    }
    if (has_stylesheet()) {
      if (stylesheet_ != NULL) stylesheet_->::TSP::Reference::Clear();
    }
    if (has_floating_drawables()) {
      if (floating_drawables_ != NULL) floating_drawables_->::TSP::Reference::Clear();
    }
    if (has_body_storage()) {
      if (body_storage_ != NULL) body_storage_->::TSP::Reference::Clear();
    }
    if (has_section()) {
      if (section_ != NULL) section_->::TSP::Reference::Clear();
    }
    if (has_theme()) {
      if (theme_ != NULL) theme_->::TSP::Reference::Clear();
    }
    if (has_settings()) {
      if (settings_ != NULL) settings_->::TSP::Reference::Clear();
    }
    if (has_deprecated_layout_state()) {
      if (deprecated_layout_state_ != NULL) deprecated_layout_state_->::TSP::Reference::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_deprecated_view_state()) {
      if (deprecated_view_state_ != NULL) deprecated_view_state_->::TSP::Reference::Clear();
    }
    if (has_drawables_zorder()) {
      if (drawables_zorder_ != NULL) drawables_zorder_->::TSP::Reference::Clear();
    }
    uses_single_header_footer_ = false;
    page_width_ = 0;
    page_height_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    left_margin_ = 0;
    right_margin_ = 0;
    top_margin_ = 0;
    bottom_margin_ = 0;
    header_margin_ = 0;
    footer_margin_ = 0;
    page_scale_ = 0;
    layout_body_vertically_ = false;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    change_tracking_enabled_ = false;
    if (has_tables_custom_format_list()) {
      if (tables_custom_format_list_ != NULL) tables_custom_format_list_->::TSP::Reference::Clear();
    }
    orientation_ = 0u;
    if (has_printer_id()) {
      if (printer_id_ != &::google::protobuf::internal::kEmptyString) {
        printer_id_->clear();
      }
    }
    if (has_paper_id()) {
      if (paper_id_ != &::google::protobuf::internal::kEmptyString) {
        paper_id_->clear();
      }
    }
    change_tracking_paused_ = false;
  }
  citation_records_.Clear();
  toc_styles_.Clear();
  change_sessions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DocumentArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Reference stylesheet = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stylesheet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_floating_drawables;
        break;
      }

      // optional .TSP.Reference floating_drawables = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_floating_drawables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_floating_drawables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_body_storage;
        break;
      }

      // optional .TSP.Reference body_storage = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_body_storage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_section;
        break;
      }

      // optional .TSP.Reference section = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_section:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_section()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_theme;
        break;
      }

      // optional .TSP.Reference theme = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_theme:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_theme()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_settings;
        break;
      }

      // optional .TSP.Reference settings = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_settings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_settings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_deprecated_layout_state;
        break;
      }

      // optional .TSP.Reference deprecated_layout_state = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deprecated_layout_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deprecated_layout_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_deprecated_view_state;
        break;
      }

      // optional .TSP.Reference deprecated_view_state = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deprecated_view_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deprecated_view_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_citation_records;
        break;
      }

      // repeated .TSP.Reference citation_records = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_citation_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_citation_records()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_citation_records;
        if (input->ExpectTag(114)) goto parse_toc_styles;
        break;
      }

      // repeated .TSP.Reference toc_styles = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_toc_styles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_toc_styles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_toc_styles;
        if (input->ExpectTag(122)) goto parse_super;
        break;
      }

      // required .TSA.DocumentArchive super = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_change_sessions;
        break;
      }

      // repeated .TSP.Reference change_sessions = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_change_sessions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_change_sessions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_change_sessions;
        if (input->ExpectTag(162)) goto parse_drawables_zorder;
        break;
      }

      // optional .TSP.Reference drawables_zorder = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drawables_zorder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_drawables_zorder()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_uses_single_header_footer;
        break;
      }

      // optional bool uses_single_header_footer = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uses_single_header_footer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &uses_single_header_footer_)));
          set_has_uses_single_header_footer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(245)) goto parse_page_width;
        break;
      }

      // optional float page_width = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_page_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &page_width_)));
          set_has_page_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(253)) goto parse_page_height;
        break;
      }

      // optional float page_height = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_page_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &page_height_)));
          set_has_page_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(261)) goto parse_left_margin;
        break;
      }

      // optional float left_margin = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_left_margin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_margin_)));
          set_has_left_margin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(269)) goto parse_right_margin;
        break;
      }

      // optional float right_margin = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_right_margin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_margin_)));
          set_has_right_margin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(277)) goto parse_top_margin;
        break;
      }

      // optional float top_margin = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_top_margin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &top_margin_)));
          set_has_top_margin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(285)) goto parse_bottom_margin;
        break;
      }

      // optional float bottom_margin = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bottom_margin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bottom_margin_)));
          set_has_bottom_margin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(293)) goto parse_header_margin;
        break;
      }

      // optional float header_margin = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_header_margin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &header_margin_)));
          set_has_header_margin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(301)) goto parse_footer_margin;
        break;
      }

      // optional float footer_margin = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_footer_margin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &footer_margin_)));
          set_has_footer_margin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(309)) goto parse_page_scale;
        break;
      }

      // optional float page_scale = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_page_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &page_scale_)));
          set_has_page_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_layout_body_vertically;
        break;
      }

      // optional bool layout_body_vertically = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_layout_body_vertically:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &layout_body_vertically_)));
          set_has_layout_body_vertically();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_change_tracking_enabled;
        break;
      }

      // optional bool change_tracking_enabled = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change_tracking_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &change_tracking_enabled_)));
          set_has_change_tracking_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_tables_custom_format_list;
        break;
      }

      // optional .TSP.Reference tables_custom_format_list = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tables_custom_format_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tables_custom_format_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_orientation;
        break;
      }

      // optional uint32 orientation = 42 [default = 0];
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_orientation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &orientation_)));
          set_has_orientation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(346)) goto parse_printer_id;
        break;
      }

      // optional string printer_id = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_printer_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_printer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->printer_id().data(), this->printer_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(354)) goto parse_paper_id;
        break;
      }

      // optional string paper_id = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_paper_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_paper_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->paper_id().data(), this->paper_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_change_tracking_paused;
        break;
      }

      // optional bool change_tracking_paused = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change_tracking_paused:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &change_tracking_paused_)));
          set_has_change_tracking_paused();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DocumentArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Reference stylesheet = 2;
  if (has_stylesheet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stylesheet(), output);
  }

  // optional .TSP.Reference floating_drawables = 3;
  if (has_floating_drawables()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->floating_drawables(), output);
  }

  // optional .TSP.Reference body_storage = 4;
  if (has_body_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->body_storage(), output);
  }

  // optional .TSP.Reference section = 5;
  if (has_section()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->section(), output);
  }

  // optional .TSP.Reference theme = 6;
  if (has_theme()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->theme(), output);
  }

  // optional .TSP.Reference settings = 7;
  if (has_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->settings(), output);
  }

  // optional .TSP.Reference deprecated_layout_state = 11;
  if (has_deprecated_layout_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->deprecated_layout_state(), output);
  }

  // optional .TSP.Reference deprecated_view_state = 12;
  if (has_deprecated_view_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->deprecated_view_state(), output);
  }

  // repeated .TSP.Reference citation_records = 13;
  for (int i = 0; i < this->citation_records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->citation_records(i), output);
  }

  // repeated .TSP.Reference toc_styles = 14;
  for (int i = 0; i < this->toc_styles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->toc_styles(i), output);
  }

  // required .TSA.DocumentArchive super = 15;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->super(), output);
  }

  // repeated .TSP.Reference change_sessions = 16;
  for (int i = 0; i < this->change_sessions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->change_sessions(i), output);
  }

  // optional .TSP.Reference drawables_zorder = 20;
  if (has_drawables_zorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->drawables_zorder(), output);
  }

  // optional bool uses_single_header_footer = 21;
  if (has_uses_single_header_footer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->uses_single_header_footer(), output);
  }

  // optional float page_width = 30;
  if (has_page_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->page_width(), output);
  }

  // optional float page_height = 31;
  if (has_page_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(31, this->page_height(), output);
  }

  // optional float left_margin = 32;
  if (has_left_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(32, this->left_margin(), output);
  }

  // optional float right_margin = 33;
  if (has_right_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(33, this->right_margin(), output);
  }

  // optional float top_margin = 34;
  if (has_top_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(34, this->top_margin(), output);
  }

  // optional float bottom_margin = 35;
  if (has_bottom_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(35, this->bottom_margin(), output);
  }

  // optional float header_margin = 36;
  if (has_header_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(36, this->header_margin(), output);
  }

  // optional float footer_margin = 37;
  if (has_footer_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(37, this->footer_margin(), output);
  }

  // optional float page_scale = 38;
  if (has_page_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(38, this->page_scale(), output);
  }

  // optional bool layout_body_vertically = 39;
  if (has_layout_body_vertically()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(39, this->layout_body_vertically(), output);
  }

  // optional bool change_tracking_enabled = 40;
  if (has_change_tracking_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(40, this->change_tracking_enabled(), output);
  }

  // optional .TSP.Reference tables_custom_format_list = 41;
  if (has_tables_custom_format_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, this->tables_custom_format_list(), output);
  }

  // optional uint32 orientation = 42 [default = 0];
  if (has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->orientation(), output);
  }

  // optional string printer_id = 43;
  if (has_printer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->printer_id().data(), this->printer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      43, this->printer_id(), output);
  }

  // optional string paper_id = 44;
  if (has_paper_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->paper_id().data(), this->paper_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      44, this->paper_id(), output);
  }

  // optional bool change_tracking_paused = 45;
  if (has_change_tracking_paused()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(45, this->change_tracking_paused(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DocumentArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Reference stylesheet = 2;
  if (has_stylesheet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stylesheet(), target);
  }

  // optional .TSP.Reference floating_drawables = 3;
  if (has_floating_drawables()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->floating_drawables(), target);
  }

  // optional .TSP.Reference body_storage = 4;
  if (has_body_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->body_storage(), target);
  }

  // optional .TSP.Reference section = 5;
  if (has_section()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->section(), target);
  }

  // optional .TSP.Reference theme = 6;
  if (has_theme()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->theme(), target);
  }

  // optional .TSP.Reference settings = 7;
  if (has_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->settings(), target);
  }

  // optional .TSP.Reference deprecated_layout_state = 11;
  if (has_deprecated_layout_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->deprecated_layout_state(), target);
  }

  // optional .TSP.Reference deprecated_view_state = 12;
  if (has_deprecated_view_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->deprecated_view_state(), target);
  }

  // repeated .TSP.Reference citation_records = 13;
  for (int i = 0; i < this->citation_records_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->citation_records(i), target);
  }

  // repeated .TSP.Reference toc_styles = 14;
  for (int i = 0; i < this->toc_styles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->toc_styles(i), target);
  }

  // required .TSA.DocumentArchive super = 15;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->super(), target);
  }

  // repeated .TSP.Reference change_sessions = 16;
  for (int i = 0; i < this->change_sessions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->change_sessions(i), target);
  }

  // optional .TSP.Reference drawables_zorder = 20;
  if (has_drawables_zorder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->drawables_zorder(), target);
  }

  // optional bool uses_single_header_footer = 21;
  if (has_uses_single_header_footer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->uses_single_header_footer(), target);
  }

  // optional float page_width = 30;
  if (has_page_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(30, this->page_width(), target);
  }

  // optional float page_height = 31;
  if (has_page_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(31, this->page_height(), target);
  }

  // optional float left_margin = 32;
  if (has_left_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(32, this->left_margin(), target);
  }

  // optional float right_margin = 33;
  if (has_right_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(33, this->right_margin(), target);
  }

  // optional float top_margin = 34;
  if (has_top_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(34, this->top_margin(), target);
  }

  // optional float bottom_margin = 35;
  if (has_bottom_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(35, this->bottom_margin(), target);
  }

  // optional float header_margin = 36;
  if (has_header_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(36, this->header_margin(), target);
  }

  // optional float footer_margin = 37;
  if (has_footer_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(37, this->footer_margin(), target);
  }

  // optional float page_scale = 38;
  if (has_page_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(38, this->page_scale(), target);
  }

  // optional bool layout_body_vertically = 39;
  if (has_layout_body_vertically()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(39, this->layout_body_vertically(), target);
  }

  // optional bool change_tracking_enabled = 40;
  if (has_change_tracking_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(40, this->change_tracking_enabled(), target);
  }

  // optional .TSP.Reference tables_custom_format_list = 41;
  if (has_tables_custom_format_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        41, this->tables_custom_format_list(), target);
  }

  // optional uint32 orientation = 42 [default = 0];
  if (has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(42, this->orientation(), target);
  }

  // optional string printer_id = 43;
  if (has_printer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->printer_id().data(), this->printer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        43, this->printer_id(), target);
  }

  // optional string paper_id = 44;
  if (has_paper_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->paper_id().data(), this->paper_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        44, this->paper_id(), target);
  }

  // optional bool change_tracking_paused = 45;
  if (has_change_tracking_paused()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(45, this->change_tracking_paused(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DocumentArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSA.DocumentArchive super = 15;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference stylesheet = 2;
    if (has_stylesheet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stylesheet());
    }

    // optional .TSP.Reference floating_drawables = 3;
    if (has_floating_drawables()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->floating_drawables());
    }

    // optional .TSP.Reference body_storage = 4;
    if (has_body_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->body_storage());
    }

    // optional .TSP.Reference section = 5;
    if (has_section()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->section());
    }

    // optional .TSP.Reference theme = 6;
    if (has_theme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->theme());
    }

    // optional .TSP.Reference settings = 7;
    if (has_settings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->settings());
    }

    // optional .TSP.Reference deprecated_layout_state = 11;
    if (has_deprecated_layout_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deprecated_layout_state());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .TSP.Reference deprecated_view_state = 12;
    if (has_deprecated_view_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deprecated_view_state());
    }

    // optional .TSP.Reference drawables_zorder = 20;
    if (has_drawables_zorder()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->drawables_zorder());
    }

    // optional bool uses_single_header_footer = 21;
    if (has_uses_single_header_footer()) {
      total_size += 2 + 1;
    }

    // optional float page_width = 30;
    if (has_page_width()) {
      total_size += 2 + 4;
    }

    // optional float page_height = 31;
    if (has_page_height()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float left_margin = 32;
    if (has_left_margin()) {
      total_size += 2 + 4;
    }

    // optional float right_margin = 33;
    if (has_right_margin()) {
      total_size += 2 + 4;
    }

    // optional float top_margin = 34;
    if (has_top_margin()) {
      total_size += 2 + 4;
    }

    // optional float bottom_margin = 35;
    if (has_bottom_margin()) {
      total_size += 2 + 4;
    }

    // optional float header_margin = 36;
    if (has_header_margin()) {
      total_size += 2 + 4;
    }

    // optional float footer_margin = 37;
    if (has_footer_margin()) {
      total_size += 2 + 4;
    }

    // optional float page_scale = 38;
    if (has_page_scale()) {
      total_size += 2 + 4;
    }

    // optional bool layout_body_vertically = 39;
    if (has_layout_body_vertically()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bool change_tracking_enabled = 40;
    if (has_change_tracking_enabled()) {
      total_size += 2 + 1;
    }

    // optional .TSP.Reference tables_custom_format_list = 41;
    if (has_tables_custom_format_list()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tables_custom_format_list());
    }

    // optional uint32 orientation = 42 [default = 0];
    if (has_orientation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->orientation());
    }

    // optional string printer_id = 43;
    if (has_printer_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->printer_id());
    }

    // optional string paper_id = 44;
    if (has_paper_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->paper_id());
    }

    // optional bool change_tracking_paused = 45;
    if (has_change_tracking_paused()) {
      total_size += 2 + 1;
    }

  }
  // repeated .TSP.Reference citation_records = 13;
  total_size += 1 * this->citation_records_size();
  for (int i = 0; i < this->citation_records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->citation_records(i));
  }

  // repeated .TSP.Reference toc_styles = 14;
  total_size += 1 * this->toc_styles_size();
  for (int i = 0; i < this->toc_styles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->toc_styles(i));
  }

  // repeated .TSP.Reference change_sessions = 16;
  total_size += 2 * this->change_sessions_size();
  for (int i = 0; i < this->change_sessions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->change_sessions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DocumentArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DocumentArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DocumentArchive::MergeFrom(const DocumentArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  citation_records_.MergeFrom(from.citation_records_);
  toc_styles_.MergeFrom(from.toc_styles_);
  change_sessions_.MergeFrom(from.change_sessions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSA::DocumentArchive::MergeFrom(from.super());
    }
    if (from.has_stylesheet()) {
      mutable_stylesheet()->::TSP::Reference::MergeFrom(from.stylesheet());
    }
    if (from.has_floating_drawables()) {
      mutable_floating_drawables()->::TSP::Reference::MergeFrom(from.floating_drawables());
    }
    if (from.has_body_storage()) {
      mutable_body_storage()->::TSP::Reference::MergeFrom(from.body_storage());
    }
    if (from.has_section()) {
      mutable_section()->::TSP::Reference::MergeFrom(from.section());
    }
    if (from.has_theme()) {
      mutable_theme()->::TSP::Reference::MergeFrom(from.theme());
    }
    if (from.has_settings()) {
      mutable_settings()->::TSP::Reference::MergeFrom(from.settings());
    }
    if (from.has_deprecated_layout_state()) {
      mutable_deprecated_layout_state()->::TSP::Reference::MergeFrom(from.deprecated_layout_state());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_deprecated_view_state()) {
      mutable_deprecated_view_state()->::TSP::Reference::MergeFrom(from.deprecated_view_state());
    }
    if (from.has_drawables_zorder()) {
      mutable_drawables_zorder()->::TSP::Reference::MergeFrom(from.drawables_zorder());
    }
    if (from.has_uses_single_header_footer()) {
      set_uses_single_header_footer(from.uses_single_header_footer());
    }
    if (from.has_page_width()) {
      set_page_width(from.page_width());
    }
    if (from.has_page_height()) {
      set_page_height(from.page_height());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_left_margin()) {
      set_left_margin(from.left_margin());
    }
    if (from.has_right_margin()) {
      set_right_margin(from.right_margin());
    }
    if (from.has_top_margin()) {
      set_top_margin(from.top_margin());
    }
    if (from.has_bottom_margin()) {
      set_bottom_margin(from.bottom_margin());
    }
    if (from.has_header_margin()) {
      set_header_margin(from.header_margin());
    }
    if (from.has_footer_margin()) {
      set_footer_margin(from.footer_margin());
    }
    if (from.has_page_scale()) {
      set_page_scale(from.page_scale());
    }
    if (from.has_layout_body_vertically()) {
      set_layout_body_vertically(from.layout_body_vertically());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_change_tracking_enabled()) {
      set_change_tracking_enabled(from.change_tracking_enabled());
    }
    if (from.has_tables_custom_format_list()) {
      mutable_tables_custom_format_list()->::TSP::Reference::MergeFrom(from.tables_custom_format_list());
    }
    if (from.has_orientation()) {
      set_orientation(from.orientation());
    }
    if (from.has_printer_id()) {
      set_printer_id(from.printer_id());
    }
    if (from.has_paper_id()) {
      set_paper_id(from.paper_id());
    }
    if (from.has_change_tracking_paused()) {
      set_change_tracking_paused(from.change_tracking_paused());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DocumentArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentArchive::CopyFrom(const DocumentArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_stylesheet()) {
    if (!this->stylesheet().IsInitialized()) return false;
  }
  if (has_floating_drawables()) {
    if (!this->floating_drawables().IsInitialized()) return false;
  }
  if (has_body_storage()) {
    if (!this->body_storage().IsInitialized()) return false;
  }
  if (has_section()) {
    if (!this->section().IsInitialized()) return false;
  }
  if (has_theme()) {
    if (!this->theme().IsInitialized()) return false;
  }
  if (has_settings()) {
    if (!this->settings().IsInitialized()) return false;
  }
  if (has_deprecated_layout_state()) {
    if (!this->deprecated_layout_state().IsInitialized()) return false;
  }
  if (has_deprecated_view_state()) {
    if (!this->deprecated_view_state().IsInitialized()) return false;
  }
  for (int i = 0; i < citation_records_size(); i++) {
    if (!this->citation_records(i).IsInitialized()) return false;
  }
  for (int i = 0; i < toc_styles_size(); i++) {
    if (!this->toc_styles(i).IsInitialized()) return false;
  }
  for (int i = 0; i < change_sessions_size(); i++) {
    if (!this->change_sessions(i).IsInitialized()) return false;
  }
  if (has_drawables_zorder()) {
    if (!this->drawables_zorder().IsInitialized()) return false;
  }
  if (has_tables_custom_format_list()) {
    if (!this->tables_custom_format_list().IsInitialized()) return false;
  }
  return true;
}

void DocumentArchive::Swap(DocumentArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(stylesheet_, other->stylesheet_);
    std::swap(floating_drawables_, other->floating_drawables_);
    std::swap(body_storage_, other->body_storage_);
    std::swap(section_, other->section_);
    std::swap(theme_, other->theme_);
    std::swap(settings_, other->settings_);
    std::swap(deprecated_layout_state_, other->deprecated_layout_state_);
    std::swap(deprecated_view_state_, other->deprecated_view_state_);
    citation_records_.Swap(&other->citation_records_);
    toc_styles_.Swap(&other->toc_styles_);
    change_sessions_.Swap(&other->change_sessions_);
    std::swap(drawables_zorder_, other->drawables_zorder_);
    std::swap(uses_single_header_footer_, other->uses_single_header_footer_);
    std::swap(page_width_, other->page_width_);
    std::swap(page_height_, other->page_height_);
    std::swap(left_margin_, other->left_margin_);
    std::swap(right_margin_, other->right_margin_);
    std::swap(top_margin_, other->top_margin_);
    std::swap(bottom_margin_, other->bottom_margin_);
    std::swap(header_margin_, other->header_margin_);
    std::swap(footer_margin_, other->footer_margin_);
    std::swap(page_scale_, other->page_scale_);
    std::swap(layout_body_vertically_, other->layout_body_vertically_);
    std::swap(change_tracking_enabled_, other->change_tracking_enabled_);
    std::swap(tables_custom_format_list_, other->tables_custom_format_list_);
    std::swap(orientation_, other->orientation_);
    std::swap(printer_id_, other->printer_id_);
    std::swap(paper_id_, other->paper_id_);
    std::swap(change_tracking_paused_, other->change_tracking_paused_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DocumentArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DocumentArchive_descriptor_;
  metadata.reflection = DocumentArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ThemeArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

ThemeArchive::ThemeArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ThemeArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSS::ThemeArchive*>(&::TSS::ThemeArchive::default_instance());
}

ThemeArchive::ThemeArchive(const ThemeArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ThemeArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThemeArchive::~ThemeArchive() {
  SharedDtor();
}

void ThemeArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void ThemeArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThemeArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThemeArchive_descriptor_;
}

const ThemeArchive& ThemeArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPArchives_2eproto();
  return *default_instance_;
}

ThemeArchive* ThemeArchive::default_instance_ = NULL;

ThemeArchive* ThemeArchive::New() const {
  return new ThemeArchive;
}

void ThemeArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSS::ThemeArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ThemeArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSS.ThemeArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ThemeArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSS.ThemeArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ThemeArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSS.ThemeArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ThemeArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSS.ThemeArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThemeArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ThemeArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ThemeArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ThemeArchive::MergeFrom(const ThemeArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSS::ThemeArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ThemeArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThemeArchive::CopyFrom(const ThemeArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemeArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void ThemeArchive::Swap(ThemeArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ThemeArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ThemeArchive_descriptor_;
  metadata.reflection = ThemeArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SettingsArchive_FootnoteKind_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SettingsArchive_FootnoteKind_descriptor_;
}
bool SettingsArchive_FootnoteKind_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SettingsArchive_FootnoteKind SettingsArchive::kFootnoteKindFootnotes;
const SettingsArchive_FootnoteKind SettingsArchive::kFootnoteKindDocumentEndnotes;
const SettingsArchive_FootnoteKind SettingsArchive::kFootnoteKindSectionEndnotes;
const SettingsArchive_FootnoteKind SettingsArchive::FootnoteKind_MIN;
const SettingsArchive_FootnoteKind SettingsArchive::FootnoteKind_MAX;
const int SettingsArchive::FootnoteKind_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* SettingsArchive_FootnoteFormat_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SettingsArchive_FootnoteFormat_descriptor_;
}
bool SettingsArchive_FootnoteFormat_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SettingsArchive_FootnoteFormat SettingsArchive::kFootnoteFormatNumeric;
const SettingsArchive_FootnoteFormat SettingsArchive::kFootnoteFormatRoman;
const SettingsArchive_FootnoteFormat SettingsArchive::kFootnoteFormatSymbolic;
const SettingsArchive_FootnoteFormat SettingsArchive::kFootnoteFormatJapaneseNumeric;
const SettingsArchive_FootnoteFormat SettingsArchive::kFootnoteFormatJapaneseIdeographic;
const SettingsArchive_FootnoteFormat SettingsArchive::FootnoteFormat_MIN;
const SettingsArchive_FootnoteFormat SettingsArchive::FootnoteFormat_MAX;
const int SettingsArchive::FootnoteFormat_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* SettingsArchive_FootnoteNumbering_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SettingsArchive_FootnoteNumbering_descriptor_;
}
bool SettingsArchive_FootnoteNumbering_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SettingsArchive_FootnoteNumbering SettingsArchive::kFootnoteNumberingContinuous;
const SettingsArchive_FootnoteNumbering SettingsArchive::kFootnoteNumberingRestartEachPage;
const SettingsArchive_FootnoteNumbering SettingsArchive::kFootnoteNumberingRestartEachSection;
const SettingsArchive_FootnoteNumbering SettingsArchive::FootnoteNumbering_MIN;
const SettingsArchive_FootnoteNumbering SettingsArchive::FootnoteNumbering_MAX;
const int SettingsArchive::FootnoteNumbering_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SettingsArchive::kBodyFieldNumber;
const int SettingsArchive::kHeadersFieldNumber;
const int SettingsArchive::kFootersFieldNumber;
const int SettingsArchive::kPreviewFieldNumber;
const int SettingsArchive::kCopyMoviesFieldNumber;
const int SettingsArchive::kCopyAssetsFieldNumber;
const int SettingsArchive::kPlaceholderAuthoringFieldNumber;
const int SettingsArchive::kLinksEnabledFieldNumber;
const int SettingsArchive::kHyphenationFieldNumber;
const int SettingsArchive::kUseLigaturesFieldNumber;
const int SettingsArchive::kTocLinksEnabledFieldNumber;
const int SettingsArchive::kShowCtMarkupFieldNumber;
const int SettingsArchive::kShowCtDeletionsFieldNumber;
const int SettingsArchive::kCtBubblesVisibilityFieldNumber;
const int SettingsArchive::kChangeBarsVisibleFieldNumber;
const int SettingsArchive::kFormatChangesVisibleFieldNumber;
const int SettingsArchive::kAnnotationsVisibleFieldNumber;
const int SettingsArchive::kDocumentIsRtlFieldNumber;
const int SettingsArchive::kDecimalTabFieldNumber;
const int SettingsArchive::kLanguageFieldNumber;
const int SettingsArchive::kHyphenationLanguageFieldNumber;
const int SettingsArchive::kCreationLocaleFieldNumber;
const int SettingsArchive::kLastLocaleFieldNumber;
const int SettingsArchive::kOrigTemplateFieldNumber;
const int SettingsArchive::kCreationDateFieldNumber;
const int SettingsArchive::kBibliographyFormatFieldNumber;
const int SettingsArchive::kFootnoteKindFieldNumber;
const int SettingsArchive::kFootnoteFormatFieldNumber;
const int SettingsArchive::kFootnoteNumberingFieldNumber;
const int SettingsArchive::kFootnoteGapFieldNumber;
const int SettingsArchive::kSectionAuthoringFieldNumber;
#endif  // !_MSC_VER

SettingsArchive::SettingsArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SettingsArchive::InitAsDefaultInstance() {
}

SettingsArchive::SettingsArchive(const SettingsArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SettingsArchive::SharedCtor() {
  _cached_size_ = 0;
  body_ = true;
  headers_ = true;
  footers_ = true;
  preview_ = true;
  copy_movies_ = true;
  copy_assets_ = true;
  placeholder_authoring_ = false;
  links_enabled_ = true;
  hyphenation_ = false;
  use_ligatures_ = false;
  toc_links_enabled_ = false;
  show_ct_markup_ = true;
  show_ct_deletions_ = true;
  ct_bubbles_visibility_ = 0;
  change_bars_visible_ = true;
  format_changes_visible_ = true;
  annotations_visible_ = true;
  document_is_rtl_ = false;
  decimal_tab_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hyphenation_language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  creation_locale_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  last_locale_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  orig_template_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  creation_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bibliography_format_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  footnote_kind_ = 0;
  footnote_format_ = 0;
  footnote_numbering_ = 0;
  footnote_gap_ = 0;
  section_authoring_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SettingsArchive::~SettingsArchive() {
  SharedDtor();
}

void SettingsArchive::SharedDtor() {
  if (decimal_tab_ != &::google::protobuf::internal::kEmptyString) {
    delete decimal_tab_;
  }
  if (language_ != &::google::protobuf::internal::kEmptyString) {
    delete language_;
  }
  if (hyphenation_language_ != &::google::protobuf::internal::kEmptyString) {
    delete hyphenation_language_;
  }
  if (creation_locale_ != &::google::protobuf::internal::kEmptyString) {
    delete creation_locale_;
  }
  if (last_locale_ != &::google::protobuf::internal::kEmptyString) {
    delete last_locale_;
  }
  if (orig_template_ != &::google::protobuf::internal::kEmptyString) {
    delete orig_template_;
  }
  if (creation_date_ != &::google::protobuf::internal::kEmptyString) {
    delete creation_date_;
  }
  if (bibliography_format_ != &::google::protobuf::internal::kEmptyString) {
    delete bibliography_format_;
  }
  if (this != default_instance_) {
  }
}

void SettingsArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SettingsArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SettingsArchive_descriptor_;
}

const SettingsArchive& SettingsArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPArchives_2eproto();
  return *default_instance_;
}

SettingsArchive* SettingsArchive::default_instance_ = NULL;

SettingsArchive* SettingsArchive::New() const {
  return new SettingsArchive;
}

void SettingsArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    body_ = true;
    headers_ = true;
    footers_ = true;
    preview_ = true;
    copy_movies_ = true;
    copy_assets_ = true;
    placeholder_authoring_ = false;
    links_enabled_ = true;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    hyphenation_ = false;
    use_ligatures_ = false;
    toc_links_enabled_ = false;
    show_ct_markup_ = true;
    show_ct_deletions_ = true;
    ct_bubbles_visibility_ = 0;
    change_bars_visible_ = true;
    format_changes_visible_ = true;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    annotations_visible_ = true;
    document_is_rtl_ = false;
    if (has_decimal_tab()) {
      if (decimal_tab_ != &::google::protobuf::internal::kEmptyString) {
        decimal_tab_->clear();
      }
    }
    if (has_language()) {
      if (language_ != &::google::protobuf::internal::kEmptyString) {
        language_->clear();
      }
    }
    if (has_hyphenation_language()) {
      if (hyphenation_language_ != &::google::protobuf::internal::kEmptyString) {
        hyphenation_language_->clear();
      }
    }
    if (has_creation_locale()) {
      if (creation_locale_ != &::google::protobuf::internal::kEmptyString) {
        creation_locale_->clear();
      }
    }
    if (has_last_locale()) {
      if (last_locale_ != &::google::protobuf::internal::kEmptyString) {
        last_locale_->clear();
      }
    }
    if (has_orig_template()) {
      if (orig_template_ != &::google::protobuf::internal::kEmptyString) {
        orig_template_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_creation_date()) {
      if (creation_date_ != &::google::protobuf::internal::kEmptyString) {
        creation_date_->clear();
      }
    }
    if (has_bibliography_format()) {
      if (bibliography_format_ != &::google::protobuf::internal::kEmptyString) {
        bibliography_format_->clear();
      }
    }
    footnote_kind_ = 0;
    footnote_format_ = 0;
    footnote_numbering_ = 0;
    footnote_gap_ = 0;
    section_authoring_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SettingsArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool body = 1 [default = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &body_)));
          set_has_body();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_headers;
        break;
      }

      // optional bool headers = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &headers_)));
          set_has_headers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_footers;
        break;
      }

      // optional bool footers = 3 [default = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_footers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &footers_)));
          set_has_footers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_preview;
        break;
      }

      // optional bool preview = 4 [default = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preview:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &preview_)));
          set_has_preview();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_copy_movies;
        break;
      }

      // optional bool copy_movies = 5 [default = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_copy_movies:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &copy_movies_)));
          set_has_copy_movies();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_copy_assets;
        break;
      }

      // optional bool copy_assets = 6 [default = true];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_copy_assets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &copy_assets_)));
          set_has_copy_assets();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_placeholder_authoring;
        break;
      }

      // optional bool placeholder_authoring = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_placeholder_authoring:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &placeholder_authoring_)));
          set_has_placeholder_authoring();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_links_enabled;
        break;
      }

      // optional bool links_enabled = 8 [default = true];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_links_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &links_enabled_)));
          set_has_links_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_hyphenation;
        break;
      }

      // optional bool hyphenation = 9 [default = false];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hyphenation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hyphenation_)));
          set_has_hyphenation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_use_ligatures;
        break;
      }

      // optional bool use_ligatures = 10 [default = false];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_ligatures:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_ligatures_)));
          set_has_use_ligatures();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_toc_links_enabled;
        break;
      }

      // optional bool toc_links_enabled = 11 [default = false];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_toc_links_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &toc_links_enabled_)));
          set_has_toc_links_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_show_ct_markup;
        break;
      }

      // optional bool show_ct_markup = 12 [default = true];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_ct_markup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_ct_markup_)));
          set_has_show_ct_markup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_show_ct_deletions;
        break;
      }

      // optional bool show_ct_deletions = 13 [default = true];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_ct_deletions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_ct_deletions_)));
          set_has_show_ct_deletions();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_ct_bubbles_visibility;
        break;
      }

      // optional int32 ct_bubbles_visibility = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ct_bubbles_visibility:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ct_bubbles_visibility_)));
          set_has_ct_bubbles_visibility();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_change_bars_visible;
        break;
      }

      // optional bool change_bars_visible = 15 [default = true];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change_bars_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &change_bars_visible_)));
          set_has_change_bars_visible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_format_changes_visible;
        break;
      }

      // optional bool format_changes_visible = 16 [default = true];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_format_changes_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &format_changes_visible_)));
          set_has_format_changes_visible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_annotations_visible;
        break;
      }

      // optional bool annotations_visible = 17 [default = true];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_annotations_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &annotations_visible_)));
          set_has_annotations_visible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_document_is_rtl;
        break;
      }

      // optional bool document_is_rtl = 18 [default = false];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_document_is_rtl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &document_is_rtl_)));
          set_has_document_is_rtl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_decimal_tab;
        break;
      }

      // optional string decimal_tab = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_decimal_tab:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_decimal_tab()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->decimal_tab().data(), this->decimal_tab().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_language;
        break;
      }

      // optional string language = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_hyphenation_language;
        break;
      }

      // optional string hyphenation_language = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hyphenation_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hyphenation_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hyphenation_language().data(), this->hyphenation_language().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_creation_locale;
        break;
      }

      // optional string creation_locale = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_creation_locale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creation_locale()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->creation_locale().data(), this->creation_locale().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_last_locale;
        break;
      }

      // optional string last_locale = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_last_locale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_locale()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->last_locale().data(), this->last_locale().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_orig_template;
        break;
      }

      // optional string orig_template = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orig_template:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orig_template()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orig_template().data(), this->orig_template().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_creation_date;
        break;
      }

      // optional string creation_date = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_creation_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creation_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->creation_date().data(), this->creation_date().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_bibliography_format;
        break;
      }

      // optional string bibliography_format = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bibliography_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bibliography_format()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bibliography_format().data(), this->bibliography_format().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_footnote_kind;
        break;
      }

      // optional .TP.SettingsArchive.FootnoteKind footnote_kind = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_footnote_kind:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TP::SettingsArchive_FootnoteKind_IsValid(value)) {
            set_footnote_kind(static_cast< ::TP::SettingsArchive_FootnoteKind >(value));
          } else {
            mutable_unknown_fields()->AddVarint(30, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_footnote_format;
        break;
      }

      // optional .TP.SettingsArchive.FootnoteFormat footnote_format = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_footnote_format:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TP::SettingsArchive_FootnoteFormat_IsValid(value)) {
            set_footnote_format(static_cast< ::TP::SettingsArchive_FootnoteFormat >(value));
          } else {
            mutable_unknown_fields()->AddVarint(31, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_footnote_numbering;
        break;
      }

      // optional .TP.SettingsArchive.FootnoteNumbering footnote_numbering = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_footnote_numbering:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TP::SettingsArchive_FootnoteNumbering_IsValid(value)) {
            set_footnote_numbering(static_cast< ::TP::SettingsArchive_FootnoteNumbering >(value));
          } else {
            mutable_unknown_fields()->AddVarint(32, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_footnote_gap;
        break;
      }

      // optional int32 footnote_gap = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_footnote_gap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &footnote_gap_)));
          set_has_footnote_gap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_section_authoring;
        break;
      }

      // optional bool section_authoring = 40 [default = false];
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_section_authoring:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &section_authoring_)));
          set_has_section_authoring();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SettingsArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool body = 1 [default = true];
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->body(), output);
  }

  // optional bool headers = 2 [default = true];
  if (has_headers()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->headers(), output);
  }

  // optional bool footers = 3 [default = true];
  if (has_footers()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->footers(), output);
  }

  // optional bool preview = 4 [default = true];
  if (has_preview()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->preview(), output);
  }

  // optional bool copy_movies = 5 [default = true];
  if (has_copy_movies()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->copy_movies(), output);
  }

  // optional bool copy_assets = 6 [default = true];
  if (has_copy_assets()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->copy_assets(), output);
  }

  // optional bool placeholder_authoring = 7 [default = false];
  if (has_placeholder_authoring()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->placeholder_authoring(), output);
  }

  // optional bool links_enabled = 8 [default = true];
  if (has_links_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->links_enabled(), output);
  }

  // optional bool hyphenation = 9 [default = false];
  if (has_hyphenation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->hyphenation(), output);
  }

  // optional bool use_ligatures = 10 [default = false];
  if (has_use_ligatures()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->use_ligatures(), output);
  }

  // optional bool toc_links_enabled = 11 [default = false];
  if (has_toc_links_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->toc_links_enabled(), output);
  }

  // optional bool show_ct_markup = 12 [default = true];
  if (has_show_ct_markup()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->show_ct_markup(), output);
  }

  // optional bool show_ct_deletions = 13 [default = true];
  if (has_show_ct_deletions()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->show_ct_deletions(), output);
  }

  // optional int32 ct_bubbles_visibility = 14;
  if (has_ct_bubbles_visibility()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->ct_bubbles_visibility(), output);
  }

  // optional bool change_bars_visible = 15 [default = true];
  if (has_change_bars_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->change_bars_visible(), output);
  }

  // optional bool format_changes_visible = 16 [default = true];
  if (has_format_changes_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->format_changes_visible(), output);
  }

  // optional bool annotations_visible = 17 [default = true];
  if (has_annotations_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->annotations_visible(), output);
  }

  // optional bool document_is_rtl = 18 [default = false];
  if (has_document_is_rtl()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->document_is_rtl(), output);
  }

  // optional string decimal_tab = 20;
  if (has_decimal_tab()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->decimal_tab().data(), this->decimal_tab().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->decimal_tab(), output);
  }

  // optional string language = 21;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->language(), output);
  }

  // optional string hyphenation_language = 22;
  if (has_hyphenation_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hyphenation_language().data(), this->hyphenation_language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->hyphenation_language(), output);
  }

  // optional string creation_locale = 23;
  if (has_creation_locale()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creation_locale().data(), this->creation_locale().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->creation_locale(), output);
  }

  // optional string last_locale = 24;
  if (has_last_locale()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->last_locale().data(), this->last_locale().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->last_locale(), output);
  }

  // optional string orig_template = 25;
  if (has_orig_template()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orig_template().data(), this->orig_template().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->orig_template(), output);
  }

  // optional string creation_date = 26;
  if (has_creation_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creation_date().data(), this->creation_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->creation_date(), output);
  }

  // optional string bibliography_format = 27;
  if (has_bibliography_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bibliography_format().data(), this->bibliography_format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->bibliography_format(), output);
  }

  // optional .TP.SettingsArchive.FootnoteKind footnote_kind = 30;
  if (has_footnote_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      30, this->footnote_kind(), output);
  }

  // optional .TP.SettingsArchive.FootnoteFormat footnote_format = 31;
  if (has_footnote_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      31, this->footnote_format(), output);
  }

  // optional .TP.SettingsArchive.FootnoteNumbering footnote_numbering = 32;
  if (has_footnote_numbering()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      32, this->footnote_numbering(), output);
  }

  // optional int32 footnote_gap = 33;
  if (has_footnote_gap()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->footnote_gap(), output);
  }

  // optional bool section_authoring = 40 [default = false];
  if (has_section_authoring()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(40, this->section_authoring(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SettingsArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool body = 1 [default = true];
  if (has_body()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->body(), target);
  }

  // optional bool headers = 2 [default = true];
  if (has_headers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->headers(), target);
  }

  // optional bool footers = 3 [default = true];
  if (has_footers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->footers(), target);
  }

  // optional bool preview = 4 [default = true];
  if (has_preview()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->preview(), target);
  }

  // optional bool copy_movies = 5 [default = true];
  if (has_copy_movies()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->copy_movies(), target);
  }

  // optional bool copy_assets = 6 [default = true];
  if (has_copy_assets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->copy_assets(), target);
  }

  // optional bool placeholder_authoring = 7 [default = false];
  if (has_placeholder_authoring()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->placeholder_authoring(), target);
  }

  // optional bool links_enabled = 8 [default = true];
  if (has_links_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->links_enabled(), target);
  }

  // optional bool hyphenation = 9 [default = false];
  if (has_hyphenation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->hyphenation(), target);
  }

  // optional bool use_ligatures = 10 [default = false];
  if (has_use_ligatures()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->use_ligatures(), target);
  }

  // optional bool toc_links_enabled = 11 [default = false];
  if (has_toc_links_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->toc_links_enabled(), target);
  }

  // optional bool show_ct_markup = 12 [default = true];
  if (has_show_ct_markup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->show_ct_markup(), target);
  }

  // optional bool show_ct_deletions = 13 [default = true];
  if (has_show_ct_deletions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->show_ct_deletions(), target);
  }

  // optional int32 ct_bubbles_visibility = 14;
  if (has_ct_bubbles_visibility()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->ct_bubbles_visibility(), target);
  }

  // optional bool change_bars_visible = 15 [default = true];
  if (has_change_bars_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->change_bars_visible(), target);
  }

  // optional bool format_changes_visible = 16 [default = true];
  if (has_format_changes_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->format_changes_visible(), target);
  }

  // optional bool annotations_visible = 17 [default = true];
  if (has_annotations_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->annotations_visible(), target);
  }

  // optional bool document_is_rtl = 18 [default = false];
  if (has_document_is_rtl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->document_is_rtl(), target);
  }

  // optional string decimal_tab = 20;
  if (has_decimal_tab()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->decimal_tab().data(), this->decimal_tab().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->decimal_tab(), target);
  }

  // optional string language = 21;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->language(), target);
  }

  // optional string hyphenation_language = 22;
  if (has_hyphenation_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hyphenation_language().data(), this->hyphenation_language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->hyphenation_language(), target);
  }

  // optional string creation_locale = 23;
  if (has_creation_locale()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creation_locale().data(), this->creation_locale().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->creation_locale(), target);
  }

  // optional string last_locale = 24;
  if (has_last_locale()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->last_locale().data(), this->last_locale().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->last_locale(), target);
  }

  // optional string orig_template = 25;
  if (has_orig_template()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orig_template().data(), this->orig_template().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->orig_template(), target);
  }

  // optional string creation_date = 26;
  if (has_creation_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creation_date().data(), this->creation_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->creation_date(), target);
  }

  // optional string bibliography_format = 27;
  if (has_bibliography_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bibliography_format().data(), this->bibliography_format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->bibliography_format(), target);
  }

  // optional .TP.SettingsArchive.FootnoteKind footnote_kind = 30;
  if (has_footnote_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      30, this->footnote_kind(), target);
  }

  // optional .TP.SettingsArchive.FootnoteFormat footnote_format = 31;
  if (has_footnote_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      31, this->footnote_format(), target);
  }

  // optional .TP.SettingsArchive.FootnoteNumbering footnote_numbering = 32;
  if (has_footnote_numbering()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      32, this->footnote_numbering(), target);
  }

  // optional int32 footnote_gap = 33;
  if (has_footnote_gap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->footnote_gap(), target);
  }

  // optional bool section_authoring = 40 [default = false];
  if (has_section_authoring()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(40, this->section_authoring(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SettingsArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool body = 1 [default = true];
    if (has_body()) {
      total_size += 1 + 1;
    }

    // optional bool headers = 2 [default = true];
    if (has_headers()) {
      total_size += 1 + 1;
    }

    // optional bool footers = 3 [default = true];
    if (has_footers()) {
      total_size += 1 + 1;
    }

    // optional bool preview = 4 [default = true];
    if (has_preview()) {
      total_size += 1 + 1;
    }

    // optional bool copy_movies = 5 [default = true];
    if (has_copy_movies()) {
      total_size += 1 + 1;
    }

    // optional bool copy_assets = 6 [default = true];
    if (has_copy_assets()) {
      total_size += 1 + 1;
    }

    // optional bool placeholder_authoring = 7 [default = false];
    if (has_placeholder_authoring()) {
      total_size += 1 + 1;
    }

    // optional bool links_enabled = 8 [default = true];
    if (has_links_enabled()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool hyphenation = 9 [default = false];
    if (has_hyphenation()) {
      total_size += 1 + 1;
    }

    // optional bool use_ligatures = 10 [default = false];
    if (has_use_ligatures()) {
      total_size += 1 + 1;
    }

    // optional bool toc_links_enabled = 11 [default = false];
    if (has_toc_links_enabled()) {
      total_size += 1 + 1;
    }

    // optional bool show_ct_markup = 12 [default = true];
    if (has_show_ct_markup()) {
      total_size += 1 + 1;
    }

    // optional bool show_ct_deletions = 13 [default = true];
    if (has_show_ct_deletions()) {
      total_size += 1 + 1;
    }

    // optional int32 ct_bubbles_visibility = 14;
    if (has_ct_bubbles_visibility()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ct_bubbles_visibility());
    }

    // optional bool change_bars_visible = 15 [default = true];
    if (has_change_bars_visible()) {
      total_size += 1 + 1;
    }

    // optional bool format_changes_visible = 16 [default = true];
    if (has_format_changes_visible()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool annotations_visible = 17 [default = true];
    if (has_annotations_visible()) {
      total_size += 2 + 1;
    }

    // optional bool document_is_rtl = 18 [default = false];
    if (has_document_is_rtl()) {
      total_size += 2 + 1;
    }

    // optional string decimal_tab = 20;
    if (has_decimal_tab()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->decimal_tab());
    }

    // optional string language = 21;
    if (has_language()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }

    // optional string hyphenation_language = 22;
    if (has_hyphenation_language()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hyphenation_language());
    }

    // optional string creation_locale = 23;
    if (has_creation_locale()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creation_locale());
    }

    // optional string last_locale = 24;
    if (has_last_locale()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_locale());
    }

    // optional string orig_template = 25;
    if (has_orig_template()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orig_template());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string creation_date = 26;
    if (has_creation_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creation_date());
    }

    // optional string bibliography_format = 27;
    if (has_bibliography_format()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bibliography_format());
    }

    // optional .TP.SettingsArchive.FootnoteKind footnote_kind = 30;
    if (has_footnote_kind()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->footnote_kind());
    }

    // optional .TP.SettingsArchive.FootnoteFormat footnote_format = 31;
    if (has_footnote_format()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->footnote_format());
    }

    // optional .TP.SettingsArchive.FootnoteNumbering footnote_numbering = 32;
    if (has_footnote_numbering()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->footnote_numbering());
    }

    // optional int32 footnote_gap = 33;
    if (has_footnote_gap()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->footnote_gap());
    }

    // optional bool section_authoring = 40 [default = false];
    if (has_section_authoring()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SettingsArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SettingsArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SettingsArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SettingsArchive::MergeFrom(const SettingsArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_body()) {
      set_body(from.body());
    }
    if (from.has_headers()) {
      set_headers(from.headers());
    }
    if (from.has_footers()) {
      set_footers(from.footers());
    }
    if (from.has_preview()) {
      set_preview(from.preview());
    }
    if (from.has_copy_movies()) {
      set_copy_movies(from.copy_movies());
    }
    if (from.has_copy_assets()) {
      set_copy_assets(from.copy_assets());
    }
    if (from.has_placeholder_authoring()) {
      set_placeholder_authoring(from.placeholder_authoring());
    }
    if (from.has_links_enabled()) {
      set_links_enabled(from.links_enabled());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hyphenation()) {
      set_hyphenation(from.hyphenation());
    }
    if (from.has_use_ligatures()) {
      set_use_ligatures(from.use_ligatures());
    }
    if (from.has_toc_links_enabled()) {
      set_toc_links_enabled(from.toc_links_enabled());
    }
    if (from.has_show_ct_markup()) {
      set_show_ct_markup(from.show_ct_markup());
    }
    if (from.has_show_ct_deletions()) {
      set_show_ct_deletions(from.show_ct_deletions());
    }
    if (from.has_ct_bubbles_visibility()) {
      set_ct_bubbles_visibility(from.ct_bubbles_visibility());
    }
    if (from.has_change_bars_visible()) {
      set_change_bars_visible(from.change_bars_visible());
    }
    if (from.has_format_changes_visible()) {
      set_format_changes_visible(from.format_changes_visible());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_annotations_visible()) {
      set_annotations_visible(from.annotations_visible());
    }
    if (from.has_document_is_rtl()) {
      set_document_is_rtl(from.document_is_rtl());
    }
    if (from.has_decimal_tab()) {
      set_decimal_tab(from.decimal_tab());
    }
    if (from.has_language()) {
      set_language(from.language());
    }
    if (from.has_hyphenation_language()) {
      set_hyphenation_language(from.hyphenation_language());
    }
    if (from.has_creation_locale()) {
      set_creation_locale(from.creation_locale());
    }
    if (from.has_last_locale()) {
      set_last_locale(from.last_locale());
    }
    if (from.has_orig_template()) {
      set_orig_template(from.orig_template());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_creation_date()) {
      set_creation_date(from.creation_date());
    }
    if (from.has_bibliography_format()) {
      set_bibliography_format(from.bibliography_format());
    }
    if (from.has_footnote_kind()) {
      set_footnote_kind(from.footnote_kind());
    }
    if (from.has_footnote_format()) {
      set_footnote_format(from.footnote_format());
    }
    if (from.has_footnote_numbering()) {
      set_footnote_numbering(from.footnote_numbering());
    }
    if (from.has_footnote_gap()) {
      set_footnote_gap(from.footnote_gap());
    }
    if (from.has_section_authoring()) {
      set_section_authoring(from.section_authoring());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SettingsArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SettingsArchive::CopyFrom(const SettingsArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SettingsArchive::IsInitialized() const {

  return true;
}

void SettingsArchive::Swap(SettingsArchive* other) {
  if (other != this) {
    std::swap(body_, other->body_);
    std::swap(headers_, other->headers_);
    std::swap(footers_, other->footers_);
    std::swap(preview_, other->preview_);
    std::swap(copy_movies_, other->copy_movies_);
    std::swap(copy_assets_, other->copy_assets_);
    std::swap(placeholder_authoring_, other->placeholder_authoring_);
    std::swap(links_enabled_, other->links_enabled_);
    std::swap(hyphenation_, other->hyphenation_);
    std::swap(use_ligatures_, other->use_ligatures_);
    std::swap(toc_links_enabled_, other->toc_links_enabled_);
    std::swap(show_ct_markup_, other->show_ct_markup_);
    std::swap(show_ct_deletions_, other->show_ct_deletions_);
    std::swap(ct_bubbles_visibility_, other->ct_bubbles_visibility_);
    std::swap(change_bars_visible_, other->change_bars_visible_);
    std::swap(format_changes_visible_, other->format_changes_visible_);
    std::swap(annotations_visible_, other->annotations_visible_);
    std::swap(document_is_rtl_, other->document_is_rtl_);
    std::swap(decimal_tab_, other->decimal_tab_);
    std::swap(language_, other->language_);
    std::swap(hyphenation_language_, other->hyphenation_language_);
    std::swap(creation_locale_, other->creation_locale_);
    std::swap(last_locale_, other->last_locale_);
    std::swap(orig_template_, other->orig_template_);
    std::swap(creation_date_, other->creation_date_);
    std::swap(bibliography_format_, other->bibliography_format_);
    std::swap(footnote_kind_, other->footnote_kind_);
    std::swap(footnote_format_, other->footnote_format_);
    std::swap(footnote_numbering_, other->footnote_numbering_);
    std::swap(footnote_gap_, other->footnote_gap_);
    std::swap(section_authoring_, other->section_authoring_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SettingsArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SettingsArchive_descriptor_;
  metadata.reflection = SettingsArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlaceholderArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

PlaceholderArchive::PlaceholderArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlaceholderArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSWP::ShapeInfoArchive*>(&::TSWP::ShapeInfoArchive::default_instance());
}

PlaceholderArchive::PlaceholderArchive(const PlaceholderArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlaceholderArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlaceholderArchive::~PlaceholderArchive() {
  SharedDtor();
}

void PlaceholderArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void PlaceholderArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlaceholderArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlaceholderArchive_descriptor_;
}

const PlaceholderArchive& PlaceholderArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPArchives_2eproto();
  return *default_instance_;
}

PlaceholderArchive* PlaceholderArchive::default_instance_ = NULL;

PlaceholderArchive* PlaceholderArchive::New() const {
  return new PlaceholderArchive;
}

void PlaceholderArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSWP::ShapeInfoArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlaceholderArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSWP.ShapeInfoArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlaceholderArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSWP.ShapeInfoArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlaceholderArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSWP.ShapeInfoArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlaceholderArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSWP.ShapeInfoArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlaceholderArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlaceholderArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlaceholderArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlaceholderArchive::MergeFrom(const PlaceholderArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSWP::ShapeInfoArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlaceholderArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaceholderArchive::CopyFrom(const PlaceholderArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceholderArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void PlaceholderArchive::Swap(PlaceholderArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlaceholderArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlaceholderArchive_descriptor_;
  metadata.reflection = PlaceholderArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FloatingDrawablesArchive_DrawableEntry::kDrawableFieldNumber;
#endif  // !_MSC_VER

FloatingDrawablesArchive_DrawableEntry::FloatingDrawablesArchive_DrawableEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FloatingDrawablesArchive_DrawableEntry::InitAsDefaultInstance() {
  drawable_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

FloatingDrawablesArchive_DrawableEntry::FloatingDrawablesArchive_DrawableEntry(const FloatingDrawablesArchive_DrawableEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FloatingDrawablesArchive_DrawableEntry::SharedCtor() {
  _cached_size_ = 0;
  drawable_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FloatingDrawablesArchive_DrawableEntry::~FloatingDrawablesArchive_DrawableEntry() {
  SharedDtor();
}

void FloatingDrawablesArchive_DrawableEntry::SharedDtor() {
  if (this != default_instance_) {
    delete drawable_;
  }
}

void FloatingDrawablesArchive_DrawableEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FloatingDrawablesArchive_DrawableEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FloatingDrawablesArchive_DrawableEntry_descriptor_;
}

const FloatingDrawablesArchive_DrawableEntry& FloatingDrawablesArchive_DrawableEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPArchives_2eproto();
  return *default_instance_;
}

FloatingDrawablesArchive_DrawableEntry* FloatingDrawablesArchive_DrawableEntry::default_instance_ = NULL;

FloatingDrawablesArchive_DrawableEntry* FloatingDrawablesArchive_DrawableEntry::New() const {
  return new FloatingDrawablesArchive_DrawableEntry;
}

void FloatingDrawablesArchive_DrawableEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_drawable()) {
      if (drawable_ != NULL) drawable_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FloatingDrawablesArchive_DrawableEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Reference drawable = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_drawable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FloatingDrawablesArchive_DrawableEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Reference drawable = 1;
  if (has_drawable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->drawable(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FloatingDrawablesArchive_DrawableEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Reference drawable = 1;
  if (has_drawable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->drawable(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FloatingDrawablesArchive_DrawableEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.Reference drawable = 1;
    if (has_drawable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->drawable());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FloatingDrawablesArchive_DrawableEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FloatingDrawablesArchive_DrawableEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FloatingDrawablesArchive_DrawableEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FloatingDrawablesArchive_DrawableEntry::MergeFrom(const FloatingDrawablesArchive_DrawableEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_drawable()) {
      mutable_drawable()->::TSP::Reference::MergeFrom(from.drawable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FloatingDrawablesArchive_DrawableEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloatingDrawablesArchive_DrawableEntry::CopyFrom(const FloatingDrawablesArchive_DrawableEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatingDrawablesArchive_DrawableEntry::IsInitialized() const {

  if (has_drawable()) {
    if (!this->drawable().IsInitialized()) return false;
  }
  return true;
}

void FloatingDrawablesArchive_DrawableEntry::Swap(FloatingDrawablesArchive_DrawableEntry* other) {
  if (other != this) {
    std::swap(drawable_, other->drawable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FloatingDrawablesArchive_DrawableEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FloatingDrawablesArchive_DrawableEntry_descriptor_;
  metadata.reflection = FloatingDrawablesArchive_DrawableEntry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FloatingDrawablesArchive_PageGroup::kPageIndexFieldNumber;
const int FloatingDrawablesArchive_PageGroup::kBackgroundDrawablesFieldNumber;
const int FloatingDrawablesArchive_PageGroup::kForegroundDrawablesFieldNumber;
const int FloatingDrawablesArchive_PageGroup::kDrawablesFieldNumber;
#endif  // !_MSC_VER

FloatingDrawablesArchive_PageGroup::FloatingDrawablesArchive_PageGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FloatingDrawablesArchive_PageGroup::InitAsDefaultInstance() {
}

FloatingDrawablesArchive_PageGroup::FloatingDrawablesArchive_PageGroup(const FloatingDrawablesArchive_PageGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FloatingDrawablesArchive_PageGroup::SharedCtor() {
  _cached_size_ = 0;
  page_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FloatingDrawablesArchive_PageGroup::~FloatingDrawablesArchive_PageGroup() {
  SharedDtor();
}

void FloatingDrawablesArchive_PageGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FloatingDrawablesArchive_PageGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FloatingDrawablesArchive_PageGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FloatingDrawablesArchive_PageGroup_descriptor_;
}

const FloatingDrawablesArchive_PageGroup& FloatingDrawablesArchive_PageGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPArchives_2eproto();
  return *default_instance_;
}

FloatingDrawablesArchive_PageGroup* FloatingDrawablesArchive_PageGroup::default_instance_ = NULL;

FloatingDrawablesArchive_PageGroup* FloatingDrawablesArchive_PageGroup::New() const {
  return new FloatingDrawablesArchive_PageGroup;
}

void FloatingDrawablesArchive_PageGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    page_index_ = 0u;
  }
  background_drawables_.Clear();
  foreground_drawables_.Clear();
  drawables_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FloatingDrawablesArchive_PageGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 page_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_index_)));
          set_has_page_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_background_drawables;
        break;
      }

      // repeated .TP.FloatingDrawablesArchive.DrawableEntry background_drawables = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_background_drawables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_background_drawables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_background_drawables;
        if (input->ExpectTag(26)) goto parse_foreground_drawables;
        break;
      }

      // repeated .TP.FloatingDrawablesArchive.DrawableEntry foreground_drawables = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_foreground_drawables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_foreground_drawables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_foreground_drawables;
        if (input->ExpectTag(34)) goto parse_drawables;
        break;
      }

      // repeated .TP.FloatingDrawablesArchive.DrawableEntry drawables = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drawables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_drawables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_drawables;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FloatingDrawablesArchive_PageGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 page_index = 1;
  if (has_page_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->page_index(), output);
  }

  // repeated .TP.FloatingDrawablesArchive.DrawableEntry background_drawables = 2;
  for (int i = 0; i < this->background_drawables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->background_drawables(i), output);
  }

  // repeated .TP.FloatingDrawablesArchive.DrawableEntry foreground_drawables = 3;
  for (int i = 0; i < this->foreground_drawables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->foreground_drawables(i), output);
  }

  // repeated .TP.FloatingDrawablesArchive.DrawableEntry drawables = 4;
  for (int i = 0; i < this->drawables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->drawables(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FloatingDrawablesArchive_PageGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 page_index = 1;
  if (has_page_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->page_index(), target);
  }

  // repeated .TP.FloatingDrawablesArchive.DrawableEntry background_drawables = 2;
  for (int i = 0; i < this->background_drawables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->background_drawables(i), target);
  }

  // repeated .TP.FloatingDrawablesArchive.DrawableEntry foreground_drawables = 3;
  for (int i = 0; i < this->foreground_drawables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->foreground_drawables(i), target);
  }

  // repeated .TP.FloatingDrawablesArchive.DrawableEntry drawables = 4;
  for (int i = 0; i < this->drawables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->drawables(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FloatingDrawablesArchive_PageGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 page_index = 1;
    if (has_page_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page_index());
    }

  }
  // repeated .TP.FloatingDrawablesArchive.DrawableEntry background_drawables = 2;
  total_size += 1 * this->background_drawables_size();
  for (int i = 0; i < this->background_drawables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->background_drawables(i));
  }

  // repeated .TP.FloatingDrawablesArchive.DrawableEntry foreground_drawables = 3;
  total_size += 1 * this->foreground_drawables_size();
  for (int i = 0; i < this->foreground_drawables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->foreground_drawables(i));
  }

  // repeated .TP.FloatingDrawablesArchive.DrawableEntry drawables = 4;
  total_size += 1 * this->drawables_size();
  for (int i = 0; i < this->drawables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->drawables(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FloatingDrawablesArchive_PageGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FloatingDrawablesArchive_PageGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FloatingDrawablesArchive_PageGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FloatingDrawablesArchive_PageGroup::MergeFrom(const FloatingDrawablesArchive_PageGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  background_drawables_.MergeFrom(from.background_drawables_);
  foreground_drawables_.MergeFrom(from.foreground_drawables_);
  drawables_.MergeFrom(from.drawables_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_page_index()) {
      set_page_index(from.page_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FloatingDrawablesArchive_PageGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloatingDrawablesArchive_PageGroup::CopyFrom(const FloatingDrawablesArchive_PageGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatingDrawablesArchive_PageGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < background_drawables_size(); i++) {
    if (!this->background_drawables(i).IsInitialized()) return false;
  }
  for (int i = 0; i < foreground_drawables_size(); i++) {
    if (!this->foreground_drawables(i).IsInitialized()) return false;
  }
  for (int i = 0; i < drawables_size(); i++) {
    if (!this->drawables(i).IsInitialized()) return false;
  }
  return true;
}

void FloatingDrawablesArchive_PageGroup::Swap(FloatingDrawablesArchive_PageGroup* other) {
  if (other != this) {
    std::swap(page_index_, other->page_index_);
    background_drawables_.Swap(&other->background_drawables_);
    foreground_drawables_.Swap(&other->foreground_drawables_);
    drawables_.Swap(&other->drawables_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FloatingDrawablesArchive_PageGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FloatingDrawablesArchive_PageGroup_descriptor_;
  metadata.reflection = FloatingDrawablesArchive_PageGroup_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FloatingDrawablesArchive::kPageGroupsFieldNumber;
#endif  // !_MSC_VER

FloatingDrawablesArchive::FloatingDrawablesArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FloatingDrawablesArchive::InitAsDefaultInstance() {
}

FloatingDrawablesArchive::FloatingDrawablesArchive(const FloatingDrawablesArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FloatingDrawablesArchive::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FloatingDrawablesArchive::~FloatingDrawablesArchive() {
  SharedDtor();
}

void FloatingDrawablesArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FloatingDrawablesArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FloatingDrawablesArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FloatingDrawablesArchive_descriptor_;
}

const FloatingDrawablesArchive& FloatingDrawablesArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPArchives_2eproto();
  return *default_instance_;
}

FloatingDrawablesArchive* FloatingDrawablesArchive::default_instance_ = NULL;

FloatingDrawablesArchive* FloatingDrawablesArchive::New() const {
  return new FloatingDrawablesArchive;
}

void FloatingDrawablesArchive::Clear() {
  page_groups_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FloatingDrawablesArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TP.FloatingDrawablesArchive.PageGroup page_groups = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_page_groups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_page_groups()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_page_groups;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FloatingDrawablesArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TP.FloatingDrawablesArchive.PageGroup page_groups = 1;
  for (int i = 0; i < this->page_groups_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->page_groups(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FloatingDrawablesArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TP.FloatingDrawablesArchive.PageGroup page_groups = 1;
  for (int i = 0; i < this->page_groups_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->page_groups(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FloatingDrawablesArchive::ByteSize() const {
  int total_size = 0;

  // repeated .TP.FloatingDrawablesArchive.PageGroup page_groups = 1;
  total_size += 1 * this->page_groups_size();
  for (int i = 0; i < this->page_groups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->page_groups(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FloatingDrawablesArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FloatingDrawablesArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FloatingDrawablesArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FloatingDrawablesArchive::MergeFrom(const FloatingDrawablesArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  page_groups_.MergeFrom(from.page_groups_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FloatingDrawablesArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloatingDrawablesArchive::CopyFrom(const FloatingDrawablesArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatingDrawablesArchive::IsInitialized() const {

  for (int i = 0; i < page_groups_size(); i++) {
    if (!this->page_groups(i).IsInitialized()) return false;
  }
  return true;
}

void FloatingDrawablesArchive::Swap(FloatingDrawablesArchive* other) {
  if (other != this) {
    page_groups_.Swap(&other->page_groups_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FloatingDrawablesArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FloatingDrawablesArchive_descriptor_;
  metadata.reflection = FloatingDrawablesArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DrawablesZOrderArchive::kDrawablesFieldNumber;
#endif  // !_MSC_VER

DrawablesZOrderArchive::DrawablesZOrderArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DrawablesZOrderArchive::InitAsDefaultInstance() {
}

DrawablesZOrderArchive::DrawablesZOrderArchive(const DrawablesZOrderArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DrawablesZOrderArchive::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DrawablesZOrderArchive::~DrawablesZOrderArchive() {
  SharedDtor();
}

void DrawablesZOrderArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DrawablesZOrderArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DrawablesZOrderArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DrawablesZOrderArchive_descriptor_;
}

const DrawablesZOrderArchive& DrawablesZOrderArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPArchives_2eproto();
  return *default_instance_;
}

DrawablesZOrderArchive* DrawablesZOrderArchive::default_instance_ = NULL;

DrawablesZOrderArchive* DrawablesZOrderArchive::New() const {
  return new DrawablesZOrderArchive;
}

void DrawablesZOrderArchive::Clear() {
  drawables_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DrawablesZOrderArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TSP.Reference drawables = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drawables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_drawables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_drawables;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DrawablesZOrderArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TSP.Reference drawables = 1;
  for (int i = 0; i < this->drawables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->drawables(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DrawablesZOrderArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TSP.Reference drawables = 1;
  for (int i = 0; i < this->drawables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->drawables(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DrawablesZOrderArchive::ByteSize() const {
  int total_size = 0;

  // repeated .TSP.Reference drawables = 1;
  total_size += 1 * this->drawables_size();
  for (int i = 0; i < this->drawables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->drawables(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DrawablesZOrderArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DrawablesZOrderArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DrawablesZOrderArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DrawablesZOrderArchive::MergeFrom(const DrawablesZOrderArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  drawables_.MergeFrom(from.drawables_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DrawablesZOrderArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawablesZOrderArchive::CopyFrom(const DrawablesZOrderArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawablesZOrderArchive::IsInitialized() const {

  for (int i = 0; i < drawables_size(); i++) {
    if (!this->drawables(i).IsInitialized()) return false;
  }
  return true;
}

void DrawablesZOrderArchive::Swap(DrawablesZOrderArchive* other) {
  if (other != this) {
    drawables_.Swap(&other->drawables_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DrawablesZOrderArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DrawablesZOrderArchive_descriptor_;
  metadata.reflection = DrawablesZOrderArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PageMasterArchive::kHeadersFieldNumber;
const int PageMasterArchive::kFootersFieldNumber;
const int PageMasterArchive::kMasterDrawablesFieldNumber;
#endif  // !_MSC_VER

PageMasterArchive::PageMasterArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PageMasterArchive::InitAsDefaultInstance() {
}

PageMasterArchive::PageMasterArchive(const PageMasterArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PageMasterArchive::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PageMasterArchive::~PageMasterArchive() {
  SharedDtor();
}

void PageMasterArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PageMasterArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PageMasterArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PageMasterArchive_descriptor_;
}

const PageMasterArchive& PageMasterArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPArchives_2eproto();
  return *default_instance_;
}

PageMasterArchive* PageMasterArchive::default_instance_ = NULL;

PageMasterArchive* PageMasterArchive::New() const {
  return new PageMasterArchive;
}

void PageMasterArchive::Clear() {
  headers_.Clear();
  footers_.Clear();
  master_drawables_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PageMasterArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TSP.Reference headers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_headers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_headers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_headers;
        if (input->ExpectTag(18)) goto parse_footers;
        break;
      }

      // repeated .TSP.Reference footers = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_footers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_footers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_footers;
        if (input->ExpectTag(26)) goto parse_master_drawables;
        break;
      }

      // repeated .TSP.Reference master_drawables = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_master_drawables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_master_drawables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_master_drawables;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PageMasterArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TSP.Reference headers = 1;
  for (int i = 0; i < this->headers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->headers(i), output);
  }

  // repeated .TSP.Reference footers = 2;
  for (int i = 0; i < this->footers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->footers(i), output);
  }

  // repeated .TSP.Reference master_drawables = 3;
  for (int i = 0; i < this->master_drawables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->master_drawables(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PageMasterArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TSP.Reference headers = 1;
  for (int i = 0; i < this->headers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->headers(i), target);
  }

  // repeated .TSP.Reference footers = 2;
  for (int i = 0; i < this->footers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->footers(i), target);
  }

  // repeated .TSP.Reference master_drawables = 3;
  for (int i = 0; i < this->master_drawables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->master_drawables(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PageMasterArchive::ByteSize() const {
  int total_size = 0;

  // repeated .TSP.Reference headers = 1;
  total_size += 1 * this->headers_size();
  for (int i = 0; i < this->headers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->headers(i));
  }

  // repeated .TSP.Reference footers = 2;
  total_size += 1 * this->footers_size();
  for (int i = 0; i < this->footers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->footers(i));
  }

  // repeated .TSP.Reference master_drawables = 3;
  total_size += 1 * this->master_drawables_size();
  for (int i = 0; i < this->master_drawables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->master_drawables(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PageMasterArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PageMasterArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PageMasterArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PageMasterArchive::MergeFrom(const PageMasterArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  headers_.MergeFrom(from.headers_);
  footers_.MergeFrom(from.footers_);
  master_drawables_.MergeFrom(from.master_drawables_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PageMasterArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PageMasterArchive::CopyFrom(const PageMasterArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PageMasterArchive::IsInitialized() const {

  for (int i = 0; i < headers_size(); i++) {
    if (!this->headers(i).IsInitialized()) return false;
  }
  for (int i = 0; i < footers_size(); i++) {
    if (!this->footers(i).IsInitialized()) return false;
  }
  for (int i = 0; i < master_drawables_size(); i++) {
    if (!this->master_drawables(i).IsInitialized()) return false;
  }
  return true;
}

void PageMasterArchive::Swap(PageMasterArchive* other) {
  if (other != this) {
    headers_.Swap(&other->headers_);
    footers_.Swap(&other->footers_);
    master_drawables_.Swap(&other->master_drawables_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PageMasterArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PageMasterArchive_descriptor_;
  metadata.reflection = PageMasterArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SectionArchive::kOBSOLETEShowsHeaderFieldNumber;
const int SectionArchive::kOBSOLETEShowsFooterFieldNumber;
const int SectionArchive::kOBSOLETEHeadersFieldNumber;
const int SectionArchive::kOBSOLETEFootersFieldNumber;
const int SectionArchive::kOBSOLETELeftMarginFieldNumber;
const int SectionArchive::kOBSOLETERightMarginFieldNumber;
const int SectionArchive::kOBSOLETETopMarginFieldNumber;
const int SectionArchive::kOBSOLETEBottomMarginFieldNumber;
const int SectionArchive::kOBSOLETEHeaderPaddingFieldNumber;
const int SectionArchive::kOBSOLETEFooterPaddingFieldNumber;
const int SectionArchive::kOBSOLETEPaperWidthFieldNumber;
const int SectionArchive::kOBSOLETEPaperHeightFieldNumber;
const int SectionArchive::kOBSOLETELandscapeModeFieldNumber;
const int SectionArchive::kOBSOLETEMasterDrawablesFieldNumber;
const int SectionArchive::kOBSOLETEHeaderMarginFieldNumber;
const int SectionArchive::kOBSOLETEFooterMarginFieldNumber;
const int SectionArchive::kInheritPreviousHeaderFooterFieldNumber;
const int SectionArchive::kPageMasterFirstPageDifferentFieldNumber;
const int SectionArchive::kPageMasterEvenOddPagesDifferentFieldNumber;
const int SectionArchive::kSectionStartKindFieldNumber;
const int SectionArchive::kSectionPageNumberKindFieldNumber;
const int SectionArchive::kSectionPageNumberStartFieldNumber;
const int SectionArchive::kFirstPageMasterFieldNumber;
const int SectionArchive::kEvenPageMasterFieldNumber;
const int SectionArchive::kOddPageMasterFieldNumber;
const int SectionArchive::kNameFieldNumber;
const int SectionArchive::kPageMasterFirstPageHidesHeaderFooterFieldNumber;
#endif  // !_MSC_VER

SectionArchive::SectionArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SectionArchive::InitAsDefaultInstance() {
  first_page_master_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  even_page_master_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  odd_page_master_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

SectionArchive::SectionArchive(const SectionArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SectionArchive::SharedCtor() {
  _cached_size_ = 0;
  obsolete_shows_header_ = false;
  obsolete_shows_footer_ = false;
  obsolete_left_margin_ = 0;
  obsolete_right_margin_ = 0;
  obsolete_top_margin_ = 0;
  obsolete_bottom_margin_ = 0;
  obsolete_header_padding_ = 0;
  obsolete_footer_padding_ = 0;
  obsolete_paper_width_ = 0;
  obsolete_paper_height_ = 0;
  obsolete_landscape_mode_ = false;
  obsolete_header_margin_ = 0;
  obsolete_footer_margin_ = 0;
  inherit_previous_header_footer_ = false;
  page_master_first_page_different_ = false;
  page_master_even_odd_pages_different_ = false;
  section_start_kind_ = 0u;
  section_page_number_kind_ = 0u;
  section_page_number_start_ = 0u;
  first_page_master_ = NULL;
  even_page_master_ = NULL;
  odd_page_master_ = NULL;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  page_master_first_page_hides_header_footer_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SectionArchive::~SectionArchive() {
  SharedDtor();
}

void SectionArchive::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete first_page_master_;
    delete even_page_master_;
    delete odd_page_master_;
  }
}

void SectionArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SectionArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SectionArchive_descriptor_;
}

const SectionArchive& SectionArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPArchives_2eproto();
  return *default_instance_;
}

SectionArchive* SectionArchive::default_instance_ = NULL;

SectionArchive* SectionArchive::New() const {
  return new SectionArchive;
}

void SectionArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    obsolete_shows_header_ = false;
    obsolete_shows_footer_ = false;
    obsolete_left_margin_ = 0;
    obsolete_right_margin_ = 0;
    obsolete_top_margin_ = 0;
    obsolete_bottom_margin_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    obsolete_header_padding_ = 0;
    obsolete_footer_padding_ = 0;
    obsolete_paper_width_ = 0;
    obsolete_paper_height_ = 0;
    obsolete_landscape_mode_ = false;
    obsolete_header_margin_ = 0;
    obsolete_footer_margin_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    inherit_previous_header_footer_ = false;
    page_master_first_page_different_ = false;
    page_master_even_odd_pages_different_ = false;
    section_start_kind_ = 0u;
    section_page_number_kind_ = 0u;
    section_page_number_start_ = 0u;
    if (has_first_page_master()) {
      if (first_page_master_ != NULL) first_page_master_->::TSP::Reference::Clear();
    }
    if (has_even_page_master()) {
      if (even_page_master_ != NULL) even_page_master_->::TSP::Reference::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_odd_page_master()) {
      if (odd_page_master_ != NULL) odd_page_master_->::TSP::Reference::Clear();
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    page_master_first_page_hides_header_footer_ = false;
  }
  obsolete_headers_.Clear();
  obsolete_footers_.Clear();
  obsolete_master_drawables_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SectionArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool OBSOLETE_shows_header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obsolete_shows_header_)));
          set_has_obsolete_shows_header();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_OBSOLETE_shows_footer;
        break;
      }

      // optional bool OBSOLETE_shows_footer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OBSOLETE_shows_footer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obsolete_shows_footer_)));
          set_has_obsolete_shows_footer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_OBSOLETE_headers;
        break;
      }

      // repeated .TSP.Reference OBSOLETE_headers = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OBSOLETE_headers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_obsolete_headers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_OBSOLETE_headers;
        if (input->ExpectTag(34)) goto parse_OBSOLETE_footers;
        break;
      }

      // repeated .TSP.Reference OBSOLETE_footers = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OBSOLETE_footers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_obsolete_footers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_OBSOLETE_footers;
        if (input->ExpectTag(45)) goto parse_OBSOLETE_left_margin;
        break;
      }

      // optional float OBSOLETE_left_margin = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_OBSOLETE_left_margin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obsolete_left_margin_)));
          set_has_obsolete_left_margin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_OBSOLETE_right_margin;
        break;
      }

      // optional float OBSOLETE_right_margin = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_OBSOLETE_right_margin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obsolete_right_margin_)));
          set_has_obsolete_right_margin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_OBSOLETE_top_margin;
        break;
      }

      // optional float OBSOLETE_top_margin = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_OBSOLETE_top_margin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obsolete_top_margin_)));
          set_has_obsolete_top_margin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_OBSOLETE_bottom_margin;
        break;
      }

      // optional float OBSOLETE_bottom_margin = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_OBSOLETE_bottom_margin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obsolete_bottom_margin_)));
          set_has_obsolete_bottom_margin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_OBSOLETE_header_padding;
        break;
      }

      // optional float OBSOLETE_header_padding = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_OBSOLETE_header_padding:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obsolete_header_padding_)));
          set_has_obsolete_header_padding();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_OBSOLETE_footer_padding;
        break;
      }

      // optional float OBSOLETE_footer_padding = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_OBSOLETE_footer_padding:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obsolete_footer_padding_)));
          set_has_obsolete_footer_padding();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_OBSOLETE_paper_width;
        break;
      }

      // optional float OBSOLETE_paper_width = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_OBSOLETE_paper_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obsolete_paper_width_)));
          set_has_obsolete_paper_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_OBSOLETE_paper_height;
        break;
      }

      // optional float OBSOLETE_paper_height = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_OBSOLETE_paper_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obsolete_paper_height_)));
          set_has_obsolete_paper_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_OBSOLETE_landscape_mode;
        break;
      }

      // optional bool OBSOLETE_landscape_mode = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OBSOLETE_landscape_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obsolete_landscape_mode_)));
          set_has_obsolete_landscape_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_OBSOLETE_master_drawables;
        break;
      }

      // repeated .TSP.Reference OBSOLETE_master_drawables = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OBSOLETE_master_drawables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_obsolete_master_drawables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_OBSOLETE_master_drawables;
        if (input->ExpectTag(125)) goto parse_OBSOLETE_header_margin;
        break;
      }

      // optional float OBSOLETE_header_margin = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_OBSOLETE_header_margin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obsolete_header_margin_)));
          set_has_obsolete_header_margin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_OBSOLETE_footer_margin;
        break;
      }

      // optional float OBSOLETE_footer_margin = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_OBSOLETE_footer_margin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obsolete_footer_margin_)));
          set_has_obsolete_footer_margin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_inherit_previous_header_footer;
        break;
      }

      // optional bool inherit_previous_header_footer = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inherit_previous_header_footer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inherit_previous_header_footer_)));
          set_has_inherit_previous_header_footer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_page_master_first_page_different;
        break;
      }

      // optional bool page_master_first_page_different = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page_master_first_page_different:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &page_master_first_page_different_)));
          set_has_page_master_first_page_different();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_page_master_even_odd_pages_different;
        break;
      }

      // optional bool page_master_even_odd_pages_different = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page_master_even_odd_pages_different:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &page_master_even_odd_pages_different_)));
          set_has_page_master_even_odd_pages_different();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_section_start_kind;
        break;
      }

      // optional uint32 section_start_kind = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_section_start_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &section_start_kind_)));
          set_has_section_start_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_section_page_number_kind;
        break;
      }

      // optional uint32 section_page_number_kind = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_section_page_number_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &section_page_number_kind_)));
          set_has_section_page_number_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_section_page_number_start;
        break;
      }

      // optional uint32 section_page_number_start = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_section_page_number_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &section_page_number_start_)));
          set_has_section_page_number_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_first_page_master;
        break;
      }

      // optional .TSP.Reference first_page_master = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_first_page_master:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_first_page_master()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_even_page_master;
        break;
      }

      // optional .TSP.Reference even_page_master = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_even_page_master:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_even_page_master()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_odd_page_master;
        break;
      }

      // optional .TSP.Reference odd_page_master = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_odd_page_master:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_odd_page_master()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_name;
        break;
      }

      // optional string name = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_page_master_first_page_hides_header_footer;
        break;
      }

      // optional bool page_master_first_page_hides_header_footer = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page_master_first_page_hides_header_footer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &page_master_first_page_hides_header_footer_)));
          set_has_page_master_first_page_hides_header_footer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SectionArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool OBSOLETE_shows_header = 1;
  if (has_obsolete_shows_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->obsolete_shows_header(), output);
  }

  // optional bool OBSOLETE_shows_footer = 2;
  if (has_obsolete_shows_footer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->obsolete_shows_footer(), output);
  }

  // repeated .TSP.Reference OBSOLETE_headers = 3;
  for (int i = 0; i < this->obsolete_headers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->obsolete_headers(i), output);
  }

  // repeated .TSP.Reference OBSOLETE_footers = 4;
  for (int i = 0; i < this->obsolete_footers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->obsolete_footers(i), output);
  }

  // optional float OBSOLETE_left_margin = 5;
  if (has_obsolete_left_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->obsolete_left_margin(), output);
  }

  // optional float OBSOLETE_right_margin = 6;
  if (has_obsolete_right_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->obsolete_right_margin(), output);
  }

  // optional float OBSOLETE_top_margin = 7;
  if (has_obsolete_top_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->obsolete_top_margin(), output);
  }

  // optional float OBSOLETE_bottom_margin = 8;
  if (has_obsolete_bottom_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->obsolete_bottom_margin(), output);
  }

  // optional float OBSOLETE_header_padding = 9;
  if (has_obsolete_header_padding()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->obsolete_header_padding(), output);
  }

  // optional float OBSOLETE_footer_padding = 10;
  if (has_obsolete_footer_padding()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->obsolete_footer_padding(), output);
  }

  // optional float OBSOLETE_paper_width = 11;
  if (has_obsolete_paper_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->obsolete_paper_width(), output);
  }

  // optional float OBSOLETE_paper_height = 12;
  if (has_obsolete_paper_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->obsolete_paper_height(), output);
  }

  // optional bool OBSOLETE_landscape_mode = 13;
  if (has_obsolete_landscape_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->obsolete_landscape_mode(), output);
  }

  // repeated .TSP.Reference OBSOLETE_master_drawables = 14;
  for (int i = 0; i < this->obsolete_master_drawables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->obsolete_master_drawables(i), output);
  }

  // optional float OBSOLETE_header_margin = 15;
  if (has_obsolete_header_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->obsolete_header_margin(), output);
  }

  // optional float OBSOLETE_footer_margin = 16;
  if (has_obsolete_footer_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->obsolete_footer_margin(), output);
  }

  // optional bool inherit_previous_header_footer = 17;
  if (has_inherit_previous_header_footer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->inherit_previous_header_footer(), output);
  }

  // optional bool page_master_first_page_different = 18;
  if (has_page_master_first_page_different()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->page_master_first_page_different(), output);
  }

  // optional bool page_master_even_odd_pages_different = 19;
  if (has_page_master_even_odd_pages_different()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->page_master_even_odd_pages_different(), output);
  }

  // optional uint32 section_start_kind = 20;
  if (has_section_start_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->section_start_kind(), output);
  }

  // optional uint32 section_page_number_kind = 21;
  if (has_section_page_number_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->section_page_number_kind(), output);
  }

  // optional uint32 section_page_number_start = 22;
  if (has_section_page_number_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->section_page_number_start(), output);
  }

  // optional .TSP.Reference first_page_master = 23;
  if (has_first_page_master()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->first_page_master(), output);
  }

  // optional .TSP.Reference even_page_master = 24;
  if (has_even_page_master()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->even_page_master(), output);
  }

  // optional .TSP.Reference odd_page_master = 25;
  if (has_odd_page_master()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->odd_page_master(), output);
  }

  // optional string name = 26;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->name(), output);
  }

  // optional bool page_master_first_page_hides_header_footer = 28;
  if (has_page_master_first_page_hides_header_footer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->page_master_first_page_hides_header_footer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SectionArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool OBSOLETE_shows_header = 1;
  if (has_obsolete_shows_header()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->obsolete_shows_header(), target);
  }

  // optional bool OBSOLETE_shows_footer = 2;
  if (has_obsolete_shows_footer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->obsolete_shows_footer(), target);
  }

  // repeated .TSP.Reference OBSOLETE_headers = 3;
  for (int i = 0; i < this->obsolete_headers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->obsolete_headers(i), target);
  }

  // repeated .TSP.Reference OBSOLETE_footers = 4;
  for (int i = 0; i < this->obsolete_footers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->obsolete_footers(i), target);
  }

  // optional float OBSOLETE_left_margin = 5;
  if (has_obsolete_left_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->obsolete_left_margin(), target);
  }

  // optional float OBSOLETE_right_margin = 6;
  if (has_obsolete_right_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->obsolete_right_margin(), target);
  }

  // optional float OBSOLETE_top_margin = 7;
  if (has_obsolete_top_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->obsolete_top_margin(), target);
  }

  // optional float OBSOLETE_bottom_margin = 8;
  if (has_obsolete_bottom_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->obsolete_bottom_margin(), target);
  }

  // optional float OBSOLETE_header_padding = 9;
  if (has_obsolete_header_padding()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->obsolete_header_padding(), target);
  }

  // optional float OBSOLETE_footer_padding = 10;
  if (has_obsolete_footer_padding()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->obsolete_footer_padding(), target);
  }

  // optional float OBSOLETE_paper_width = 11;
  if (has_obsolete_paper_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->obsolete_paper_width(), target);
  }

  // optional float OBSOLETE_paper_height = 12;
  if (has_obsolete_paper_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->obsolete_paper_height(), target);
  }

  // optional bool OBSOLETE_landscape_mode = 13;
  if (has_obsolete_landscape_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->obsolete_landscape_mode(), target);
  }

  // repeated .TSP.Reference OBSOLETE_master_drawables = 14;
  for (int i = 0; i < this->obsolete_master_drawables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->obsolete_master_drawables(i), target);
  }

  // optional float OBSOLETE_header_margin = 15;
  if (has_obsolete_header_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->obsolete_header_margin(), target);
  }

  // optional float OBSOLETE_footer_margin = 16;
  if (has_obsolete_footer_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->obsolete_footer_margin(), target);
  }

  // optional bool inherit_previous_header_footer = 17;
  if (has_inherit_previous_header_footer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->inherit_previous_header_footer(), target);
  }

  // optional bool page_master_first_page_different = 18;
  if (has_page_master_first_page_different()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->page_master_first_page_different(), target);
  }

  // optional bool page_master_even_odd_pages_different = 19;
  if (has_page_master_even_odd_pages_different()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->page_master_even_odd_pages_different(), target);
  }

  // optional uint32 section_start_kind = 20;
  if (has_section_start_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->section_start_kind(), target);
  }

  // optional uint32 section_page_number_kind = 21;
  if (has_section_page_number_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->section_page_number_kind(), target);
  }

  // optional uint32 section_page_number_start = 22;
  if (has_section_page_number_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->section_page_number_start(), target);
  }

  // optional .TSP.Reference first_page_master = 23;
  if (has_first_page_master()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->first_page_master(), target);
  }

  // optional .TSP.Reference even_page_master = 24;
  if (has_even_page_master()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->even_page_master(), target);
  }

  // optional .TSP.Reference odd_page_master = 25;
  if (has_odd_page_master()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->odd_page_master(), target);
  }

  // optional string name = 26;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->name(), target);
  }

  // optional bool page_master_first_page_hides_header_footer = 28;
  if (has_page_master_first_page_hides_header_footer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->page_master_first_page_hides_header_footer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SectionArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool OBSOLETE_shows_header = 1;
    if (has_obsolete_shows_header()) {
      total_size += 1 + 1;
    }

    // optional bool OBSOLETE_shows_footer = 2;
    if (has_obsolete_shows_footer()) {
      total_size += 1 + 1;
    }

    // optional float OBSOLETE_left_margin = 5;
    if (has_obsolete_left_margin()) {
      total_size += 1 + 4;
    }

    // optional float OBSOLETE_right_margin = 6;
    if (has_obsolete_right_margin()) {
      total_size += 1 + 4;
    }

    // optional float OBSOLETE_top_margin = 7;
    if (has_obsolete_top_margin()) {
      total_size += 1 + 4;
    }

    // optional float OBSOLETE_bottom_margin = 8;
    if (has_obsolete_bottom_margin()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float OBSOLETE_header_padding = 9;
    if (has_obsolete_header_padding()) {
      total_size += 1 + 4;
    }

    // optional float OBSOLETE_footer_padding = 10;
    if (has_obsolete_footer_padding()) {
      total_size += 1 + 4;
    }

    // optional float OBSOLETE_paper_width = 11;
    if (has_obsolete_paper_width()) {
      total_size += 1 + 4;
    }

    // optional float OBSOLETE_paper_height = 12;
    if (has_obsolete_paper_height()) {
      total_size += 1 + 4;
    }

    // optional bool OBSOLETE_landscape_mode = 13;
    if (has_obsolete_landscape_mode()) {
      total_size += 1 + 1;
    }

    // optional float OBSOLETE_header_margin = 15;
    if (has_obsolete_header_margin()) {
      total_size += 1 + 4;
    }

    // optional float OBSOLETE_footer_margin = 16;
    if (has_obsolete_footer_margin()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool inherit_previous_header_footer = 17;
    if (has_inherit_previous_header_footer()) {
      total_size += 2 + 1;
    }

    // optional bool page_master_first_page_different = 18;
    if (has_page_master_first_page_different()) {
      total_size += 2 + 1;
    }

    // optional bool page_master_even_odd_pages_different = 19;
    if (has_page_master_even_odd_pages_different()) {
      total_size += 2 + 1;
    }

    // optional uint32 section_start_kind = 20;
    if (has_section_start_kind()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->section_start_kind());
    }

    // optional uint32 section_page_number_kind = 21;
    if (has_section_page_number_kind()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->section_page_number_kind());
    }

    // optional uint32 section_page_number_start = 22;
    if (has_section_page_number_start()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->section_page_number_start());
    }

    // optional .TSP.Reference first_page_master = 23;
    if (has_first_page_master()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->first_page_master());
    }

    // optional .TSP.Reference even_page_master = 24;
    if (has_even_page_master()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->even_page_master());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .TSP.Reference odd_page_master = 25;
    if (has_odd_page_master()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->odd_page_master());
    }

    // optional string name = 26;
    if (has_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool page_master_first_page_hides_header_footer = 28;
    if (has_page_master_first_page_hides_header_footer()) {
      total_size += 2 + 1;
    }

  }
  // repeated .TSP.Reference OBSOLETE_headers = 3;
  total_size += 1 * this->obsolete_headers_size();
  for (int i = 0; i < this->obsolete_headers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->obsolete_headers(i));
  }

  // repeated .TSP.Reference OBSOLETE_footers = 4;
  total_size += 1 * this->obsolete_footers_size();
  for (int i = 0; i < this->obsolete_footers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->obsolete_footers(i));
  }

  // repeated .TSP.Reference OBSOLETE_master_drawables = 14;
  total_size += 1 * this->obsolete_master_drawables_size();
  for (int i = 0; i < this->obsolete_master_drawables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->obsolete_master_drawables(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SectionArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SectionArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SectionArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SectionArchive::MergeFrom(const SectionArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  obsolete_headers_.MergeFrom(from.obsolete_headers_);
  obsolete_footers_.MergeFrom(from.obsolete_footers_);
  obsolete_master_drawables_.MergeFrom(from.obsolete_master_drawables_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_obsolete_shows_header()) {
      set_obsolete_shows_header(from.obsolete_shows_header());
    }
    if (from.has_obsolete_shows_footer()) {
      set_obsolete_shows_footer(from.obsolete_shows_footer());
    }
    if (from.has_obsolete_left_margin()) {
      set_obsolete_left_margin(from.obsolete_left_margin());
    }
    if (from.has_obsolete_right_margin()) {
      set_obsolete_right_margin(from.obsolete_right_margin());
    }
    if (from.has_obsolete_top_margin()) {
      set_obsolete_top_margin(from.obsolete_top_margin());
    }
    if (from.has_obsolete_bottom_margin()) {
      set_obsolete_bottom_margin(from.obsolete_bottom_margin());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_obsolete_header_padding()) {
      set_obsolete_header_padding(from.obsolete_header_padding());
    }
    if (from.has_obsolete_footer_padding()) {
      set_obsolete_footer_padding(from.obsolete_footer_padding());
    }
    if (from.has_obsolete_paper_width()) {
      set_obsolete_paper_width(from.obsolete_paper_width());
    }
    if (from.has_obsolete_paper_height()) {
      set_obsolete_paper_height(from.obsolete_paper_height());
    }
    if (from.has_obsolete_landscape_mode()) {
      set_obsolete_landscape_mode(from.obsolete_landscape_mode());
    }
    if (from.has_obsolete_header_margin()) {
      set_obsolete_header_margin(from.obsolete_header_margin());
    }
    if (from.has_obsolete_footer_margin()) {
      set_obsolete_footer_margin(from.obsolete_footer_margin());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_inherit_previous_header_footer()) {
      set_inherit_previous_header_footer(from.inherit_previous_header_footer());
    }
    if (from.has_page_master_first_page_different()) {
      set_page_master_first_page_different(from.page_master_first_page_different());
    }
    if (from.has_page_master_even_odd_pages_different()) {
      set_page_master_even_odd_pages_different(from.page_master_even_odd_pages_different());
    }
    if (from.has_section_start_kind()) {
      set_section_start_kind(from.section_start_kind());
    }
    if (from.has_section_page_number_kind()) {
      set_section_page_number_kind(from.section_page_number_kind());
    }
    if (from.has_section_page_number_start()) {
      set_section_page_number_start(from.section_page_number_start());
    }
    if (from.has_first_page_master()) {
      mutable_first_page_master()->::TSP::Reference::MergeFrom(from.first_page_master());
    }
    if (from.has_even_page_master()) {
      mutable_even_page_master()->::TSP::Reference::MergeFrom(from.even_page_master());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_odd_page_master()) {
      mutable_odd_page_master()->::TSP::Reference::MergeFrom(from.odd_page_master());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_page_master_first_page_hides_header_footer()) {
      set_page_master_first_page_hides_header_footer(from.page_master_first_page_hides_header_footer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SectionArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SectionArchive::CopyFrom(const SectionArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SectionArchive::IsInitialized() const {

  for (int i = 0; i < obsolete_headers_size(); i++) {
    if (!this->obsolete_headers(i).IsInitialized()) return false;
  }
  for (int i = 0; i < obsolete_footers_size(); i++) {
    if (!this->obsolete_footers(i).IsInitialized()) return false;
  }
  for (int i = 0; i < obsolete_master_drawables_size(); i++) {
    if (!this->obsolete_master_drawables(i).IsInitialized()) return false;
  }
  if (has_first_page_master()) {
    if (!this->first_page_master().IsInitialized()) return false;
  }
  if (has_even_page_master()) {
    if (!this->even_page_master().IsInitialized()) return false;
  }
  if (has_odd_page_master()) {
    if (!this->odd_page_master().IsInitialized()) return false;
  }
  return true;
}

void SectionArchive::Swap(SectionArchive* other) {
  if (other != this) {
    std::swap(obsolete_shows_header_, other->obsolete_shows_header_);
    std::swap(obsolete_shows_footer_, other->obsolete_shows_footer_);
    obsolete_headers_.Swap(&other->obsolete_headers_);
    obsolete_footers_.Swap(&other->obsolete_footers_);
    std::swap(obsolete_left_margin_, other->obsolete_left_margin_);
    std::swap(obsolete_right_margin_, other->obsolete_right_margin_);
    std::swap(obsolete_top_margin_, other->obsolete_top_margin_);
    std::swap(obsolete_bottom_margin_, other->obsolete_bottom_margin_);
    std::swap(obsolete_header_padding_, other->obsolete_header_padding_);
    std::swap(obsolete_footer_padding_, other->obsolete_footer_padding_);
    std::swap(obsolete_paper_width_, other->obsolete_paper_width_);
    std::swap(obsolete_paper_height_, other->obsolete_paper_height_);
    std::swap(obsolete_landscape_mode_, other->obsolete_landscape_mode_);
    obsolete_master_drawables_.Swap(&other->obsolete_master_drawables_);
    std::swap(obsolete_header_margin_, other->obsolete_header_margin_);
    std::swap(obsolete_footer_margin_, other->obsolete_footer_margin_);
    std::swap(inherit_previous_header_footer_, other->inherit_previous_header_footer_);
    std::swap(page_master_first_page_different_, other->page_master_first_page_different_);
    std::swap(page_master_even_odd_pages_different_, other->page_master_even_odd_pages_different_);
    std::swap(section_start_kind_, other->section_start_kind_);
    std::swap(section_page_number_kind_, other->section_page_number_kind_);
    std::swap(section_page_number_start_, other->section_page_number_start_);
    std::swap(first_page_master_, other->first_page_master_);
    std::swap(even_page_master_, other->even_page_master_);
    std::swap(odd_page_master_, other->odd_page_master_);
    std::swap(name_, other->name_);
    std::swap(page_master_first_page_hides_header_footer_, other->page_master_first_page_hides_header_footer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SectionArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SectionArchive_descriptor_;
  metadata.reflection = SectionArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AnchorPosArchive::kAttachmentFieldNumber;
const int AnchorPosArchive::kPositionFieldNumber;
#endif  // !_MSC_VER

AnchorPosArchive::AnchorPosArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AnchorPosArchive::InitAsDefaultInstance() {
  attachment_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  position_ = const_cast< ::TSP::Point*>(&::TSP::Point::default_instance());
}

AnchorPosArchive::AnchorPosArchive(const AnchorPosArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AnchorPosArchive::SharedCtor() {
  _cached_size_ = 0;
  attachment_ = NULL;
  position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnchorPosArchive::~AnchorPosArchive() {
  SharedDtor();
}

void AnchorPosArchive::SharedDtor() {
  if (this != default_instance_) {
    delete attachment_;
    delete position_;
  }
}

void AnchorPosArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnchorPosArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnchorPosArchive_descriptor_;
}

const AnchorPosArchive& AnchorPosArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPArchives_2eproto();
  return *default_instance_;
}

AnchorPosArchive* AnchorPosArchive::default_instance_ = NULL;

AnchorPosArchive* AnchorPosArchive::New() const {
  return new AnchorPosArchive;
}

void AnchorPosArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_attachment()) {
      if (attachment_ != NULL) attachment_->::TSP::Reference::Clear();
    }
    if (has_position()) {
      if (position_ != NULL) position_->::TSP::Point::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnchorPosArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Reference attachment = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attachment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }

      // optional .TSP.Point position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AnchorPosArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Reference attachment = 1;
  if (has_attachment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attachment(), output);
  }

  // optional .TSP.Point position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AnchorPosArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Reference attachment = 1;
  if (has_attachment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attachment(), target);
  }

  // optional .TSP.Point position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AnchorPosArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.Reference attachment = 1;
    if (has_attachment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attachment());
    }

    // optional .TSP.Point position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnchorPosArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnchorPosArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnchorPosArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnchorPosArchive::MergeFrom(const AnchorPosArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attachment()) {
      mutable_attachment()->::TSP::Reference::MergeFrom(from.attachment());
    }
    if (from.has_position()) {
      mutable_position()->::TSP::Point::MergeFrom(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnchorPosArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnchorPosArchive::CopyFrom(const AnchorPosArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnchorPosArchive::IsInitialized() const {

  if (has_attachment()) {
    if (!this->attachment().IsInitialized()) return false;
  }
  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  return true;
}

void AnchorPosArchive::Swap(AnchorPosArchive* other) {
  if (other != this) {
    std::swap(attachment_, other->attachment_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnchorPosArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnchorPosArchive_descriptor_;
  metadata.reflection = AnchorPosArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TargetHintArchive::kFrameOriginFieldNumber;
const int TargetHintArchive::kFrameSizeFieldNumber;
const int TargetHintArchive::kRangeFieldNumber;
const int TargetHintArchive::kNextWidowPullsDownFromCharIndexFieldNumber;
const int TargetHintArchive::kAnchoredRangeFieldNumber;
const int TargetHintArchive::kColumnCountFieldNumber;
#endif  // !_MSC_VER

TargetHintArchive::TargetHintArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TargetHintArchive::InitAsDefaultInstance() {
  frame_origin_ = const_cast< ::TSP::Point*>(&::TSP::Point::default_instance());
  frame_size_ = const_cast< ::TSP::Size*>(&::TSP::Size::default_instance());
  range_ = const_cast< ::TSP::Range*>(&::TSP::Range::default_instance());
  anchored_range_ = const_cast< ::TSP::Range*>(&::TSP::Range::default_instance());
}

TargetHintArchive::TargetHintArchive(const TargetHintArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TargetHintArchive::SharedCtor() {
  _cached_size_ = 0;
  frame_origin_ = NULL;
  frame_size_ = NULL;
  range_ = NULL;
  next_widow_pulls_down_from_char_index_ = 0;
  anchored_range_ = NULL;
  column_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TargetHintArchive::~TargetHintArchive() {
  SharedDtor();
}

void TargetHintArchive::SharedDtor() {
  if (this != default_instance_) {
    delete frame_origin_;
    delete frame_size_;
    delete range_;
    delete anchored_range_;
  }
}

void TargetHintArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TargetHintArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TargetHintArchive_descriptor_;
}

const TargetHintArchive& TargetHintArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPArchives_2eproto();
  return *default_instance_;
}

TargetHintArchive* TargetHintArchive::default_instance_ = NULL;

TargetHintArchive* TargetHintArchive::New() const {
  return new TargetHintArchive;
}

void TargetHintArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_frame_origin()) {
      if (frame_origin_ != NULL) frame_origin_->::TSP::Point::Clear();
    }
    if (has_frame_size()) {
      if (frame_size_ != NULL) frame_size_->::TSP::Size::Clear();
    }
    if (has_range()) {
      if (range_ != NULL) range_->::TSP::Range::Clear();
    }
    next_widow_pulls_down_from_char_index_ = 0;
    if (has_anchored_range()) {
      if (anchored_range_ != NULL) anchored_range_->::TSP::Range::Clear();
    }
    column_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TargetHintArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Point frame_origin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_frame_origin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_frame_size;
        break;
      }

      // optional .TSP.Size frame_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_frame_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_frame_size()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_range;
        break;
      }

      // optional .TSP.Range range = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_next_widow_pulls_down_from_char_index;
        break;
      }

      // optional int32 next_widow_pulls_down_from_char_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_widow_pulls_down_from_char_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &next_widow_pulls_down_from_char_index_)));
          set_has_next_widow_pulls_down_from_char_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_anchored_range;
        break;
      }

      // optional .TSP.Range anchored_range = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_anchored_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_anchored_range()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_column_count;
        break;
      }

      // optional int32 column_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_column_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &column_count_)));
          set_has_column_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TargetHintArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Point frame_origin = 1;
  if (has_frame_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->frame_origin(), output);
  }

  // optional .TSP.Size frame_size = 2;
  if (has_frame_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->frame_size(), output);
  }

  // optional .TSP.Range range = 3;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->range(), output);
  }

  // optional int32 next_widow_pulls_down_from_char_index = 4;
  if (has_next_widow_pulls_down_from_char_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->next_widow_pulls_down_from_char_index(), output);
  }

  // optional .TSP.Range anchored_range = 5;
  if (has_anchored_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->anchored_range(), output);
  }

  // optional int32 column_count = 6;
  if (has_column_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->column_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TargetHintArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Point frame_origin = 1;
  if (has_frame_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->frame_origin(), target);
  }

  // optional .TSP.Size frame_size = 2;
  if (has_frame_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->frame_size(), target);
  }

  // optional .TSP.Range range = 3;
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->range(), target);
  }

  // optional int32 next_widow_pulls_down_from_char_index = 4;
  if (has_next_widow_pulls_down_from_char_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->next_widow_pulls_down_from_char_index(), target);
  }

  // optional .TSP.Range anchored_range = 5;
  if (has_anchored_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->anchored_range(), target);
  }

  // optional int32 column_count = 6;
  if (has_column_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->column_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TargetHintArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.Point frame_origin = 1;
    if (has_frame_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->frame_origin());
    }

    // optional .TSP.Size frame_size = 2;
    if (has_frame_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->frame_size());
    }

    // optional .TSP.Range range = 3;
    if (has_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->range());
    }

    // optional int32 next_widow_pulls_down_from_char_index = 4;
    if (has_next_widow_pulls_down_from_char_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->next_widow_pulls_down_from_char_index());
    }

    // optional .TSP.Range anchored_range = 5;
    if (has_anchored_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->anchored_range());
    }

    // optional int32 column_count = 6;
    if (has_column_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->column_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TargetHintArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TargetHintArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TargetHintArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TargetHintArchive::MergeFrom(const TargetHintArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_frame_origin()) {
      mutable_frame_origin()->::TSP::Point::MergeFrom(from.frame_origin());
    }
    if (from.has_frame_size()) {
      mutable_frame_size()->::TSP::Size::MergeFrom(from.frame_size());
    }
    if (from.has_range()) {
      mutable_range()->::TSP::Range::MergeFrom(from.range());
    }
    if (from.has_next_widow_pulls_down_from_char_index()) {
      set_next_widow_pulls_down_from_char_index(from.next_widow_pulls_down_from_char_index());
    }
    if (from.has_anchored_range()) {
      mutable_anchored_range()->::TSP::Range::MergeFrom(from.anchored_range());
    }
    if (from.has_column_count()) {
      set_column_count(from.column_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TargetHintArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetHintArchive::CopyFrom(const TargetHintArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetHintArchive::IsInitialized() const {

  if (has_frame_origin()) {
    if (!this->frame_origin().IsInitialized()) return false;
  }
  if (has_frame_size()) {
    if (!this->frame_size().IsInitialized()) return false;
  }
  if (has_range()) {
    if (!this->range().IsInitialized()) return false;
  }
  if (has_anchored_range()) {
    if (!this->anchored_range().IsInitialized()) return false;
  }
  return true;
}

void TargetHintArchive::Swap(TargetHintArchive* other) {
  if (other != this) {
    std::swap(frame_origin_, other->frame_origin_);
    std::swap(frame_size_, other->frame_size_);
    std::swap(range_, other->range_);
    std::swap(next_widow_pulls_down_from_char_index_, other->next_widow_pulls_down_from_char_index_);
    std::swap(anchored_range_, other->anchored_range_);
    std::swap(column_count_, other->column_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TargetHintArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TargetHintArchive_descriptor_;
  metadata.reflection = TargetHintArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PageHintArchive_PageKind_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PageHintArchive_PageKind_descriptor_;
}
bool PageHintArchive_PageKind_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PageHintArchive_PageKind PageHintArchive::kPageKindNone;
const PageHintArchive_PageKind PageHintArchive::kPageKindText;
const PageHintArchive_PageKind PageHintArchive::kPageKindFiller;
const PageHintArchive_PageKind PageHintArchive::kPageKindOrphan;
const PageHintArchive_PageKind PageHintArchive::kPageKindEndnote;
const PageHintArchive_PageKind PageHintArchive::kPageKindDirty;
const PageHintArchive_PageKind PageHintArchive::kTPPageKindPageLayout;
const PageHintArchive_PageKind PageHintArchive::PageKind_MIN;
const PageHintArchive_PageKind PageHintArchive::PageKind_MAX;
const int PageHintArchive::PageKind_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PageHintArchive::kPageKindFieldNumber;
const int PageHintArchive::kTargetHintsFieldNumber;
const int PageHintArchive::kFootnoteAutoNumberRangeFieldNumber;
const int PageHintArchive::kFootnoteLayoutRangeFieldNumber;
const int PageHintArchive::kFirstChildHintFieldNumber;
const int PageHintArchive::kLastChildHintFieldNumber;
const int PageHintArchive::kAnchoredAttachmentsMapFieldNumber;
const int PageHintArchive::kTopicNumbersFieldNumber;
const int PageHintArchive::kVersionNumberFieldNumber;
const int PageHintArchive::kPlatformIdFieldNumber;
#endif  // !_MSC_VER

PageHintArchive::PageHintArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PageHintArchive::InitAsDefaultInstance() {
  footnote_auto_number_range_ = const_cast< ::TSP::Range*>(&::TSP::Range::default_instance());
  footnote_layout_range_ = const_cast< ::TSP::Range*>(&::TSP::Range::default_instance());
  first_child_hint_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  last_child_hint_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  topic_numbers_ = const_cast< ::TP::TopicNumberHintsArchive*>(&::TP::TopicNumberHintsArchive::default_instance());
}

PageHintArchive::PageHintArchive(const PageHintArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PageHintArchive::SharedCtor() {
  _cached_size_ = 0;
  page_kind_ = 0;
  footnote_auto_number_range_ = NULL;
  footnote_layout_range_ = NULL;
  first_child_hint_ = NULL;
  last_child_hint_ = NULL;
  topic_numbers_ = NULL;
  version_number_ = 0u;
  platform_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PageHintArchive::~PageHintArchive() {
  SharedDtor();
}

void PageHintArchive::SharedDtor() {
  if (this != default_instance_) {
    delete footnote_auto_number_range_;
    delete footnote_layout_range_;
    delete first_child_hint_;
    delete last_child_hint_;
    delete topic_numbers_;
  }
}

void PageHintArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PageHintArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PageHintArchive_descriptor_;
}

const PageHintArchive& PageHintArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPArchives_2eproto();
  return *default_instance_;
}

PageHintArchive* PageHintArchive::default_instance_ = NULL;

PageHintArchive* PageHintArchive::New() const {
  return new PageHintArchive;
}

void PageHintArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    page_kind_ = 0;
    if (has_footnote_auto_number_range()) {
      if (footnote_auto_number_range_ != NULL) footnote_auto_number_range_->::TSP::Range::Clear();
    }
    if (has_footnote_layout_range()) {
      if (footnote_layout_range_ != NULL) footnote_layout_range_->::TSP::Range::Clear();
    }
    if (has_first_child_hint()) {
      if (first_child_hint_ != NULL) first_child_hint_->::TSP::Reference::Clear();
    }
    if (has_last_child_hint()) {
      if (last_child_hint_ != NULL) last_child_hint_->::TSP::Reference::Clear();
    }
    if (has_topic_numbers()) {
      if (topic_numbers_ != NULL) topic_numbers_->::TP::TopicNumberHintsArchive::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    version_number_ = 0u;
    platform_id_ = 0u;
  }
  target_hints_.Clear();
  anchored_attachments_map_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PageHintArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TP.PageHintArchive.PageKind page_kind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TP::PageHintArchive_PageKind_IsValid(value)) {
            set_page_kind(static_cast< ::TP::PageHintArchive_PageKind >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_target_hints;
        break;
      }

      // repeated .TP.TargetHintArchive target_hints = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_hints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_target_hints()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_target_hints;
        if (input->ExpectTag(26)) goto parse_footnote_auto_number_range;
        break;
      }

      // optional .TSP.Range footnote_auto_number_range = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_footnote_auto_number_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_footnote_auto_number_range()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_footnote_layout_range;
        break;
      }

      // optional .TSP.Range footnote_layout_range = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_footnote_layout_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_footnote_layout_range()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_first_child_hint;
        break;
      }

      // optional .TSP.Reference first_child_hint = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_first_child_hint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_first_child_hint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_last_child_hint;
        break;
      }

      // optional .TSP.Reference last_child_hint = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_last_child_hint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_last_child_hint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_anchored_attachments_map;
        break;
      }

      // repeated .TP.AnchorPosArchive anchored_attachments_map = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_anchored_attachments_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_anchored_attachments_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_anchored_attachments_map;
        if (input->ExpectTag(74)) goto parse_topic_numbers;
        break;
      }

      // optional .TP.TopicNumberHintsArchive topic_numbers = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topic_numbers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topic_numbers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_version_number;
        break;
      }

      // optional uint32 version_number = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_number_)));
          set_has_version_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_platform_id;
        break;
      }

      // optional uint32 platform_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platform_id_)));
          set_has_platform_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PageHintArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TP.PageHintArchive.PageKind page_kind = 1;
  if (has_page_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->page_kind(), output);
  }

  // repeated .TP.TargetHintArchive target_hints = 2;
  for (int i = 0; i < this->target_hints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->target_hints(i), output);
  }

  // optional .TSP.Range footnote_auto_number_range = 3;
  if (has_footnote_auto_number_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->footnote_auto_number_range(), output);
  }

  // optional .TSP.Range footnote_layout_range = 4;
  if (has_footnote_layout_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->footnote_layout_range(), output);
  }

  // optional .TSP.Reference first_child_hint = 6;
  if (has_first_child_hint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->first_child_hint(), output);
  }

  // optional .TSP.Reference last_child_hint = 7;
  if (has_last_child_hint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->last_child_hint(), output);
  }

  // repeated .TP.AnchorPosArchive anchored_attachments_map = 8;
  for (int i = 0; i < this->anchored_attachments_map_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->anchored_attachments_map(i), output);
  }

  // optional .TP.TopicNumberHintsArchive topic_numbers = 9;
  if (has_topic_numbers()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->topic_numbers(), output);
  }

  // optional uint32 version_number = 10;
  if (has_version_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->version_number(), output);
  }

  // optional uint32 platform_id = 11;
  if (has_platform_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->platform_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PageHintArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TP.PageHintArchive.PageKind page_kind = 1;
  if (has_page_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->page_kind(), target);
  }

  // repeated .TP.TargetHintArchive target_hints = 2;
  for (int i = 0; i < this->target_hints_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->target_hints(i), target);
  }

  // optional .TSP.Range footnote_auto_number_range = 3;
  if (has_footnote_auto_number_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->footnote_auto_number_range(), target);
  }

  // optional .TSP.Range footnote_layout_range = 4;
  if (has_footnote_layout_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->footnote_layout_range(), target);
  }

  // optional .TSP.Reference first_child_hint = 6;
  if (has_first_child_hint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->first_child_hint(), target);
  }

  // optional .TSP.Reference last_child_hint = 7;
  if (has_last_child_hint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->last_child_hint(), target);
  }

  // repeated .TP.AnchorPosArchive anchored_attachments_map = 8;
  for (int i = 0; i < this->anchored_attachments_map_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->anchored_attachments_map(i), target);
  }

  // optional .TP.TopicNumberHintsArchive topic_numbers = 9;
  if (has_topic_numbers()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->topic_numbers(), target);
  }

  // optional uint32 version_number = 10;
  if (has_version_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->version_number(), target);
  }

  // optional uint32 platform_id = 11;
  if (has_platform_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->platform_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PageHintArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TP.PageHintArchive.PageKind page_kind = 1;
    if (has_page_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->page_kind());
    }

    // optional .TSP.Range footnote_auto_number_range = 3;
    if (has_footnote_auto_number_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->footnote_auto_number_range());
    }

    // optional .TSP.Range footnote_layout_range = 4;
    if (has_footnote_layout_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->footnote_layout_range());
    }

    // optional .TSP.Reference first_child_hint = 6;
    if (has_first_child_hint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->first_child_hint());
    }

    // optional .TSP.Reference last_child_hint = 7;
    if (has_last_child_hint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->last_child_hint());
    }

    // optional .TP.TopicNumberHintsArchive topic_numbers = 9;
    if (has_topic_numbers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->topic_numbers());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 version_number = 10;
    if (has_version_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version_number());
    }

    // optional uint32 platform_id = 11;
    if (has_platform_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->platform_id());
    }

  }
  // repeated .TP.TargetHintArchive target_hints = 2;
  total_size += 1 * this->target_hints_size();
  for (int i = 0; i < this->target_hints_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->target_hints(i));
  }

  // repeated .TP.AnchorPosArchive anchored_attachments_map = 8;
  total_size += 1 * this->anchored_attachments_map_size();
  for (int i = 0; i < this->anchored_attachments_map_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->anchored_attachments_map(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PageHintArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PageHintArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PageHintArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PageHintArchive::MergeFrom(const PageHintArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  target_hints_.MergeFrom(from.target_hints_);
  anchored_attachments_map_.MergeFrom(from.anchored_attachments_map_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_page_kind()) {
      set_page_kind(from.page_kind());
    }
    if (from.has_footnote_auto_number_range()) {
      mutable_footnote_auto_number_range()->::TSP::Range::MergeFrom(from.footnote_auto_number_range());
    }
    if (from.has_footnote_layout_range()) {
      mutable_footnote_layout_range()->::TSP::Range::MergeFrom(from.footnote_layout_range());
    }
    if (from.has_first_child_hint()) {
      mutable_first_child_hint()->::TSP::Reference::MergeFrom(from.first_child_hint());
    }
    if (from.has_last_child_hint()) {
      mutable_last_child_hint()->::TSP::Reference::MergeFrom(from.last_child_hint());
    }
    if (from.has_topic_numbers()) {
      mutable_topic_numbers()->::TP::TopicNumberHintsArchive::MergeFrom(from.topic_numbers());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_version_number()) {
      set_version_number(from.version_number());
    }
    if (from.has_platform_id()) {
      set_platform_id(from.platform_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PageHintArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PageHintArchive::CopyFrom(const PageHintArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PageHintArchive::IsInitialized() const {

  for (int i = 0; i < target_hints_size(); i++) {
    if (!this->target_hints(i).IsInitialized()) return false;
  }
  if (has_footnote_auto_number_range()) {
    if (!this->footnote_auto_number_range().IsInitialized()) return false;
  }
  if (has_footnote_layout_range()) {
    if (!this->footnote_layout_range().IsInitialized()) return false;
  }
  if (has_first_child_hint()) {
    if (!this->first_child_hint().IsInitialized()) return false;
  }
  if (has_last_child_hint()) {
    if (!this->last_child_hint().IsInitialized()) return false;
  }
  for (int i = 0; i < anchored_attachments_map_size(); i++) {
    if (!this->anchored_attachments_map(i).IsInitialized()) return false;
  }
  if (has_topic_numbers()) {
    if (!this->topic_numbers().IsInitialized()) return false;
  }
  return true;
}

void PageHintArchive::Swap(PageHintArchive* other) {
  if (other != this) {
    std::swap(page_kind_, other->page_kind_);
    target_hints_.Swap(&other->target_hints_);
    std::swap(footnote_auto_number_range_, other->footnote_auto_number_range_);
    std::swap(footnote_layout_range_, other->footnote_layout_range_);
    std::swap(first_child_hint_, other->first_child_hint_);
    std::swap(last_child_hint_, other->last_child_hint_);
    anchored_attachments_map_.Swap(&other->anchored_attachments_map_);
    std::swap(topic_numbers_, other->topic_numbers_);
    std::swap(version_number_, other->version_number_);
    std::swap(platform_id_, other->platform_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PageHintArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PageHintArchive_descriptor_;
  metadata.reflection = PageHintArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SectionHintArchive::kPageHintsFieldNumber;
const int SectionHintArchive::kStartPageIndexFieldNumber;
#endif  // !_MSC_VER

SectionHintArchive::SectionHintArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SectionHintArchive::InitAsDefaultInstance() {
}

SectionHintArchive::SectionHintArchive(const SectionHintArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SectionHintArchive::SharedCtor() {
  _cached_size_ = 0;
  start_page_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SectionHintArchive::~SectionHintArchive() {
  SharedDtor();
}

void SectionHintArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SectionHintArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SectionHintArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SectionHintArchive_descriptor_;
}

const SectionHintArchive& SectionHintArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPArchives_2eproto();
  return *default_instance_;
}

SectionHintArchive* SectionHintArchive::default_instance_ = NULL;

SectionHintArchive* SectionHintArchive::New() const {
  return new SectionHintArchive;
}

void SectionHintArchive::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    start_page_index_ = 0u;
  }
  page_hints_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SectionHintArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TP.PageHintArchive page_hints = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_page_hints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_page_hints()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_page_hints;
        if (input->ExpectTag(16)) goto parse_start_page_index;
        break;
      }

      // optional uint32 start_page_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_page_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_page_index_)));
          set_has_start_page_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SectionHintArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TP.PageHintArchive page_hints = 1;
  for (int i = 0; i < this->page_hints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->page_hints(i), output);
  }

  // optional uint32 start_page_index = 2;
  if (has_start_page_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->start_page_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SectionHintArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TP.PageHintArchive page_hints = 1;
  for (int i = 0; i < this->page_hints_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->page_hints(i), target);
  }

  // optional uint32 start_page_index = 2;
  if (has_start_page_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->start_page_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SectionHintArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 start_page_index = 2;
    if (has_start_page_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_page_index());
    }

  }
  // repeated .TP.PageHintArchive page_hints = 1;
  total_size += 1 * this->page_hints_size();
  for (int i = 0; i < this->page_hints_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->page_hints(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SectionHintArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SectionHintArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SectionHintArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SectionHintArchive::MergeFrom(const SectionHintArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  page_hints_.MergeFrom(from.page_hints_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_start_page_index()) {
      set_start_page_index(from.start_page_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SectionHintArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SectionHintArchive::CopyFrom(const SectionHintArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SectionHintArchive::IsInitialized() const {

  for (int i = 0; i < page_hints_size(); i++) {
    if (!this->page_hints(i).IsInitialized()) return false;
  }
  return true;
}

void SectionHintArchive::Swap(SectionHintArchive* other) {
  if (other != this) {
    page_hints_.Swap(&other->page_hints_);
    std::swap(start_page_index_, other->start_page_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SectionHintArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SectionHintArchive_descriptor_;
  metadata.reflection = SectionHintArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TextboxHintArchive::kRangeFieldNumber;
const int TextboxHintArchive::kSizeFieldNumber;
#endif  // !_MSC_VER

TextboxHintArchive::TextboxHintArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TextboxHintArchive::InitAsDefaultInstance() {
  range_ = const_cast< ::TSP::Range*>(&::TSP::Range::default_instance());
  size_ = const_cast< ::TSP::Size*>(&::TSP::Size::default_instance());
}

TextboxHintArchive::TextboxHintArchive(const TextboxHintArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TextboxHintArchive::SharedCtor() {
  _cached_size_ = 0;
  range_ = NULL;
  size_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TextboxHintArchive::~TextboxHintArchive() {
  SharedDtor();
}

void TextboxHintArchive::SharedDtor() {
  if (this != default_instance_) {
    delete range_;
    delete size_;
  }
}

void TextboxHintArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TextboxHintArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TextboxHintArchive_descriptor_;
}

const TextboxHintArchive& TextboxHintArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPArchives_2eproto();
  return *default_instance_;
}

TextboxHintArchive* TextboxHintArchive::default_instance_ = NULL;

TextboxHintArchive* TextboxHintArchive::New() const {
  return new TextboxHintArchive;
}

void TextboxHintArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_range()) {
      if (range_ != NULL) range_->::TSP::Range::Clear();
    }
    if (has_size()) {
      if (size_ != NULL) size_->::TSP::Size::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TextboxHintArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSP.Range range = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_size;
        break;
      }

      // required .TSP.Size size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_size()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TextboxHintArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSP.Range range = 1;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->range(), output);
  }

  // required .TSP.Size size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TextboxHintArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSP.Range range = 1;
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->range(), target);
  }

  // required .TSP.Size size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TextboxHintArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSP.Range range = 1;
    if (has_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->range());
    }

    // required .TSP.Size size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TextboxHintArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TextboxHintArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TextboxHintArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TextboxHintArchive::MergeFrom(const TextboxHintArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_range()) {
      mutable_range()->::TSP::Range::MergeFrom(from.range());
    }
    if (from.has_size()) {
      mutable_size()->::TSP::Size::MergeFrom(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TextboxHintArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextboxHintArchive::CopyFrom(const TextboxHintArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextboxHintArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_range()) {
    if (!this->range().IsInitialized()) return false;
  }
  if (has_size()) {
    if (!this->size().IsInitialized()) return false;
  }
  return true;
}

void TextboxHintArchive::Swap(TextboxHintArchive* other) {
  if (other != this) {
    std::swap(range_, other->range_);
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TextboxHintArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TextboxHintArchive_descriptor_;
  metadata.reflection = TextboxHintArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TopicNumberEntryArchive::kListStyleFieldNumber;
const int TopicNumberEntryArchive::kTopicNumberFieldNumber;
const int TopicNumberEntryArchive::kCharacterIndexFieldNumber;
#endif  // !_MSC_VER

TopicNumberEntryArchive::TopicNumberEntryArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TopicNumberEntryArchive::InitAsDefaultInstance() {
  list_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

TopicNumberEntryArchive::TopicNumberEntryArchive(const TopicNumberEntryArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TopicNumberEntryArchive::SharedCtor() {
  _cached_size_ = 0;
  list_style_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TopicNumberEntryArchive::~TopicNumberEntryArchive() {
  SharedDtor();
}

void TopicNumberEntryArchive::SharedDtor() {
  if (this != default_instance_) {
    delete list_style_;
  }
}

void TopicNumberEntryArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopicNumberEntryArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopicNumberEntryArchive_descriptor_;
}

const TopicNumberEntryArchive& TopicNumberEntryArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPArchives_2eproto();
  return *default_instance_;
}

TopicNumberEntryArchive* TopicNumberEntryArchive::default_instance_ = NULL;

TopicNumberEntryArchive* TopicNumberEntryArchive::New() const {
  return new TopicNumberEntryArchive;
}

void TopicNumberEntryArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_list_style()) {
      if (list_style_ != NULL) list_style_->::TSP::Reference::Clear();
    }
  }
  topic_number_.Clear();
  character_index_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TopicNumberEntryArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSP.Reference list_style = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_list_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_topic_number;
        break;
      }

      // repeated uint32 topic_number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_topic_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_topic_number())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_topic_number())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_topic_number;
        if (input->ExpectTag(24)) goto parse_character_index;
        break;
      }

      // repeated uint32 character_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_character_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_character_index())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_character_index())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_character_index;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TopicNumberEntryArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSP.Reference list_style = 1;
  if (has_list_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list_style(), output);
  }

  // repeated uint32 topic_number = 2;
  for (int i = 0; i < this->topic_number_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->topic_number(i), output);
  }

  // repeated uint32 character_index = 3;
  for (int i = 0; i < this->character_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->character_index(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TopicNumberEntryArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSP.Reference list_style = 1;
  if (has_list_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list_style(), target);
  }

  // repeated uint32 topic_number = 2;
  for (int i = 0; i < this->topic_number_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->topic_number(i), target);
  }

  // repeated uint32 character_index = 3;
  for (int i = 0; i < this->character_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->character_index(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TopicNumberEntryArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSP.Reference list_style = 1;
    if (has_list_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list_style());
    }

  }
  // repeated uint32 topic_number = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->topic_number_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->topic_number(i));
    }
    total_size += 1 * this->topic_number_size() + data_size;
  }

  // repeated uint32 character_index = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->character_index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->character_index(i));
    }
    total_size += 1 * this->character_index_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopicNumberEntryArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TopicNumberEntryArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TopicNumberEntryArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TopicNumberEntryArchive::MergeFrom(const TopicNumberEntryArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  topic_number_.MergeFrom(from.topic_number_);
  character_index_.MergeFrom(from.character_index_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_list_style()) {
      mutable_list_style()->::TSP::Reference::MergeFrom(from.list_style());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TopicNumberEntryArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicNumberEntryArchive::CopyFrom(const TopicNumberEntryArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicNumberEntryArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_list_style()) {
    if (!this->list_style().IsInitialized()) return false;
  }
  return true;
}

void TopicNumberEntryArchive::Swap(TopicNumberEntryArchive* other) {
  if (other != this) {
    std::swap(list_style_, other->list_style_);
    topic_number_.Swap(&other->topic_number_);
    character_index_.Swap(&other->character_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TopicNumberEntryArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopicNumberEntryArchive_descriptor_;
  metadata.reflection = TopicNumberEntryArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TopicNumberHintsArchive::kCharIndexFieldNumber;
const int TopicNumberHintsArchive::kTopicNumbersMapFieldNumber;
const int TopicNumberHintsArchive::kValidThroughCharIndexFieldNumber;
#endif  // !_MSC_VER

TopicNumberHintsArchive::TopicNumberHintsArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TopicNumberHintsArchive::InitAsDefaultInstance() {
}

TopicNumberHintsArchive::TopicNumberHintsArchive(const TopicNumberHintsArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TopicNumberHintsArchive::SharedCtor() {
  _cached_size_ = 0;
  charindex_ = 0u;
  valid_through_char_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TopicNumberHintsArchive::~TopicNumberHintsArchive() {
  SharedDtor();
}

void TopicNumberHintsArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TopicNumberHintsArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopicNumberHintsArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopicNumberHintsArchive_descriptor_;
}

const TopicNumberHintsArchive& TopicNumberHintsArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPArchives_2eproto();
  return *default_instance_;
}

TopicNumberHintsArchive* TopicNumberHintsArchive::default_instance_ = NULL;

TopicNumberHintsArchive* TopicNumberHintsArchive::New() const {
  return new TopicNumberHintsArchive;
}

void TopicNumberHintsArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charindex_ = 0u;
    valid_through_char_index_ = 0u;
  }
  topic_numbers_map_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TopicNumberHintsArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charindex_)));
          set_has_charindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_topic_numbers_map;
        break;
      }

      // repeated .TP.TopicNumberEntryArchive topic_numbers_map = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topic_numbers_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_topic_numbers_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_topic_numbers_map;
        if (input->ExpectTag(24)) goto parse_valid_through_char_index;
        break;
      }

      // optional uint32 valid_through_char_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valid_through_char_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &valid_through_char_index_)));
          set_has_valid_through_char_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TopicNumberHintsArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charIndex = 1;
  if (has_charindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charindex(), output);
  }

  // repeated .TP.TopicNumberEntryArchive topic_numbers_map = 2;
  for (int i = 0; i < this->topic_numbers_map_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->topic_numbers_map(i), output);
  }

  // optional uint32 valid_through_char_index = 3;
  if (has_valid_through_char_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->valid_through_char_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TopicNumberHintsArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charIndex = 1;
  if (has_charindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charindex(), target);
  }

  // repeated .TP.TopicNumberEntryArchive topic_numbers_map = 2;
  for (int i = 0; i < this->topic_numbers_map_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->topic_numbers_map(i), target);
  }

  // optional uint32 valid_through_char_index = 3;
  if (has_valid_through_char_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->valid_through_char_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TopicNumberHintsArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charIndex = 1;
    if (has_charindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charindex());
    }

    // optional uint32 valid_through_char_index = 3;
    if (has_valid_through_char_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->valid_through_char_index());
    }

  }
  // repeated .TP.TopicNumberEntryArchive topic_numbers_map = 2;
  total_size += 1 * this->topic_numbers_map_size();
  for (int i = 0; i < this->topic_numbers_map_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->topic_numbers_map(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopicNumberHintsArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TopicNumberHintsArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TopicNumberHintsArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TopicNumberHintsArchive::MergeFrom(const TopicNumberHintsArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  topic_numbers_map_.MergeFrom(from.topic_numbers_map_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charindex()) {
      set_charindex(from.charindex());
    }
    if (from.has_valid_through_char_index()) {
      set_valid_through_char_index(from.valid_through_char_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TopicNumberHintsArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicNumberHintsArchive::CopyFrom(const TopicNumberHintsArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicNumberHintsArchive::IsInitialized() const {

  for (int i = 0; i < topic_numbers_map_size(); i++) {
    if (!this->topic_numbers_map(i).IsInitialized()) return false;
  }
  return true;
}

void TopicNumberHintsArchive::Swap(TopicNumberHintsArchive* other) {
  if (other != this) {
    std::swap(charindex_, other->charindex_);
    topic_numbers_map_.Swap(&other->topic_numbers_map_);
    std::swap(valid_through_char_index_, other->valid_through_char_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TopicNumberHintsArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopicNumberHintsArchive_descriptor_;
  metadata.reflection = TopicNumberHintsArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LayoutStateArchive::kSectionIndexFieldNumber;
const int LayoutStateArchive::kSectionPageIndexFieldNumber;
const int LayoutStateArchive::kDocumentPageIndexFieldNumber;
const int LayoutStateArchive::kLastPageCountFieldNumber;
const int LayoutStateArchive::kSectionHintsFieldNumber;
#endif  // !_MSC_VER

LayoutStateArchive::LayoutStateArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LayoutStateArchive::InitAsDefaultInstance() {
}

LayoutStateArchive::LayoutStateArchive(const LayoutStateArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LayoutStateArchive::SharedCtor() {
  _cached_size_ = 0;
  section_index_ = 0u;
  section_page_index_ = 0u;
  document_page_index_ = 0u;
  last_page_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LayoutStateArchive::~LayoutStateArchive() {
  SharedDtor();
}

void LayoutStateArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LayoutStateArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LayoutStateArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LayoutStateArchive_descriptor_;
}

const LayoutStateArchive& LayoutStateArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPArchives_2eproto();
  return *default_instance_;
}

LayoutStateArchive* LayoutStateArchive::default_instance_ = NULL;

LayoutStateArchive* LayoutStateArchive::New() const {
  return new LayoutStateArchive;
}

void LayoutStateArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    section_index_ = 0u;
    section_page_index_ = 0u;
    document_page_index_ = 0u;
    last_page_count_ = 0u;
  }
  section_hints_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LayoutStateArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 section_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &section_index_)));
          set_has_section_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_section_page_index;
        break;
      }

      // optional uint32 section_page_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_section_page_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &section_page_index_)));
          set_has_section_page_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_document_page_index;
        break;
      }

      // optional uint32 document_page_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_document_page_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &document_page_index_)));
          set_has_document_page_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_page_count;
        break;
      }

      // optional uint32 last_page_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_page_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_page_count_)));
          set_has_last_page_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_section_hints;
        break;
      }

      // repeated .TP.SectionHintArchive section_hints = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_section_hints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_section_hints()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_section_hints;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LayoutStateArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 section_index = 1;
  if (has_section_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->section_index(), output);
  }

  // optional uint32 section_page_index = 2;
  if (has_section_page_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->section_page_index(), output);
  }

  // optional uint32 document_page_index = 3;
  if (has_document_page_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->document_page_index(), output);
  }

  // optional uint32 last_page_count = 4;
  if (has_last_page_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_page_count(), output);
  }

  // repeated .TP.SectionHintArchive section_hints = 5;
  for (int i = 0; i < this->section_hints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->section_hints(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LayoutStateArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 section_index = 1;
  if (has_section_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->section_index(), target);
  }

  // optional uint32 section_page_index = 2;
  if (has_section_page_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->section_page_index(), target);
  }

  // optional uint32 document_page_index = 3;
  if (has_document_page_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->document_page_index(), target);
  }

  // optional uint32 last_page_count = 4;
  if (has_last_page_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->last_page_count(), target);
  }

  // repeated .TP.SectionHintArchive section_hints = 5;
  for (int i = 0; i < this->section_hints_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->section_hints(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LayoutStateArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 section_index = 1;
    if (has_section_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->section_index());
    }

    // optional uint32 section_page_index = 2;
    if (has_section_page_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->section_page_index());
    }

    // optional uint32 document_page_index = 3;
    if (has_document_page_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->document_page_index());
    }

    // optional uint32 last_page_count = 4;
    if (has_last_page_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_page_count());
    }

  }
  // repeated .TP.SectionHintArchive section_hints = 5;
  total_size += 1 * this->section_hints_size();
  for (int i = 0; i < this->section_hints_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->section_hints(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LayoutStateArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LayoutStateArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LayoutStateArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LayoutStateArchive::MergeFrom(const LayoutStateArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  section_hints_.MergeFrom(from.section_hints_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_section_index()) {
      set_section_index(from.section_index());
    }
    if (from.has_section_page_index()) {
      set_section_page_index(from.section_page_index());
    }
    if (from.has_document_page_index()) {
      set_document_page_index(from.document_page_index());
    }
    if (from.has_last_page_count()) {
      set_last_page_count(from.last_page_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LayoutStateArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LayoutStateArchive::CopyFrom(const LayoutStateArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayoutStateArchive::IsInitialized() const {

  for (int i = 0; i < section_hints_size(); i++) {
    if (!this->section_hints(i).IsInitialized()) return false;
  }
  return true;
}

void LayoutStateArchive::Swap(LayoutStateArchive* other) {
  if (other != this) {
    std::swap(section_index_, other->section_index_);
    std::swap(section_page_index_, other->section_page_index_);
    std::swap(document_page_index_, other->document_page_index_);
    std::swap(last_page_count_, other->last_page_count_);
    section_hints_.Swap(&other->section_hints_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LayoutStateArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LayoutStateArchive_descriptor_;
  metadata.reflection = LayoutStateArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CanvasSelectionArchive::kTypeFieldNumber;
const int CanvasSelectionArchive::kRangeFieldNumber;
const int CanvasSelectionArchive::kStyleInsertionBehaviorFieldNumber;
const int CanvasSelectionArchive::kCaretAffinityFieldNumber;
const int CanvasSelectionArchive::kInfosFieldNumber;
const int CanvasSelectionArchive::kExcludedInfosFieldNumber;
const int CanvasSelectionArchive::kAdditionalInfosFieldNumber;
const int CanvasSelectionArchive::kContainerFieldNumber;
#endif  // !_MSC_VER

CanvasSelectionArchive::CanvasSelectionArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CanvasSelectionArchive::InitAsDefaultInstance() {
  range_ = const_cast< ::TSP::Range*>(&::TSP::Range::default_instance());
  container_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CanvasSelectionArchive::CanvasSelectionArchive(const CanvasSelectionArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CanvasSelectionArchive::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  range_ = NULL;
  style_insertion_behavior_ = 0;
  caret_affinity_ = 0;
  container_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CanvasSelectionArchive::~CanvasSelectionArchive() {
  SharedDtor();
}

void CanvasSelectionArchive::SharedDtor() {
  if (this != default_instance_) {
    delete range_;
    delete container_;
  }
}

void CanvasSelectionArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CanvasSelectionArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CanvasSelectionArchive_descriptor_;
}

const CanvasSelectionArchive& CanvasSelectionArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPArchives_2eproto();
  return *default_instance_;
}

CanvasSelectionArchive* CanvasSelectionArchive::default_instance_ = NULL;

CanvasSelectionArchive* CanvasSelectionArchive::New() const {
  return new CanvasSelectionArchive;
}

void CanvasSelectionArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_range()) {
      if (range_ != NULL) range_->::TSP::Range::Clear();
    }
    style_insertion_behavior_ = 0;
    caret_affinity_ = 0;
    if (has_container()) {
      if (container_ != NULL) container_->::TSP::Reference::Clear();
    }
  }
  infos_.Clear();
  excluded_infos_.Clear();
  additional_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CanvasSelectionArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSWP.SelectionType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSWP::SelectionType_IsValid(value)) {
            set_type(static_cast< ::TSWP::SelectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_range;
        break;
      }

      // required .TSP.Range range = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_style_insertion_behavior;
        break;
      }

      // required .TSWP.StyleInsertionBehavior style_insertion_behavior = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_style_insertion_behavior:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSWP::StyleInsertionBehavior_IsValid(value)) {
            set_style_insertion_behavior(static_cast< ::TSWP::StyleInsertionBehavior >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_caret_affinity;
        break;
      }

      // required .TSWP.CaretAffinity caret_affinity = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_caret_affinity:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSWP::CaretAffinity_IsValid(value)) {
            set_caret_affinity(static_cast< ::TSWP::CaretAffinity >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_infos;
        break;
      }

      // repeated .TSP.Reference infos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_infos;
        if (input->ExpectTag(50)) goto parse_excluded_infos;
        break;
      }

      // repeated .TSP.Reference excluded_infos = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_excluded_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_excluded_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_excluded_infos;
        if (input->ExpectTag(58)) goto parse_additional_infos;
        break;
      }

      // repeated .TSP.Reference additional_infos = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_additional_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_additional_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_additional_infos;
        if (input->ExpectTag(66)) goto parse_container;
        break;
      }

      // optional .TSP.Reference container = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_container:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_container()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CanvasSelectionArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSWP.SelectionType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required .TSP.Range range = 2;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->range(), output);
  }

  // required .TSWP.StyleInsertionBehavior style_insertion_behavior = 3;
  if (has_style_insertion_behavior()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->style_insertion_behavior(), output);
  }

  // required .TSWP.CaretAffinity caret_affinity = 4;
  if (has_caret_affinity()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->caret_affinity(), output);
  }

  // repeated .TSP.Reference infos = 5;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->infos(i), output);
  }

  // repeated .TSP.Reference excluded_infos = 6;
  for (int i = 0; i < this->excluded_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->excluded_infos(i), output);
  }

  // repeated .TSP.Reference additional_infos = 7;
  for (int i = 0; i < this->additional_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->additional_infos(i), output);
  }

  // optional .TSP.Reference container = 8;
  if (has_container()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->container(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CanvasSelectionArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSWP.SelectionType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required .TSP.Range range = 2;
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->range(), target);
  }

  // required .TSWP.StyleInsertionBehavior style_insertion_behavior = 3;
  if (has_style_insertion_behavior()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->style_insertion_behavior(), target);
  }

  // required .TSWP.CaretAffinity caret_affinity = 4;
  if (has_caret_affinity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->caret_affinity(), target);
  }

  // repeated .TSP.Reference infos = 5;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->infos(i), target);
  }

  // repeated .TSP.Reference excluded_infos = 6;
  for (int i = 0; i < this->excluded_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->excluded_infos(i), target);
  }

  // repeated .TSP.Reference additional_infos = 7;
  for (int i = 0; i < this->additional_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->additional_infos(i), target);
  }

  // optional .TSP.Reference container = 8;
  if (has_container()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->container(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CanvasSelectionArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSWP.SelectionType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .TSP.Range range = 2;
    if (has_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->range());
    }

    // required .TSWP.StyleInsertionBehavior style_insertion_behavior = 3;
    if (has_style_insertion_behavior()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->style_insertion_behavior());
    }

    // required .TSWP.CaretAffinity caret_affinity = 4;
    if (has_caret_affinity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->caret_affinity());
    }

    // optional .TSP.Reference container = 8;
    if (has_container()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->container());
    }

  }
  // repeated .TSP.Reference infos = 5;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  // repeated .TSP.Reference excluded_infos = 6;
  total_size += 1 * this->excluded_infos_size();
  for (int i = 0; i < this->excluded_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->excluded_infos(i));
  }

  // repeated .TSP.Reference additional_infos = 7;
  total_size += 1 * this->additional_infos_size();
  for (int i = 0; i < this->additional_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->additional_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CanvasSelectionArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CanvasSelectionArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CanvasSelectionArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CanvasSelectionArchive::MergeFrom(const CanvasSelectionArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  excluded_infos_.MergeFrom(from.excluded_infos_);
  additional_infos_.MergeFrom(from.additional_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_range()) {
      mutable_range()->::TSP::Range::MergeFrom(from.range());
    }
    if (from.has_style_insertion_behavior()) {
      set_style_insertion_behavior(from.style_insertion_behavior());
    }
    if (from.has_caret_affinity()) {
      set_caret_affinity(from.caret_affinity());
    }
    if (from.has_container()) {
      mutable_container()->::TSP::Reference::MergeFrom(from.container());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CanvasSelectionArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CanvasSelectionArchive::CopyFrom(const CanvasSelectionArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanvasSelectionArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_range()) {
    if (!this->range().IsInitialized()) return false;
  }
  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  for (int i = 0; i < excluded_infos_size(); i++) {
    if (!this->excluded_infos(i).IsInitialized()) return false;
  }
  for (int i = 0; i < additional_infos_size(); i++) {
    if (!this->additional_infos(i).IsInitialized()) return false;
  }
  if (has_container()) {
    if (!this->container().IsInitialized()) return false;
  }
  return true;
}

void CanvasSelectionArchive::Swap(CanvasSelectionArchive* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(range_, other->range_);
    std::swap(style_insertion_behavior_, other->style_insertion_behavior_);
    std::swap(caret_affinity_, other->caret_affinity_);
    infos_.Swap(&other->infos_);
    excluded_infos_.Swap(&other->excluded_infos_);
    additional_infos_.Swap(&other->additional_infos_);
    std::swap(container_, other->container_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CanvasSelectionArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CanvasSelectionArchive_descriptor_;
  metadata.reflection = CanvasSelectionArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ViewStateArchive::kOBSOLETEViewScaleFieldNumber;
const int ViewStateArchive::kVisibleRectOriginFieldNumber;
const int ViewStateArchive::kOBSOLETELandscapeFieldNumber;
const int ViewStateArchive::kSelectionFieldNumber;
const int ViewStateArchive::kSelectionModelFieldNumber;
const int ViewStateArchive::kMasterDrawablesSelectableFieldNumber;
const int ViewStateArchive::kVisibleRectSizeFieldNumber;
const int ViewStateArchive::kChartUiStateFieldNumber;
const int ViewStateArchive::kRulerVisibleFieldNumber;
const int ViewStateArchive::kLayoutBordersVisibleFieldNumber;
const int ViewStateArchive::kWordCountHudVisibleFieldNumber;
const int ViewStateArchive::kShowsCommentsFieldNumber;
const int ViewStateArchive::kShowsPageNavigatorFieldNumber;
const int ViewStateArchive::kViewScaleModeFieldNumber;
const int ViewStateArchive::kViewScaleFieldNumber;
const int ViewStateArchive::kWindowFrameOriginFieldNumber;
const int ViewStateArchive::kWindowFrameSizeFieldNumber;
const int ViewStateArchive::kSelectedInspectorSwitchSegmentIdentifierFieldNumber;
const int ViewStateArchive::kInspectorHiddenFieldNumber;
#endif  // !_MSC_VER

ViewStateArchive::ViewStateArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ViewStateArchive::InitAsDefaultInstance() {
  visible_rect_origin_ = const_cast< ::TSP::Point*>(&::TSP::Point::default_instance());
  selection_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  selection_model_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  visible_rect_size_ = const_cast< ::TSP::Size*>(&::TSP::Size::default_instance());
  window_frame_origin_ = const_cast< ::TSP::Point*>(&::TSP::Point::default_instance());
  window_frame_size_ = const_cast< ::TSP::Size*>(&::TSP::Size::default_instance());
}

ViewStateArchive::ViewStateArchive(const ViewStateArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ViewStateArchive::SharedCtor() {
  _cached_size_ = 0;
  obsolete_view_scale_ = 0;
  visible_rect_origin_ = NULL;
  obsolete_landscape_ = false;
  selection_ = NULL;
  selection_model_ = NULL;
  master_drawables_selectable_ = false;
  visible_rect_size_ = NULL;
  ruler_visible_ = true;
  layout_borders_visible_ = false;
  word_count_hud_visible_ = false;
  shows_comments_ = true;
  shows_page_navigator_ = false;
  view_scale_mode_ = 0;
  view_scale_ = 1.25f;
  window_frame_origin_ = NULL;
  window_frame_size_ = NULL;
  selected_inspector_switch_segment_identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inspector_hidden_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ViewStateArchive::~ViewStateArchive() {
  SharedDtor();
}

void ViewStateArchive::SharedDtor() {
  if (selected_inspector_switch_segment_identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete selected_inspector_switch_segment_identifier_;
  }
  if (this != default_instance_) {
    delete visible_rect_origin_;
    delete selection_;
    delete selection_model_;
    delete visible_rect_size_;
    delete window_frame_origin_;
    delete window_frame_size_;
  }
}

void ViewStateArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ViewStateArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ViewStateArchive_descriptor_;
}

const ViewStateArchive& ViewStateArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPArchives_2eproto();
  return *default_instance_;
}

ViewStateArchive* ViewStateArchive::default_instance_ = NULL;

ViewStateArchive* ViewStateArchive::New() const {
  return new ViewStateArchive;
}

void ViewStateArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    obsolete_view_scale_ = 0;
    if (has_visible_rect_origin()) {
      if (visible_rect_origin_ != NULL) visible_rect_origin_->::TSP::Point::Clear();
    }
    obsolete_landscape_ = false;
    if (has_selection()) {
      if (selection_ != NULL) selection_->::TSP::Reference::Clear();
    }
    if (has_selection_model()) {
      if (selection_model_ != NULL) selection_model_->::TSP::Reference::Clear();
    }
    master_drawables_selectable_ = false;
    if (has_visible_rect_size()) {
      if (visible_rect_size_ != NULL) visible_rect_size_->::TSP::Size::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ruler_visible_ = true;
    layout_borders_visible_ = false;
    word_count_hud_visible_ = false;
    shows_comments_ = true;
    shows_page_navigator_ = false;
    view_scale_mode_ = 0;
    view_scale_ = 1.25f;
    if (has_window_frame_origin()) {
      if (window_frame_origin_ != NULL) window_frame_origin_->::TSP::Point::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_window_frame_size()) {
      if (window_frame_size_ != NULL) window_frame_size_->::TSP::Size::Clear();
    }
    if (has_selected_inspector_switch_segment_identifier()) {
      if (selected_inspector_switch_segment_identifier_ != &::google::protobuf::internal::kEmptyString) {
        selected_inspector_switch_segment_identifier_->clear();
      }
    }
    inspector_hidden_ = false;
  }
  chart_ui_state_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ViewStateArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float OBSOLETE_view_scale = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obsolete_view_scale_)));
          set_has_obsolete_view_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_visible_rect_origin;
        break;
      }

      // optional .TSP.Point visible_rect_origin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_visible_rect_origin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_visible_rect_origin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_OBSOLETE_landscape;
        break;
      }

      // optional bool OBSOLETE_landscape = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OBSOLETE_landscape:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obsolete_landscape_)));
          set_has_obsolete_landscape();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_selection;
        break;
      }

      // optional .TSP.Reference selection = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_selection_model;
        break;
      }

      // optional .TSP.Reference selection_model = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selection_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selection_model()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_master_drawables_selectable;
        break;
      }

      // optional bool master_drawables_selectable = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_master_drawables_selectable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &master_drawables_selectable_)));
          set_has_master_drawables_selectable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_visible_rect_size;
        break;
      }

      // optional .TSP.Size visible_rect_size = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_visible_rect_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_visible_rect_size()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_chart_ui_state;
        break;
      }

      // repeated .TSCH.ChartUIState chart_ui_state = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chart_ui_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chart_ui_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_chart_ui_state;
        if (input->ExpectTag(72)) goto parse_ruler_visible;
        break;
      }

      // optional bool ruler_visible = 9 [default = true];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ruler_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ruler_visible_)));
          set_has_ruler_visible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_layout_borders_visible;
        break;
      }

      // optional bool layout_borders_visible = 10 [default = false];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_layout_borders_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &layout_borders_visible_)));
          set_has_layout_borders_visible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_word_count_hud_visible;
        break;
      }

      // optional bool word_count_hud_visible = 11 [default = false];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_word_count_hud_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &word_count_hud_visible_)));
          set_has_word_count_hud_visible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_shows_comments;
        break;
      }

      // optional bool shows_comments = 12 [default = true];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shows_comments:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shows_comments_)));
          set_has_shows_comments();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_shows_page_navigator;
        break;
      }

      // optional bool shows_page_navigator = 13 [default = false];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shows_page_navigator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shows_page_navigator_)));
          set_has_shows_page_navigator();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_view_scale_mode;
        break;
      }

      // optional .TP.ViewScaleMode view_scale_mode = 14 [default = ViewScaleMode_UserDefined];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_view_scale_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TP::ViewScaleMode_IsValid(value)) {
            set_view_scale_mode(static_cast< ::TP::ViewScaleMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_view_scale;
        break;
      }

      // optional float view_scale = 15 [default = 1.25];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_view_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &view_scale_)));
          set_has_view_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_window_frame_origin;
        break;
      }

      // optional .TSP.Point window_frame_origin = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_window_frame_origin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_window_frame_origin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_window_frame_size;
        break;
      }

      // optional .TSP.Size window_frame_size = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_window_frame_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_window_frame_size()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_selected_inspector_switch_segment_identifier;
        break;
      }

      // optional string selected_inspector_switch_segment_identifier = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selected_inspector_switch_segment_identifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_selected_inspector_switch_segment_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->selected_inspector_switch_segment_identifier().data(), this->selected_inspector_switch_segment_identifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_inspector_hidden;
        break;
      }

      // optional bool inspector_hidden = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inspector_hidden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inspector_hidden_)));
          set_has_inspector_hidden();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ViewStateArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float OBSOLETE_view_scale = 1;
  if (has_obsolete_view_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->obsolete_view_scale(), output);
  }

  // optional .TSP.Point visible_rect_origin = 2;
  if (has_visible_rect_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->visible_rect_origin(), output);
  }

  // optional bool OBSOLETE_landscape = 3;
  if (has_obsolete_landscape()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->obsolete_landscape(), output);
  }

  // optional .TSP.Reference selection = 4;
  if (has_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->selection(), output);
  }

  // optional .TSP.Reference selection_model = 5;
  if (has_selection_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->selection_model(), output);
  }

  // optional bool master_drawables_selectable = 6;
  if (has_master_drawables_selectable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->master_drawables_selectable(), output);
  }

  // optional .TSP.Size visible_rect_size = 7;
  if (has_visible_rect_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->visible_rect_size(), output);
  }

  // repeated .TSCH.ChartUIState chart_ui_state = 8;
  for (int i = 0; i < this->chart_ui_state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->chart_ui_state(i), output);
  }

  // optional bool ruler_visible = 9 [default = true];
  if (has_ruler_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->ruler_visible(), output);
  }

  // optional bool layout_borders_visible = 10 [default = false];
  if (has_layout_borders_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->layout_borders_visible(), output);
  }

  // optional bool word_count_hud_visible = 11 [default = false];
  if (has_word_count_hud_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->word_count_hud_visible(), output);
  }

  // optional bool shows_comments = 12 [default = true];
  if (has_shows_comments()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->shows_comments(), output);
  }

  // optional bool shows_page_navigator = 13 [default = false];
  if (has_shows_page_navigator()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->shows_page_navigator(), output);
  }

  // optional .TP.ViewScaleMode view_scale_mode = 14 [default = ViewScaleMode_UserDefined];
  if (has_view_scale_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->view_scale_mode(), output);
  }

  // optional float view_scale = 15 [default = 1.25];
  if (has_view_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->view_scale(), output);
  }

  // optional .TSP.Point window_frame_origin = 16;
  if (has_window_frame_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->window_frame_origin(), output);
  }

  // optional .TSP.Size window_frame_size = 17;
  if (has_window_frame_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->window_frame_size(), output);
  }

  // optional string selected_inspector_switch_segment_identifier = 18;
  if (has_selected_inspector_switch_segment_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->selected_inspector_switch_segment_identifier().data(), this->selected_inspector_switch_segment_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->selected_inspector_switch_segment_identifier(), output);
  }

  // optional bool inspector_hidden = 19;
  if (has_inspector_hidden()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->inspector_hidden(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ViewStateArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float OBSOLETE_view_scale = 1;
  if (has_obsolete_view_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->obsolete_view_scale(), target);
  }

  // optional .TSP.Point visible_rect_origin = 2;
  if (has_visible_rect_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->visible_rect_origin(), target);
  }

  // optional bool OBSOLETE_landscape = 3;
  if (has_obsolete_landscape()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->obsolete_landscape(), target);
  }

  // optional .TSP.Reference selection = 4;
  if (has_selection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->selection(), target);
  }

  // optional .TSP.Reference selection_model = 5;
  if (has_selection_model()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->selection_model(), target);
  }

  // optional bool master_drawables_selectable = 6;
  if (has_master_drawables_selectable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->master_drawables_selectable(), target);
  }

  // optional .TSP.Size visible_rect_size = 7;
  if (has_visible_rect_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->visible_rect_size(), target);
  }

  // repeated .TSCH.ChartUIState chart_ui_state = 8;
  for (int i = 0; i < this->chart_ui_state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->chart_ui_state(i), target);
  }

  // optional bool ruler_visible = 9 [default = true];
  if (has_ruler_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->ruler_visible(), target);
  }

  // optional bool layout_borders_visible = 10 [default = false];
  if (has_layout_borders_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->layout_borders_visible(), target);
  }

  // optional bool word_count_hud_visible = 11 [default = false];
  if (has_word_count_hud_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->word_count_hud_visible(), target);
  }

  // optional bool shows_comments = 12 [default = true];
  if (has_shows_comments()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->shows_comments(), target);
  }

  // optional bool shows_page_navigator = 13 [default = false];
  if (has_shows_page_navigator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->shows_page_navigator(), target);
  }

  // optional .TP.ViewScaleMode view_scale_mode = 14 [default = ViewScaleMode_UserDefined];
  if (has_view_scale_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->view_scale_mode(), target);
  }

  // optional float view_scale = 15 [default = 1.25];
  if (has_view_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->view_scale(), target);
  }

  // optional .TSP.Point window_frame_origin = 16;
  if (has_window_frame_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->window_frame_origin(), target);
  }

  // optional .TSP.Size window_frame_size = 17;
  if (has_window_frame_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->window_frame_size(), target);
  }

  // optional string selected_inspector_switch_segment_identifier = 18;
  if (has_selected_inspector_switch_segment_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->selected_inspector_switch_segment_identifier().data(), this->selected_inspector_switch_segment_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->selected_inspector_switch_segment_identifier(), target);
  }

  // optional bool inspector_hidden = 19;
  if (has_inspector_hidden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->inspector_hidden(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ViewStateArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float OBSOLETE_view_scale = 1;
    if (has_obsolete_view_scale()) {
      total_size += 1 + 4;
    }

    // optional .TSP.Point visible_rect_origin = 2;
    if (has_visible_rect_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->visible_rect_origin());
    }

    // optional bool OBSOLETE_landscape = 3;
    if (has_obsolete_landscape()) {
      total_size += 1 + 1;
    }

    // optional .TSP.Reference selection = 4;
    if (has_selection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selection());
    }

    // optional .TSP.Reference selection_model = 5;
    if (has_selection_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selection_model());
    }

    // optional bool master_drawables_selectable = 6;
    if (has_master_drawables_selectable()) {
      total_size += 1 + 1;
    }

    // optional .TSP.Size visible_rect_size = 7;
    if (has_visible_rect_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->visible_rect_size());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool ruler_visible = 9 [default = true];
    if (has_ruler_visible()) {
      total_size += 1 + 1;
    }

    // optional bool layout_borders_visible = 10 [default = false];
    if (has_layout_borders_visible()) {
      total_size += 1 + 1;
    }

    // optional bool word_count_hud_visible = 11 [default = false];
    if (has_word_count_hud_visible()) {
      total_size += 1 + 1;
    }

    // optional bool shows_comments = 12 [default = true];
    if (has_shows_comments()) {
      total_size += 1 + 1;
    }

    // optional bool shows_page_navigator = 13 [default = false];
    if (has_shows_page_navigator()) {
      total_size += 1 + 1;
    }

    // optional .TP.ViewScaleMode view_scale_mode = 14 [default = ViewScaleMode_UserDefined];
    if (has_view_scale_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->view_scale_mode());
    }

    // optional float view_scale = 15 [default = 1.25];
    if (has_view_scale()) {
      total_size += 1 + 4;
    }

    // optional .TSP.Point window_frame_origin = 16;
    if (has_window_frame_origin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->window_frame_origin());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .TSP.Size window_frame_size = 17;
    if (has_window_frame_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->window_frame_size());
    }

    // optional string selected_inspector_switch_segment_identifier = 18;
    if (has_selected_inspector_switch_segment_identifier()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->selected_inspector_switch_segment_identifier());
    }

    // optional bool inspector_hidden = 19;
    if (has_inspector_hidden()) {
      total_size += 2 + 1;
    }

  }
  // repeated .TSCH.ChartUIState chart_ui_state = 8;
  total_size += 1 * this->chart_ui_state_size();
  for (int i = 0; i < this->chart_ui_state_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chart_ui_state(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ViewStateArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ViewStateArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ViewStateArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ViewStateArchive::MergeFrom(const ViewStateArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  chart_ui_state_.MergeFrom(from.chart_ui_state_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_obsolete_view_scale()) {
      set_obsolete_view_scale(from.obsolete_view_scale());
    }
    if (from.has_visible_rect_origin()) {
      mutable_visible_rect_origin()->::TSP::Point::MergeFrom(from.visible_rect_origin());
    }
    if (from.has_obsolete_landscape()) {
      set_obsolete_landscape(from.obsolete_landscape());
    }
    if (from.has_selection()) {
      mutable_selection()->::TSP::Reference::MergeFrom(from.selection());
    }
    if (from.has_selection_model()) {
      mutable_selection_model()->::TSP::Reference::MergeFrom(from.selection_model());
    }
    if (from.has_master_drawables_selectable()) {
      set_master_drawables_selectable(from.master_drawables_selectable());
    }
    if (from.has_visible_rect_size()) {
      mutable_visible_rect_size()->::TSP::Size::MergeFrom(from.visible_rect_size());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ruler_visible()) {
      set_ruler_visible(from.ruler_visible());
    }
    if (from.has_layout_borders_visible()) {
      set_layout_borders_visible(from.layout_borders_visible());
    }
    if (from.has_word_count_hud_visible()) {
      set_word_count_hud_visible(from.word_count_hud_visible());
    }
    if (from.has_shows_comments()) {
      set_shows_comments(from.shows_comments());
    }
    if (from.has_shows_page_navigator()) {
      set_shows_page_navigator(from.shows_page_navigator());
    }
    if (from.has_view_scale_mode()) {
      set_view_scale_mode(from.view_scale_mode());
    }
    if (from.has_view_scale()) {
      set_view_scale(from.view_scale());
    }
    if (from.has_window_frame_origin()) {
      mutable_window_frame_origin()->::TSP::Point::MergeFrom(from.window_frame_origin());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_window_frame_size()) {
      mutable_window_frame_size()->::TSP::Size::MergeFrom(from.window_frame_size());
    }
    if (from.has_selected_inspector_switch_segment_identifier()) {
      set_selected_inspector_switch_segment_identifier(from.selected_inspector_switch_segment_identifier());
    }
    if (from.has_inspector_hidden()) {
      set_inspector_hidden(from.inspector_hidden());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ViewStateArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ViewStateArchive::CopyFrom(const ViewStateArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewStateArchive::IsInitialized() const {

  if (has_visible_rect_origin()) {
    if (!this->visible_rect_origin().IsInitialized()) return false;
  }
  if (has_selection()) {
    if (!this->selection().IsInitialized()) return false;
  }
  if (has_selection_model()) {
    if (!this->selection_model().IsInitialized()) return false;
  }
  if (has_visible_rect_size()) {
    if (!this->visible_rect_size().IsInitialized()) return false;
  }
  for (int i = 0; i < chart_ui_state_size(); i++) {
    if (!this->chart_ui_state(i).IsInitialized()) return false;
  }
  if (has_window_frame_origin()) {
    if (!this->window_frame_origin().IsInitialized()) return false;
  }
  if (has_window_frame_size()) {
    if (!this->window_frame_size().IsInitialized()) return false;
  }
  return true;
}

void ViewStateArchive::Swap(ViewStateArchive* other) {
  if (other != this) {
    std::swap(obsolete_view_scale_, other->obsolete_view_scale_);
    std::swap(visible_rect_origin_, other->visible_rect_origin_);
    std::swap(obsolete_landscape_, other->obsolete_landscape_);
    std::swap(selection_, other->selection_);
    std::swap(selection_model_, other->selection_model_);
    std::swap(master_drawables_selectable_, other->master_drawables_selectable_);
    std::swap(visible_rect_size_, other->visible_rect_size_);
    chart_ui_state_.Swap(&other->chart_ui_state_);
    std::swap(ruler_visible_, other->ruler_visible_);
    std::swap(layout_borders_visible_, other->layout_borders_visible_);
    std::swap(word_count_hud_visible_, other->word_count_hud_visible_);
    std::swap(shows_comments_, other->shows_comments_);
    std::swap(shows_page_navigator_, other->shows_page_navigator_);
    std::swap(view_scale_mode_, other->view_scale_mode_);
    std::swap(view_scale_, other->view_scale_);
    std::swap(window_frame_origin_, other->window_frame_origin_);
    std::swap(window_frame_size_, other->window_frame_size_);
    std::swap(selected_inspector_switch_segment_identifier_, other->selected_inspector_switch_segment_identifier_);
    std::swap(inspector_hidden_, other->inspector_hidden_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ViewStateArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ViewStateArchive_descriptor_;
  metadata.reflection = ViewStateArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UIStateArchive::kLayoutStateFieldNumber;
const int UIStateArchive::kViewStateFieldNumber;
#endif  // !_MSC_VER

UIStateArchive::UIStateArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UIStateArchive::InitAsDefaultInstance() {
  layout_state_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  view_state_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

UIStateArchive::UIStateArchive(const UIStateArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UIStateArchive::SharedCtor() {
  _cached_size_ = 0;
  layout_state_ = NULL;
  view_state_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UIStateArchive::~UIStateArchive() {
  SharedDtor();
}

void UIStateArchive::SharedDtor() {
  if (this != default_instance_) {
    delete layout_state_;
    delete view_state_;
  }
}

void UIStateArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UIStateArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UIStateArchive_descriptor_;
}

const UIStateArchive& UIStateArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TPArchives_2eproto();
  return *default_instance_;
}

UIStateArchive* UIStateArchive::default_instance_ = NULL;

UIStateArchive* UIStateArchive::New() const {
  return new UIStateArchive;
}

void UIStateArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_layout_state()) {
      if (layout_state_ != NULL) layout_state_->::TSP::Reference::Clear();
    }
    if (has_view_state()) {
      if (view_state_ != NULL) view_state_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UIStateArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Reference layout_state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_layout_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_view_state;
        break;
      }

      // optional .TSP.Reference view_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_view_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_view_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UIStateArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Reference layout_state = 1;
  if (has_layout_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->layout_state(), output);
  }

  // optional .TSP.Reference view_state = 2;
  if (has_view_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->view_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UIStateArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Reference layout_state = 1;
  if (has_layout_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->layout_state(), target);
  }

  // optional .TSP.Reference view_state = 2;
  if (has_view_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->view_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UIStateArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.Reference layout_state = 1;
    if (has_layout_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->layout_state());
    }

    // optional .TSP.Reference view_state = 2;
    if (has_view_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->view_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UIStateArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UIStateArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UIStateArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UIStateArchive::MergeFrom(const UIStateArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layout_state()) {
      mutable_layout_state()->::TSP::Reference::MergeFrom(from.layout_state());
    }
    if (from.has_view_state()) {
      mutable_view_state()->::TSP::Reference::MergeFrom(from.view_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UIStateArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UIStateArchive::CopyFrom(const UIStateArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UIStateArchive::IsInitialized() const {

  if (has_layout_state()) {
    if (!this->layout_state().IsInitialized()) return false;
  }
  if (has_view_state()) {
    if (!this->view_state().IsInitialized()) return false;
  }
  return true;
}

void UIStateArchive::Swap(UIStateArchive* other) {
  if (other != this) {
    std::swap(layout_state_, other->layout_state_);
    std::swap(view_state_, other->view_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UIStateArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UIStateArchive_descriptor_;
  metadata.reflection = UIStateArchive_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TP

// @@protoc_insertion_point(global_scope)
