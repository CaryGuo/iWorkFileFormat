// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSCHPreUFFArchives.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TSCHPreUFFArchives.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace TSCH {
namespace PreUFF {

namespace {

const ::google::protobuf::Descriptor* ChartInfoArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartInfoArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* LegendModelArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LegendModelArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChartModelArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartModelArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChartGridArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartGridArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChartGridArchive_ValueRow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartGridArchive_ValueRow_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChartsNumberFormatArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartsNumberFormatArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChartStyleArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartStyleArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChartNonStyleArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartNonStyleArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* LegendStyleArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LegendStyleArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* LegendNonStyleArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LegendNonStyleArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChartAxisStyleArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartAxisStyleArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChartAxisNonStyleArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartAxisNonStyleArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChartSeriesStyleArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartSeriesStyleArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChartSeriesNonStyleArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartSeriesNonStyleArchive_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TSCHPreUFFArchives_2eproto() {
  protobuf_AddDesc_TSCHPreUFFArchives_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TSCHPreUFFArchives.proto");
  GOOGLE_CHECK(file != NULL);
  ChartInfoArchive_descriptor_ = file->message_type(0);
  static const int ChartInfoArchive_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartInfoArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartInfoArchive, chart_model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartInfoArchive, style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartInfoArchive, chart_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartInfoArchive, legend_model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartInfoArchive, inner_chart_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartInfoArchive, value_axis_styles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartInfoArchive, category_axis_styles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartInfoArchive, value_axis_nonstyles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartInfoArchive, category_axis_nonstyles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartInfoArchive, series_theme_styles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartInfoArchive, series_private_styles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartInfoArchive, series_non_styles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartInfoArchive, non_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartInfoArchive, mediator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartInfoArchive, cde_preview_origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartInfoArchive, chart_style_preset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartInfoArchive, paragraph_styles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartInfoArchive, last_row_sected_in_the_cde_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartInfoArchive, last_column_sected_in_the_cde_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartInfoArchive, chart_style_preset_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartInfoArchive, needs_calc_engine_deferred_import_action_),
  };
  ChartInfoArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartInfoArchive_descriptor_,
      ChartInfoArchive::default_instance_,
      ChartInfoArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartInfoArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartInfoArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartInfoArchive));
  LegendModelArchive_descriptor_ = file->message_type(1);
  static const int LegendModelArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegendModelArchive, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegendModelArchive, frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegendModelArchive, style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegendModelArchive, non_style_),
  };
  LegendModelArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LegendModelArchive_descriptor_,
      LegendModelArchive::default_instance_,
      LegendModelArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegendModelArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegendModelArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LegendModelArchive));
  ChartModelArchive_descriptor_ = file->message_type(2);
  static const int ChartModelArchive_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartModelArchive, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartModelArchive, grid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartModelArchive, series_types_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartModelArchive, scatter_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartModelArchive, inline_grid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartModelArchive, multidataset_index_),
  };
  ChartModelArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartModelArchive_descriptor_,
      ChartModelArchive::default_instance_,
      ChartModelArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartModelArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartModelArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartModelArchive));
  ChartGridArchive_descriptor_ = file->message_type(3);
  static const int ChartGridArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGridArchive, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGridArchive, row_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGridArchive, column_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGridArchive, value_row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGridArchive, dirty_),
  };
  ChartGridArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartGridArchive_descriptor_,
      ChartGridArchive::default_instance_,
      ChartGridArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGridArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGridArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartGridArchive));
  ChartGridArchive_ValueRow_descriptor_ = ChartGridArchive_descriptor_->nested_type(0);
  static const int ChartGridArchive_ValueRow_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGridArchive_ValueRow, value_),
  };
  ChartGridArchive_ValueRow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartGridArchive_ValueRow_descriptor_,
      ChartGridArchive_ValueRow::default_instance_,
      ChartGridArchive_ValueRow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGridArchive_ValueRow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGridArchive_ValueRow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartGridArchive_ValueRow));
  ChartsNumberFormatArchive_descriptor_ = file->message_type(4);
  static const int ChartsNumberFormatArchive_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartsNumberFormatArchive, value_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartsNumberFormatArchive, format_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartsNumberFormatArchive, decimal_places_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartsNumberFormatArchive, currency_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartsNumberFormatArchive, negative_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartsNumberFormatArchive, show_thousands_separator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartsNumberFormatArchive, fraction_accuracy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartsNumberFormatArchive, suffix_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartsNumberFormatArchive, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartsNumberFormatArchive, base_places_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartsNumberFormatArchive, base_use_minus_sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartsNumberFormatArchive, use_accounting_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartsNumberFormatArchive, is_custom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartsNumberFormatArchive, scale_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartsNumberFormatArchive, interstitial_strings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartsNumberFormatArchive, interstitial_string_insertion_indexes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartsNumberFormatArchive, index_from_right_of_last_digit_placeholder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartsNumberFormatArchive, is_text_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartsNumberFormatArchive, minimum_integer_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartsNumberFormatArchive, decimal_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartsNumberFormatArchive, number_of_non_space_integer_placeholder_digits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartsNumberFormatArchive, number_of_non_space_decimal_placeholder_digits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartsNumberFormatArchive, format_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartsNumberFormatArchive, prefix_string_),
  };
  ChartsNumberFormatArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartsNumberFormatArchive_descriptor_,
      ChartsNumberFormatArchive::default_instance_,
      ChartsNumberFormatArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartsNumberFormatArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartsNumberFormatArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartsNumberFormatArchive));
  ChartStyleArchive_descriptor_ = file->message_type(5);
  static const int ChartStyleArchive_offsets_[39] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfodefaultbackgroundfill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfodefaultbackgroundstroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfodefaultgridbackgroundfill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfodefaultintersetgap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfodefaultinterbargap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfodefaultshowborder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfodefaultborderstroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfodefaulttitlecolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfodefaultgridbackgroundopacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfodefaultcombinelayers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfodefaultbordershadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfodefaultborderopacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfodefaulttitleparagraphstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfodefaultdeprecatedmasterfontfamily_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfodefaultdeprecatedmasterfontnamedsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfodefaultdeprecatedtrendlineequationshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfodefaultdeprecatedtrendlinersquaredshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfodefaultdeprecatedtrendlineequationopacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfodefaultdeprecatedtrendlinersquaredopacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfobardeprecated3dshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfocolumndeprecated3dshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfolinedeprecated3dshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfoareadeprecated3dshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfopiedeprecated3dshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfodefault3dlightingpackage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfocolumn3dlightingpackage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfobar3dlightingpackage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfoline3dlightingpackage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfoarea3dlightingpackage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfopie3dlightingpackage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfodefaultdeprecated3dbeveledges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfopiedeprecated3dbeveledges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfobardeprecated3dbeveledges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfocolumndeprecated3dbeveledges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfodefaultdeprecated3dbarshape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfodefault3dchartopacity_),
  };
  ChartStyleArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartStyleArchive_descriptor_,
      ChartStyleArchive::default_instance_,
      ChartStyleArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartStyleArchive));
  ChartNonStyleArchive_descriptor_ = file->message_type(6);
  static const int ChartNonStyleArchive_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartNonStyleArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartNonStyleArchive, tschchartinfodefaulttitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartNonStyleArchive, tschchartinfodefaultshowlegend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartNonStyleArchive, tschchartinfodefaultpiestartangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartNonStyleArchive, tschchartinfodefaultshowtitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartNonStyleArchive, tschchartinfodefaultdeprecatedagainmasterfontnamedsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartNonStyleArchive, tschchartinfodefault3drotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartNonStyleArchive, tschchartinfodefault3dscale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartNonStyleArchive, tschchartinfocolumn3dscale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartNonStyleArchive, tschchartinfobar3dscale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartNonStyleArchive, tschchartinfoline3dscale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartNonStyleArchive, tschchartinfoarea3dscale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartNonStyleArchive, tschchartinfopie3dscale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartNonStyleArchive, tschchartinfodefault3dviewport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartNonStyleArchive, tschchartinfodefaultdeprecated3dlightingpackage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartNonStyleArchive, tschchartinfocolumndeprecated3dlightingpackage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartNonStyleArchive, tschchartinfobardeprecated3dlightingpackage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartNonStyleArchive, tschchartinfolinedeprecated3dlightingpackage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartNonStyleArchive, tschchartinfoareadeprecated3dlightingpackage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartNonStyleArchive, tschchartinfopiedeprecated3dlightingpackage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartNonStyleArchive, tschchartinfodefaultskiphiddendata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartNonStyleArchive, tschchartinfodefault3dbeveledges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartNonStyleArchive, tschchartinfodefault3dbarshape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartNonStyleArchive, tschchartinfodefault3dintersetdepthgap_),
  };
  ChartNonStyleArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartNonStyleArchive_descriptor_,
      ChartNonStyleArchive::default_instance_,
      ChartNonStyleArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartNonStyleArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartNonStyleArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartNonStyleArchive));
  LegendStyleArchive_descriptor_ = file->message_type(7);
  static const int LegendStyleArchive_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegendStyleArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegendStyleArchive, tschlegendmodeldefaultfill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegendStyleArchive, tschlegendmodeldefaultstroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegendStyleArchive, tschlegendmodeldefaultshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegendStyleArchive, tschlegendmodeldefaultopacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegendStyleArchive, tschlegendmodeldefaultlabelparagraphstyleindex_),
  };
  LegendStyleArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LegendStyleArchive_descriptor_,
      LegendStyleArchive::default_instance_,
      LegendStyleArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegendStyleArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegendStyleArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LegendStyleArchive));
  LegendNonStyleArchive_descriptor_ = file->message_type(8);
  static const int LegendNonStyleArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegendNonStyleArchive, super_),
  };
  LegendNonStyleArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LegendNonStyleArchive_descriptor_,
      LegendNonStyleArchive::default_instance_,
      LegendNonStyleArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegendNonStyleArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegendNonStyleArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LegendNonStyleArchive));
  ChartAxisStyleArchive_descriptor_ = file->message_type(9);
  static const int ChartAxisStyleArchive_offsets_[42] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxisvalueshowmajorgridlines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxisvalueshowminorgridlines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxisvaluemajorgridlinestroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxisvalueminorgridlinestroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxisvaluetickmarklocation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxisvalueshowmajortickmarks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxisvalueshowminortickmarks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxisvaluelabelsorientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxisvalueshowminimumlabel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxisvaluemajorgridlineshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxisvalueminorgridlineshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxisvaluemajorgridlineopacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxisvalueminorgridlineopacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxisvalueshowaxis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxiscategoryshowmajorgridlines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxiscategoryshowminorgridlines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxiscategorymajorgridlinestroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxiscategoryminorgridlinestroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxiscategorytickmarklocation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxiscategoryshowmajortickmarks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxiscategoryshowminortickmarks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxiscategorylabelsorientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxiscategoryhorizontalspacing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxiscategoryverticalspacing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxiscategoryshowlastlabel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxiscategorymajorgridlineshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxiscategoryminorgridlineshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxiscategorymajorgridlineopacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxiscategoryminorgridlineopacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxiscategoryshowaxis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxisdefaultlabelsorientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxisdefaulttitleparagraphstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxisdefaultlabelparagraphstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxisvaluetitleparagraphstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxisvaluelabelparagraphstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxiscategorytitleparagraphstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxiscategorylabelparagraphstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxisvalue3dgridlinestroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxiscategory3dgridlinestroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxisvalue3dgridlineopacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxiscategory3dgridlineopacity_),
  };
  ChartAxisStyleArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartAxisStyleArchive_descriptor_,
      ChartAxisStyleArchive::default_instance_,
      ChartAxisStyleArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartAxisStyleArchive));
  ChartAxisNonStyleArchive_descriptor_ = file->message_type(10);
  static const int ChartAxisNonStyleArchive_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisNonStyleArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisNonStyleArchive, tschchartaxisdefaultusermin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisNonStyleArchive, tschchartaxisdefaultusermax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisNonStyleArchive, tschchartaxisdefaultnumberformat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisNonStyleArchive, tschchartaxisdefaultshowlabels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisNonStyleArchive, tschchartaxisvaluenumberofminorgridlines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisNonStyleArchive, tschchartaxisvaluescale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisNonStyleArchive, tschchartaxisvaluenumberofdecades_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisNonStyleArchive, tschchartaxisvalueshowlabels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisNonStyleArchive, tschchartaxisvalueshowtitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisNonStyleArchive, tschchartaxisvaluenumberofmajorgridlines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisNonStyleArchive, tschchartaxisvaluetitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisNonStyleArchive, tschchartaxiscategoryshowlabels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisNonStyleArchive, tschchartaxiscategoryshowserieslabels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisNonStyleArchive, tschchartaxiscategoryshowtitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisNonStyleArchive, tschchartaxiscategorytitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisNonStyleArchive, tschchartaxisdefaultnumberformattype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisNonStyleArchive, tschchartaxisdefault3dlabelposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisNonStyleArchive, tschchartaxiscategoryplottoedges_),
  };
  ChartAxisNonStyleArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartAxisNonStyleArchive_descriptor_,
      ChartAxisNonStyleArchive::default_instance_,
      ChartAxisNonStyleArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisNonStyleArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisNonStyleArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartAxisNonStyleArchive));
  ChartSeriesStyleArchive_descriptor_ = file->message_type(11);
  static const int ChartSeriesStyleArchive_offsets_[105] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesdefaulttrendlineequationparagraphstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesdefaulttrendlineequationopacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesdefaulttrendlinersquaredopacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesbarfill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesbarstroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesbarvaluelabelposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartserieslinestroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartserieslinesymbolfill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartserieslinesymbolstroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartserieslinesymbolsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartserieslinevaluelabelposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesareafill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesareastroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesareavaluelabelposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesareasymbolfill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesareasymbolstroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesareasymbolsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriespiefill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriespiestroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesscatterstroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesscattersymbolfill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesscattersymbolstroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesscattersymbolsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesscattervaluelabelposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesdefaultfill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesdefaultvaluelabelposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriespiedeprecatedserieslabelson_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriescolumnfill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriespieshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesbarshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesareashadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesscattershadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesmixedlineshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesmixedareashadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesmixedcolumnshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartserieslineshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesdefaultshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesbubblesymbolfill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesbubblestroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesbubblesymbolstroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesbubblevaluelabelposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesbubbleshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesbubblesymbolfilluseseriesstroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseries3dbarshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseries3dcolumnshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseries3dlineshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseries3dareashadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseries3dpieshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesdefaultlabelparagraphstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesbarlabelparagraphstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartserieslinelabelparagraphstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesarealabelparagraphstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriespielabelparagraphstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesmixedlabelparagraphstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesdefaultopacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartserieslinesymbolfilluseseriesstroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesareasymbolfilluseseriesstroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesscattersymbolfilluseseriesstroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesmixedlinesymbolfilluseseriesstroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesmixedareasymbolfilluseseriesstroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartserieslinesymbolfilluseseriesfill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesareasymbolfilluseseriesfill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesmixedlinesymbolfilluseseriesfill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesmixedareasymbolfilluseseriesfill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesmixedcolumnfill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesmixedareafill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesmixedcolumnstroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesmixedlinestroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesmixedareastroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesmixedlinesymbolsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesmixedareasymbolsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesmixedlinesymbolfill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesmixedareasymbolfill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesmixedlinesymbolstroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesmixedareasymbolstroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesmixedcolumnvaluelabelposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesmixedlinevaluelabelposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesmixedareavaluelabelposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesdefaultoutsidelabelparagraphstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesbaroutsidelabelparagraphstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesareaoutsidelabelparagraphstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriespieoutsidelabelparagraphstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesmixedoutsidelabelparagraphstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesstackedbarvaluelabelposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesstackedareavaluelabelposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesdefaulttrendlinestroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesdefaulttrendlineshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesdefaulterrorbarshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesdefaulterrorbarstroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesdefaulterrorbarstrokescatterx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesdefaulterrorbarlineend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesdefaulterrorbarlineendscatterx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesdefaultdeprecated3dfill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesbardeprecated3dfill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriescolumndeprecated3dfill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartserieslinedeprecated3dfill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesareadeprecated3dfill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriespiedeprecated3dfill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseries3dbarfill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseries3dcolumnfill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseries3dlinefill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseries3dareafill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseries3dpiefill_),
  };
  ChartSeriesStyleArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartSeriesStyleArchive_descriptor_,
      ChartSeriesStyleArchive::default_instance_,
      ChartSeriesStyleArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartSeriesStyleArchive));
  ChartSeriesNonStyleArchive_descriptor_ = file->message_type(12);
  static const int ChartSeriesNonStyleArchive_offsets_[65] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaultnumberformat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaultnumberformattype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesbarshowvaluelabels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartserieslinesymboltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartserieslineshowsymbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartserieslineshowvaluelabels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesareashowvaluelabels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartserieslinelinetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesareasymboltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesareashowsymbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriespieshowvaluelabels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesscattershowvaluelabels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriespiewedgeexplosion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaultshowvaluelabels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriespienumberformat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriespienumberformattype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriespielabelexplosion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesmixedlineshowsymbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesmixedareashowsymbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesmixedlinesymboltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesmixedareasymboltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesmixedshowvaluelabels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesmixedlinelinetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaultyaxisordinal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriespieshowserieslabels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesscattershowsymbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesscattersymboltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesscatterlinetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesscattershowline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesstackedpercentnumberformat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaultseriestype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaulttrendlinetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaulttrendlineorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaulttrendlineperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaulttrendlineshowlabel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaulttrendlinelabelstring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaulttrendlineshowequation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaulttrendlineshowr2value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbarsetting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbarsettingscatterx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbartype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbartypescatterx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbarfixedvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbarfixedvaluescatterx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbarpercentvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbarpercentvaluescatterx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbarstddevvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbarstddevvaluescatterx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbarcustompositivedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbarcustompositivedatascatterx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbarcustomnegativedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbarcustomnegativedatascatterx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaulttrendlineequationoffsetx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaulttrendlineequationoffsety_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaulttrendlinersquaredoffsetx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaulttrendlinersquaredoffsety_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaultshowtrendline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaultshowerrorbar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaultshowerrorbarscatterx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesbubblesizedimension_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesbubbleshowvaluelabels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesbubblelinetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesbubbleshownegativedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesbubbleadjustmentscale_),
  };
  ChartSeriesNonStyleArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartSeriesNonStyleArchive_descriptor_,
      ChartSeriesNonStyleArchive::default_instance_,
      ChartSeriesNonStyleArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartSeriesNonStyleArchive));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TSCHPreUFFArchives_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartInfoArchive_descriptor_, &ChartInfoArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LegendModelArchive_descriptor_, &LegendModelArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartModelArchive_descriptor_, &ChartModelArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartGridArchive_descriptor_, &ChartGridArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartGridArchive_ValueRow_descriptor_, &ChartGridArchive_ValueRow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartsNumberFormatArchive_descriptor_, &ChartsNumberFormatArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartStyleArchive_descriptor_, &ChartStyleArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartNonStyleArchive_descriptor_, &ChartNonStyleArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LegendStyleArchive_descriptor_, &LegendStyleArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LegendNonStyleArchive_descriptor_, &LegendNonStyleArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartAxisStyleArchive_descriptor_, &ChartAxisStyleArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartAxisNonStyleArchive_descriptor_, &ChartAxisNonStyleArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartSeriesStyleArchive_descriptor_, &ChartSeriesStyleArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartSeriesNonStyleArchive_descriptor_, &ChartSeriesNonStyleArchive::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TSCHPreUFFArchives_2eproto() {
  delete ChartInfoArchive::default_instance_;
  delete ChartInfoArchive_reflection_;
  delete LegendModelArchive::default_instance_;
  delete LegendModelArchive_reflection_;
  delete ChartModelArchive::default_instance_;
  delete ChartModelArchive_reflection_;
  delete ChartGridArchive::default_instance_;
  delete ChartGridArchive_reflection_;
  delete ChartGridArchive_ValueRow::default_instance_;
  delete ChartGridArchive_ValueRow_reflection_;
  delete ChartsNumberFormatArchive::default_instance_;
  delete ChartsNumberFormatArchive_reflection_;
  delete ChartStyleArchive::default_instance_;
  delete ChartStyleArchive_reflection_;
  delete ChartNonStyleArchive::default_instance_;
  delete ChartNonStyleArchive_reflection_;
  delete LegendStyleArchive::default_instance_;
  delete LegendStyleArchive_reflection_;
  delete LegendNonStyleArchive::default_instance_;
  delete LegendNonStyleArchive_reflection_;
  delete ChartAxisStyleArchive::default_instance_;
  delete ChartAxisStyleArchive_reflection_;
  delete ChartAxisNonStyleArchive::default_instance_;
  delete ChartAxisNonStyleArchive_reflection_;
  delete ChartSeriesStyleArchive::default_instance_;
  delete ChartSeriesStyleArchive_reflection_;
  delete ChartSeriesNonStyleArchive::default_instance_;
  delete ChartSeriesNonStyleArchive_reflection_;
}

void protobuf_AddDesc_TSCHPreUFFArchives_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::TSP::protobuf_AddDesc_TSPMessages_2eproto();
  ::TSK::protobuf_AddDesc_TSKArchives_2eproto();
  ::TSD::protobuf_AddDesc_TSDArchives_2eproto();
  ::TSS::protobuf_AddDesc_TSSArchives_2eproto();
  ::TSCH::protobuf_AddDesc_TSCHArchives_2eCommon_2eproto();
  ::TSCH::protobuf_AddDesc_TSCH3DArchives_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030TSCHPreUFFArchives.proto\022\013TSCH.PreUFF\032"
    "\021TSPMessages.proto\032\021TSKArchives.proto\032\021T"
    "SDArchives.proto\032\021TSSArchives.proto\032\031TSC"
    "HArchives.Common.proto\032\024TSCH3DArchives.p"
    "roto\"\334\007\n\020ChartInfoArchive\022#\n\005super\030\001 \002(\013"
    "2\024.TSD.DrawableArchive\0223\n\013chart_model\030\002 "
    "\002(\0132\036.TSCH.PreUFF.ChartModelArchive\022\035\n\005s"
    "tyle\030\003 \001(\0132\016.TSP.Reference\022#\n\nchart_type"
    "\030\004 \002(\0162\017.TSCH.ChartType\0225\n\014legend_model\030"
    "\005 \001(\0132\037.TSCH.PreUFF.LegendModelArchive\022,"
    "\n\021inner_chart_frame\030\006 \002(\0132\021.TSCH.RectArc"
    "hive\022)\n\021value_axis_styles\030\007 \003(\0132\016.TSP.Re"
    "ference\022,\n\024category_axis_styles\030\010 \003(\0132\016."
    "TSP.Reference\022,\n\024value_axis_nonstyles\030\t "
    "\003(\0132\016.TSP.Reference\022/\n\027category_axis_non"
    "styles\030\n \003(\0132\016.TSP.Reference\022+\n\023series_t"
    "heme_styles\030\013 \003(\0132\016.TSP.Reference\022@\n\025ser"
    "ies_private_styles\030\014 \001(\0132!.TSCH.SparseRe"
    "ferenceArrayArchive\022<\n\021series_non_styles"
    "\030\r \001(\0132!.TSCH.SparseReferenceArrayArchiv"
    "e\022!\n\tnon_style\030\016 \001(\0132\016.TSP.Reference\022 \n\010"
    "mediator\030\017 \001(\0132\016.TSP.Reference\022&\n\022cde_pr"
    "eview_origin\030\020 \001(\0132\n.TSP.Point\022*\n\022chart_"
    "style_preset\030\021 \001(\0132\016.TSP.Reference\022(\n\020pa"
    "ragraph_styles\030\022 \003(\0132\016.TSP.Reference\022\"\n\032"
    "last_row_sected_in_the_cde\030\023 \001(\005\022%\n\035last"
    "_column_sected_in_the_cde\030\024 \001(\005\022 \n\030chart"
    "_style_preset_index\030\025 \001(\005\0220\n(needs_calc_"
    "engine_deferred_import_action\030\026 \001(\010\"\226\001\n\022"
    "LegendModelArchive\022\034\n\004info\030\001 \001(\0132\016.TSP.R"
    "eference\022 \n\005frame\030\002 \002(\0132\021.TSCH.RectArchi"
    "ve\022\035\n\005style\030\003 \002(\0132\016.TSP.Reference\022!\n\tnon"
    "_style\030\004 \002(\0132\016.TSP.Reference\"\315\001\n\021ChartMo"
    "delArchive\022\034\n\004info\030\001 \001(\0132\016.TSP.Reference"
    "\022\034\n\004grid\030\002 \002(\0132\016.TSP.Reference\022\024\n\014series"
    "_types\030\003 \003(\r\022\026\n\016scatter_format\030\004 \001(\r\0222\n\013"
    "inline_grid\030\005 \001(\0132\035.TSCH.PreUFF.ChartGri"
    "dArchive\022\032\n\022multidataset_index\030\006 \001(\r\"\261\001\n"
    "\020ChartGridArchive\022\021\n\tdirection\030\001 \002(\005\022\020\n\010"
    "row_name\030\002 \003(\t\022\023\n\013column_name\030\003 \003(\t\0229\n\tv"
    "alue_row\030\004 \003(\0132&.TSCH.PreUFF.ChartGridAr"
    "chive.ValueRow\022\r\n\005dirty\030\006 \002(\010\032\031\n\010ValueRo"
    "w\022\r\n\005value\030\001 \003(\001\"\254\006\n\031ChartsNumberFormatA"
    "rchive\022)\n\nvalue_type\030\001 \002(\0162\025.TSCH.Number"
    "ValueType\022\025\n\rformat_string\030\002 \001(\t\022\026\n\016deci"
    "mal_places\030\003 \002(\r\022\025\n\rcurrency_code\030\004 \001(\t\022"
    "1\n\016negative_style\030\005 \002(\0162\031.TSCH.NegativeN"
    "umberStyle\022 \n\030show_thousands_separator\030\006"
    " \002(\010\0221\n\021fraction_accuracy\030\007 \002(\0162\026.TSCH.F"
    "ractionAccuracy\022\025\n\rsuffix_string\030\010 \001(\t\022\014"
    "\n\004base\030\t \002(\r\022\023\n\013base_places\030\n \002(\r\022\033\n\023bas"
    "e_use_minus_sign\030\013 \002(\010\022\034\n\024use_accounting"
    "_style\030\014 \002(\010\022\021\n\tis_custom\030\r \002(\010\022\024\n\014scale"
    "_factor\030\016 \002(\001\022\034\n\024interstitial_strings\030\017 "
    "\003(\t\022<\n%interstitial_string_insertion_ind"
    "exes\030\020 \002(\0132\r.TSP.IndexSet\0222\n*index_from_"
    "right_of_last_digit_placeholder\030\021 \002(\r\022\026\n"
    "\016is_text_format\030\022 \002(\010\022\035\n\025minimum_integer"
    "_width\030\023 \002(\r\022\025\n\rdecimal_width\030\024 \002(\r\0226\n.n"
    "umber_of_non_space_integer_placeholder_d"
    "igits\030\025 \002(\r\0226\n.number_of_non_space_decim"
    "al_placeholder_digits\030\026 \002(\r\022\023\n\013format_na"
    "me\030\027 \001(\t\022\025\n\rprefix_string\030\030 \001(\t\"\365\022\n\021Char"
    "tStyleArchive\022 \n\005super\030\001 \002(\0132\021.TSS.Style"
    "Archive\022<\n\"tschchartinfodefaultbackgroun"
    "dfill\030\n \001(\0132\020.TSD.FillArchive\022@\n$tschcha"
    "rtinfodefaultbackgroundstroke\030\013 \001(\0132\022.TS"
    "D.StrokeArchive\022@\n&tschchartinfodefaultg"
    "ridbackgroundfill\030\014 \001(\0132\020.TSD.FillArchiv"
    "e\022\'\n\037tschchartinfodefaultintersetgap\030\r \001"
    "(\002\022\'\n\037tschchartinfodefaultinterbargap\030\016 "
    "\001(\002\022&\n\036tschchartinfodefaultshowborder\030\017 "
    "\001(\010\022<\n tschchartinfodefaultborderstroke\030"
    "\020 \001(\0132\022.TSD.StrokeArchive\0222\n\036tschchartin"
    "fodefaulttitlecolor\030\022 \001(\0132\n.TSP.Color\0221\n"
    ")tschchartinfodefaultgridbackgroundopaci"
    "ty\030\023 \001(\002\022)\n!tschchartinfodefaultcombinel"
    "ayers\030\024 \001(\010\022<\n tschchartinfodefaultborde"
    "rshadow\030\025 \001(\0132\022.TSD.ShadowArchive\022)\n!tsc"
    "hchartinfodefaultborderopacity\030\026 \001(\002\0224\n,"
    "tschchartinfodefaulttitleparagraphstylei"
    "ndex\030\027 \001(\005\0226\n.tschchartinfodefaultdeprec"
    "atedmasterfontfamily\030\030 \001(\t\0229\n1tschcharti"
    "nfodefaultdeprecatedmasterfontnamedsize\030"
    "\031 \001(\005\022J\nBtschchartinfodefaultdeprecatedt"
    "rendlineequationparagraphstyleindex\030\036 \001("
    "\005\022J\nBtschchartinfodefaultdeprecatedtrend"
    "linersquaredparagraphstyleindex\030\037 \001(\005\022Q\n"
    "5tschchartinfodefaultdeprecatedtrendline"
    "equationshadow\030  \001(\0132\022.TSD.ShadowArchive"
    "\022Q\n5tschchartinfodefaultdeprecatedtrendl"
    "inersquaredshadow\030! \001(\0132\022.TSD.ShadowArch"
    "ive\022>\n6tschchartinfodefaultdeprecatedtre"
    "ndlineequationopacity\030\" \001(\002\022>\n6tschchart"
    "infodefaultdeprecatedtrendlinersquaredop"
    "acity\030# \001(\002\022\?\n\"tschchartinfobardeprecate"
    "d3dshadow\030\264\002 \001(\0132\022.TSD.ShadowArchive\022B\n%"
    "tschchartinfocolumndeprecated3dshadow\030\265\002"
    " \001(\0132\022.TSD.ShadowArchive\022@\n#tschchartinf"
    "olinedeprecated3dshadow\030\266\002 \001(\0132\022.TSD.Sha"
    "dowArchive\022@\n#tschchartinfoareadeprecate"
    "d3dshadow\030\267\002 \001(\0132\022.TSD.ShadowArchive\022\?\n\""
    "tschchartinfopiedeprecated3dshadow\030\270\002 \001("
    "\0132\022.TSD.ShadowArchive\022S\n%tschchartinfode"
    "fault3dlightingpackage\030\271\002 \001(\0132#.TSCH.Cha"
    "rt3DLightingPackageArchive\022R\n$tschcharti"
    "nfocolumn3dlightingpackage\030\272\002 \001(\0132#.TSCH"
    ".Chart3DLightingPackageArchive\022O\n!tschch"
    "artinfobar3dlightingpackage\030\273\002 \001(\0132#.TSC"
    "H.Chart3DLightingPackageArchive\022P\n\"tschc"
    "hartinfoline3dlightingpackage\030\274\002 \001(\0132#.T"
    "SCH.Chart3DLightingPackageArchive\022P\n\"tsc"
    "hchartinfoarea3dlightingpackage\030\275\002 \001(\0132#"
    ".TSCH.Chart3DLightingPackageArchive\022O\n!t"
    "schchartinfopie3dlightingpackage\030\276\002 \001(\0132"
    "#.TSCH.Chart3DLightingPackageArchive\0223\n*"
    "tschchartinfodefaultdeprecated3dbeveledg"
    "es\030\306\002 \001(\010\022/\n&tschchartinfopiedeprecated3"
    "dbeveledges\030\307\002 \001(\010\022/\n&tschchartinfobarde"
    "precated3dbeveledges\030\310\002 \001(\010\0222\n)tschchart"
    "infocolumndeprecated3dbeveledges\030\311\002 \001(\010\022"
    "1\n(tschchartinfodefaultdeprecated3dbarsh"
    "ape\030\312\002 \001(\005\022+\n\"tschchartinfodefault3dchar"
    "topacity\030\317\002 \001(\002\"\371\013\n\024ChartNonStyleArchive"
    "\022 \n\005super\030\001 \002(\0132\021.TSS.StyleArchive\022!\n\031ts"
    "chchartinfodefaulttitle\030\n \001(\t\022&\n\036tschcha"
    "rtinfodefaultshowlegend\030\013 \001(\010\022)\n!tschcha"
    "rtinfodefaultpiestartangle\030\014 \001(\002\022%\n\035tsch"
    "chartinfodefaultshowtitle\030\r \001(\010\022>\n6tschc"
    "hartinfodefaultdeprecatedagainmasterfont"
    "namedsize\030\031 \001(\005\022C\n\036tschchartinfodefault3"
    "drotation\030\254\002 \001(\0132\032.TSCH.Chart3DVectorArc"
    "hive\022@\n\033tschchartinfodefault3dscale\030\255\002 \001"
    "(\0132\032.TSCH.Chart3DVectorArchive\022\?\n\032tschch"
    "artinfocolumn3dscale\030\256\002 \001(\0132\032.TSCH.Chart"
    "3DVectorArchive\022<\n\027tschchartinfobar3dsca"
    "le\030\257\002 \001(\0132\032.TSCH.Chart3DVectorArchive\022=\n"
    "\030tschchartinfoline3dscale\030\260\002 \001(\0132\032.TSCH."
    "Chart3DVectorArchive\022=\n\030tschchartinfoare"
    "a3dscale\030\261\002 \001(\0132\032.TSCH.Chart3DVectorArch"
    "ive\022<\n\027tschchartinfopie3dscale\030\262\002 \001(\0132\032."
    "TSCH.Chart3DVectorArchive\022C\n\036tschchartin"
    "fodefault3dviewport\030\271\002 \001(\0132\032.TSCH.Chart3"
    "DVectorArchive\022]\n/tschchartinfodefaultde"
    "precated3dlightingpackage\030\300\002 \001(\0132#.TSCH."
    "Chart3DLightingPackageArchive\022\\\n.tschcha"
    "rtinfocolumndeprecated3dlightingpackage\030"
    "\301\002 \001(\0132#.TSCH.Chart3DLightingPackageArch"
    "ive\022Y\n+tschchartinfobardeprecated3dlight"
    "ingpackage\030\302\002 \001(\0132#.TSCH.Chart3DLighting"
    "PackageArchive\022Z\n,tschchartinfolinedepre"
    "cated3dlightingpackage\030\303\002 \001(\0132#.TSCH.Cha"
    "rt3DLightingPackageArchive\022Z\n,tschcharti"
    "nfoareadeprecated3dlightingpackage\030\304\002 \001("
    "\0132#.TSCH.Chart3DLightingPackageArchive\022Y"
    "\n+tschchartinfopiedeprecated3dlightingpa"
    "ckage\030\305\002 \001(\0132#.TSCH.Chart3DLightingPacka"
    "geArchive\022+\n\"tschchartinfodefaultskiphid"
    "dendata\030\306\002 \001(\010\022)\n tschchartinfodefault3d"
    "beveledges\030\307\002 \001(\010\022\'\n\036tschchartinfodefaul"
    "t3dbarshape\030\320\002 \001(\005\022/\n&tschchartinfodefau"
    "lt3dintersetdepthgap\030\313\002 \001(\002\"\277\002\n\022LegendSt"
    "yleArchive\022 \n\005super\030\001 \002(\0132\021.TSS.StyleArc"
    "hive\0224\n\032tschlegendmodeldefaultfill\030\n \001(\013"
    "2\020.TSD.FillArchive\0228\n\034tschlegendmodeldef"
    "aultstroke\030\013 \001(\0132\022.TSD.StrokeArchive\0228\n\034"
    "tschlegendmodeldefaultshadow\030\016 \001(\0132\022.TSD"
    ".ShadowArchive\022%\n\035tschlegendmodeldefault"
    "opacity\030\017 \001(\002\0226\n.tschlegendmodeldefaultl"
    "abelparagraphstyleindex\030\020 \001(\005\"9\n\025LegendN"
    "onStyleArchive\022 \n\005super\030\001 \002(\0132\021.TSS.Styl"
    "eArchive\"\255\021\n\025ChartAxisStyleArchive\022 \n\005su"
    "per\030\001 \002(\0132\021.TSS.StyleArchive\022,\n$tschchar"
    "taxisvalueshowmajorgridlines\030\n \001(\010\022,\n$ts"
    "chchartaxisvalueshowminorgridlines\030\013 \001(\010"
    "\022A\n%tschchartaxisvaluemajorgridlinestrok"
    "e\030\014 \001(\0132\022.TSD.StrokeArchive\022A\n%tschchart"
    "axisvalueminorgridlinestroke\030\r \001(\0132\022.TSD"
    ".StrokeArchive\022*\n\"tschchartaxisvaluetick"
    "marklocation\030\016 \001(\005\022,\n$tschchartaxisvalue"
    "showmajortickmarks\030\017 \001(\010\022,\n$tschchartaxi"
    "svalueshowminortickmarks\030\020 \001(\010\022+\n#tschch"
    "artaxisvaluelabelsorientation\030\021 \001(\002\022*\n\"t"
    "schchartaxisvalueshowminimumlabel\030\022 \001(\010\022"
    "A\n%tschchartaxisvaluemajorgridlineshadow"
    "\030\025 \001(\0132\022.TSD.ShadowArchive\022A\n%tschcharta"
    "xisvalueminorgridlineshadow\030\026 \001(\0132\022.TSD."
    "ShadowArchive\022.\n&tschchartaxisvaluemajor"
    "gridlineopacity\030\027 \001(\002\022.\n&tschchartaxisva"
    "lueminorgridlineopacity\030\030 \001(\002\022\"\n\032tschcha"
    "rtaxisvalueshowaxis\030\031 \001(\010\022/\n\'tschchartax"
    "iscategoryshowmajorgridlines\0302 \001(\010\022/\n\'ts"
    "chchartaxiscategoryshowminorgridlines\0303 "
    "\001(\010\022D\n(tschchartaxiscategorymajorgridlin"
    "estroke\0304 \001(\0132\022.TSD.StrokeArchive\022D\n(tsc"
    "hchartaxiscategoryminorgridlinestroke\0305 "
    "\001(\0132\022.TSD.StrokeArchive\022-\n%tschchartaxis"
    "categorytickmarklocation\0306 \001(\005\022/\n\'tschch"
    "artaxiscategoryshowmajortickmarks\0307 \001(\010\022"
    "/\n\'tschchartaxiscategoryshowminortickmar"
    "ks\0308 \001(\010\022.\n&tschchartaxiscategorylabelso"
    "rientation\0309 \001(\002\022.\n&tschchartaxiscategor"
    "yhorizontalspacing\030: \001(\005\022,\n$tschchartaxi"
    "scategoryverticalspacing\030; \001(\005\022*\n\"tschch"
    "artaxiscategoryshowlastlabel\030< \001(\010\022D\n(ts"
    "chchartaxiscategorymajorgridlineshadow\030\?"
    " \001(\0132\022.TSD.ShadowArchive\022D\n(tschchartaxi"
    "scategoryminorgridlineshadow\030@ \001(\0132\022.TSD"
    ".ShadowArchive\0221\n)tschchartaxiscategorym"
    "ajorgridlineopacity\030A \001(\002\0221\n)tschchartax"
    "iscategoryminorgridlineopacity\030B \001(\002\022%\n\035"
    "tschchartaxiscategoryshowaxis\030C \001(\010\022-\n%t"
    "schchartaxisdefaultlabelsorientation\030f \001"
    "(\002\0224\n,tschchartaxisdefaulttitleparagraph"
    "styleindex\030n \001(\005\0224\n,tschchartaxisdefault"
    "labelparagraphstyleindex\030o \001(\005\0222\n*tschch"
    "artaxisvaluetitleparagraphstyleindex\030p \001"
    "(\005\0222\n*tschchartaxisvaluelabelparagraphst"
    "yleindex\030q \001(\005\0225\n-tschchartaxiscategoryt"
    "itleparagraphstyleindex\030r \001(\005\0225\n-tschcha"
    "rtaxiscategorylabelparagraphstyleindex\030s"
    " \001(\005\022\?\n\"tschchartaxisvalue3dgridlinestro"
    "ke\030\313\002 \001(\0132\022.TSD.StrokeArchive\022B\n%tschcha"
    "rtaxiscategory3dgridlinestroke\030\314\002 \001(\0132\022."
    "TSD.StrokeArchive\022,\n#tschchartaxisvalue3"
    "dgridlineopacity\030\315\002 \001(\002\022/\n&tschchartaxis"
    "category3dgridlineopacity\030\316\002 \001(\002\"\214\007\n\030Cha"
    "rtAxisNonStyleArchive\022 \n\005super\030\001 \002(\0132\021.T"
    "SS.StyleArchive\022F\n\033tschchartaxisdefaultu"
    "sermin\030\013 \001(\0132!.TSCH.ChartsNSNumberDouble"
    "Archive\022F\n\033tschchartaxisdefaultusermax\030\014"
    " \001(\0132!.TSCH.ChartsNSNumberDoubleArchive\022"
    "P\n tschchartaxisdefaultnumberformat\030\r \001("
    "\0132&.TSCH.PreUFF.ChartsNumberFormatArchiv"
    "e\022&\n\036tschchartaxisdefaultshowlabels\030\016 \001("
    "\010\0220\n(tschchartaxisvaluenumberofminorgrid"
    "lines\0302 \001(\005\022\037\n\027tschchartaxisvaluescale\0303"
    " \001(\005\022)\n!tschchartaxisvaluenumberofdecade"
    "s\0304 \001(\005\022$\n\034tschchartaxisvalueshowlabels\030"
    "5 \001(\010\022#\n\033tschchartaxisvalueshowtitle\0306 \001"
    "(\010\0220\n(tschchartaxisvaluenumberofmajorgri"
    "dlines\0307 \001(\005\022\037\n\027tschchartaxisvaluetitle\030"
    "8 \001(\t\022\'\n\037tschchartaxiscategoryshowlabels"
    "\030d \001(\010\022-\n%tschchartaxiscategoryshowserie"
    "slabels\030e \001(\010\022&\n\036tschchartaxiscategorysh"
    "owtitle\030f \001(\010\022\"\n\032tschchartaxiscategoryti"
    "tle\030g \001(\t\022,\n$tschchartaxisdefaultnumberf"
    "ormattype\030x \001(\005\022,\n#tschchartaxisdefault3"
    "dlabelposition\030\320\002 \001(\005\022(\n tschchartaxisca"
    "tegoryplottoedges\030t \001(\010\"\342/\n\027ChartSeriesS"
    "tyleArchive\022 \n\005super\030\001 \002(\0132\021.TSS.StyleAr"
    "chive\022C\n:tschchartseriesdefaulttrendline"
    "equationparagraphstyleindex\030\311\001 \001(\005\022C\n:ts"
    "chchartseriesdefaulttrendlinersquaredpar"
    "agraphstyleindex\030\312\001 \001(\005\0227\n.tschchartseri"
    "esdefaulttrendlineequationopacity\030\315\001 \001(\002"
    "\0227\n.tschchartseriesdefaulttrendlinersqua"
    "redopacity\030\316\001 \001(\002\0220\n\026tschchartseriesbarf"
    "ill\030\n \001(\0132\020.TSD.FillArchive\0224\n\030tschchart"
    "seriesbarstroke\030\013 \001(\0132\022.TSD.StrokeArchiv"
    "e\022,\n$tschchartseriesbarvaluelabelpositio"
    "n\030\r \001(\005\0225\n\031tschchartserieslinestroke\030\020 \001"
    "(\0132\022.TSD.StrokeArchive\0227\n\035tschchartserie"
    "slinesymbolfill\030\021 \001(\0132\020.TSD.FillArchive\022"
    ";\n\037tschchartserieslinesymbolstroke\030\022 \001(\013"
    "2\022.TSD.StrokeArchive\022%\n\035tschchartseriesl"
    "inesymbolsize\030\024 \001(\002\022-\n%tschchartseriesli"
    "nevaluelabelposition\030\026 \001(\005\0221\n\027tschcharts"
    "eriesareafill\030\031 \001(\0132\020.TSD.FillArchive\0225\n"
    "\031tschchartseriesareastroke\030\032 \001(\0132\022.TSD.S"
    "trokeArchive\022-\n%tschchartseriesareavalue"
    "labelposition\030\034 \001(\005\0227\n\035tschchartseriesar"
    "easymbolfill\030\035 \001(\0132\020.TSD.FillArchive\022;\n\037"
    "tschchartseriesareasymbolstroke\030\036 \001(\0132\022."
    "TSD.StrokeArchive\022%\n\035tschchartseriesarea"
    "symbolsize\030  \001(\002\0220\n\026tschchartseriespiefi"
    "ll\030# \001(\0132\020.TSD.FillArchive\0224\n\030tschcharts"
    "eriespiestroke\030$ \001(\0132\022.TSD.StrokeArchive"
    "\0228\n\034tschchartseriesscatterstroke\030( \001(\0132\022"
    ".TSD.StrokeArchive\022:\n tschchartseriessca"
    "ttersymbolfill\030) \001(\0132\020.TSD.FillArchive\022>"
    "\n\"tschchartseriesscattersymbolstroke\030* \001"
    "(\0132\022.TSD.StrokeArchive\022(\n tschchartserie"
    "sscattersymbolsize\030, \001(\002\0220\n(tschchartser"
    "iesscattervaluelabelposition\030. \001(\005\0224\n\032ts"
    "chchartseriesdefaultfill\0302 \001(\0132\020.TSD.Fil"
    "lArchive\0220\n(tschchartseriesdefaultvaluel"
    "abelposition\0304 \001(\005\0222\n*tschchartseriespie"
    "deprecatedserieslabelson\030< \001(\010\0223\n\031tschch"
    "artseriescolumnfill\030> \001(\0132\020.TSD.FillArch"
    "ive\0224\n\030tschchartseriespieshadow\030d \001(\0132\022."
    "TSD.ShadowArchive\0224\n\030tschchartseriesbars"
    "hadow\030e \001(\0132\022.TSD.ShadowArchive\0225\n\031tschc"
    "hartseriesareashadow\030f \001(\0132\022.TSD.ShadowA"
    "rchive\0228\n\034tschchartseriesscattershadow\030g"
    " \001(\0132\022.TSD.ShadowArchive\022:\n\036tschchartser"
    "iesmixedlineshadow\030h \001(\0132\022.TSD.ShadowArc"
    "hive\022:\n\036tschchartseriesmixedareashadow\030i"
    " \001(\0132\022.TSD.ShadowArchive\022<\n tschchartser"
    "iesmixedcolumnshadow\030j \001(\0132\022.TSD.ShadowA"
    "rchive\0225\n\031tschchartserieslineshadow\030k \001("
    "\0132\022.TSD.ShadowArchive\0228\n\034tschchartseries"
    "defaultshadow\030l \001(\0132\022.TSD.ShadowArchive\022"
    ":\n\037tschchartseriesbubblesymbolfill\030\317\001 \001("
    "\0132\020.TSD.FillArchive\0228\n\033tschchartseriesbu"
    "bblestroke\030\323\001 \001(\0132\022.TSD.StrokeArchive\022>\n"
    "!tschchartseriesbubblesymbolstroke\030\324\001 \001("
    "\0132\022.TSD.StrokeArchive\0220\n\'tschchartseries"
    "bubblevaluelabelposition\030\325\001 \001(\005\0228\n\033tschc"
    "hartseriesbubbleshadow\030\326\001 \001(\0132\022.TSD.Shad"
    "owArchive\0227\n.tschchartseriesbubblesymbol"
    "filluseseriesstroke\030\327\001 \001(\010\0227\n\032tschcharts"
    "eries3dbarshadow\030\262\002 \001(\0132\022.TSD.ShadowArch"
    "ive\022:\n\035tschchartseries3dcolumnshadow\030\263\002 "
    "\001(\0132\022.TSD.ShadowArchive\0228\n\033tschchartseri"
    "es3dlineshadow\030\264\002 \001(\0132\022.TSD.ShadowArchiv"
    "e\0228\n\033tschchartseries3dareashadow\030\265\002 \001(\0132"
    "\022.TSD.ShadowArchive\0227\n\032tschchartseries3d"
    "pieshadow\030\266\002 \001(\0132\022.TSD.ShadowArchive\0226\n."
    "tschchartseriesdefaultlabelparagraphstyl"
    "eindex\030n \001(\005\0222\n*tschchartseriesbarlabelp"
    "aragraphstyleindex\030o \001(\005\0223\n+tschchartser"
    "ieslinelabelparagraphstyleindex\030p \001(\005\0223\n"
    "+tschchartseriesarealabelparagraphstylei"
    "ndex\030q \001(\005\0222\n*tschchartseriespielabelpar"
    "agraphstyleindex\030r \001(\005\0224\n,tschchartserie"
    "smixedlabelparagraphstyleindex\030s \001(\005\022%\n\035"
    "tschchartseriesdefaultopacity\030t \001(\002\0224\n,t"
    "schchartserieslinesymbolfilluseseriesstr"
    "oke\030u \001(\010\0224\n,tschchartseriesareasymbolfi"
    "lluseseriesstroke\030v \001(\010\0227\n/tschchartseri"
    "esscattersymbolfilluseseriesstroke\030w \001(\010"
    "\0229\n1tschchartseriesmixedlinesymbolfillus"
    "eseriesstroke\030x \001(\010\0229\n1tschchartseriesmi"
    "xedareasymbolfilluseseriesstroke\030y \001(\010\0222"
    "\n*tschchartserieslinesymbolfilluseseries"
    "fill\030z \001(\010\0222\n*tschchartseriesareasymbolf"
    "illuseseriesfill\030{ \001(\010\0227\n/tschchartserie"
    "smixedlinesymbolfilluseseriesfill\030| \001(\010\022"
    "7\n/tschchartseriesmixedareasymbolfilluse"
    "seriesfill\030} \001(\010\0229\n\036tschchartseriesmixed"
    "columnfill\030\202\001 \001(\0132\020.TSD.FillArchive\0227\n\034t"
    "schchartseriesmixedareafill\030\203\001 \001(\0132\020.TSD"
    ".FillArchive\022=\n tschchartseriesmixedcolu"
    "mnstroke\030\204\001 \001(\0132\022.TSD.StrokeArchive\022;\n\036t"
    "schchartseriesmixedlinestroke\030\205\001 \001(\0132\022.T"
    "SD.StrokeArchive\022;\n\036tschchartseriesmixed"
    "areastroke\030\206\001 \001(\0132\022.TSD.StrokeArchive\022+\n"
    "\"tschchartseriesmixedlinesymbolsize\030\207\001 \001"
    "(\002\022+\n\"tschchartseriesmixedareasymbolsize"
    "\030\210\001 \001(\002\022=\n\"tschchartseriesmixedlinesymbo"
    "lfill\030\211\001 \001(\0132\020.TSD.FillArchive\022=\n\"tschch"
    "artseriesmixedareasymbolfill\030\212\001 \001(\0132\020.TS"
    "D.FillArchive\022A\n$tschchartseriesmixedlin"
    "esymbolstroke\030\213\001 \001(\0132\022.TSD.StrokeArchive"
    "\022A\n$tschchartseriesmixedareasymbolstroke"
    "\030\214\001 \001(\0132\022.TSD.StrokeArchive\0225\n,tschchart"
    "seriesmixedcolumnvaluelabelposition\030\215\001 \001"
    "(\005\0223\n*tschchartseriesmixedlinevaluelabel"
    "position\030\216\001 \001(\005\0223\n*tschchartseriesmixeda"
    "reavaluelabelposition\030\217\001 \001(\005\022>\n5tschchar"
    "tseriesdefaultoutsidelabelparagraphstyle"
    "index\030\226\001 \001(\005\022:\n1tschchartseriesbaroutsid"
    "elabelparagraphstyleindex\030\227\001 \001(\005\022;\n2tsch"
    "chartseriesareaoutsidelabelparagraphstyl"
    "eindex\030\231\001 \001(\005\022:\n1tschchartseriespieoutsi"
    "delabelparagraphstyleindex\030\232\001 \001(\005\022<\n3tsc"
    "hchartseriesmixedoutsidelabelparagraphst"
    "yleindex\030\233\001 \001(\005\0224\n+tschchartseriesstacke"
    "dbarvaluelabelposition\030\234\001 \001(\005\0225\n,tschcha"
    "rtseriesstackedareavaluelabelposition\030\235\001"
    " \001(\005\022B\n%tschchartseriesdefaulttrendlines"
    "troke\030\247\001 \001(\0132\022.TSD.StrokeArchive\022B\n%tsch"
    "chartseriesdefaulttrendlineshadow\030\250\001 \001(\013"
    "2\022.TSD.ShadowArchive\022A\n$tschchartseriesd"
    "efaulterrorbarshadow\030\264\001 \001(\0132\022.TSD.Shadow"
    "Archive\022A\n$tschchartseriesdefaulterrorba"
    "rstroke\030\265\001 \001(\0132\022.TSD.StrokeArchive\022I\n,ts"
    "chchartseriesdefaulterrorbarstrokescatte"
    "rx\030\266\001 \001(\0132\022.TSD.StrokeArchive\022C\n%tschcha"
    "rtseriesdefaulterrorbarlineend\030\267\001 \001(\0132\023."
    "TSD.LineEndArchive\022K\n-tschchartseriesdef"
    "aulterrorbarlineendscatterx\030\270\001 \001(\0132\023.TSD"
    ".LineEndArchive\022S\n&tschchartseriesdefaul"
    "tdeprecated3dfill\030\254\002 \001(\0132\".TSCH.DEPRECAT"
    "EDChart3DFillArchive\022O\n\"tschchartseriesb"
    "ardeprecated3dfill\030\255\002 \001(\0132\".TSCH.DEPRECA"
    "TEDChart3DFillArchive\022R\n%tschchartseries"
    "columndeprecated3dfill\030\256\002 \001(\0132\".TSCH.DEP"
    "RECATEDChart3DFillArchive\022P\n#tschchartse"
    "rieslinedeprecated3dfill\030\257\002 \001(\0132\".TSCH.D"
    "EPRECATEDChart3DFillArchive\022P\n#tschchart"
    "seriesareadeprecated3dfill\030\260\002 \001(\0132\".TSCH"
    ".DEPRECATEDChart3DFillArchive\022O\n\"tschcha"
    "rtseriespiedeprecated3dfill\030\261\002 \001(\0132\".TSC"
    "H.DEPRECATEDChart3DFillArchive\0223\n\030tschch"
    "artseries3dbarfill\030\300\002 \001(\0132\020.TSD.FillArch"
    "ive\0226\n\033tschchartseries3dcolumnfill\030\301\002 \001("
    "\0132\020.TSD.FillArchive\0224\n\031tschchartseries3d"
    "linefill\030\302\002 \001(\0132\020.TSD.FillArchive\0224\n\031tsc"
    "hchartseries3dareafill\030\303\002 \001(\0132\020.TSD.Fill"
    "Archive\0223\n\030tschchartseries3dpiefill\030\304\002 \001"
    "(\0132\020.TSD.FillArchive\"\344\032\n\032ChartSeriesNonS"
    "tyleArchive\022 \n\005super\030\001 \002(\0132\021.TSS.StyleAr"
    "chive\022R\n\"tschchartseriesdefaultnumberfor"
    "mat\030\n \001(\0132&.TSCH.PreUFF.ChartsNumberForm"
    "atArchive\022.\n&tschchartseriesdefaultnumbe"
    "rformattype\030\013 \001(\005\022)\n!tschchartseriesbars"
    "howvaluelabels\030\014 \001(\010\022%\n\035tschchartseriesl"
    "inesymboltype\030\023 \001(\005\022%\n\035tschchartseriesli"
    "neshowsymbol\030\024 \001(\010\022*\n\"tschchartserieslin"
    "eshowvaluelabels\030\025 \001(\010\022*\n\"tschchartserie"
    "sareashowvaluelabels\030\033 \001(\010\022#\n\033tschcharts"
    "erieslinelinetype\030\036 \001(\005\022%\n\035tschchartseri"
    "esareasymboltype\030\037 \001(\005\022%\n\035tschchartserie"
    "sareashowsymbol\030  \001(\010\022)\n!tschchartseries"
    "pieshowvaluelabels\030% \001(\010\022-\n%tschchartser"
    "iesscattershowvaluelabels\030- \001(\010\022(\n tschc"
    "hartseriespiewedgeexplosion\0302 \001(\002\022-\n%tsc"
    "hchartseriesdefaultshowvaluelabels\0303 \001(\010"
    "\022N\n\036tschchartseriespienumberformat\0304 \001(\013"
    "2&.TSCH.PreUFF.ChartsNumberFormatArchive"
    "\022*\n\"tschchartseriespienumberformattype\0305"
    " \001(\005\022(\n tschchartseriespielabelexplosion"
    "\0306 \001(\002\022*\n\"tschchartseriesmixedlineshowsy"
    "mbol\030: \001(\010\022*\n\"tschchartseriesmixedareash"
    "owsymbol\030; \001(\010\022*\n\"tschchartseriesmixedli"
    "nesymboltype\030< \001(\005\022*\n\"tschchartseriesmix"
    "edareasymboltype\030= \001(\005\022+\n#tschchartserie"
    "smixedshowvaluelabels\030> \001(\010\022(\n tschchart"
    "seriesmixedlinelinetype\030\? \001(\005\022*\n\"tschcha"
    "rtseriesdefaultyaxisordinal\030A \001(\005\022*\n\"tsc"
    "hchartseriespieshowserieslabels\030B \001(\010\022(\n"
    " tschchartseriesscattershowsymbol\030E \001(\010\022"
    "(\n tschchartseriesscattersymboltype\030F \001("
    "\005\022&\n\036tschchartseriesscatterlinetype\030G \001("
    "\005\022&\n\036tschchartseriesscattershowline\030H \001("
    "\010\022Y\n)tschchartseriesstackedpercentnumber"
    "format\030Z \001(\0132&.TSCH.PreUFF.ChartsNumberF"
    "ormatArchive\022(\n tschchartseriesdefaultse"
    "riestype\030~ \001(\005\022,\n#tschchartseriesdefault"
    "trendlinetype\030\240\001 \001(\005\022-\n$tschchartseriesd"
    "efaulttrendlineorder\030\241\001 \001(\005\022.\n%tschchart"
    "seriesdefaulttrendlineperiod\030\242\001 \001(\005\0221\n(t"
    "schchartseriesdefaulttrendlineshowlabel\030"
    "\243\001 \001(\010\0223\n*tschchartseriesdefaulttrendlin"
    "elabelstring\030\244\001 \001(\t\0224\n+tschchartseriesde"
    "faulttrendlineshowequation\030\245\001 \001(\010\0223\n*tsc"
    "hchartseriesdefaulttrendlineshowr2value\030"
    "\246\001 \001(\010\022.\n%tschchartseriesdefaulterrorbar"
    "setting\030\252\001 \001(\005\0226\n-tschchartseriesdefault"
    "errorbarsettingscatterx\030\253\001 \001(\005\022+\n\"tschch"
    "artseriesdefaulterrorbartype\030\254\001 \001(\005\0223\n*t"
    "schchartseriesdefaulterrorbartypescatter"
    "x\030\255\001 \001(\005\0221\n(tschchartseriesdefaulterrorb"
    "arfixedvalue\030\256\001 \001(\002\0229\n0tschchartseriesde"
    "faulterrorbarfixedvaluescatterx\030\257\001 \001(\002\0223"
    "\n*tschchartseriesdefaulterrorbarpercentv"
    "alue\030\260\001 \001(\002\022;\n2tschchartseriesdefaulterr"
    "orbarpercentvaluescatterx\030\261\001 \001(\002\0222\n)tsch"
    "chartseriesdefaulterrorbarstddevvalue\030\262\001"
    " \001(\002\022:\n1tschchartseriesdefaulterrorbarst"
    "ddevvaluescatterx\030\263\001 \001(\002\022e\n0tschchartser"
    "iesdefaulterrorbarcustompositivedata\030\276\001 "
    "\001(\0132*.TSCH.ChartsNSArrayOfNSNumberDouble"
    "Archive\022m\n8tschchartseriesdefaulterrorba"
    "rcustompositivedatascatterx\030\277\001 \001(\0132*.TSC"
    "H.ChartsNSArrayOfNSNumberDoubleArchive\022e"
    "\n0tschchartseriesdefaulterrorbarcustomne"
    "gativedata\030\300\001 \001(\0132*.TSCH.ChartsNSArrayOf"
    "NSNumberDoubleArchive\022m\n8tschchartseries"
    "defaulterrorbarcustomnegativedatascatter"
    "x\030\301\001 \001(\0132*.TSCH.ChartsNSArrayOfNSNumberD"
    "oubleArchive\0227\n.tschchartseriesdefaulttr"
    "endlineequationoffsetx\030\302\001 \001(\002\0227\n.tschcha"
    "rtseriesdefaulttrendlineequationoffsety\030"
    "\303\001 \001(\002\0227\n.tschchartseriesdefaulttrendlin"
    "ersquaredoffsetx\030\304\001 \001(\002\0227\n.tschchartseri"
    "esdefaulttrendlinersquaredoffsety\030\305\001 \001(\002"
    "\022,\n#tschchartseriesdefaultshowtrendline\030"
    "\306\001 \001(\010\022+\n\"tschchartseriesdefaultshowerro"
    "rbar\030\307\001 \001(\010\0223\n*tschchartseriesdefaultsho"
    "werrorbarscatterx\030\310\001 \001(\010\022+\n\"tschchartser"
    "iesbubblesizedimension\030\320\001 \001(\005\022-\n$tschcha"
    "rtseriesbubbleshowvaluelabels\030\321\001 \001(\010\022&\n\035"
    "tschchartseriesbubblelinetype\030\322\001 \001(\005\022.\n%"
    "tschchartseriesbubbleshownegativedata\030\330\001"
    " \001(\010\022-\n$tschchartseriesbubbleadjustments"
    "cale\030\331\001 \001(\002", 19531);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TSCHPreUFFArchives.proto", &protobuf_RegisterTypes);
  ChartInfoArchive::default_instance_ = new ChartInfoArchive();
  LegendModelArchive::default_instance_ = new LegendModelArchive();
  ChartModelArchive::default_instance_ = new ChartModelArchive();
  ChartGridArchive::default_instance_ = new ChartGridArchive();
  ChartGridArchive_ValueRow::default_instance_ = new ChartGridArchive_ValueRow();
  ChartsNumberFormatArchive::default_instance_ = new ChartsNumberFormatArchive();
  ChartStyleArchive::default_instance_ = new ChartStyleArchive();
  ChartNonStyleArchive::default_instance_ = new ChartNonStyleArchive();
  LegendStyleArchive::default_instance_ = new LegendStyleArchive();
  LegendNonStyleArchive::default_instance_ = new LegendNonStyleArchive();
  ChartAxisStyleArchive::default_instance_ = new ChartAxisStyleArchive();
  ChartAxisNonStyleArchive::default_instance_ = new ChartAxisNonStyleArchive();
  ChartSeriesStyleArchive::default_instance_ = new ChartSeriesStyleArchive();
  ChartSeriesNonStyleArchive::default_instance_ = new ChartSeriesNonStyleArchive();
  ChartInfoArchive::default_instance_->InitAsDefaultInstance();
  LegendModelArchive::default_instance_->InitAsDefaultInstance();
  ChartModelArchive::default_instance_->InitAsDefaultInstance();
  ChartGridArchive::default_instance_->InitAsDefaultInstance();
  ChartGridArchive_ValueRow::default_instance_->InitAsDefaultInstance();
  ChartsNumberFormatArchive::default_instance_->InitAsDefaultInstance();
  ChartStyleArchive::default_instance_->InitAsDefaultInstance();
  ChartNonStyleArchive::default_instance_->InitAsDefaultInstance();
  LegendStyleArchive::default_instance_->InitAsDefaultInstance();
  LegendNonStyleArchive::default_instance_->InitAsDefaultInstance();
  ChartAxisStyleArchive::default_instance_->InitAsDefaultInstance();
  ChartAxisNonStyleArchive::default_instance_->InitAsDefaultInstance();
  ChartSeriesStyleArchive::default_instance_->InitAsDefaultInstance();
  ChartSeriesNonStyleArchive::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TSCHPreUFFArchives_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TSCHPreUFFArchives_2eproto {
  StaticDescriptorInitializer_TSCHPreUFFArchives_2eproto() {
    protobuf_AddDesc_TSCHPreUFFArchives_2eproto();
  }
} static_descriptor_initializer_TSCHPreUFFArchives_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ChartInfoArchive::kSuperFieldNumber;
const int ChartInfoArchive::kChartModelFieldNumber;
const int ChartInfoArchive::kStyleFieldNumber;
const int ChartInfoArchive::kChartTypeFieldNumber;
const int ChartInfoArchive::kLegendModelFieldNumber;
const int ChartInfoArchive::kInnerChartFrameFieldNumber;
const int ChartInfoArchive::kValueAxisStylesFieldNumber;
const int ChartInfoArchive::kCategoryAxisStylesFieldNumber;
const int ChartInfoArchive::kValueAxisNonstylesFieldNumber;
const int ChartInfoArchive::kCategoryAxisNonstylesFieldNumber;
const int ChartInfoArchive::kSeriesThemeStylesFieldNumber;
const int ChartInfoArchive::kSeriesPrivateStylesFieldNumber;
const int ChartInfoArchive::kSeriesNonStylesFieldNumber;
const int ChartInfoArchive::kNonStyleFieldNumber;
const int ChartInfoArchive::kMediatorFieldNumber;
const int ChartInfoArchive::kCdePreviewOriginFieldNumber;
const int ChartInfoArchive::kChartStylePresetFieldNumber;
const int ChartInfoArchive::kParagraphStylesFieldNumber;
const int ChartInfoArchive::kLastRowSectedInTheCdeFieldNumber;
const int ChartInfoArchive::kLastColumnSectedInTheCdeFieldNumber;
const int ChartInfoArchive::kChartStylePresetIndexFieldNumber;
const int ChartInfoArchive::kNeedsCalcEngineDeferredImportActionFieldNumber;
#endif  // !_MSC_VER

ChartInfoArchive::ChartInfoArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartInfoArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSD::DrawableArchive*>(&::TSD::DrawableArchive::default_instance());
  chart_model_ = const_cast< ::TSCH::PreUFF::ChartModelArchive*>(&::TSCH::PreUFF::ChartModelArchive::default_instance());
  style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  legend_model_ = const_cast< ::TSCH::PreUFF::LegendModelArchive*>(&::TSCH::PreUFF::LegendModelArchive::default_instance());
  inner_chart_frame_ = const_cast< ::TSCH::RectArchive*>(&::TSCH::RectArchive::default_instance());
  series_private_styles_ = const_cast< ::TSCH::SparseReferenceArrayArchive*>(&::TSCH::SparseReferenceArrayArchive::default_instance());
  series_non_styles_ = const_cast< ::TSCH::SparseReferenceArrayArchive*>(&::TSCH::SparseReferenceArrayArchive::default_instance());
  non_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  mediator_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  cde_preview_origin_ = const_cast< ::TSP::Point*>(&::TSP::Point::default_instance());
  chart_style_preset_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

ChartInfoArchive::ChartInfoArchive(const ChartInfoArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartInfoArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  chart_model_ = NULL;
  style_ = NULL;
  chart_type_ = 0;
  legend_model_ = NULL;
  inner_chart_frame_ = NULL;
  series_private_styles_ = NULL;
  series_non_styles_ = NULL;
  non_style_ = NULL;
  mediator_ = NULL;
  cde_preview_origin_ = NULL;
  chart_style_preset_ = NULL;
  last_row_sected_in_the_cde_ = 0;
  last_column_sected_in_the_cde_ = 0;
  chart_style_preset_index_ = 0;
  needs_calc_engine_deferred_import_action_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartInfoArchive::~ChartInfoArchive() {
  SharedDtor();
}

void ChartInfoArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete chart_model_;
    delete style_;
    delete legend_model_;
    delete inner_chart_frame_;
    delete series_private_styles_;
    delete series_non_styles_;
    delete non_style_;
    delete mediator_;
    delete cde_preview_origin_;
    delete chart_style_preset_;
  }
}

void ChartInfoArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartInfoArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartInfoArchive_descriptor_;
}

const ChartInfoArchive& ChartInfoArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHPreUFFArchives_2eproto();
  return *default_instance_;
}

ChartInfoArchive* ChartInfoArchive::default_instance_ = NULL;

ChartInfoArchive* ChartInfoArchive::New() const {
  return new ChartInfoArchive;
}

void ChartInfoArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSD::DrawableArchive::Clear();
    }
    if (has_chart_model()) {
      if (chart_model_ != NULL) chart_model_->::TSCH::PreUFF::ChartModelArchive::Clear();
    }
    if (has_style()) {
      if (style_ != NULL) style_->::TSP::Reference::Clear();
    }
    chart_type_ = 0;
    if (has_legend_model()) {
      if (legend_model_ != NULL) legend_model_->::TSCH::PreUFF::LegendModelArchive::Clear();
    }
    if (has_inner_chart_frame()) {
      if (inner_chart_frame_ != NULL) inner_chart_frame_->::TSCH::RectArchive::Clear();
    }
  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (has_series_private_styles()) {
      if (series_private_styles_ != NULL) series_private_styles_->::TSCH::SparseReferenceArrayArchive::Clear();
    }
    if (has_series_non_styles()) {
      if (series_non_styles_ != NULL) series_non_styles_->::TSCH::SparseReferenceArrayArchive::Clear();
    }
    if (has_non_style()) {
      if (non_style_ != NULL) non_style_->::TSP::Reference::Clear();
    }
    if (has_mediator()) {
      if (mediator_ != NULL) mediator_->::TSP::Reference::Clear();
    }
    if (has_cde_preview_origin()) {
      if (cde_preview_origin_ != NULL) cde_preview_origin_->::TSP::Point::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_chart_style_preset()) {
      if (chart_style_preset_ != NULL) chart_style_preset_->::TSP::Reference::Clear();
    }
    last_row_sected_in_the_cde_ = 0;
    last_column_sected_in_the_cde_ = 0;
    chart_style_preset_index_ = 0;
    needs_calc_engine_deferred_import_action_ = false;
  }
  value_axis_styles_.Clear();
  category_axis_styles_.Clear();
  value_axis_nonstyles_.Clear();
  category_axis_nonstyles_.Clear();
  series_theme_styles_.Clear();
  paragraph_styles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartInfoArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSD.DrawableArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_chart_model;
        break;
      }

      // required .TSCH.PreUFF.ChartModelArchive chart_model = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chart_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chart_model()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_style;
        break;
      }

      // optional .TSP.Reference style = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_chart_type;
        break;
      }

      // required .TSCH.ChartType chart_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chart_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSCH::ChartType_IsValid(value)) {
            set_chart_type(static_cast< ::TSCH::ChartType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_legend_model;
        break;
      }

      // optional .TSCH.PreUFF.LegendModelArchive legend_model = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_legend_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_legend_model()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_inner_chart_frame;
        break;
      }

      // required .TSCH.RectArchive inner_chart_frame = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inner_chart_frame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inner_chart_frame()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_value_axis_styles;
        break;
      }

      // repeated .TSP.Reference value_axis_styles = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value_axis_styles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_value_axis_styles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_value_axis_styles;
        if (input->ExpectTag(66)) goto parse_category_axis_styles;
        break;
      }

      // repeated .TSP.Reference category_axis_styles = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_category_axis_styles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_category_axis_styles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_category_axis_styles;
        if (input->ExpectTag(74)) goto parse_value_axis_nonstyles;
        break;
      }

      // repeated .TSP.Reference value_axis_nonstyles = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value_axis_nonstyles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_value_axis_nonstyles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_value_axis_nonstyles;
        if (input->ExpectTag(82)) goto parse_category_axis_nonstyles;
        break;
      }

      // repeated .TSP.Reference category_axis_nonstyles = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_category_axis_nonstyles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_category_axis_nonstyles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_category_axis_nonstyles;
        if (input->ExpectTag(90)) goto parse_series_theme_styles;
        break;
      }

      // repeated .TSP.Reference series_theme_styles = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_series_theme_styles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_series_theme_styles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_series_theme_styles;
        if (input->ExpectTag(98)) goto parse_series_private_styles;
        break;
      }

      // optional .TSCH.SparseReferenceArrayArchive series_private_styles = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_series_private_styles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_series_private_styles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_series_non_styles;
        break;
      }

      // optional .TSCH.SparseReferenceArrayArchive series_non_styles = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_series_non_styles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_series_non_styles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_non_style;
        break;
      }

      // optional .TSP.Reference non_style = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_non_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_non_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_mediator;
        break;
      }

      // optional .TSP.Reference mediator = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mediator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mediator()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_cde_preview_origin;
        break;
      }

      // optional .TSP.Point cde_preview_origin = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cde_preview_origin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cde_preview_origin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_chart_style_preset;
        break;
      }

      // optional .TSP.Reference chart_style_preset = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chart_style_preset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chart_style_preset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_paragraph_styles;
        break;
      }

      // repeated .TSP.Reference paragraph_styles = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_paragraph_styles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_paragraph_styles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_paragraph_styles;
        if (input->ExpectTag(152)) goto parse_last_row_sected_in_the_cde;
        break;
      }

      // optional int32 last_row_sected_in_the_cde = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_row_sected_in_the_cde:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_row_sected_in_the_cde_)));
          set_has_last_row_sected_in_the_cde();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_last_column_sected_in_the_cde;
        break;
      }

      // optional int32 last_column_sected_in_the_cde = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_column_sected_in_the_cde:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_column_sected_in_the_cde_)));
          set_has_last_column_sected_in_the_cde();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_chart_style_preset_index;
        break;
      }

      // optional int32 chart_style_preset_index = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chart_style_preset_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chart_style_preset_index_)));
          set_has_chart_style_preset_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_needs_calc_engine_deferred_import_action;
        break;
      }

      // optional bool needs_calc_engine_deferred_import_action = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needs_calc_engine_deferred_import_action:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needs_calc_engine_deferred_import_action_)));
          set_has_needs_calc_engine_deferred_import_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChartInfoArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSD.DrawableArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSCH.PreUFF.ChartModelArchive chart_model = 2;
  if (has_chart_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->chart_model(), output);
  }

  // optional .TSP.Reference style = 3;
  if (has_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->style(), output);
  }

  // required .TSCH.ChartType chart_type = 4;
  if (has_chart_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->chart_type(), output);
  }

  // optional .TSCH.PreUFF.LegendModelArchive legend_model = 5;
  if (has_legend_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->legend_model(), output);
  }

  // required .TSCH.RectArchive inner_chart_frame = 6;
  if (has_inner_chart_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->inner_chart_frame(), output);
  }

  // repeated .TSP.Reference value_axis_styles = 7;
  for (int i = 0; i < this->value_axis_styles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->value_axis_styles(i), output);
  }

  // repeated .TSP.Reference category_axis_styles = 8;
  for (int i = 0; i < this->category_axis_styles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->category_axis_styles(i), output);
  }

  // repeated .TSP.Reference value_axis_nonstyles = 9;
  for (int i = 0; i < this->value_axis_nonstyles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->value_axis_nonstyles(i), output);
  }

  // repeated .TSP.Reference category_axis_nonstyles = 10;
  for (int i = 0; i < this->category_axis_nonstyles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->category_axis_nonstyles(i), output);
  }

  // repeated .TSP.Reference series_theme_styles = 11;
  for (int i = 0; i < this->series_theme_styles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->series_theme_styles(i), output);
  }

  // optional .TSCH.SparseReferenceArrayArchive series_private_styles = 12;
  if (has_series_private_styles()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->series_private_styles(), output);
  }

  // optional .TSCH.SparseReferenceArrayArchive series_non_styles = 13;
  if (has_series_non_styles()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->series_non_styles(), output);
  }

  // optional .TSP.Reference non_style = 14;
  if (has_non_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->non_style(), output);
  }

  // optional .TSP.Reference mediator = 15;
  if (has_mediator()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->mediator(), output);
  }

  // optional .TSP.Point cde_preview_origin = 16;
  if (has_cde_preview_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->cde_preview_origin(), output);
  }

  // optional .TSP.Reference chart_style_preset = 17;
  if (has_chart_style_preset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->chart_style_preset(), output);
  }

  // repeated .TSP.Reference paragraph_styles = 18;
  for (int i = 0; i < this->paragraph_styles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->paragraph_styles(i), output);
  }

  // optional int32 last_row_sected_in_the_cde = 19;
  if (has_last_row_sected_in_the_cde()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->last_row_sected_in_the_cde(), output);
  }

  // optional int32 last_column_sected_in_the_cde = 20;
  if (has_last_column_sected_in_the_cde()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->last_column_sected_in_the_cde(), output);
  }

  // optional int32 chart_style_preset_index = 21;
  if (has_chart_style_preset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->chart_style_preset_index(), output);
  }

  // optional bool needs_calc_engine_deferred_import_action = 22;
  if (has_needs_calc_engine_deferred_import_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->needs_calc_engine_deferred_import_action(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartInfoArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSD.DrawableArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSCH.PreUFF.ChartModelArchive chart_model = 2;
  if (has_chart_model()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->chart_model(), target);
  }

  // optional .TSP.Reference style = 3;
  if (has_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->style(), target);
  }

  // required .TSCH.ChartType chart_type = 4;
  if (has_chart_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->chart_type(), target);
  }

  // optional .TSCH.PreUFF.LegendModelArchive legend_model = 5;
  if (has_legend_model()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->legend_model(), target);
  }

  // required .TSCH.RectArchive inner_chart_frame = 6;
  if (has_inner_chart_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->inner_chart_frame(), target);
  }

  // repeated .TSP.Reference value_axis_styles = 7;
  for (int i = 0; i < this->value_axis_styles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->value_axis_styles(i), target);
  }

  // repeated .TSP.Reference category_axis_styles = 8;
  for (int i = 0; i < this->category_axis_styles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->category_axis_styles(i), target);
  }

  // repeated .TSP.Reference value_axis_nonstyles = 9;
  for (int i = 0; i < this->value_axis_nonstyles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->value_axis_nonstyles(i), target);
  }

  // repeated .TSP.Reference category_axis_nonstyles = 10;
  for (int i = 0; i < this->category_axis_nonstyles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->category_axis_nonstyles(i), target);
  }

  // repeated .TSP.Reference series_theme_styles = 11;
  for (int i = 0; i < this->series_theme_styles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->series_theme_styles(i), target);
  }

  // optional .TSCH.SparseReferenceArrayArchive series_private_styles = 12;
  if (has_series_private_styles()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->series_private_styles(), target);
  }

  // optional .TSCH.SparseReferenceArrayArchive series_non_styles = 13;
  if (has_series_non_styles()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->series_non_styles(), target);
  }

  // optional .TSP.Reference non_style = 14;
  if (has_non_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->non_style(), target);
  }

  // optional .TSP.Reference mediator = 15;
  if (has_mediator()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->mediator(), target);
  }

  // optional .TSP.Point cde_preview_origin = 16;
  if (has_cde_preview_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->cde_preview_origin(), target);
  }

  // optional .TSP.Reference chart_style_preset = 17;
  if (has_chart_style_preset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->chart_style_preset(), target);
  }

  // repeated .TSP.Reference paragraph_styles = 18;
  for (int i = 0; i < this->paragraph_styles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->paragraph_styles(i), target);
  }

  // optional int32 last_row_sected_in_the_cde = 19;
  if (has_last_row_sected_in_the_cde()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->last_row_sected_in_the_cde(), target);
  }

  // optional int32 last_column_sected_in_the_cde = 20;
  if (has_last_column_sected_in_the_cde()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->last_column_sected_in_the_cde(), target);
  }

  // optional int32 chart_style_preset_index = 21;
  if (has_chart_style_preset_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->chart_style_preset_index(), target);
  }

  // optional bool needs_calc_engine_deferred_import_action = 22;
  if (has_needs_calc_engine_deferred_import_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->needs_calc_engine_deferred_import_action(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartInfoArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSD.DrawableArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSCH.PreUFF.ChartModelArchive chart_model = 2;
    if (has_chart_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chart_model());
    }

    // optional .TSP.Reference style = 3;
    if (has_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->style());
    }

    // required .TSCH.ChartType chart_type = 4;
    if (has_chart_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->chart_type());
    }

    // optional .TSCH.PreUFF.LegendModelArchive legend_model = 5;
    if (has_legend_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->legend_model());
    }

    // required .TSCH.RectArchive inner_chart_frame = 6;
    if (has_inner_chart_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inner_chart_frame());
    }

  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    // optional .TSCH.SparseReferenceArrayArchive series_private_styles = 12;
    if (has_series_private_styles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->series_private_styles());
    }

    // optional .TSCH.SparseReferenceArrayArchive series_non_styles = 13;
    if (has_series_non_styles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->series_non_styles());
    }

    // optional .TSP.Reference non_style = 14;
    if (has_non_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->non_style());
    }

    // optional .TSP.Reference mediator = 15;
    if (has_mediator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mediator());
    }

    // optional .TSP.Point cde_preview_origin = 16;
    if (has_cde_preview_origin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cde_preview_origin());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .TSP.Reference chart_style_preset = 17;
    if (has_chart_style_preset()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chart_style_preset());
    }

    // optional int32 last_row_sected_in_the_cde = 19;
    if (has_last_row_sected_in_the_cde()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_row_sected_in_the_cde());
    }

    // optional int32 last_column_sected_in_the_cde = 20;
    if (has_last_column_sected_in_the_cde()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_column_sected_in_the_cde());
    }

    // optional int32 chart_style_preset_index = 21;
    if (has_chart_style_preset_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chart_style_preset_index());
    }

    // optional bool needs_calc_engine_deferred_import_action = 22;
    if (has_needs_calc_engine_deferred_import_action()) {
      total_size += 2 + 1;
    }

  }
  // repeated .TSP.Reference value_axis_styles = 7;
  total_size += 1 * this->value_axis_styles_size();
  for (int i = 0; i < this->value_axis_styles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->value_axis_styles(i));
  }

  // repeated .TSP.Reference category_axis_styles = 8;
  total_size += 1 * this->category_axis_styles_size();
  for (int i = 0; i < this->category_axis_styles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->category_axis_styles(i));
  }

  // repeated .TSP.Reference value_axis_nonstyles = 9;
  total_size += 1 * this->value_axis_nonstyles_size();
  for (int i = 0; i < this->value_axis_nonstyles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->value_axis_nonstyles(i));
  }

  // repeated .TSP.Reference category_axis_nonstyles = 10;
  total_size += 1 * this->category_axis_nonstyles_size();
  for (int i = 0; i < this->category_axis_nonstyles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->category_axis_nonstyles(i));
  }

  // repeated .TSP.Reference series_theme_styles = 11;
  total_size += 1 * this->series_theme_styles_size();
  for (int i = 0; i < this->series_theme_styles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->series_theme_styles(i));
  }

  // repeated .TSP.Reference paragraph_styles = 18;
  total_size += 2 * this->paragraph_styles_size();
  for (int i = 0; i < this->paragraph_styles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->paragraph_styles(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartInfoArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartInfoArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartInfoArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartInfoArchive::MergeFrom(const ChartInfoArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_axis_styles_.MergeFrom(from.value_axis_styles_);
  category_axis_styles_.MergeFrom(from.category_axis_styles_);
  value_axis_nonstyles_.MergeFrom(from.value_axis_nonstyles_);
  category_axis_nonstyles_.MergeFrom(from.category_axis_nonstyles_);
  series_theme_styles_.MergeFrom(from.series_theme_styles_);
  paragraph_styles_.MergeFrom(from.paragraph_styles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSD::DrawableArchive::MergeFrom(from.super());
    }
    if (from.has_chart_model()) {
      mutable_chart_model()->::TSCH::PreUFF::ChartModelArchive::MergeFrom(from.chart_model());
    }
    if (from.has_style()) {
      mutable_style()->::TSP::Reference::MergeFrom(from.style());
    }
    if (from.has_chart_type()) {
      set_chart_type(from.chart_type());
    }
    if (from.has_legend_model()) {
      mutable_legend_model()->::TSCH::PreUFF::LegendModelArchive::MergeFrom(from.legend_model());
    }
    if (from.has_inner_chart_frame()) {
      mutable_inner_chart_frame()->::TSCH::RectArchive::MergeFrom(from.inner_chart_frame());
    }
  }
  if (from._has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (from.has_series_private_styles()) {
      mutable_series_private_styles()->::TSCH::SparseReferenceArrayArchive::MergeFrom(from.series_private_styles());
    }
    if (from.has_series_non_styles()) {
      mutable_series_non_styles()->::TSCH::SparseReferenceArrayArchive::MergeFrom(from.series_non_styles());
    }
    if (from.has_non_style()) {
      mutable_non_style()->::TSP::Reference::MergeFrom(from.non_style());
    }
    if (from.has_mediator()) {
      mutable_mediator()->::TSP::Reference::MergeFrom(from.mediator());
    }
    if (from.has_cde_preview_origin()) {
      mutable_cde_preview_origin()->::TSP::Point::MergeFrom(from.cde_preview_origin());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_chart_style_preset()) {
      mutable_chart_style_preset()->::TSP::Reference::MergeFrom(from.chart_style_preset());
    }
    if (from.has_last_row_sected_in_the_cde()) {
      set_last_row_sected_in_the_cde(from.last_row_sected_in_the_cde());
    }
    if (from.has_last_column_sected_in_the_cde()) {
      set_last_column_sected_in_the_cde(from.last_column_sected_in_the_cde());
    }
    if (from.has_chart_style_preset_index()) {
      set_chart_style_preset_index(from.chart_style_preset_index());
    }
    if (from.has_needs_calc_engine_deferred_import_action()) {
      set_needs_calc_engine_deferred_import_action(from.needs_calc_engine_deferred_import_action());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartInfoArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartInfoArchive::CopyFrom(const ChartInfoArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartInfoArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000002b) != 0x0000002b) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_chart_model()) {
    if (!this->chart_model().IsInitialized()) return false;
  }
  if (has_style()) {
    if (!this->style().IsInitialized()) return false;
  }
  if (has_legend_model()) {
    if (!this->legend_model().IsInitialized()) return false;
  }
  if (has_inner_chart_frame()) {
    if (!this->inner_chart_frame().IsInitialized()) return false;
  }
  for (int i = 0; i < value_axis_styles_size(); i++) {
    if (!this->value_axis_styles(i).IsInitialized()) return false;
  }
  for (int i = 0; i < category_axis_styles_size(); i++) {
    if (!this->category_axis_styles(i).IsInitialized()) return false;
  }
  for (int i = 0; i < value_axis_nonstyles_size(); i++) {
    if (!this->value_axis_nonstyles(i).IsInitialized()) return false;
  }
  for (int i = 0; i < category_axis_nonstyles_size(); i++) {
    if (!this->category_axis_nonstyles(i).IsInitialized()) return false;
  }
  for (int i = 0; i < series_theme_styles_size(); i++) {
    if (!this->series_theme_styles(i).IsInitialized()) return false;
  }
  if (has_series_private_styles()) {
    if (!this->series_private_styles().IsInitialized()) return false;
  }
  if (has_series_non_styles()) {
    if (!this->series_non_styles().IsInitialized()) return false;
  }
  if (has_non_style()) {
    if (!this->non_style().IsInitialized()) return false;
  }
  if (has_mediator()) {
    if (!this->mediator().IsInitialized()) return false;
  }
  if (has_cde_preview_origin()) {
    if (!this->cde_preview_origin().IsInitialized()) return false;
  }
  if (has_chart_style_preset()) {
    if (!this->chart_style_preset().IsInitialized()) return false;
  }
  for (int i = 0; i < paragraph_styles_size(); i++) {
    if (!this->paragraph_styles(i).IsInitialized()) return false;
  }
  return true;
}

void ChartInfoArchive::Swap(ChartInfoArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(chart_model_, other->chart_model_);
    std::swap(style_, other->style_);
    std::swap(chart_type_, other->chart_type_);
    std::swap(legend_model_, other->legend_model_);
    std::swap(inner_chart_frame_, other->inner_chart_frame_);
    value_axis_styles_.Swap(&other->value_axis_styles_);
    category_axis_styles_.Swap(&other->category_axis_styles_);
    value_axis_nonstyles_.Swap(&other->value_axis_nonstyles_);
    category_axis_nonstyles_.Swap(&other->category_axis_nonstyles_);
    series_theme_styles_.Swap(&other->series_theme_styles_);
    std::swap(series_private_styles_, other->series_private_styles_);
    std::swap(series_non_styles_, other->series_non_styles_);
    std::swap(non_style_, other->non_style_);
    std::swap(mediator_, other->mediator_);
    std::swap(cde_preview_origin_, other->cde_preview_origin_);
    std::swap(chart_style_preset_, other->chart_style_preset_);
    paragraph_styles_.Swap(&other->paragraph_styles_);
    std::swap(last_row_sected_in_the_cde_, other->last_row_sected_in_the_cde_);
    std::swap(last_column_sected_in_the_cde_, other->last_column_sected_in_the_cde_);
    std::swap(chart_style_preset_index_, other->chart_style_preset_index_);
    std::swap(needs_calc_engine_deferred_import_action_, other->needs_calc_engine_deferred_import_action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChartInfoArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartInfoArchive_descriptor_;
  metadata.reflection = ChartInfoArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LegendModelArchive::kInfoFieldNumber;
const int LegendModelArchive::kFrameFieldNumber;
const int LegendModelArchive::kStyleFieldNumber;
const int LegendModelArchive::kNonStyleFieldNumber;
#endif  // !_MSC_VER

LegendModelArchive::LegendModelArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LegendModelArchive::InitAsDefaultInstance() {
  info_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  frame_ = const_cast< ::TSCH::RectArchive*>(&::TSCH::RectArchive::default_instance());
  style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  non_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

LegendModelArchive::LegendModelArchive(const LegendModelArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LegendModelArchive::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  frame_ = NULL;
  style_ = NULL;
  non_style_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LegendModelArchive::~LegendModelArchive() {
  SharedDtor();
}

void LegendModelArchive::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
    delete frame_;
    delete style_;
    delete non_style_;
  }
}

void LegendModelArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LegendModelArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LegendModelArchive_descriptor_;
}

const LegendModelArchive& LegendModelArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHPreUFFArchives_2eproto();
  return *default_instance_;
}

LegendModelArchive* LegendModelArchive::default_instance_ = NULL;

LegendModelArchive* LegendModelArchive::New() const {
  return new LegendModelArchive;
}

void LegendModelArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::TSP::Reference::Clear();
    }
    if (has_frame()) {
      if (frame_ != NULL) frame_->::TSCH::RectArchive::Clear();
    }
    if (has_style()) {
      if (style_ != NULL) style_->::TSP::Reference::Clear();
    }
    if (has_non_style()) {
      if (non_style_ != NULL) non_style_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LegendModelArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Reference info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_frame;
        break;
      }

      // required .TSCH.RectArchive frame = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_frame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_frame()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_style;
        break;
      }

      // required .TSP.Reference style = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_non_style;
        break;
      }

      // required .TSP.Reference non_style = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_non_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_non_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LegendModelArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Reference info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  // required .TSCH.RectArchive frame = 2;
  if (has_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->frame(), output);
  }

  // required .TSP.Reference style = 3;
  if (has_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->style(), output);
  }

  // required .TSP.Reference non_style = 4;
  if (has_non_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->non_style(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LegendModelArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Reference info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  // required .TSCH.RectArchive frame = 2;
  if (has_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->frame(), target);
  }

  // required .TSP.Reference style = 3;
  if (has_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->style(), target);
  }

  // required .TSP.Reference non_style = 4;
  if (has_non_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->non_style(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LegendModelArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.Reference info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // required .TSCH.RectArchive frame = 2;
    if (has_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->frame());
    }

    // required .TSP.Reference style = 3;
    if (has_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->style());
    }

    // required .TSP.Reference non_style = 4;
    if (has_non_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->non_style());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LegendModelArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LegendModelArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LegendModelArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LegendModelArchive::MergeFrom(const LegendModelArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::TSP::Reference::MergeFrom(from.info());
    }
    if (from.has_frame()) {
      mutable_frame()->::TSCH::RectArchive::MergeFrom(from.frame());
    }
    if (from.has_style()) {
      mutable_style()->::TSP::Reference::MergeFrom(from.style());
    }
    if (from.has_non_style()) {
      mutable_non_style()->::TSP::Reference::MergeFrom(from.non_style());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LegendModelArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LegendModelArchive::CopyFrom(const LegendModelArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LegendModelArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  if (has_frame()) {
    if (!this->frame().IsInitialized()) return false;
  }
  if (has_style()) {
    if (!this->style().IsInitialized()) return false;
  }
  if (has_non_style()) {
    if (!this->non_style().IsInitialized()) return false;
  }
  return true;
}

void LegendModelArchive::Swap(LegendModelArchive* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(frame_, other->frame_);
    std::swap(style_, other->style_);
    std::swap(non_style_, other->non_style_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LegendModelArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LegendModelArchive_descriptor_;
  metadata.reflection = LegendModelArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChartModelArchive::kInfoFieldNumber;
const int ChartModelArchive::kGridFieldNumber;
const int ChartModelArchive::kSeriesTypesFieldNumber;
const int ChartModelArchive::kScatterFormatFieldNumber;
const int ChartModelArchive::kInlineGridFieldNumber;
const int ChartModelArchive::kMultidatasetIndexFieldNumber;
#endif  // !_MSC_VER

ChartModelArchive::ChartModelArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartModelArchive::InitAsDefaultInstance() {
  info_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  grid_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  inline_grid_ = const_cast< ::TSCH::PreUFF::ChartGridArchive*>(&::TSCH::PreUFF::ChartGridArchive::default_instance());
}

ChartModelArchive::ChartModelArchive(const ChartModelArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartModelArchive::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  grid_ = NULL;
  scatter_format_ = 0u;
  inline_grid_ = NULL;
  multidataset_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartModelArchive::~ChartModelArchive() {
  SharedDtor();
}

void ChartModelArchive::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
    delete grid_;
    delete inline_grid_;
  }
}

void ChartModelArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartModelArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartModelArchive_descriptor_;
}

const ChartModelArchive& ChartModelArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHPreUFFArchives_2eproto();
  return *default_instance_;
}

ChartModelArchive* ChartModelArchive::default_instance_ = NULL;

ChartModelArchive* ChartModelArchive::New() const {
  return new ChartModelArchive;
}

void ChartModelArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::TSP::Reference::Clear();
    }
    if (has_grid()) {
      if (grid_ != NULL) grid_->::TSP::Reference::Clear();
    }
    scatter_format_ = 0u;
    if (has_inline_grid()) {
      if (inline_grid_ != NULL) inline_grid_->::TSCH::PreUFF::ChartGridArchive::Clear();
    }
    multidataset_index_ = 0u;
  }
  series_types_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartModelArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Reference info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_grid;
        break;
      }

      // required .TSP.Reference grid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_grid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_grid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_series_types;
        break;
      }

      // repeated uint32 series_types = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_series_types:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_series_types())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_series_types())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_series_types;
        if (input->ExpectTag(32)) goto parse_scatter_format;
        break;
      }

      // optional uint32 scatter_format = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scatter_format:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scatter_format_)));
          set_has_scatter_format();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_inline_grid;
        break;
      }

      // optional .TSCH.PreUFF.ChartGridArchive inline_grid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inline_grid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inline_grid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_multidataset_index;
        break;
      }

      // optional uint32 multidataset_index = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_multidataset_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &multidataset_index_)));
          set_has_multidataset_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChartModelArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Reference info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  // required .TSP.Reference grid = 2;
  if (has_grid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->grid(), output);
  }

  // repeated uint32 series_types = 3;
  for (int i = 0; i < this->series_types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->series_types(i), output);
  }

  // optional uint32 scatter_format = 4;
  if (has_scatter_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->scatter_format(), output);
  }

  // optional .TSCH.PreUFF.ChartGridArchive inline_grid = 5;
  if (has_inline_grid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->inline_grid(), output);
  }

  // optional uint32 multidataset_index = 6;
  if (has_multidataset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->multidataset_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartModelArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Reference info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  // required .TSP.Reference grid = 2;
  if (has_grid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->grid(), target);
  }

  // repeated uint32 series_types = 3;
  for (int i = 0; i < this->series_types_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->series_types(i), target);
  }

  // optional uint32 scatter_format = 4;
  if (has_scatter_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->scatter_format(), target);
  }

  // optional .TSCH.PreUFF.ChartGridArchive inline_grid = 5;
  if (has_inline_grid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->inline_grid(), target);
  }

  // optional uint32 multidataset_index = 6;
  if (has_multidataset_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->multidataset_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartModelArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.Reference info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // required .TSP.Reference grid = 2;
    if (has_grid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->grid());
    }

    // optional uint32 scatter_format = 4;
    if (has_scatter_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scatter_format());
    }

    // optional .TSCH.PreUFF.ChartGridArchive inline_grid = 5;
    if (has_inline_grid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inline_grid());
    }

    // optional uint32 multidataset_index = 6;
    if (has_multidataset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->multidataset_index());
    }

  }
  // repeated uint32 series_types = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->series_types_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->series_types(i));
    }
    total_size += 1 * this->series_types_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartModelArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartModelArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartModelArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartModelArchive::MergeFrom(const ChartModelArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  series_types_.MergeFrom(from.series_types_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::TSP::Reference::MergeFrom(from.info());
    }
    if (from.has_grid()) {
      mutable_grid()->::TSP::Reference::MergeFrom(from.grid());
    }
    if (from.has_scatter_format()) {
      set_scatter_format(from.scatter_format());
    }
    if (from.has_inline_grid()) {
      mutable_inline_grid()->::TSCH::PreUFF::ChartGridArchive::MergeFrom(from.inline_grid());
    }
    if (from.has_multidataset_index()) {
      set_multidataset_index(from.multidataset_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartModelArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartModelArchive::CopyFrom(const ChartModelArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartModelArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  if (has_grid()) {
    if (!this->grid().IsInitialized()) return false;
  }
  if (has_inline_grid()) {
    if (!this->inline_grid().IsInitialized()) return false;
  }
  return true;
}

void ChartModelArchive::Swap(ChartModelArchive* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(grid_, other->grid_);
    series_types_.Swap(&other->series_types_);
    std::swap(scatter_format_, other->scatter_format_);
    std::swap(inline_grid_, other->inline_grid_);
    std::swap(multidataset_index_, other->multidataset_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChartModelArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartModelArchive_descriptor_;
  metadata.reflection = ChartModelArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChartGridArchive_ValueRow::kValueFieldNumber;
#endif  // !_MSC_VER

ChartGridArchive_ValueRow::ChartGridArchive_ValueRow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartGridArchive_ValueRow::InitAsDefaultInstance() {
}

ChartGridArchive_ValueRow::ChartGridArchive_ValueRow(const ChartGridArchive_ValueRow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartGridArchive_ValueRow::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartGridArchive_ValueRow::~ChartGridArchive_ValueRow() {
  SharedDtor();
}

void ChartGridArchive_ValueRow::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChartGridArchive_ValueRow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartGridArchive_ValueRow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartGridArchive_ValueRow_descriptor_;
}

const ChartGridArchive_ValueRow& ChartGridArchive_ValueRow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHPreUFFArchives_2eproto();
  return *default_instance_;
}

ChartGridArchive_ValueRow* ChartGridArchive_ValueRow::default_instance_ = NULL;

ChartGridArchive_ValueRow* ChartGridArchive_ValueRow::New() const {
  return new ChartGridArchive_ValueRow;
}

void ChartGridArchive_ValueRow::Clear() {
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartGridArchive_ValueRow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(9)) goto parse_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChartGridArchive_ValueRow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated double value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartGridArchive_ValueRow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated double value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartGridArchive_ValueRow::ByteSize() const {
  int total_size = 0;

  // repeated double value = 1;
  {
    int data_size = 0;
    data_size = 8 * this->value_size();
    total_size += 1 * this->value_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartGridArchive_ValueRow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartGridArchive_ValueRow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartGridArchive_ValueRow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartGridArchive_ValueRow::MergeFrom(const ChartGridArchive_ValueRow& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartGridArchive_ValueRow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartGridArchive_ValueRow::CopyFrom(const ChartGridArchive_ValueRow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartGridArchive_ValueRow::IsInitialized() const {

  return true;
}

void ChartGridArchive_ValueRow::Swap(ChartGridArchive_ValueRow* other) {
  if (other != this) {
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChartGridArchive_ValueRow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartGridArchive_ValueRow_descriptor_;
  metadata.reflection = ChartGridArchive_ValueRow_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ChartGridArchive::kDirectionFieldNumber;
const int ChartGridArchive::kRowNameFieldNumber;
const int ChartGridArchive::kColumnNameFieldNumber;
const int ChartGridArchive::kValueRowFieldNumber;
const int ChartGridArchive::kDirtyFieldNumber;
#endif  // !_MSC_VER

ChartGridArchive::ChartGridArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartGridArchive::InitAsDefaultInstance() {
}

ChartGridArchive::ChartGridArchive(const ChartGridArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartGridArchive::SharedCtor() {
  _cached_size_ = 0;
  direction_ = 0;
  dirty_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartGridArchive::~ChartGridArchive() {
  SharedDtor();
}

void ChartGridArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChartGridArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartGridArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartGridArchive_descriptor_;
}

const ChartGridArchive& ChartGridArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHPreUFFArchives_2eproto();
  return *default_instance_;
}

ChartGridArchive* ChartGridArchive::default_instance_ = NULL;

ChartGridArchive* ChartGridArchive::New() const {
  return new ChartGridArchive;
}

void ChartGridArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    direction_ = 0;
    dirty_ = false;
  }
  row_name_.Clear();
  column_name_.Clear();
  value_row_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartGridArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 direction = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_row_name;
        break;
      }

      // repeated string row_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_row_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_row_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->row_name(this->row_name_size() - 1).data(),
            this->row_name(this->row_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_row_name;
        if (input->ExpectTag(26)) goto parse_column_name;
        break;
      }

      // repeated string column_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_column_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_column_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->column_name(this->column_name_size() - 1).data(),
            this->column_name(this->column_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_column_name;
        if (input->ExpectTag(34)) goto parse_value_row;
        break;
      }

      // repeated .TSCH.PreUFF.ChartGridArchive.ValueRow value_row = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value_row:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_value_row()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_value_row;
        if (input->ExpectTag(48)) goto parse_dirty;
        break;
      }

      // required bool dirty = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dirty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dirty_)));
          set_has_dirty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChartGridArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 direction = 1;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->direction(), output);
  }

  // repeated string row_name = 2;
  for (int i = 0; i < this->row_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->row_name(i).data(), this->row_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->row_name(i), output);
  }

  // repeated string column_name = 3;
  for (int i = 0; i < this->column_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->column_name(i).data(), this->column_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->column_name(i), output);
  }

  // repeated .TSCH.PreUFF.ChartGridArchive.ValueRow value_row = 4;
  for (int i = 0; i < this->value_row_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->value_row(i), output);
  }

  // required bool dirty = 6;
  if (has_dirty()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->dirty(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartGridArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 direction = 1;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->direction(), target);
  }

  // repeated string row_name = 2;
  for (int i = 0; i < this->row_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->row_name(i).data(), this->row_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->row_name(i), target);
  }

  // repeated string column_name = 3;
  for (int i = 0; i < this->column_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->column_name(i).data(), this->column_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->column_name(i), target);
  }

  // repeated .TSCH.PreUFF.ChartGridArchive.ValueRow value_row = 4;
  for (int i = 0; i < this->value_row_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->value_row(i), target);
  }

  // required bool dirty = 6;
  if (has_dirty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->dirty(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartGridArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 direction = 1;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->direction());
    }

    // required bool dirty = 6;
    if (has_dirty()) {
      total_size += 1 + 1;
    }

  }
  // repeated string row_name = 2;
  total_size += 1 * this->row_name_size();
  for (int i = 0; i < this->row_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->row_name(i));
  }

  // repeated string column_name = 3;
  total_size += 1 * this->column_name_size();
  for (int i = 0; i < this->column_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->column_name(i));
  }

  // repeated .TSCH.PreUFF.ChartGridArchive.ValueRow value_row = 4;
  total_size += 1 * this->value_row_size();
  for (int i = 0; i < this->value_row_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->value_row(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartGridArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartGridArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartGridArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartGridArchive::MergeFrom(const ChartGridArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  row_name_.MergeFrom(from.row_name_);
  column_name_.MergeFrom(from.column_name_);
  value_row_.MergeFrom(from.value_row_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_dirty()) {
      set_dirty(from.dirty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartGridArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartGridArchive::CopyFrom(const ChartGridArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartGridArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000011) != 0x00000011) return false;

  return true;
}

void ChartGridArchive::Swap(ChartGridArchive* other) {
  if (other != this) {
    std::swap(direction_, other->direction_);
    row_name_.Swap(&other->row_name_);
    column_name_.Swap(&other->column_name_);
    value_row_.Swap(&other->value_row_);
    std::swap(dirty_, other->dirty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChartGridArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartGridArchive_descriptor_;
  metadata.reflection = ChartGridArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChartsNumberFormatArchive::kValueTypeFieldNumber;
const int ChartsNumberFormatArchive::kFormatStringFieldNumber;
const int ChartsNumberFormatArchive::kDecimalPlacesFieldNumber;
const int ChartsNumberFormatArchive::kCurrencyCodeFieldNumber;
const int ChartsNumberFormatArchive::kNegativeStyleFieldNumber;
const int ChartsNumberFormatArchive::kShowThousandsSeparatorFieldNumber;
const int ChartsNumberFormatArchive::kFractionAccuracyFieldNumber;
const int ChartsNumberFormatArchive::kSuffixStringFieldNumber;
const int ChartsNumberFormatArchive::kBaseFieldNumber;
const int ChartsNumberFormatArchive::kBasePlacesFieldNumber;
const int ChartsNumberFormatArchive::kBaseUseMinusSignFieldNumber;
const int ChartsNumberFormatArchive::kUseAccountingStyleFieldNumber;
const int ChartsNumberFormatArchive::kIsCustomFieldNumber;
const int ChartsNumberFormatArchive::kScaleFactorFieldNumber;
const int ChartsNumberFormatArchive::kInterstitialStringsFieldNumber;
const int ChartsNumberFormatArchive::kInterstitialStringInsertionIndexesFieldNumber;
const int ChartsNumberFormatArchive::kIndexFromRightOfLastDigitPlaceholderFieldNumber;
const int ChartsNumberFormatArchive::kIsTextFormatFieldNumber;
const int ChartsNumberFormatArchive::kMinimumIntegerWidthFieldNumber;
const int ChartsNumberFormatArchive::kDecimalWidthFieldNumber;
const int ChartsNumberFormatArchive::kNumberOfNonSpaceIntegerPlaceholderDigitsFieldNumber;
const int ChartsNumberFormatArchive::kNumberOfNonSpaceDecimalPlaceholderDigitsFieldNumber;
const int ChartsNumberFormatArchive::kFormatNameFieldNumber;
const int ChartsNumberFormatArchive::kPrefixStringFieldNumber;
#endif  // !_MSC_VER

ChartsNumberFormatArchive::ChartsNumberFormatArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartsNumberFormatArchive::InitAsDefaultInstance() {
  interstitial_string_insertion_indexes_ = const_cast< ::TSP::IndexSet*>(&::TSP::IndexSet::default_instance());
}

ChartsNumberFormatArchive::ChartsNumberFormatArchive(const ChartsNumberFormatArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartsNumberFormatArchive::SharedCtor() {
  _cached_size_ = 0;
  value_type_ = 0;
  format_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  decimal_places_ = 0u;
  currency_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  negative_style_ = 0;
  show_thousands_separator_ = false;
  fraction_accuracy_ = 0;
  suffix_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  base_ = 0u;
  base_places_ = 0u;
  base_use_minus_sign_ = false;
  use_accounting_style_ = false;
  is_custom_ = false;
  scale_factor_ = 0;
  interstitial_string_insertion_indexes_ = NULL;
  index_from_right_of_last_digit_placeholder_ = 0u;
  is_text_format_ = false;
  minimum_integer_width_ = 0u;
  decimal_width_ = 0u;
  number_of_non_space_integer_placeholder_digits_ = 0u;
  number_of_non_space_decimal_placeholder_digits_ = 0u;
  format_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prefix_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartsNumberFormatArchive::~ChartsNumberFormatArchive() {
  SharedDtor();
}

void ChartsNumberFormatArchive::SharedDtor() {
  if (format_string_ != &::google::protobuf::internal::kEmptyString) {
    delete format_string_;
  }
  if (currency_code_ != &::google::protobuf::internal::kEmptyString) {
    delete currency_code_;
  }
  if (suffix_string_ != &::google::protobuf::internal::kEmptyString) {
    delete suffix_string_;
  }
  if (format_name_ != &::google::protobuf::internal::kEmptyString) {
    delete format_name_;
  }
  if (prefix_string_ != &::google::protobuf::internal::kEmptyString) {
    delete prefix_string_;
  }
  if (this != default_instance_) {
    delete interstitial_string_insertion_indexes_;
  }
}

void ChartsNumberFormatArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartsNumberFormatArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartsNumberFormatArchive_descriptor_;
}

const ChartsNumberFormatArchive& ChartsNumberFormatArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHPreUFFArchives_2eproto();
  return *default_instance_;
}

ChartsNumberFormatArchive* ChartsNumberFormatArchive::default_instance_ = NULL;

ChartsNumberFormatArchive* ChartsNumberFormatArchive::New() const {
  return new ChartsNumberFormatArchive;
}

void ChartsNumberFormatArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_type_ = 0;
    if (has_format_string()) {
      if (format_string_ != &::google::protobuf::internal::kEmptyString) {
        format_string_->clear();
      }
    }
    decimal_places_ = 0u;
    if (has_currency_code()) {
      if (currency_code_ != &::google::protobuf::internal::kEmptyString) {
        currency_code_->clear();
      }
    }
    negative_style_ = 0;
    show_thousands_separator_ = false;
    fraction_accuracy_ = 0;
    if (has_suffix_string()) {
      if (suffix_string_ != &::google::protobuf::internal::kEmptyString) {
        suffix_string_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    base_ = 0u;
    base_places_ = 0u;
    base_use_minus_sign_ = false;
    use_accounting_style_ = false;
    is_custom_ = false;
    scale_factor_ = 0;
    if (has_interstitial_string_insertion_indexes()) {
      if (interstitial_string_insertion_indexes_ != NULL) interstitial_string_insertion_indexes_->::TSP::IndexSet::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    index_from_right_of_last_digit_placeholder_ = 0u;
    is_text_format_ = false;
    minimum_integer_width_ = 0u;
    decimal_width_ = 0u;
    number_of_non_space_integer_placeholder_digits_ = 0u;
    number_of_non_space_decimal_placeholder_digits_ = 0u;
    if (has_format_name()) {
      if (format_name_ != &::google::protobuf::internal::kEmptyString) {
        format_name_->clear();
      }
    }
    if (has_prefix_string()) {
      if (prefix_string_ != &::google::protobuf::internal::kEmptyString) {
        prefix_string_->clear();
      }
    }
  }
  interstitial_strings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartsNumberFormatArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSCH.NumberValueType value_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSCH::NumberValueType_IsValid(value)) {
            set_value_type(static_cast< ::TSCH::NumberValueType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_format_string;
        break;
      }

      // optional string format_string = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_format_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_format_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->format_string().data(), this->format_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_decimal_places;
        break;
      }

      // required uint32 decimal_places = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_decimal_places:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &decimal_places_)));
          set_has_decimal_places();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_currency_code;
        break;
      }

      // optional string currency_code = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currency_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->currency_code().data(), this->currency_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_negative_style;
        break;
      }

      // required .TSCH.NegativeNumberStyle negative_style = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_negative_style:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSCH::NegativeNumberStyle_IsValid(value)) {
            set_negative_style(static_cast< ::TSCH::NegativeNumberStyle >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_show_thousands_separator;
        break;
      }

      // required bool show_thousands_separator = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_thousands_separator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_thousands_separator_)));
          set_has_show_thousands_separator();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_fraction_accuracy;
        break;
      }

      // required .TSCH.FractionAccuracy fraction_accuracy = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fraction_accuracy:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSCH::FractionAccuracy_IsValid(value)) {
            set_fraction_accuracy(static_cast< ::TSCH::FractionAccuracy >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_suffix_string;
        break;
      }

      // optional string suffix_string = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_suffix_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suffix_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->suffix_string().data(), this->suffix_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_base;
        break;
      }

      // required uint32 base = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_)));
          set_has_base();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_base_places;
        break;
      }

      // required uint32 base_places = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base_places:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_places_)));
          set_has_base_places();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_base_use_minus_sign;
        break;
      }

      // required bool base_use_minus_sign = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base_use_minus_sign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &base_use_minus_sign_)));
          set_has_base_use_minus_sign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_use_accounting_style;
        break;
      }

      // required bool use_accounting_style = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_accounting_style:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_accounting_style_)));
          set_has_use_accounting_style();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_is_custom;
        break;
      }

      // required bool is_custom = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_custom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_custom_)));
          set_has_is_custom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_scale_factor;
        break;
      }

      // required double scale_factor = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_scale_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &scale_factor_)));
          set_has_scale_factor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_interstitial_strings;
        break;
      }

      // repeated string interstitial_strings = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_interstitial_strings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_interstitial_strings()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->interstitial_strings(this->interstitial_strings_size() - 1).data(),
            this->interstitial_strings(this->interstitial_strings_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_interstitial_strings;
        if (input->ExpectTag(130)) goto parse_interstitial_string_insertion_indexes;
        break;
      }

      // required .TSP.IndexSet interstitial_string_insertion_indexes = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_interstitial_string_insertion_indexes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_interstitial_string_insertion_indexes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_index_from_right_of_last_digit_placeholder;
        break;
      }

      // required uint32 index_from_right_of_last_digit_placeholder = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index_from_right_of_last_digit_placeholder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_from_right_of_last_digit_placeholder_)));
          set_has_index_from_right_of_last_digit_placeholder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_is_text_format;
        break;
      }

      // required bool is_text_format = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_text_format:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_text_format_)));
          set_has_is_text_format();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_minimum_integer_width;
        break;
      }

      // required uint32 minimum_integer_width = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minimum_integer_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minimum_integer_width_)));
          set_has_minimum_integer_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_decimal_width;
        break;
      }

      // required uint32 decimal_width = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_decimal_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &decimal_width_)));
          set_has_decimal_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_number_of_non_space_integer_placeholder_digits;
        break;
      }

      // required uint32 number_of_non_space_integer_placeholder_digits = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number_of_non_space_integer_placeholder_digits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_non_space_integer_placeholder_digits_)));
          set_has_number_of_non_space_integer_placeholder_digits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_number_of_non_space_decimal_placeholder_digits;
        break;
      }

      // required uint32 number_of_non_space_decimal_placeholder_digits = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number_of_non_space_decimal_placeholder_digits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_non_space_decimal_placeholder_digits_)));
          set_has_number_of_non_space_decimal_placeholder_digits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_format_name;
        break;
      }

      // optional string format_name = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_format_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_format_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->format_name().data(), this->format_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_prefix_string;
        break;
      }

      // optional string prefix_string = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prefix_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prefix_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->prefix_string().data(), this->prefix_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChartsNumberFormatArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSCH.NumberValueType value_type = 1;
  if (has_value_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->value_type(), output);
  }

  // optional string format_string = 2;
  if (has_format_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->format_string().data(), this->format_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->format_string(), output);
  }

  // required uint32 decimal_places = 3;
  if (has_decimal_places()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->decimal_places(), output);
  }

  // optional string currency_code = 4;
  if (has_currency_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency_code().data(), this->currency_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->currency_code(), output);
  }

  // required .TSCH.NegativeNumberStyle negative_style = 5;
  if (has_negative_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->negative_style(), output);
  }

  // required bool show_thousands_separator = 6;
  if (has_show_thousands_separator()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->show_thousands_separator(), output);
  }

  // required .TSCH.FractionAccuracy fraction_accuracy = 7;
  if (has_fraction_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->fraction_accuracy(), output);
  }

  // optional string suffix_string = 8;
  if (has_suffix_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->suffix_string().data(), this->suffix_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->suffix_string(), output);
  }

  // required uint32 base = 9;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->base(), output);
  }

  // required uint32 base_places = 10;
  if (has_base_places()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->base_places(), output);
  }

  // required bool base_use_minus_sign = 11;
  if (has_base_use_minus_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->base_use_minus_sign(), output);
  }

  // required bool use_accounting_style = 12;
  if (has_use_accounting_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->use_accounting_style(), output);
  }

  // required bool is_custom = 13;
  if (has_is_custom()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_custom(), output);
  }

  // required double scale_factor = 14;
  if (has_scale_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->scale_factor(), output);
  }

  // repeated string interstitial_strings = 15;
  for (int i = 0; i < this->interstitial_strings_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->interstitial_strings(i).data(), this->interstitial_strings(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->interstitial_strings(i), output);
  }

  // required .TSP.IndexSet interstitial_string_insertion_indexes = 16;
  if (has_interstitial_string_insertion_indexes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->interstitial_string_insertion_indexes(), output);
  }

  // required uint32 index_from_right_of_last_digit_placeholder = 17;
  if (has_index_from_right_of_last_digit_placeholder()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->index_from_right_of_last_digit_placeholder(), output);
  }

  // required bool is_text_format = 18;
  if (has_is_text_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->is_text_format(), output);
  }

  // required uint32 minimum_integer_width = 19;
  if (has_minimum_integer_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->minimum_integer_width(), output);
  }

  // required uint32 decimal_width = 20;
  if (has_decimal_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->decimal_width(), output);
  }

  // required uint32 number_of_non_space_integer_placeholder_digits = 21;
  if (has_number_of_non_space_integer_placeholder_digits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->number_of_non_space_integer_placeholder_digits(), output);
  }

  // required uint32 number_of_non_space_decimal_placeholder_digits = 22;
  if (has_number_of_non_space_decimal_placeholder_digits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->number_of_non_space_decimal_placeholder_digits(), output);
  }

  // optional string format_name = 23;
  if (has_format_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->format_name().data(), this->format_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->format_name(), output);
  }

  // optional string prefix_string = 24;
  if (has_prefix_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prefix_string().data(), this->prefix_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->prefix_string(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartsNumberFormatArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSCH.NumberValueType value_type = 1;
  if (has_value_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->value_type(), target);
  }

  // optional string format_string = 2;
  if (has_format_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->format_string().data(), this->format_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->format_string(), target);
  }

  // required uint32 decimal_places = 3;
  if (has_decimal_places()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->decimal_places(), target);
  }

  // optional string currency_code = 4;
  if (has_currency_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency_code().data(), this->currency_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->currency_code(), target);
  }

  // required .TSCH.NegativeNumberStyle negative_style = 5;
  if (has_negative_style()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->negative_style(), target);
  }

  // required bool show_thousands_separator = 6;
  if (has_show_thousands_separator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->show_thousands_separator(), target);
  }

  // required .TSCH.FractionAccuracy fraction_accuracy = 7;
  if (has_fraction_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->fraction_accuracy(), target);
  }

  // optional string suffix_string = 8;
  if (has_suffix_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->suffix_string().data(), this->suffix_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->suffix_string(), target);
  }

  // required uint32 base = 9;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->base(), target);
  }

  // required uint32 base_places = 10;
  if (has_base_places()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->base_places(), target);
  }

  // required bool base_use_minus_sign = 11;
  if (has_base_use_minus_sign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->base_use_minus_sign(), target);
  }

  // required bool use_accounting_style = 12;
  if (has_use_accounting_style()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->use_accounting_style(), target);
  }

  // required bool is_custom = 13;
  if (has_is_custom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_custom(), target);
  }

  // required double scale_factor = 14;
  if (has_scale_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->scale_factor(), target);
  }

  // repeated string interstitial_strings = 15;
  for (int i = 0; i < this->interstitial_strings_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->interstitial_strings(i).data(), this->interstitial_strings(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(15, this->interstitial_strings(i), target);
  }

  // required .TSP.IndexSet interstitial_string_insertion_indexes = 16;
  if (has_interstitial_string_insertion_indexes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->interstitial_string_insertion_indexes(), target);
  }

  // required uint32 index_from_right_of_last_digit_placeholder = 17;
  if (has_index_from_right_of_last_digit_placeholder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->index_from_right_of_last_digit_placeholder(), target);
  }

  // required bool is_text_format = 18;
  if (has_is_text_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->is_text_format(), target);
  }

  // required uint32 minimum_integer_width = 19;
  if (has_minimum_integer_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->minimum_integer_width(), target);
  }

  // required uint32 decimal_width = 20;
  if (has_decimal_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->decimal_width(), target);
  }

  // required uint32 number_of_non_space_integer_placeholder_digits = 21;
  if (has_number_of_non_space_integer_placeholder_digits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->number_of_non_space_integer_placeholder_digits(), target);
  }

  // required uint32 number_of_non_space_decimal_placeholder_digits = 22;
  if (has_number_of_non_space_decimal_placeholder_digits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->number_of_non_space_decimal_placeholder_digits(), target);
  }

  // optional string format_name = 23;
  if (has_format_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->format_name().data(), this->format_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->format_name(), target);
  }

  // optional string prefix_string = 24;
  if (has_prefix_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prefix_string().data(), this->prefix_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->prefix_string(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartsNumberFormatArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSCH.NumberValueType value_type = 1;
    if (has_value_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->value_type());
    }

    // optional string format_string = 2;
    if (has_format_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->format_string());
    }

    // required uint32 decimal_places = 3;
    if (has_decimal_places()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->decimal_places());
    }

    // optional string currency_code = 4;
    if (has_currency_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currency_code());
    }

    // required .TSCH.NegativeNumberStyle negative_style = 5;
    if (has_negative_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->negative_style());
    }

    // required bool show_thousands_separator = 6;
    if (has_show_thousands_separator()) {
      total_size += 1 + 1;
    }

    // required .TSCH.FractionAccuracy fraction_accuracy = 7;
    if (has_fraction_accuracy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fraction_accuracy());
    }

    // optional string suffix_string = 8;
    if (has_suffix_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->suffix_string());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 base = 9;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->base());
    }

    // required uint32 base_places = 10;
    if (has_base_places()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->base_places());
    }

    // required bool base_use_minus_sign = 11;
    if (has_base_use_minus_sign()) {
      total_size += 1 + 1;
    }

    // required bool use_accounting_style = 12;
    if (has_use_accounting_style()) {
      total_size += 1 + 1;
    }

    // required bool is_custom = 13;
    if (has_is_custom()) {
      total_size += 1 + 1;
    }

    // required double scale_factor = 14;
    if (has_scale_factor()) {
      total_size += 1 + 8;
    }

    // required .TSP.IndexSet interstitial_string_insertion_indexes = 16;
    if (has_interstitial_string_insertion_indexes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->interstitial_string_insertion_indexes());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required uint32 index_from_right_of_last_digit_placeholder = 17;
    if (has_index_from_right_of_last_digit_placeholder()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index_from_right_of_last_digit_placeholder());
    }

    // required bool is_text_format = 18;
    if (has_is_text_format()) {
      total_size += 2 + 1;
    }

    // required uint32 minimum_integer_width = 19;
    if (has_minimum_integer_width()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minimum_integer_width());
    }

    // required uint32 decimal_width = 20;
    if (has_decimal_width()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->decimal_width());
    }

    // required uint32 number_of_non_space_integer_placeholder_digits = 21;
    if (has_number_of_non_space_integer_placeholder_digits()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number_of_non_space_integer_placeholder_digits());
    }

    // required uint32 number_of_non_space_decimal_placeholder_digits = 22;
    if (has_number_of_non_space_decimal_placeholder_digits()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number_of_non_space_decimal_placeholder_digits());
    }

    // optional string format_name = 23;
    if (has_format_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->format_name());
    }

    // optional string prefix_string = 24;
    if (has_prefix_string()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prefix_string());
    }

  }
  // repeated string interstitial_strings = 15;
  total_size += 1 * this->interstitial_strings_size();
  for (int i = 0; i < this->interstitial_strings_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->interstitial_strings(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartsNumberFormatArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartsNumberFormatArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartsNumberFormatArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartsNumberFormatArchive::MergeFrom(const ChartsNumberFormatArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  interstitial_strings_.MergeFrom(from.interstitial_strings_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value_type()) {
      set_value_type(from.value_type());
    }
    if (from.has_format_string()) {
      set_format_string(from.format_string());
    }
    if (from.has_decimal_places()) {
      set_decimal_places(from.decimal_places());
    }
    if (from.has_currency_code()) {
      set_currency_code(from.currency_code());
    }
    if (from.has_negative_style()) {
      set_negative_style(from.negative_style());
    }
    if (from.has_show_thousands_separator()) {
      set_show_thousands_separator(from.show_thousands_separator());
    }
    if (from.has_fraction_accuracy()) {
      set_fraction_accuracy(from.fraction_accuracy());
    }
    if (from.has_suffix_string()) {
      set_suffix_string(from.suffix_string());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_base()) {
      set_base(from.base());
    }
    if (from.has_base_places()) {
      set_base_places(from.base_places());
    }
    if (from.has_base_use_minus_sign()) {
      set_base_use_minus_sign(from.base_use_minus_sign());
    }
    if (from.has_use_accounting_style()) {
      set_use_accounting_style(from.use_accounting_style());
    }
    if (from.has_is_custom()) {
      set_is_custom(from.is_custom());
    }
    if (from.has_scale_factor()) {
      set_scale_factor(from.scale_factor());
    }
    if (from.has_interstitial_string_insertion_indexes()) {
      mutable_interstitial_string_insertion_indexes()->::TSP::IndexSet::MergeFrom(from.interstitial_string_insertion_indexes());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_index_from_right_of_last_digit_placeholder()) {
      set_index_from_right_of_last_digit_placeholder(from.index_from_right_of_last_digit_placeholder());
    }
    if (from.has_is_text_format()) {
      set_is_text_format(from.is_text_format());
    }
    if (from.has_minimum_integer_width()) {
      set_minimum_integer_width(from.minimum_integer_width());
    }
    if (from.has_decimal_width()) {
      set_decimal_width(from.decimal_width());
    }
    if (from.has_number_of_non_space_integer_placeholder_digits()) {
      set_number_of_non_space_integer_placeholder_digits(from.number_of_non_space_integer_placeholder_digits());
    }
    if (from.has_number_of_non_space_decimal_placeholder_digits()) {
      set_number_of_non_space_decimal_placeholder_digits(from.number_of_non_space_decimal_placeholder_digits());
    }
    if (from.has_format_name()) {
      set_format_name(from.format_name());
    }
    if (from.has_prefix_string()) {
      set_prefix_string(from.prefix_string());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartsNumberFormatArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartsNumberFormatArchive::CopyFrom(const ChartsNumberFormatArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartsNumberFormatArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x003fbf75) != 0x003fbf75) return false;

  if (has_interstitial_string_insertion_indexes()) {
    if (!this->interstitial_string_insertion_indexes().IsInitialized()) return false;
  }
  return true;
}

void ChartsNumberFormatArchive::Swap(ChartsNumberFormatArchive* other) {
  if (other != this) {
    std::swap(value_type_, other->value_type_);
    std::swap(format_string_, other->format_string_);
    std::swap(decimal_places_, other->decimal_places_);
    std::swap(currency_code_, other->currency_code_);
    std::swap(negative_style_, other->negative_style_);
    std::swap(show_thousands_separator_, other->show_thousands_separator_);
    std::swap(fraction_accuracy_, other->fraction_accuracy_);
    std::swap(suffix_string_, other->suffix_string_);
    std::swap(base_, other->base_);
    std::swap(base_places_, other->base_places_);
    std::swap(base_use_minus_sign_, other->base_use_minus_sign_);
    std::swap(use_accounting_style_, other->use_accounting_style_);
    std::swap(is_custom_, other->is_custom_);
    std::swap(scale_factor_, other->scale_factor_);
    interstitial_strings_.Swap(&other->interstitial_strings_);
    std::swap(interstitial_string_insertion_indexes_, other->interstitial_string_insertion_indexes_);
    std::swap(index_from_right_of_last_digit_placeholder_, other->index_from_right_of_last_digit_placeholder_);
    std::swap(is_text_format_, other->is_text_format_);
    std::swap(minimum_integer_width_, other->minimum_integer_width_);
    std::swap(decimal_width_, other->decimal_width_);
    std::swap(number_of_non_space_integer_placeholder_digits_, other->number_of_non_space_integer_placeholder_digits_);
    std::swap(number_of_non_space_decimal_placeholder_digits_, other->number_of_non_space_decimal_placeholder_digits_);
    std::swap(format_name_, other->format_name_);
    std::swap(prefix_string_, other->prefix_string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChartsNumberFormatArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartsNumberFormatArchive_descriptor_;
  metadata.reflection = ChartsNumberFormatArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChartStyleArchive::kSuperFieldNumber;
const int ChartStyleArchive::kTschchartinfodefaultbackgroundfillFieldNumber;
const int ChartStyleArchive::kTschchartinfodefaultbackgroundstrokeFieldNumber;
const int ChartStyleArchive::kTschchartinfodefaultgridbackgroundfillFieldNumber;
const int ChartStyleArchive::kTschchartinfodefaultintersetgapFieldNumber;
const int ChartStyleArchive::kTschchartinfodefaultinterbargapFieldNumber;
const int ChartStyleArchive::kTschchartinfodefaultshowborderFieldNumber;
const int ChartStyleArchive::kTschchartinfodefaultborderstrokeFieldNumber;
const int ChartStyleArchive::kTschchartinfodefaulttitlecolorFieldNumber;
const int ChartStyleArchive::kTschchartinfodefaultgridbackgroundopacityFieldNumber;
const int ChartStyleArchive::kTschchartinfodefaultcombinelayersFieldNumber;
const int ChartStyleArchive::kTschchartinfodefaultbordershadowFieldNumber;
const int ChartStyleArchive::kTschchartinfodefaultborderopacityFieldNumber;
const int ChartStyleArchive::kTschchartinfodefaulttitleparagraphstyleindexFieldNumber;
const int ChartStyleArchive::kTschchartinfodefaultdeprecatedmasterfontfamilyFieldNumber;
const int ChartStyleArchive::kTschchartinfodefaultdeprecatedmasterfontnamedsizeFieldNumber;
const int ChartStyleArchive::kTschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindexFieldNumber;
const int ChartStyleArchive::kTschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindexFieldNumber;
const int ChartStyleArchive::kTschchartinfodefaultdeprecatedtrendlineequationshadowFieldNumber;
const int ChartStyleArchive::kTschchartinfodefaultdeprecatedtrendlinersquaredshadowFieldNumber;
const int ChartStyleArchive::kTschchartinfodefaultdeprecatedtrendlineequationopacityFieldNumber;
const int ChartStyleArchive::kTschchartinfodefaultdeprecatedtrendlinersquaredopacityFieldNumber;
const int ChartStyleArchive::kTschchartinfobardeprecated3DshadowFieldNumber;
const int ChartStyleArchive::kTschchartinfocolumndeprecated3DshadowFieldNumber;
const int ChartStyleArchive::kTschchartinfolinedeprecated3DshadowFieldNumber;
const int ChartStyleArchive::kTschchartinfoareadeprecated3DshadowFieldNumber;
const int ChartStyleArchive::kTschchartinfopiedeprecated3DshadowFieldNumber;
const int ChartStyleArchive::kTschchartinfodefault3DlightingpackageFieldNumber;
const int ChartStyleArchive::kTschchartinfocolumn3DlightingpackageFieldNumber;
const int ChartStyleArchive::kTschchartinfobar3DlightingpackageFieldNumber;
const int ChartStyleArchive::kTschchartinfoline3DlightingpackageFieldNumber;
const int ChartStyleArchive::kTschchartinfoarea3DlightingpackageFieldNumber;
const int ChartStyleArchive::kTschchartinfopie3DlightingpackageFieldNumber;
const int ChartStyleArchive::kTschchartinfodefaultdeprecated3DbeveledgesFieldNumber;
const int ChartStyleArchive::kTschchartinfopiedeprecated3DbeveledgesFieldNumber;
const int ChartStyleArchive::kTschchartinfobardeprecated3DbeveledgesFieldNumber;
const int ChartStyleArchive::kTschchartinfocolumndeprecated3DbeveledgesFieldNumber;
const int ChartStyleArchive::kTschchartinfodefaultdeprecated3DbarshapeFieldNumber;
const int ChartStyleArchive::kTschchartinfodefault3DchartopacityFieldNumber;
#endif  // !_MSC_VER

ChartStyleArchive::ChartStyleArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartStyleArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSS::StyleArchive*>(&::TSS::StyleArchive::default_instance());
  tschchartinfodefaultbackgroundfill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  tschchartinfodefaultbackgroundstroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartinfodefaultgridbackgroundfill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  tschchartinfodefaultborderstroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartinfodefaulttitlecolor_ = const_cast< ::TSP::Color*>(&::TSP::Color::default_instance());
  tschchartinfodefaultbordershadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartinfodefaultdeprecatedtrendlineequationshadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartinfodefaultdeprecatedtrendlinersquaredshadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartinfobardeprecated3dshadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartinfocolumndeprecated3dshadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartinfolinedeprecated3dshadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartinfoareadeprecated3dshadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartinfopiedeprecated3dshadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartinfodefault3dlightingpackage_ = const_cast< ::TSCH::Chart3DLightingPackageArchive*>(&::TSCH::Chart3DLightingPackageArchive::default_instance());
  tschchartinfocolumn3dlightingpackage_ = const_cast< ::TSCH::Chart3DLightingPackageArchive*>(&::TSCH::Chart3DLightingPackageArchive::default_instance());
  tschchartinfobar3dlightingpackage_ = const_cast< ::TSCH::Chart3DLightingPackageArchive*>(&::TSCH::Chart3DLightingPackageArchive::default_instance());
  tschchartinfoline3dlightingpackage_ = const_cast< ::TSCH::Chart3DLightingPackageArchive*>(&::TSCH::Chart3DLightingPackageArchive::default_instance());
  tschchartinfoarea3dlightingpackage_ = const_cast< ::TSCH::Chart3DLightingPackageArchive*>(&::TSCH::Chart3DLightingPackageArchive::default_instance());
  tschchartinfopie3dlightingpackage_ = const_cast< ::TSCH::Chart3DLightingPackageArchive*>(&::TSCH::Chart3DLightingPackageArchive::default_instance());
}

ChartStyleArchive::ChartStyleArchive(const ChartStyleArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartStyleArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  tschchartinfodefaultbackgroundfill_ = NULL;
  tschchartinfodefaultbackgroundstroke_ = NULL;
  tschchartinfodefaultgridbackgroundfill_ = NULL;
  tschchartinfodefaultintersetgap_ = 0;
  tschchartinfodefaultinterbargap_ = 0;
  tschchartinfodefaultshowborder_ = false;
  tschchartinfodefaultborderstroke_ = NULL;
  tschchartinfodefaulttitlecolor_ = NULL;
  tschchartinfodefaultgridbackgroundopacity_ = 0;
  tschchartinfodefaultcombinelayers_ = false;
  tschchartinfodefaultbordershadow_ = NULL;
  tschchartinfodefaultborderopacity_ = 0;
  tschchartinfodefaulttitleparagraphstyleindex_ = 0;
  tschchartinfodefaultdeprecatedmasterfontfamily_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tschchartinfodefaultdeprecatedmasterfontnamedsize_ = 0;
  tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex_ = 0;
  tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex_ = 0;
  tschchartinfodefaultdeprecatedtrendlineequationshadow_ = NULL;
  tschchartinfodefaultdeprecatedtrendlinersquaredshadow_ = NULL;
  tschchartinfodefaultdeprecatedtrendlineequationopacity_ = 0;
  tschchartinfodefaultdeprecatedtrendlinersquaredopacity_ = 0;
  tschchartinfobardeprecated3dshadow_ = NULL;
  tschchartinfocolumndeprecated3dshadow_ = NULL;
  tschchartinfolinedeprecated3dshadow_ = NULL;
  tschchartinfoareadeprecated3dshadow_ = NULL;
  tschchartinfopiedeprecated3dshadow_ = NULL;
  tschchartinfodefault3dlightingpackage_ = NULL;
  tschchartinfocolumn3dlightingpackage_ = NULL;
  tschchartinfobar3dlightingpackage_ = NULL;
  tschchartinfoline3dlightingpackage_ = NULL;
  tschchartinfoarea3dlightingpackage_ = NULL;
  tschchartinfopie3dlightingpackage_ = NULL;
  tschchartinfodefaultdeprecated3dbeveledges_ = false;
  tschchartinfopiedeprecated3dbeveledges_ = false;
  tschchartinfobardeprecated3dbeveledges_ = false;
  tschchartinfocolumndeprecated3dbeveledges_ = false;
  tschchartinfodefaultdeprecated3dbarshape_ = 0;
  tschchartinfodefault3dchartopacity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartStyleArchive::~ChartStyleArchive() {
  SharedDtor();
}

void ChartStyleArchive::SharedDtor() {
  if (tschchartinfodefaultdeprecatedmasterfontfamily_ != &::google::protobuf::internal::kEmptyString) {
    delete tschchartinfodefaultdeprecatedmasterfontfamily_;
  }
  if (this != default_instance_) {
    delete super_;
    delete tschchartinfodefaultbackgroundfill_;
    delete tschchartinfodefaultbackgroundstroke_;
    delete tschchartinfodefaultgridbackgroundfill_;
    delete tschchartinfodefaultborderstroke_;
    delete tschchartinfodefaulttitlecolor_;
    delete tschchartinfodefaultbordershadow_;
    delete tschchartinfodefaultdeprecatedtrendlineequationshadow_;
    delete tschchartinfodefaultdeprecatedtrendlinersquaredshadow_;
    delete tschchartinfobardeprecated3dshadow_;
    delete tschchartinfocolumndeprecated3dshadow_;
    delete tschchartinfolinedeprecated3dshadow_;
    delete tschchartinfoareadeprecated3dshadow_;
    delete tschchartinfopiedeprecated3dshadow_;
    delete tschchartinfodefault3dlightingpackage_;
    delete tschchartinfocolumn3dlightingpackage_;
    delete tschchartinfobar3dlightingpackage_;
    delete tschchartinfoline3dlightingpackage_;
    delete tschchartinfoarea3dlightingpackage_;
    delete tschchartinfopie3dlightingpackage_;
  }
}

void ChartStyleArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartStyleArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartStyleArchive_descriptor_;
}

const ChartStyleArchive& ChartStyleArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHPreUFFArchives_2eproto();
  return *default_instance_;
}

ChartStyleArchive* ChartStyleArchive::default_instance_ = NULL;

ChartStyleArchive* ChartStyleArchive::New() const {
  return new ChartStyleArchive;
}

void ChartStyleArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSS::StyleArchive::Clear();
    }
    if (has_tschchartinfodefaultbackgroundfill()) {
      if (tschchartinfodefaultbackgroundfill_ != NULL) tschchartinfodefaultbackgroundfill_->::TSD::FillArchive::Clear();
    }
    if (has_tschchartinfodefaultbackgroundstroke()) {
      if (tschchartinfodefaultbackgroundstroke_ != NULL) tschchartinfodefaultbackgroundstroke_->::TSD::StrokeArchive::Clear();
    }
    if (has_tschchartinfodefaultgridbackgroundfill()) {
      if (tschchartinfodefaultgridbackgroundfill_ != NULL) tschchartinfodefaultgridbackgroundfill_->::TSD::FillArchive::Clear();
    }
    tschchartinfodefaultintersetgap_ = 0;
    tschchartinfodefaultinterbargap_ = 0;
    tschchartinfodefaultshowborder_ = false;
    if (has_tschchartinfodefaultborderstroke()) {
      if (tschchartinfodefaultborderstroke_ != NULL) tschchartinfodefaultborderstroke_->::TSD::StrokeArchive::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_tschchartinfodefaulttitlecolor()) {
      if (tschchartinfodefaulttitlecolor_ != NULL) tschchartinfodefaulttitlecolor_->::TSP::Color::Clear();
    }
    tschchartinfodefaultgridbackgroundopacity_ = 0;
    tschchartinfodefaultcombinelayers_ = false;
    if (has_tschchartinfodefaultbordershadow()) {
      if (tschchartinfodefaultbordershadow_ != NULL) tschchartinfodefaultbordershadow_->::TSD::ShadowArchive::Clear();
    }
    tschchartinfodefaultborderopacity_ = 0;
    tschchartinfodefaulttitleparagraphstyleindex_ = 0;
    if (has_tschchartinfodefaultdeprecatedmasterfontfamily()) {
      if (tschchartinfodefaultdeprecatedmasterfontfamily_ != &::google::protobuf::internal::kEmptyString) {
        tschchartinfodefaultdeprecatedmasterfontfamily_->clear();
      }
    }
    tschchartinfodefaultdeprecatedmasterfontnamedsize_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex_ = 0;
    tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex_ = 0;
    if (has_tschchartinfodefaultdeprecatedtrendlineequationshadow()) {
      if (tschchartinfodefaultdeprecatedtrendlineequationshadow_ != NULL) tschchartinfodefaultdeprecatedtrendlineequationshadow_->::TSD::ShadowArchive::Clear();
    }
    if (has_tschchartinfodefaultdeprecatedtrendlinersquaredshadow()) {
      if (tschchartinfodefaultdeprecatedtrendlinersquaredshadow_ != NULL) tschchartinfodefaultdeprecatedtrendlinersquaredshadow_->::TSD::ShadowArchive::Clear();
    }
    tschchartinfodefaultdeprecatedtrendlineequationopacity_ = 0;
    tschchartinfodefaultdeprecatedtrendlinersquaredopacity_ = 0;
    if (has_tschchartinfobardeprecated3dshadow()) {
      if (tschchartinfobardeprecated3dshadow_ != NULL) tschchartinfobardeprecated3dshadow_->::TSD::ShadowArchive::Clear();
    }
    if (has_tschchartinfocolumndeprecated3dshadow()) {
      if (tschchartinfocolumndeprecated3dshadow_ != NULL) tschchartinfocolumndeprecated3dshadow_->::TSD::ShadowArchive::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_tschchartinfolinedeprecated3dshadow()) {
      if (tschchartinfolinedeprecated3dshadow_ != NULL) tschchartinfolinedeprecated3dshadow_->::TSD::ShadowArchive::Clear();
    }
    if (has_tschchartinfoareadeprecated3dshadow()) {
      if (tschchartinfoareadeprecated3dshadow_ != NULL) tschchartinfoareadeprecated3dshadow_->::TSD::ShadowArchive::Clear();
    }
    if (has_tschchartinfopiedeprecated3dshadow()) {
      if (tschchartinfopiedeprecated3dshadow_ != NULL) tschchartinfopiedeprecated3dshadow_->::TSD::ShadowArchive::Clear();
    }
    if (has_tschchartinfodefault3dlightingpackage()) {
      if (tschchartinfodefault3dlightingpackage_ != NULL) tschchartinfodefault3dlightingpackage_->::TSCH::Chart3DLightingPackageArchive::Clear();
    }
    if (has_tschchartinfocolumn3dlightingpackage()) {
      if (tschchartinfocolumn3dlightingpackage_ != NULL) tschchartinfocolumn3dlightingpackage_->::TSCH::Chart3DLightingPackageArchive::Clear();
    }
    if (has_tschchartinfobar3dlightingpackage()) {
      if (tschchartinfobar3dlightingpackage_ != NULL) tschchartinfobar3dlightingpackage_->::TSCH::Chart3DLightingPackageArchive::Clear();
    }
    if (has_tschchartinfoline3dlightingpackage()) {
      if (tschchartinfoline3dlightingpackage_ != NULL) tschchartinfoline3dlightingpackage_->::TSCH::Chart3DLightingPackageArchive::Clear();
    }
    if (has_tschchartinfoarea3dlightingpackage()) {
      if (tschchartinfoarea3dlightingpackage_ != NULL) tschchartinfoarea3dlightingpackage_->::TSCH::Chart3DLightingPackageArchive::Clear();
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_tschchartinfopie3dlightingpackage()) {
      if (tschchartinfopie3dlightingpackage_ != NULL) tschchartinfopie3dlightingpackage_->::TSCH::Chart3DLightingPackageArchive::Clear();
    }
    tschchartinfodefaultdeprecated3dbeveledges_ = false;
    tschchartinfopiedeprecated3dbeveledges_ = false;
    tschchartinfobardeprecated3dbeveledges_ = false;
    tschchartinfocolumndeprecated3dbeveledges_ = false;
    tschchartinfodefaultdeprecated3dbarshape_ = 0;
    tschchartinfodefault3dchartopacity_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartStyleArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSS.StyleArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_tschchartinfodefaultbackgroundfill;
        break;
      }

      // optional .TSD.FillArchive tschchartinfodefaultbackgroundfill = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfodefaultbackgroundfill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfodefaultbackgroundfill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_tschchartinfodefaultbackgroundstroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartinfodefaultbackgroundstroke = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfodefaultbackgroundstroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfodefaultbackgroundstroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_tschchartinfodefaultgridbackgroundfill;
        break;
      }

      // optional .TSD.FillArchive tschchartinfodefaultgridbackgroundfill = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfodefaultgridbackgroundfill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfodefaultgridbackgroundfill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_tschchartinfodefaultintersetgap;
        break;
      }

      // optional float tschchartinfodefaultintersetgap = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartinfodefaultintersetgap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartinfodefaultintersetgap_)));
          set_has_tschchartinfodefaultintersetgap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_tschchartinfodefaultinterbargap;
        break;
      }

      // optional float tschchartinfodefaultinterbargap = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartinfodefaultinterbargap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartinfodefaultinterbargap_)));
          set_has_tschchartinfodefaultinterbargap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_tschchartinfodefaultshowborder;
        break;
      }

      // optional bool tschchartinfodefaultshowborder = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartinfodefaultshowborder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartinfodefaultshowborder_)));
          set_has_tschchartinfodefaultshowborder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_tschchartinfodefaultborderstroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartinfodefaultborderstroke = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfodefaultborderstroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfodefaultborderstroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_tschchartinfodefaulttitlecolor;
        break;
      }

      // optional .TSP.Color tschchartinfodefaulttitlecolor = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfodefaulttitlecolor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfodefaulttitlecolor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_tschchartinfodefaultgridbackgroundopacity;
        break;
      }

      // optional float tschchartinfodefaultgridbackgroundopacity = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartinfodefaultgridbackgroundopacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartinfodefaultgridbackgroundopacity_)));
          set_has_tschchartinfodefaultgridbackgroundopacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_tschchartinfodefaultcombinelayers;
        break;
      }

      // optional bool tschchartinfodefaultcombinelayers = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartinfodefaultcombinelayers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartinfodefaultcombinelayers_)));
          set_has_tschchartinfodefaultcombinelayers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_tschchartinfodefaultbordershadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartinfodefaultbordershadow = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfodefaultbordershadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfodefaultbordershadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(181)) goto parse_tschchartinfodefaultborderopacity;
        break;
      }

      // optional float tschchartinfodefaultborderopacity = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartinfodefaultborderopacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartinfodefaultborderopacity_)));
          set_has_tschchartinfodefaultborderopacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_tschchartinfodefaulttitleparagraphstyleindex;
        break;
      }

      // optional int32 tschchartinfodefaulttitleparagraphstyleindex = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartinfodefaulttitleparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartinfodefaulttitleparagraphstyleindex_)));
          set_has_tschchartinfodefaulttitleparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_tschchartinfodefaultdeprecatedmasterfontfamily;
        break;
      }

      // optional string tschchartinfodefaultdeprecatedmasterfontfamily = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfodefaultdeprecatedmasterfontfamily:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tschchartinfodefaultdeprecatedmasterfontfamily()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tschchartinfodefaultdeprecatedmasterfontfamily().data(), this->tschchartinfodefaultdeprecatedmasterfontfamily().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_tschchartinfodefaultdeprecatedmasterfontnamedsize;
        break;
      }

      // optional int32 tschchartinfodefaultdeprecatedmasterfontnamedsize = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartinfodefaultdeprecatedmasterfontnamedsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartinfodefaultdeprecatedmasterfontnamedsize_)));
          set_has_tschchartinfodefaultdeprecatedmasterfontnamedsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex;
        break;
      }

      // optional int32 tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex_)));
          set_has_tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex;
        break;
      }

      // optional int32 tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex_)));
          set_has_tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_tschchartinfodefaultdeprecatedtrendlineequationshadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartinfodefaultdeprecatedtrendlineequationshadow = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfodefaultdeprecatedtrendlineequationshadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfodefaultdeprecatedtrendlineequationshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_tschchartinfodefaultdeprecatedtrendlinersquaredshadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartinfodefaultdeprecatedtrendlinersquaredshadow = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfodefaultdeprecatedtrendlinersquaredshadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfodefaultdeprecatedtrendlinersquaredshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(277)) goto parse_tschchartinfodefaultdeprecatedtrendlineequationopacity;
        break;
      }

      // optional float tschchartinfodefaultdeprecatedtrendlineequationopacity = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartinfodefaultdeprecatedtrendlineequationopacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartinfodefaultdeprecatedtrendlineequationopacity_)));
          set_has_tschchartinfodefaultdeprecatedtrendlineequationopacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(285)) goto parse_tschchartinfodefaultdeprecatedtrendlinersquaredopacity;
        break;
      }

      // optional float tschchartinfodefaultdeprecatedtrendlinersquaredopacity = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartinfodefaultdeprecatedtrendlinersquaredopacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartinfodefaultdeprecatedtrendlinersquaredopacity_)));
          set_has_tschchartinfodefaultdeprecatedtrendlinersquaredopacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2466)) goto parse_tschchartinfobardeprecated3dshadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartinfobardeprecated3dshadow = 308;
      case 308: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfobardeprecated3dshadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfobardeprecated3dshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2474)) goto parse_tschchartinfocolumndeprecated3dshadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartinfocolumndeprecated3dshadow = 309;
      case 309: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfocolumndeprecated3dshadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfocolumndeprecated3dshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2482)) goto parse_tschchartinfolinedeprecated3dshadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartinfolinedeprecated3dshadow = 310;
      case 310: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfolinedeprecated3dshadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfolinedeprecated3dshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2490)) goto parse_tschchartinfoareadeprecated3dshadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartinfoareadeprecated3dshadow = 311;
      case 311: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfoareadeprecated3dshadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfoareadeprecated3dshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2498)) goto parse_tschchartinfopiedeprecated3dshadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartinfopiedeprecated3dshadow = 312;
      case 312: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfopiedeprecated3dshadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfopiedeprecated3dshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2506)) goto parse_tschchartinfodefault3dlightingpackage;
        break;
      }

      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfodefault3dlightingpackage = 313;
      case 313: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfodefault3dlightingpackage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfodefault3dlightingpackage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2514)) goto parse_tschchartinfocolumn3dlightingpackage;
        break;
      }

      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfocolumn3dlightingpackage = 314;
      case 314: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfocolumn3dlightingpackage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfocolumn3dlightingpackage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2522)) goto parse_tschchartinfobar3dlightingpackage;
        break;
      }

      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfobar3dlightingpackage = 315;
      case 315: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfobar3dlightingpackage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfobar3dlightingpackage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2530)) goto parse_tschchartinfoline3dlightingpackage;
        break;
      }

      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoline3dlightingpackage = 316;
      case 316: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfoline3dlightingpackage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfoline3dlightingpackage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2538)) goto parse_tschchartinfoarea3dlightingpackage;
        break;
      }

      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoarea3dlightingpackage = 317;
      case 317: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfoarea3dlightingpackage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfoarea3dlightingpackage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2546)) goto parse_tschchartinfopie3dlightingpackage;
        break;
      }

      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfopie3dlightingpackage = 318;
      case 318: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfopie3dlightingpackage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfopie3dlightingpackage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2608)) goto parse_tschchartinfodefaultdeprecated3dbeveledges;
        break;
      }

      // optional bool tschchartinfodefaultdeprecated3dbeveledges = 326;
      case 326: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartinfodefaultdeprecated3dbeveledges:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartinfodefaultdeprecated3dbeveledges_)));
          set_has_tschchartinfodefaultdeprecated3dbeveledges();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2616)) goto parse_tschchartinfopiedeprecated3dbeveledges;
        break;
      }

      // optional bool tschchartinfopiedeprecated3dbeveledges = 327;
      case 327: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartinfopiedeprecated3dbeveledges:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartinfopiedeprecated3dbeveledges_)));
          set_has_tschchartinfopiedeprecated3dbeveledges();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2624)) goto parse_tschchartinfobardeprecated3dbeveledges;
        break;
      }

      // optional bool tschchartinfobardeprecated3dbeveledges = 328;
      case 328: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartinfobardeprecated3dbeveledges:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartinfobardeprecated3dbeveledges_)));
          set_has_tschchartinfobardeprecated3dbeveledges();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2632)) goto parse_tschchartinfocolumndeprecated3dbeveledges;
        break;
      }

      // optional bool tschchartinfocolumndeprecated3dbeveledges = 329;
      case 329: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartinfocolumndeprecated3dbeveledges:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartinfocolumndeprecated3dbeveledges_)));
          set_has_tschchartinfocolumndeprecated3dbeveledges();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2640)) goto parse_tschchartinfodefaultdeprecated3dbarshape;
        break;
      }

      // optional int32 tschchartinfodefaultdeprecated3dbarshape = 330;
      case 330: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartinfodefaultdeprecated3dbarshape:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartinfodefaultdeprecated3dbarshape_)));
          set_has_tschchartinfodefaultdeprecated3dbarshape();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2685)) goto parse_tschchartinfodefault3dchartopacity;
        break;
      }

      // optional float tschchartinfodefault3dchartopacity = 335;
      case 335: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartinfodefault3dchartopacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartinfodefault3dchartopacity_)));
          set_has_tschchartinfodefault3dchartopacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChartStyleArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSS.StyleArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSD.FillArchive tschchartinfodefaultbackgroundfill = 10;
  if (has_tschchartinfodefaultbackgroundfill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->tschchartinfodefaultbackgroundfill(), output);
  }

  // optional .TSD.StrokeArchive tschchartinfodefaultbackgroundstroke = 11;
  if (has_tschchartinfodefaultbackgroundstroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->tschchartinfodefaultbackgroundstroke(), output);
  }

  // optional .TSD.FillArchive tschchartinfodefaultgridbackgroundfill = 12;
  if (has_tschchartinfodefaultgridbackgroundfill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->tschchartinfodefaultgridbackgroundfill(), output);
  }

  // optional float tschchartinfodefaultintersetgap = 13;
  if (has_tschchartinfodefaultintersetgap()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->tschchartinfodefaultintersetgap(), output);
  }

  // optional float tschchartinfodefaultinterbargap = 14;
  if (has_tschchartinfodefaultinterbargap()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->tschchartinfodefaultinterbargap(), output);
  }

  // optional bool tschchartinfodefaultshowborder = 15;
  if (has_tschchartinfodefaultshowborder()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->tschchartinfodefaultshowborder(), output);
  }

  // optional .TSD.StrokeArchive tschchartinfodefaultborderstroke = 16;
  if (has_tschchartinfodefaultborderstroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->tschchartinfodefaultborderstroke(), output);
  }

  // optional .TSP.Color tschchartinfodefaulttitlecolor = 18;
  if (has_tschchartinfodefaulttitlecolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->tschchartinfodefaulttitlecolor(), output);
  }

  // optional float tschchartinfodefaultgridbackgroundopacity = 19;
  if (has_tschchartinfodefaultgridbackgroundopacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->tschchartinfodefaultgridbackgroundopacity(), output);
  }

  // optional bool tschchartinfodefaultcombinelayers = 20;
  if (has_tschchartinfodefaultcombinelayers()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->tschchartinfodefaultcombinelayers(), output);
  }

  // optional .TSD.ShadowArchive tschchartinfodefaultbordershadow = 21;
  if (has_tschchartinfodefaultbordershadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->tschchartinfodefaultbordershadow(), output);
  }

  // optional float tschchartinfodefaultborderopacity = 22;
  if (has_tschchartinfodefaultborderopacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->tschchartinfodefaultborderopacity(), output);
  }

  // optional int32 tschchartinfodefaulttitleparagraphstyleindex = 23;
  if (has_tschchartinfodefaulttitleparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->tschchartinfodefaulttitleparagraphstyleindex(), output);
  }

  // optional string tschchartinfodefaultdeprecatedmasterfontfamily = 24;
  if (has_tschchartinfodefaultdeprecatedmasterfontfamily()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tschchartinfodefaultdeprecatedmasterfontfamily().data(), this->tschchartinfodefaultdeprecatedmasterfontfamily().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->tschchartinfodefaultdeprecatedmasterfontfamily(), output);
  }

  // optional int32 tschchartinfodefaultdeprecatedmasterfontnamedsize = 25;
  if (has_tschchartinfodefaultdeprecatedmasterfontnamedsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->tschchartinfodefaultdeprecatedmasterfontnamedsize(), output);
  }

  // optional int32 tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex = 30;
  if (has_tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex(), output);
  }

  // optional int32 tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex = 31;
  if (has_tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex(), output);
  }

  // optional .TSD.ShadowArchive tschchartinfodefaultdeprecatedtrendlineequationshadow = 32;
  if (has_tschchartinfodefaultdeprecatedtrendlineequationshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->tschchartinfodefaultdeprecatedtrendlineequationshadow(), output);
  }

  // optional .TSD.ShadowArchive tschchartinfodefaultdeprecatedtrendlinersquaredshadow = 33;
  if (has_tschchartinfodefaultdeprecatedtrendlinersquaredshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->tschchartinfodefaultdeprecatedtrendlinersquaredshadow(), output);
  }

  // optional float tschchartinfodefaultdeprecatedtrendlineequationopacity = 34;
  if (has_tschchartinfodefaultdeprecatedtrendlineequationopacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(34, this->tschchartinfodefaultdeprecatedtrendlineequationopacity(), output);
  }

  // optional float tschchartinfodefaultdeprecatedtrendlinersquaredopacity = 35;
  if (has_tschchartinfodefaultdeprecatedtrendlinersquaredopacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(35, this->tschchartinfodefaultdeprecatedtrendlinersquaredopacity(), output);
  }

  // optional .TSD.ShadowArchive tschchartinfobardeprecated3dshadow = 308;
  if (has_tschchartinfobardeprecated3dshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      308, this->tschchartinfobardeprecated3dshadow(), output);
  }

  // optional .TSD.ShadowArchive tschchartinfocolumndeprecated3dshadow = 309;
  if (has_tschchartinfocolumndeprecated3dshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      309, this->tschchartinfocolumndeprecated3dshadow(), output);
  }

  // optional .TSD.ShadowArchive tschchartinfolinedeprecated3dshadow = 310;
  if (has_tschchartinfolinedeprecated3dshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      310, this->tschchartinfolinedeprecated3dshadow(), output);
  }

  // optional .TSD.ShadowArchive tschchartinfoareadeprecated3dshadow = 311;
  if (has_tschchartinfoareadeprecated3dshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      311, this->tschchartinfoareadeprecated3dshadow(), output);
  }

  // optional .TSD.ShadowArchive tschchartinfopiedeprecated3dshadow = 312;
  if (has_tschchartinfopiedeprecated3dshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      312, this->tschchartinfopiedeprecated3dshadow(), output);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfodefault3dlightingpackage = 313;
  if (has_tschchartinfodefault3dlightingpackage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      313, this->tschchartinfodefault3dlightingpackage(), output);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfocolumn3dlightingpackage = 314;
  if (has_tschchartinfocolumn3dlightingpackage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      314, this->tschchartinfocolumn3dlightingpackage(), output);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfobar3dlightingpackage = 315;
  if (has_tschchartinfobar3dlightingpackage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      315, this->tschchartinfobar3dlightingpackage(), output);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoline3dlightingpackage = 316;
  if (has_tschchartinfoline3dlightingpackage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      316, this->tschchartinfoline3dlightingpackage(), output);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoarea3dlightingpackage = 317;
  if (has_tschchartinfoarea3dlightingpackage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      317, this->tschchartinfoarea3dlightingpackage(), output);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfopie3dlightingpackage = 318;
  if (has_tschchartinfopie3dlightingpackage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      318, this->tschchartinfopie3dlightingpackage(), output);
  }

  // optional bool tschchartinfodefaultdeprecated3dbeveledges = 326;
  if (has_tschchartinfodefaultdeprecated3dbeveledges()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(326, this->tschchartinfodefaultdeprecated3dbeveledges(), output);
  }

  // optional bool tschchartinfopiedeprecated3dbeveledges = 327;
  if (has_tschchartinfopiedeprecated3dbeveledges()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(327, this->tschchartinfopiedeprecated3dbeveledges(), output);
  }

  // optional bool tschchartinfobardeprecated3dbeveledges = 328;
  if (has_tschchartinfobardeprecated3dbeveledges()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(328, this->tschchartinfobardeprecated3dbeveledges(), output);
  }

  // optional bool tschchartinfocolumndeprecated3dbeveledges = 329;
  if (has_tschchartinfocolumndeprecated3dbeveledges()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(329, this->tschchartinfocolumndeprecated3dbeveledges(), output);
  }

  // optional int32 tschchartinfodefaultdeprecated3dbarshape = 330;
  if (has_tschchartinfodefaultdeprecated3dbarshape()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(330, this->tschchartinfodefaultdeprecated3dbarshape(), output);
  }

  // optional float tschchartinfodefault3dchartopacity = 335;
  if (has_tschchartinfodefault3dchartopacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(335, this->tschchartinfodefault3dchartopacity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartStyleArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSS.StyleArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSD.FillArchive tschchartinfodefaultbackgroundfill = 10;
  if (has_tschchartinfodefaultbackgroundfill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->tschchartinfodefaultbackgroundfill(), target);
  }

  // optional .TSD.StrokeArchive tschchartinfodefaultbackgroundstroke = 11;
  if (has_tschchartinfodefaultbackgroundstroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->tschchartinfodefaultbackgroundstroke(), target);
  }

  // optional .TSD.FillArchive tschchartinfodefaultgridbackgroundfill = 12;
  if (has_tschchartinfodefaultgridbackgroundfill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->tschchartinfodefaultgridbackgroundfill(), target);
  }

  // optional float tschchartinfodefaultintersetgap = 13;
  if (has_tschchartinfodefaultintersetgap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->tschchartinfodefaultintersetgap(), target);
  }

  // optional float tschchartinfodefaultinterbargap = 14;
  if (has_tschchartinfodefaultinterbargap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->tschchartinfodefaultinterbargap(), target);
  }

  // optional bool tschchartinfodefaultshowborder = 15;
  if (has_tschchartinfodefaultshowborder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->tschchartinfodefaultshowborder(), target);
  }

  // optional .TSD.StrokeArchive tschchartinfodefaultborderstroke = 16;
  if (has_tschchartinfodefaultborderstroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->tschchartinfodefaultborderstroke(), target);
  }

  // optional .TSP.Color tschchartinfodefaulttitlecolor = 18;
  if (has_tschchartinfodefaulttitlecolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->tschchartinfodefaulttitlecolor(), target);
  }

  // optional float tschchartinfodefaultgridbackgroundopacity = 19;
  if (has_tschchartinfodefaultgridbackgroundopacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->tschchartinfodefaultgridbackgroundopacity(), target);
  }

  // optional bool tschchartinfodefaultcombinelayers = 20;
  if (has_tschchartinfodefaultcombinelayers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->tschchartinfodefaultcombinelayers(), target);
  }

  // optional .TSD.ShadowArchive tschchartinfodefaultbordershadow = 21;
  if (has_tschchartinfodefaultbordershadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->tschchartinfodefaultbordershadow(), target);
  }

  // optional float tschchartinfodefaultborderopacity = 22;
  if (has_tschchartinfodefaultborderopacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->tschchartinfodefaultborderopacity(), target);
  }

  // optional int32 tschchartinfodefaulttitleparagraphstyleindex = 23;
  if (has_tschchartinfodefaulttitleparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->tschchartinfodefaulttitleparagraphstyleindex(), target);
  }

  // optional string tschchartinfodefaultdeprecatedmasterfontfamily = 24;
  if (has_tschchartinfodefaultdeprecatedmasterfontfamily()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tschchartinfodefaultdeprecatedmasterfontfamily().data(), this->tschchartinfodefaultdeprecatedmasterfontfamily().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->tschchartinfodefaultdeprecatedmasterfontfamily(), target);
  }

  // optional int32 tschchartinfodefaultdeprecatedmasterfontnamedsize = 25;
  if (has_tschchartinfodefaultdeprecatedmasterfontnamedsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->tschchartinfodefaultdeprecatedmasterfontnamedsize(), target);
  }

  // optional int32 tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex = 30;
  if (has_tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex(), target);
  }

  // optional int32 tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex = 31;
  if (has_tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex(), target);
  }

  // optional .TSD.ShadowArchive tschchartinfodefaultdeprecatedtrendlineequationshadow = 32;
  if (has_tschchartinfodefaultdeprecatedtrendlineequationshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->tschchartinfodefaultdeprecatedtrendlineequationshadow(), target);
  }

  // optional .TSD.ShadowArchive tschchartinfodefaultdeprecatedtrendlinersquaredshadow = 33;
  if (has_tschchartinfodefaultdeprecatedtrendlinersquaredshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->tschchartinfodefaultdeprecatedtrendlinersquaredshadow(), target);
  }

  // optional float tschchartinfodefaultdeprecatedtrendlineequationopacity = 34;
  if (has_tschchartinfodefaultdeprecatedtrendlineequationopacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(34, this->tschchartinfodefaultdeprecatedtrendlineequationopacity(), target);
  }

  // optional float tschchartinfodefaultdeprecatedtrendlinersquaredopacity = 35;
  if (has_tschchartinfodefaultdeprecatedtrendlinersquaredopacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(35, this->tschchartinfodefaultdeprecatedtrendlinersquaredopacity(), target);
  }

  // optional .TSD.ShadowArchive tschchartinfobardeprecated3dshadow = 308;
  if (has_tschchartinfobardeprecated3dshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        308, this->tschchartinfobardeprecated3dshadow(), target);
  }

  // optional .TSD.ShadowArchive tschchartinfocolumndeprecated3dshadow = 309;
  if (has_tschchartinfocolumndeprecated3dshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        309, this->tschchartinfocolumndeprecated3dshadow(), target);
  }

  // optional .TSD.ShadowArchive tschchartinfolinedeprecated3dshadow = 310;
  if (has_tschchartinfolinedeprecated3dshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        310, this->tschchartinfolinedeprecated3dshadow(), target);
  }

  // optional .TSD.ShadowArchive tschchartinfoareadeprecated3dshadow = 311;
  if (has_tschchartinfoareadeprecated3dshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        311, this->tschchartinfoareadeprecated3dshadow(), target);
  }

  // optional .TSD.ShadowArchive tschchartinfopiedeprecated3dshadow = 312;
  if (has_tschchartinfopiedeprecated3dshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        312, this->tschchartinfopiedeprecated3dshadow(), target);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfodefault3dlightingpackage = 313;
  if (has_tschchartinfodefault3dlightingpackage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        313, this->tschchartinfodefault3dlightingpackage(), target);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfocolumn3dlightingpackage = 314;
  if (has_tschchartinfocolumn3dlightingpackage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        314, this->tschchartinfocolumn3dlightingpackage(), target);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfobar3dlightingpackage = 315;
  if (has_tschchartinfobar3dlightingpackage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        315, this->tschchartinfobar3dlightingpackage(), target);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoline3dlightingpackage = 316;
  if (has_tschchartinfoline3dlightingpackage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        316, this->tschchartinfoline3dlightingpackage(), target);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoarea3dlightingpackage = 317;
  if (has_tschchartinfoarea3dlightingpackage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        317, this->tschchartinfoarea3dlightingpackage(), target);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfopie3dlightingpackage = 318;
  if (has_tschchartinfopie3dlightingpackage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        318, this->tschchartinfopie3dlightingpackage(), target);
  }

  // optional bool tschchartinfodefaultdeprecated3dbeveledges = 326;
  if (has_tschchartinfodefaultdeprecated3dbeveledges()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(326, this->tschchartinfodefaultdeprecated3dbeveledges(), target);
  }

  // optional bool tschchartinfopiedeprecated3dbeveledges = 327;
  if (has_tschchartinfopiedeprecated3dbeveledges()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(327, this->tschchartinfopiedeprecated3dbeveledges(), target);
  }

  // optional bool tschchartinfobardeprecated3dbeveledges = 328;
  if (has_tschchartinfobardeprecated3dbeveledges()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(328, this->tschchartinfobardeprecated3dbeveledges(), target);
  }

  // optional bool tschchartinfocolumndeprecated3dbeveledges = 329;
  if (has_tschchartinfocolumndeprecated3dbeveledges()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(329, this->tschchartinfocolumndeprecated3dbeveledges(), target);
  }

  // optional int32 tschchartinfodefaultdeprecated3dbarshape = 330;
  if (has_tschchartinfodefaultdeprecated3dbarshape()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(330, this->tschchartinfodefaultdeprecated3dbarshape(), target);
  }

  // optional float tschchartinfodefault3dchartopacity = 335;
  if (has_tschchartinfodefault3dchartopacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(335, this->tschchartinfodefault3dchartopacity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartStyleArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSS.StyleArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSD.FillArchive tschchartinfodefaultbackgroundfill = 10;
    if (has_tschchartinfodefaultbackgroundfill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfodefaultbackgroundfill());
    }

    // optional .TSD.StrokeArchive tschchartinfodefaultbackgroundstroke = 11;
    if (has_tschchartinfodefaultbackgroundstroke()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfodefaultbackgroundstroke());
    }

    // optional .TSD.FillArchive tschchartinfodefaultgridbackgroundfill = 12;
    if (has_tschchartinfodefaultgridbackgroundfill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfodefaultgridbackgroundfill());
    }

    // optional float tschchartinfodefaultintersetgap = 13;
    if (has_tschchartinfodefaultintersetgap()) {
      total_size += 1 + 4;
    }

    // optional float tschchartinfodefaultinterbargap = 14;
    if (has_tschchartinfodefaultinterbargap()) {
      total_size += 1 + 4;
    }

    // optional bool tschchartinfodefaultshowborder = 15;
    if (has_tschchartinfodefaultshowborder()) {
      total_size += 1 + 1;
    }

    // optional .TSD.StrokeArchive tschchartinfodefaultborderstroke = 16;
    if (has_tschchartinfodefaultborderstroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfodefaultborderstroke());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .TSP.Color tschchartinfodefaulttitlecolor = 18;
    if (has_tschchartinfodefaulttitlecolor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfodefaulttitlecolor());
    }

    // optional float tschchartinfodefaultgridbackgroundopacity = 19;
    if (has_tschchartinfodefaultgridbackgroundopacity()) {
      total_size += 2 + 4;
    }

    // optional bool tschchartinfodefaultcombinelayers = 20;
    if (has_tschchartinfodefaultcombinelayers()) {
      total_size += 2 + 1;
    }

    // optional .TSD.ShadowArchive tschchartinfodefaultbordershadow = 21;
    if (has_tschchartinfodefaultbordershadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfodefaultbordershadow());
    }

    // optional float tschchartinfodefaultborderopacity = 22;
    if (has_tschchartinfodefaultborderopacity()) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartinfodefaulttitleparagraphstyleindex = 23;
    if (has_tschchartinfodefaulttitleparagraphstyleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartinfodefaulttitleparagraphstyleindex());
    }

    // optional string tschchartinfodefaultdeprecatedmasterfontfamily = 24;
    if (has_tschchartinfodefaultdeprecatedmasterfontfamily()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tschchartinfodefaultdeprecatedmasterfontfamily());
    }

    // optional int32 tschchartinfodefaultdeprecatedmasterfontnamedsize = 25;
    if (has_tschchartinfodefaultdeprecatedmasterfontnamedsize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartinfodefaultdeprecatedmasterfontnamedsize());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex = 30;
    if (has_tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex());
    }

    // optional int32 tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex = 31;
    if (has_tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex());
    }

    // optional .TSD.ShadowArchive tschchartinfodefaultdeprecatedtrendlineequationshadow = 32;
    if (has_tschchartinfodefaultdeprecatedtrendlineequationshadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfodefaultdeprecatedtrendlineequationshadow());
    }

    // optional .TSD.ShadowArchive tschchartinfodefaultdeprecatedtrendlinersquaredshadow = 33;
    if (has_tschchartinfodefaultdeprecatedtrendlinersquaredshadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfodefaultdeprecatedtrendlinersquaredshadow());
    }

    // optional float tschchartinfodefaultdeprecatedtrendlineequationopacity = 34;
    if (has_tschchartinfodefaultdeprecatedtrendlineequationopacity()) {
      total_size += 2 + 4;
    }

    // optional float tschchartinfodefaultdeprecatedtrendlinersquaredopacity = 35;
    if (has_tschchartinfodefaultdeprecatedtrendlinersquaredopacity()) {
      total_size += 2 + 4;
    }

    // optional .TSD.ShadowArchive tschchartinfobardeprecated3dshadow = 308;
    if (has_tschchartinfobardeprecated3dshadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfobardeprecated3dshadow());
    }

    // optional .TSD.ShadowArchive tschchartinfocolumndeprecated3dshadow = 309;
    if (has_tschchartinfocolumndeprecated3dshadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfocolumndeprecated3dshadow());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .TSD.ShadowArchive tschchartinfolinedeprecated3dshadow = 310;
    if (has_tschchartinfolinedeprecated3dshadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfolinedeprecated3dshadow());
    }

    // optional .TSD.ShadowArchive tschchartinfoareadeprecated3dshadow = 311;
    if (has_tschchartinfoareadeprecated3dshadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfoareadeprecated3dshadow());
    }

    // optional .TSD.ShadowArchive tschchartinfopiedeprecated3dshadow = 312;
    if (has_tschchartinfopiedeprecated3dshadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfopiedeprecated3dshadow());
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfodefault3dlightingpackage = 313;
    if (has_tschchartinfodefault3dlightingpackage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfodefault3dlightingpackage());
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfocolumn3dlightingpackage = 314;
    if (has_tschchartinfocolumn3dlightingpackage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfocolumn3dlightingpackage());
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfobar3dlightingpackage = 315;
    if (has_tschchartinfobar3dlightingpackage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfobar3dlightingpackage());
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoline3dlightingpackage = 316;
    if (has_tschchartinfoline3dlightingpackage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfoline3dlightingpackage());
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoarea3dlightingpackage = 317;
    if (has_tschchartinfoarea3dlightingpackage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfoarea3dlightingpackage());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfopie3dlightingpackage = 318;
    if (has_tschchartinfopie3dlightingpackage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfopie3dlightingpackage());
    }

    // optional bool tschchartinfodefaultdeprecated3dbeveledges = 326;
    if (has_tschchartinfodefaultdeprecated3dbeveledges()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartinfopiedeprecated3dbeveledges = 327;
    if (has_tschchartinfopiedeprecated3dbeveledges()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartinfobardeprecated3dbeveledges = 328;
    if (has_tschchartinfobardeprecated3dbeveledges()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartinfocolumndeprecated3dbeveledges = 329;
    if (has_tschchartinfocolumndeprecated3dbeveledges()) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartinfodefaultdeprecated3dbarshape = 330;
    if (has_tschchartinfodefaultdeprecated3dbarshape()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartinfodefaultdeprecated3dbarshape());
    }

    // optional float tschchartinfodefault3dchartopacity = 335;
    if (has_tschchartinfodefault3dchartopacity()) {
      total_size += 2 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartStyleArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartStyleArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartStyleArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartStyleArchive::MergeFrom(const ChartStyleArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSS::StyleArchive::MergeFrom(from.super());
    }
    if (from.has_tschchartinfodefaultbackgroundfill()) {
      mutable_tschchartinfodefaultbackgroundfill()->::TSD::FillArchive::MergeFrom(from.tschchartinfodefaultbackgroundfill());
    }
    if (from.has_tschchartinfodefaultbackgroundstroke()) {
      mutable_tschchartinfodefaultbackgroundstroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartinfodefaultbackgroundstroke());
    }
    if (from.has_tschchartinfodefaultgridbackgroundfill()) {
      mutable_tschchartinfodefaultgridbackgroundfill()->::TSD::FillArchive::MergeFrom(from.tschchartinfodefaultgridbackgroundfill());
    }
    if (from.has_tschchartinfodefaultintersetgap()) {
      set_tschchartinfodefaultintersetgap(from.tschchartinfodefaultintersetgap());
    }
    if (from.has_tschchartinfodefaultinterbargap()) {
      set_tschchartinfodefaultinterbargap(from.tschchartinfodefaultinterbargap());
    }
    if (from.has_tschchartinfodefaultshowborder()) {
      set_tschchartinfodefaultshowborder(from.tschchartinfodefaultshowborder());
    }
    if (from.has_tschchartinfodefaultborderstroke()) {
      mutable_tschchartinfodefaultborderstroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartinfodefaultborderstroke());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tschchartinfodefaulttitlecolor()) {
      mutable_tschchartinfodefaulttitlecolor()->::TSP::Color::MergeFrom(from.tschchartinfodefaulttitlecolor());
    }
    if (from.has_tschchartinfodefaultgridbackgroundopacity()) {
      set_tschchartinfodefaultgridbackgroundopacity(from.tschchartinfodefaultgridbackgroundopacity());
    }
    if (from.has_tschchartinfodefaultcombinelayers()) {
      set_tschchartinfodefaultcombinelayers(from.tschchartinfodefaultcombinelayers());
    }
    if (from.has_tschchartinfodefaultbordershadow()) {
      mutable_tschchartinfodefaultbordershadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartinfodefaultbordershadow());
    }
    if (from.has_tschchartinfodefaultborderopacity()) {
      set_tschchartinfodefaultborderopacity(from.tschchartinfodefaultborderopacity());
    }
    if (from.has_tschchartinfodefaulttitleparagraphstyleindex()) {
      set_tschchartinfodefaulttitleparagraphstyleindex(from.tschchartinfodefaulttitleparagraphstyleindex());
    }
    if (from.has_tschchartinfodefaultdeprecatedmasterfontfamily()) {
      set_tschchartinfodefaultdeprecatedmasterfontfamily(from.tschchartinfodefaultdeprecatedmasterfontfamily());
    }
    if (from.has_tschchartinfodefaultdeprecatedmasterfontnamedsize()) {
      set_tschchartinfodefaultdeprecatedmasterfontnamedsize(from.tschchartinfodefaultdeprecatedmasterfontnamedsize());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex()) {
      set_tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex(from.tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex());
    }
    if (from.has_tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex()) {
      set_tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex(from.tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex());
    }
    if (from.has_tschchartinfodefaultdeprecatedtrendlineequationshadow()) {
      mutable_tschchartinfodefaultdeprecatedtrendlineequationshadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartinfodefaultdeprecatedtrendlineequationshadow());
    }
    if (from.has_tschchartinfodefaultdeprecatedtrendlinersquaredshadow()) {
      mutable_tschchartinfodefaultdeprecatedtrendlinersquaredshadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartinfodefaultdeprecatedtrendlinersquaredshadow());
    }
    if (from.has_tschchartinfodefaultdeprecatedtrendlineequationopacity()) {
      set_tschchartinfodefaultdeprecatedtrendlineequationopacity(from.tschchartinfodefaultdeprecatedtrendlineequationopacity());
    }
    if (from.has_tschchartinfodefaultdeprecatedtrendlinersquaredopacity()) {
      set_tschchartinfodefaultdeprecatedtrendlinersquaredopacity(from.tschchartinfodefaultdeprecatedtrendlinersquaredopacity());
    }
    if (from.has_tschchartinfobardeprecated3dshadow()) {
      mutable_tschchartinfobardeprecated3dshadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartinfobardeprecated3dshadow());
    }
    if (from.has_tschchartinfocolumndeprecated3dshadow()) {
      mutable_tschchartinfocolumndeprecated3dshadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartinfocolumndeprecated3dshadow());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_tschchartinfolinedeprecated3dshadow()) {
      mutable_tschchartinfolinedeprecated3dshadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartinfolinedeprecated3dshadow());
    }
    if (from.has_tschchartinfoareadeprecated3dshadow()) {
      mutable_tschchartinfoareadeprecated3dshadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartinfoareadeprecated3dshadow());
    }
    if (from.has_tschchartinfopiedeprecated3dshadow()) {
      mutable_tschchartinfopiedeprecated3dshadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartinfopiedeprecated3dshadow());
    }
    if (from.has_tschchartinfodefault3dlightingpackage()) {
      mutable_tschchartinfodefault3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(from.tschchartinfodefault3dlightingpackage());
    }
    if (from.has_tschchartinfocolumn3dlightingpackage()) {
      mutable_tschchartinfocolumn3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(from.tschchartinfocolumn3dlightingpackage());
    }
    if (from.has_tschchartinfobar3dlightingpackage()) {
      mutable_tschchartinfobar3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(from.tschchartinfobar3dlightingpackage());
    }
    if (from.has_tschchartinfoline3dlightingpackage()) {
      mutable_tschchartinfoline3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(from.tschchartinfoline3dlightingpackage());
    }
    if (from.has_tschchartinfoarea3dlightingpackage()) {
      mutable_tschchartinfoarea3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(from.tschchartinfoarea3dlightingpackage());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_tschchartinfopie3dlightingpackage()) {
      mutable_tschchartinfopie3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(from.tschchartinfopie3dlightingpackage());
    }
    if (from.has_tschchartinfodefaultdeprecated3dbeveledges()) {
      set_tschchartinfodefaultdeprecated3dbeveledges(from.tschchartinfodefaultdeprecated3dbeveledges());
    }
    if (from.has_tschchartinfopiedeprecated3dbeveledges()) {
      set_tschchartinfopiedeprecated3dbeveledges(from.tschchartinfopiedeprecated3dbeveledges());
    }
    if (from.has_tschchartinfobardeprecated3dbeveledges()) {
      set_tschchartinfobardeprecated3dbeveledges(from.tschchartinfobardeprecated3dbeveledges());
    }
    if (from.has_tschchartinfocolumndeprecated3dbeveledges()) {
      set_tschchartinfocolumndeprecated3dbeveledges(from.tschchartinfocolumndeprecated3dbeveledges());
    }
    if (from.has_tschchartinfodefaultdeprecated3dbarshape()) {
      set_tschchartinfodefaultdeprecated3dbarshape(from.tschchartinfodefaultdeprecated3dbarshape());
    }
    if (from.has_tschchartinfodefault3dchartopacity()) {
      set_tschchartinfodefault3dchartopacity(from.tschchartinfodefault3dchartopacity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartStyleArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartStyleArchive::CopyFrom(const ChartStyleArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartStyleArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_tschchartinfodefaultbackgroundfill()) {
    if (!this->tschchartinfodefaultbackgroundfill().IsInitialized()) return false;
  }
  if (has_tschchartinfodefaultbackgroundstroke()) {
    if (!this->tschchartinfodefaultbackgroundstroke().IsInitialized()) return false;
  }
  if (has_tschchartinfodefaultgridbackgroundfill()) {
    if (!this->tschchartinfodefaultgridbackgroundfill().IsInitialized()) return false;
  }
  if (has_tschchartinfodefaultborderstroke()) {
    if (!this->tschchartinfodefaultborderstroke().IsInitialized()) return false;
  }
  if (has_tschchartinfodefaulttitlecolor()) {
    if (!this->tschchartinfodefaulttitlecolor().IsInitialized()) return false;
  }
  if (has_tschchartinfodefaultbordershadow()) {
    if (!this->tschchartinfodefaultbordershadow().IsInitialized()) return false;
  }
  if (has_tschchartinfodefaultdeprecatedtrendlineequationshadow()) {
    if (!this->tschchartinfodefaultdeprecatedtrendlineequationshadow().IsInitialized()) return false;
  }
  if (has_tschchartinfodefaultdeprecatedtrendlinersquaredshadow()) {
    if (!this->tschchartinfodefaultdeprecatedtrendlinersquaredshadow().IsInitialized()) return false;
  }
  if (has_tschchartinfobardeprecated3dshadow()) {
    if (!this->tschchartinfobardeprecated3dshadow().IsInitialized()) return false;
  }
  if (has_tschchartinfocolumndeprecated3dshadow()) {
    if (!this->tschchartinfocolumndeprecated3dshadow().IsInitialized()) return false;
  }
  if (has_tschchartinfolinedeprecated3dshadow()) {
    if (!this->tschchartinfolinedeprecated3dshadow().IsInitialized()) return false;
  }
  if (has_tschchartinfoareadeprecated3dshadow()) {
    if (!this->tschchartinfoareadeprecated3dshadow().IsInitialized()) return false;
  }
  if (has_tschchartinfopiedeprecated3dshadow()) {
    if (!this->tschchartinfopiedeprecated3dshadow().IsInitialized()) return false;
  }
  if (has_tschchartinfodefault3dlightingpackage()) {
    if (!this->tschchartinfodefault3dlightingpackage().IsInitialized()) return false;
  }
  if (has_tschchartinfocolumn3dlightingpackage()) {
    if (!this->tschchartinfocolumn3dlightingpackage().IsInitialized()) return false;
  }
  if (has_tschchartinfobar3dlightingpackage()) {
    if (!this->tschchartinfobar3dlightingpackage().IsInitialized()) return false;
  }
  if (has_tschchartinfoline3dlightingpackage()) {
    if (!this->tschchartinfoline3dlightingpackage().IsInitialized()) return false;
  }
  if (has_tschchartinfoarea3dlightingpackage()) {
    if (!this->tschchartinfoarea3dlightingpackage().IsInitialized()) return false;
  }
  if (has_tschchartinfopie3dlightingpackage()) {
    if (!this->tschchartinfopie3dlightingpackage().IsInitialized()) return false;
  }
  return true;
}

void ChartStyleArchive::Swap(ChartStyleArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(tschchartinfodefaultbackgroundfill_, other->tschchartinfodefaultbackgroundfill_);
    std::swap(tschchartinfodefaultbackgroundstroke_, other->tschchartinfodefaultbackgroundstroke_);
    std::swap(tschchartinfodefaultgridbackgroundfill_, other->tschchartinfodefaultgridbackgroundfill_);
    std::swap(tschchartinfodefaultintersetgap_, other->tschchartinfodefaultintersetgap_);
    std::swap(tschchartinfodefaultinterbargap_, other->tschchartinfodefaultinterbargap_);
    std::swap(tschchartinfodefaultshowborder_, other->tschchartinfodefaultshowborder_);
    std::swap(tschchartinfodefaultborderstroke_, other->tschchartinfodefaultborderstroke_);
    std::swap(tschchartinfodefaulttitlecolor_, other->tschchartinfodefaulttitlecolor_);
    std::swap(tschchartinfodefaultgridbackgroundopacity_, other->tschchartinfodefaultgridbackgroundopacity_);
    std::swap(tschchartinfodefaultcombinelayers_, other->tschchartinfodefaultcombinelayers_);
    std::swap(tschchartinfodefaultbordershadow_, other->tschchartinfodefaultbordershadow_);
    std::swap(tschchartinfodefaultborderopacity_, other->tschchartinfodefaultborderopacity_);
    std::swap(tschchartinfodefaulttitleparagraphstyleindex_, other->tschchartinfodefaulttitleparagraphstyleindex_);
    std::swap(tschchartinfodefaultdeprecatedmasterfontfamily_, other->tschchartinfodefaultdeprecatedmasterfontfamily_);
    std::swap(tschchartinfodefaultdeprecatedmasterfontnamedsize_, other->tschchartinfodefaultdeprecatedmasterfontnamedsize_);
    std::swap(tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex_, other->tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex_);
    std::swap(tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex_, other->tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex_);
    std::swap(tschchartinfodefaultdeprecatedtrendlineequationshadow_, other->tschchartinfodefaultdeprecatedtrendlineequationshadow_);
    std::swap(tschchartinfodefaultdeprecatedtrendlinersquaredshadow_, other->tschchartinfodefaultdeprecatedtrendlinersquaredshadow_);
    std::swap(tschchartinfodefaultdeprecatedtrendlineequationopacity_, other->tschchartinfodefaultdeprecatedtrendlineequationopacity_);
    std::swap(tschchartinfodefaultdeprecatedtrendlinersquaredopacity_, other->tschchartinfodefaultdeprecatedtrendlinersquaredopacity_);
    std::swap(tschchartinfobardeprecated3dshadow_, other->tschchartinfobardeprecated3dshadow_);
    std::swap(tschchartinfocolumndeprecated3dshadow_, other->tschchartinfocolumndeprecated3dshadow_);
    std::swap(tschchartinfolinedeprecated3dshadow_, other->tschchartinfolinedeprecated3dshadow_);
    std::swap(tschchartinfoareadeprecated3dshadow_, other->tschchartinfoareadeprecated3dshadow_);
    std::swap(tschchartinfopiedeprecated3dshadow_, other->tschchartinfopiedeprecated3dshadow_);
    std::swap(tschchartinfodefault3dlightingpackage_, other->tschchartinfodefault3dlightingpackage_);
    std::swap(tschchartinfocolumn3dlightingpackage_, other->tschchartinfocolumn3dlightingpackage_);
    std::swap(tschchartinfobar3dlightingpackage_, other->tschchartinfobar3dlightingpackage_);
    std::swap(tschchartinfoline3dlightingpackage_, other->tschchartinfoline3dlightingpackage_);
    std::swap(tschchartinfoarea3dlightingpackage_, other->tschchartinfoarea3dlightingpackage_);
    std::swap(tschchartinfopie3dlightingpackage_, other->tschchartinfopie3dlightingpackage_);
    std::swap(tschchartinfodefaultdeprecated3dbeveledges_, other->tschchartinfodefaultdeprecated3dbeveledges_);
    std::swap(tschchartinfopiedeprecated3dbeveledges_, other->tschchartinfopiedeprecated3dbeveledges_);
    std::swap(tschchartinfobardeprecated3dbeveledges_, other->tschchartinfobardeprecated3dbeveledges_);
    std::swap(tschchartinfocolumndeprecated3dbeveledges_, other->tschchartinfocolumndeprecated3dbeveledges_);
    std::swap(tschchartinfodefaultdeprecated3dbarshape_, other->tschchartinfodefaultdeprecated3dbarshape_);
    std::swap(tschchartinfodefault3dchartopacity_, other->tschchartinfodefault3dchartopacity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChartStyleArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartStyleArchive_descriptor_;
  metadata.reflection = ChartStyleArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChartNonStyleArchive::kSuperFieldNumber;
const int ChartNonStyleArchive::kTschchartinfodefaulttitleFieldNumber;
const int ChartNonStyleArchive::kTschchartinfodefaultshowlegendFieldNumber;
const int ChartNonStyleArchive::kTschchartinfodefaultpiestartangleFieldNumber;
const int ChartNonStyleArchive::kTschchartinfodefaultshowtitleFieldNumber;
const int ChartNonStyleArchive::kTschchartinfodefaultdeprecatedagainmasterfontnamedsizeFieldNumber;
const int ChartNonStyleArchive::kTschchartinfodefault3DrotationFieldNumber;
const int ChartNonStyleArchive::kTschchartinfodefault3DscaleFieldNumber;
const int ChartNonStyleArchive::kTschchartinfocolumn3DscaleFieldNumber;
const int ChartNonStyleArchive::kTschchartinfobar3DscaleFieldNumber;
const int ChartNonStyleArchive::kTschchartinfoline3DscaleFieldNumber;
const int ChartNonStyleArchive::kTschchartinfoarea3DscaleFieldNumber;
const int ChartNonStyleArchive::kTschchartinfopie3DscaleFieldNumber;
const int ChartNonStyleArchive::kTschchartinfodefault3DviewportFieldNumber;
const int ChartNonStyleArchive::kTschchartinfodefaultdeprecated3DlightingpackageFieldNumber;
const int ChartNonStyleArchive::kTschchartinfocolumndeprecated3DlightingpackageFieldNumber;
const int ChartNonStyleArchive::kTschchartinfobardeprecated3DlightingpackageFieldNumber;
const int ChartNonStyleArchive::kTschchartinfolinedeprecated3DlightingpackageFieldNumber;
const int ChartNonStyleArchive::kTschchartinfoareadeprecated3DlightingpackageFieldNumber;
const int ChartNonStyleArchive::kTschchartinfopiedeprecated3DlightingpackageFieldNumber;
const int ChartNonStyleArchive::kTschchartinfodefaultskiphiddendataFieldNumber;
const int ChartNonStyleArchive::kTschchartinfodefault3DbeveledgesFieldNumber;
const int ChartNonStyleArchive::kTschchartinfodefault3DbarshapeFieldNumber;
const int ChartNonStyleArchive::kTschchartinfodefault3DintersetdepthgapFieldNumber;
#endif  // !_MSC_VER

ChartNonStyleArchive::ChartNonStyleArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartNonStyleArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSS::StyleArchive*>(&::TSS::StyleArchive::default_instance());
  tschchartinfodefault3drotation_ = const_cast< ::TSCH::Chart3DVectorArchive*>(&::TSCH::Chart3DVectorArchive::default_instance());
  tschchartinfodefault3dscale_ = const_cast< ::TSCH::Chart3DVectorArchive*>(&::TSCH::Chart3DVectorArchive::default_instance());
  tschchartinfocolumn3dscale_ = const_cast< ::TSCH::Chart3DVectorArchive*>(&::TSCH::Chart3DVectorArchive::default_instance());
  tschchartinfobar3dscale_ = const_cast< ::TSCH::Chart3DVectorArchive*>(&::TSCH::Chart3DVectorArchive::default_instance());
  tschchartinfoline3dscale_ = const_cast< ::TSCH::Chart3DVectorArchive*>(&::TSCH::Chart3DVectorArchive::default_instance());
  tschchartinfoarea3dscale_ = const_cast< ::TSCH::Chart3DVectorArchive*>(&::TSCH::Chart3DVectorArchive::default_instance());
  tschchartinfopie3dscale_ = const_cast< ::TSCH::Chart3DVectorArchive*>(&::TSCH::Chart3DVectorArchive::default_instance());
  tschchartinfodefault3dviewport_ = const_cast< ::TSCH::Chart3DVectorArchive*>(&::TSCH::Chart3DVectorArchive::default_instance());
  tschchartinfodefaultdeprecated3dlightingpackage_ = const_cast< ::TSCH::Chart3DLightingPackageArchive*>(&::TSCH::Chart3DLightingPackageArchive::default_instance());
  tschchartinfocolumndeprecated3dlightingpackage_ = const_cast< ::TSCH::Chart3DLightingPackageArchive*>(&::TSCH::Chart3DLightingPackageArchive::default_instance());
  tschchartinfobardeprecated3dlightingpackage_ = const_cast< ::TSCH::Chart3DLightingPackageArchive*>(&::TSCH::Chart3DLightingPackageArchive::default_instance());
  tschchartinfolinedeprecated3dlightingpackage_ = const_cast< ::TSCH::Chart3DLightingPackageArchive*>(&::TSCH::Chart3DLightingPackageArchive::default_instance());
  tschchartinfoareadeprecated3dlightingpackage_ = const_cast< ::TSCH::Chart3DLightingPackageArchive*>(&::TSCH::Chart3DLightingPackageArchive::default_instance());
  tschchartinfopiedeprecated3dlightingpackage_ = const_cast< ::TSCH::Chart3DLightingPackageArchive*>(&::TSCH::Chart3DLightingPackageArchive::default_instance());
}

ChartNonStyleArchive::ChartNonStyleArchive(const ChartNonStyleArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartNonStyleArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  tschchartinfodefaulttitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tschchartinfodefaultshowlegend_ = false;
  tschchartinfodefaultpiestartangle_ = 0;
  tschchartinfodefaultshowtitle_ = false;
  tschchartinfodefaultdeprecatedagainmasterfontnamedsize_ = 0;
  tschchartinfodefault3drotation_ = NULL;
  tschchartinfodefault3dscale_ = NULL;
  tschchartinfocolumn3dscale_ = NULL;
  tschchartinfobar3dscale_ = NULL;
  tschchartinfoline3dscale_ = NULL;
  tschchartinfoarea3dscale_ = NULL;
  tschchartinfopie3dscale_ = NULL;
  tschchartinfodefault3dviewport_ = NULL;
  tschchartinfodefaultdeprecated3dlightingpackage_ = NULL;
  tschchartinfocolumndeprecated3dlightingpackage_ = NULL;
  tschchartinfobardeprecated3dlightingpackage_ = NULL;
  tschchartinfolinedeprecated3dlightingpackage_ = NULL;
  tschchartinfoareadeprecated3dlightingpackage_ = NULL;
  tschchartinfopiedeprecated3dlightingpackage_ = NULL;
  tschchartinfodefaultskiphiddendata_ = false;
  tschchartinfodefault3dbeveledges_ = false;
  tschchartinfodefault3dbarshape_ = 0;
  tschchartinfodefault3dintersetdepthgap_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartNonStyleArchive::~ChartNonStyleArchive() {
  SharedDtor();
}

void ChartNonStyleArchive::SharedDtor() {
  if (tschchartinfodefaulttitle_ != &::google::protobuf::internal::kEmptyString) {
    delete tschchartinfodefaulttitle_;
  }
  if (this != default_instance_) {
    delete super_;
    delete tschchartinfodefault3drotation_;
    delete tschchartinfodefault3dscale_;
    delete tschchartinfocolumn3dscale_;
    delete tschchartinfobar3dscale_;
    delete tschchartinfoline3dscale_;
    delete tschchartinfoarea3dscale_;
    delete tschchartinfopie3dscale_;
    delete tschchartinfodefault3dviewport_;
    delete tschchartinfodefaultdeprecated3dlightingpackage_;
    delete tschchartinfocolumndeprecated3dlightingpackage_;
    delete tschchartinfobardeprecated3dlightingpackage_;
    delete tschchartinfolinedeprecated3dlightingpackage_;
    delete tschchartinfoareadeprecated3dlightingpackage_;
    delete tschchartinfopiedeprecated3dlightingpackage_;
  }
}

void ChartNonStyleArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartNonStyleArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartNonStyleArchive_descriptor_;
}

const ChartNonStyleArchive& ChartNonStyleArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHPreUFFArchives_2eproto();
  return *default_instance_;
}

ChartNonStyleArchive* ChartNonStyleArchive::default_instance_ = NULL;

ChartNonStyleArchive* ChartNonStyleArchive::New() const {
  return new ChartNonStyleArchive;
}

void ChartNonStyleArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSS::StyleArchive::Clear();
    }
    if (has_tschchartinfodefaulttitle()) {
      if (tschchartinfodefaulttitle_ != &::google::protobuf::internal::kEmptyString) {
        tschchartinfodefaulttitle_->clear();
      }
    }
    tschchartinfodefaultshowlegend_ = false;
    tschchartinfodefaultpiestartangle_ = 0;
    tschchartinfodefaultshowtitle_ = false;
    tschchartinfodefaultdeprecatedagainmasterfontnamedsize_ = 0;
    if (has_tschchartinfodefault3drotation()) {
      if (tschchartinfodefault3drotation_ != NULL) tschchartinfodefault3drotation_->::TSCH::Chart3DVectorArchive::Clear();
    }
    if (has_tschchartinfodefault3dscale()) {
      if (tschchartinfodefault3dscale_ != NULL) tschchartinfodefault3dscale_->::TSCH::Chart3DVectorArchive::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_tschchartinfocolumn3dscale()) {
      if (tschchartinfocolumn3dscale_ != NULL) tschchartinfocolumn3dscale_->::TSCH::Chart3DVectorArchive::Clear();
    }
    if (has_tschchartinfobar3dscale()) {
      if (tschchartinfobar3dscale_ != NULL) tschchartinfobar3dscale_->::TSCH::Chart3DVectorArchive::Clear();
    }
    if (has_tschchartinfoline3dscale()) {
      if (tschchartinfoline3dscale_ != NULL) tschchartinfoline3dscale_->::TSCH::Chart3DVectorArchive::Clear();
    }
    if (has_tschchartinfoarea3dscale()) {
      if (tschchartinfoarea3dscale_ != NULL) tschchartinfoarea3dscale_->::TSCH::Chart3DVectorArchive::Clear();
    }
    if (has_tschchartinfopie3dscale()) {
      if (tschchartinfopie3dscale_ != NULL) tschchartinfopie3dscale_->::TSCH::Chart3DVectorArchive::Clear();
    }
    if (has_tschchartinfodefault3dviewport()) {
      if (tschchartinfodefault3dviewport_ != NULL) tschchartinfodefault3dviewport_->::TSCH::Chart3DVectorArchive::Clear();
    }
    if (has_tschchartinfodefaultdeprecated3dlightingpackage()) {
      if (tschchartinfodefaultdeprecated3dlightingpackage_ != NULL) tschchartinfodefaultdeprecated3dlightingpackage_->::TSCH::Chart3DLightingPackageArchive::Clear();
    }
    if (has_tschchartinfocolumndeprecated3dlightingpackage()) {
      if (tschchartinfocolumndeprecated3dlightingpackage_ != NULL) tschchartinfocolumndeprecated3dlightingpackage_->::TSCH::Chart3DLightingPackageArchive::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_tschchartinfobardeprecated3dlightingpackage()) {
      if (tschchartinfobardeprecated3dlightingpackage_ != NULL) tschchartinfobardeprecated3dlightingpackage_->::TSCH::Chart3DLightingPackageArchive::Clear();
    }
    if (has_tschchartinfolinedeprecated3dlightingpackage()) {
      if (tschchartinfolinedeprecated3dlightingpackage_ != NULL) tschchartinfolinedeprecated3dlightingpackage_->::TSCH::Chart3DLightingPackageArchive::Clear();
    }
    if (has_tschchartinfoareadeprecated3dlightingpackage()) {
      if (tschchartinfoareadeprecated3dlightingpackage_ != NULL) tschchartinfoareadeprecated3dlightingpackage_->::TSCH::Chart3DLightingPackageArchive::Clear();
    }
    if (has_tschchartinfopiedeprecated3dlightingpackage()) {
      if (tschchartinfopiedeprecated3dlightingpackage_ != NULL) tschchartinfopiedeprecated3dlightingpackage_->::TSCH::Chart3DLightingPackageArchive::Clear();
    }
    tschchartinfodefaultskiphiddendata_ = false;
    tschchartinfodefault3dbeveledges_ = false;
    tschchartinfodefault3dbarshape_ = 0;
    tschchartinfodefault3dintersetdepthgap_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartNonStyleArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSS.StyleArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_tschchartinfodefaulttitle;
        break;
      }

      // optional string tschchartinfodefaulttitle = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfodefaulttitle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tschchartinfodefaulttitle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tschchartinfodefaulttitle().data(), this->tschchartinfodefaulttitle().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_tschchartinfodefaultshowlegend;
        break;
      }

      // optional bool tschchartinfodefaultshowlegend = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartinfodefaultshowlegend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartinfodefaultshowlegend_)));
          set_has_tschchartinfodefaultshowlegend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_tschchartinfodefaultpiestartangle;
        break;
      }

      // optional float tschchartinfodefaultpiestartangle = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartinfodefaultpiestartangle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartinfodefaultpiestartangle_)));
          set_has_tschchartinfodefaultpiestartangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_tschchartinfodefaultshowtitle;
        break;
      }

      // optional bool tschchartinfodefaultshowtitle = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartinfodefaultshowtitle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartinfodefaultshowtitle_)));
          set_has_tschchartinfodefaultshowtitle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_tschchartinfodefaultdeprecatedagainmasterfontnamedsize;
        break;
      }

      // optional int32 tschchartinfodefaultdeprecatedagainmasterfontnamedsize = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartinfodefaultdeprecatedagainmasterfontnamedsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartinfodefaultdeprecatedagainmasterfontnamedsize_)));
          set_has_tschchartinfodefaultdeprecatedagainmasterfontnamedsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2402)) goto parse_tschchartinfodefault3drotation;
        break;
      }

      // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3drotation = 300;
      case 300: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfodefault3drotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfodefault3drotation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2410)) goto parse_tschchartinfodefault3dscale;
        break;
      }

      // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dscale = 301;
      case 301: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfodefault3dscale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfodefault3dscale()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2418)) goto parse_tschchartinfocolumn3dscale;
        break;
      }

      // optional .TSCH.Chart3DVectorArchive tschchartinfocolumn3dscale = 302;
      case 302: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfocolumn3dscale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfocolumn3dscale()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2426)) goto parse_tschchartinfobar3dscale;
        break;
      }

      // optional .TSCH.Chart3DVectorArchive tschchartinfobar3dscale = 303;
      case 303: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfobar3dscale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfobar3dscale()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2434)) goto parse_tschchartinfoline3dscale;
        break;
      }

      // optional .TSCH.Chart3DVectorArchive tschchartinfoline3dscale = 304;
      case 304: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfoline3dscale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfoline3dscale()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2442)) goto parse_tschchartinfoarea3dscale;
        break;
      }

      // optional .TSCH.Chart3DVectorArchive tschchartinfoarea3dscale = 305;
      case 305: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfoarea3dscale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfoarea3dscale()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2450)) goto parse_tschchartinfopie3dscale;
        break;
      }

      // optional .TSCH.Chart3DVectorArchive tschchartinfopie3dscale = 306;
      case 306: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfopie3dscale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfopie3dscale()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2506)) goto parse_tschchartinfodefault3dviewport;
        break;
      }

      // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dviewport = 313;
      case 313: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfodefault3dviewport:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfodefault3dviewport()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2562)) goto parse_tschchartinfodefaultdeprecated3dlightingpackage;
        break;
      }

      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfodefaultdeprecated3dlightingpackage = 320;
      case 320: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfodefaultdeprecated3dlightingpackage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfodefaultdeprecated3dlightingpackage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2570)) goto parse_tschchartinfocolumndeprecated3dlightingpackage;
        break;
      }

      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfocolumndeprecated3dlightingpackage = 321;
      case 321: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfocolumndeprecated3dlightingpackage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfocolumndeprecated3dlightingpackage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2578)) goto parse_tschchartinfobardeprecated3dlightingpackage;
        break;
      }

      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfobardeprecated3dlightingpackage = 322;
      case 322: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfobardeprecated3dlightingpackage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfobardeprecated3dlightingpackage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2586)) goto parse_tschchartinfolinedeprecated3dlightingpackage;
        break;
      }

      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfolinedeprecated3dlightingpackage = 323;
      case 323: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfolinedeprecated3dlightingpackage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfolinedeprecated3dlightingpackage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2594)) goto parse_tschchartinfoareadeprecated3dlightingpackage;
        break;
      }

      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoareadeprecated3dlightingpackage = 324;
      case 324: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfoareadeprecated3dlightingpackage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfoareadeprecated3dlightingpackage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2602)) goto parse_tschchartinfopiedeprecated3dlightingpackage;
        break;
      }

      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfopiedeprecated3dlightingpackage = 325;
      case 325: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfopiedeprecated3dlightingpackage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfopiedeprecated3dlightingpackage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2608)) goto parse_tschchartinfodefaultskiphiddendata;
        break;
      }

      // optional bool tschchartinfodefaultskiphiddendata = 326;
      case 326: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartinfodefaultskiphiddendata:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartinfodefaultskiphiddendata_)));
          set_has_tschchartinfodefaultskiphiddendata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2616)) goto parse_tschchartinfodefault3dbeveledges;
        break;
      }

      // optional bool tschchartinfodefault3dbeveledges = 327;
      case 327: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartinfodefault3dbeveledges:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartinfodefault3dbeveledges_)));
          set_has_tschchartinfodefault3dbeveledges();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2653)) goto parse_tschchartinfodefault3dintersetdepthgap;
        break;
      }

      // optional float tschchartinfodefault3dintersetdepthgap = 331;
      case 331: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartinfodefault3dintersetdepthgap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartinfodefault3dintersetdepthgap_)));
          set_has_tschchartinfodefault3dintersetdepthgap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2688)) goto parse_tschchartinfodefault3dbarshape;
        break;
      }

      // optional int32 tschchartinfodefault3dbarshape = 336;
      case 336: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartinfodefault3dbarshape:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartinfodefault3dbarshape_)));
          set_has_tschchartinfodefault3dbarshape();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChartNonStyleArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSS.StyleArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional string tschchartinfodefaulttitle = 10;
  if (has_tschchartinfodefaulttitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tschchartinfodefaulttitle().data(), this->tschchartinfodefaulttitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->tschchartinfodefaulttitle(), output);
  }

  // optional bool tschchartinfodefaultshowlegend = 11;
  if (has_tschchartinfodefaultshowlegend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->tschchartinfodefaultshowlegend(), output);
  }

  // optional float tschchartinfodefaultpiestartangle = 12;
  if (has_tschchartinfodefaultpiestartangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->tschchartinfodefaultpiestartangle(), output);
  }

  // optional bool tschchartinfodefaultshowtitle = 13;
  if (has_tschchartinfodefaultshowtitle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->tschchartinfodefaultshowtitle(), output);
  }

  // optional int32 tschchartinfodefaultdeprecatedagainmasterfontnamedsize = 25;
  if (has_tschchartinfodefaultdeprecatedagainmasterfontnamedsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->tschchartinfodefaultdeprecatedagainmasterfontnamedsize(), output);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3drotation = 300;
  if (has_tschchartinfodefault3drotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      300, this->tschchartinfodefault3drotation(), output);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dscale = 301;
  if (has_tschchartinfodefault3dscale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      301, this->tschchartinfodefault3dscale(), output);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfocolumn3dscale = 302;
  if (has_tschchartinfocolumn3dscale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      302, this->tschchartinfocolumn3dscale(), output);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfobar3dscale = 303;
  if (has_tschchartinfobar3dscale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      303, this->tschchartinfobar3dscale(), output);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfoline3dscale = 304;
  if (has_tschchartinfoline3dscale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      304, this->tschchartinfoline3dscale(), output);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfoarea3dscale = 305;
  if (has_tschchartinfoarea3dscale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      305, this->tschchartinfoarea3dscale(), output);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfopie3dscale = 306;
  if (has_tschchartinfopie3dscale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      306, this->tschchartinfopie3dscale(), output);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dviewport = 313;
  if (has_tschchartinfodefault3dviewport()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      313, this->tschchartinfodefault3dviewport(), output);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfodefaultdeprecated3dlightingpackage = 320;
  if (has_tschchartinfodefaultdeprecated3dlightingpackage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      320, this->tschchartinfodefaultdeprecated3dlightingpackage(), output);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfocolumndeprecated3dlightingpackage = 321;
  if (has_tschchartinfocolumndeprecated3dlightingpackage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      321, this->tschchartinfocolumndeprecated3dlightingpackage(), output);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfobardeprecated3dlightingpackage = 322;
  if (has_tschchartinfobardeprecated3dlightingpackage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      322, this->tschchartinfobardeprecated3dlightingpackage(), output);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfolinedeprecated3dlightingpackage = 323;
  if (has_tschchartinfolinedeprecated3dlightingpackage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      323, this->tschchartinfolinedeprecated3dlightingpackage(), output);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoareadeprecated3dlightingpackage = 324;
  if (has_tschchartinfoareadeprecated3dlightingpackage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      324, this->tschchartinfoareadeprecated3dlightingpackage(), output);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfopiedeprecated3dlightingpackage = 325;
  if (has_tschchartinfopiedeprecated3dlightingpackage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      325, this->tschchartinfopiedeprecated3dlightingpackage(), output);
  }

  // optional bool tschchartinfodefaultskiphiddendata = 326;
  if (has_tschchartinfodefaultskiphiddendata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(326, this->tschchartinfodefaultskiphiddendata(), output);
  }

  // optional bool tschchartinfodefault3dbeveledges = 327;
  if (has_tschchartinfodefault3dbeveledges()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(327, this->tschchartinfodefault3dbeveledges(), output);
  }

  // optional float tschchartinfodefault3dintersetdepthgap = 331;
  if (has_tschchartinfodefault3dintersetdepthgap()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(331, this->tschchartinfodefault3dintersetdepthgap(), output);
  }

  // optional int32 tschchartinfodefault3dbarshape = 336;
  if (has_tschchartinfodefault3dbarshape()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(336, this->tschchartinfodefault3dbarshape(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartNonStyleArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSS.StyleArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional string tschchartinfodefaulttitle = 10;
  if (has_tschchartinfodefaulttitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tschchartinfodefaulttitle().data(), this->tschchartinfodefaulttitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->tschchartinfodefaulttitle(), target);
  }

  // optional bool tschchartinfodefaultshowlegend = 11;
  if (has_tschchartinfodefaultshowlegend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->tschchartinfodefaultshowlegend(), target);
  }

  // optional float tschchartinfodefaultpiestartangle = 12;
  if (has_tschchartinfodefaultpiestartangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->tschchartinfodefaultpiestartangle(), target);
  }

  // optional bool tschchartinfodefaultshowtitle = 13;
  if (has_tschchartinfodefaultshowtitle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->tschchartinfodefaultshowtitle(), target);
  }

  // optional int32 tschchartinfodefaultdeprecatedagainmasterfontnamedsize = 25;
  if (has_tschchartinfodefaultdeprecatedagainmasterfontnamedsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->tschchartinfodefaultdeprecatedagainmasterfontnamedsize(), target);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3drotation = 300;
  if (has_tschchartinfodefault3drotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        300, this->tschchartinfodefault3drotation(), target);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dscale = 301;
  if (has_tschchartinfodefault3dscale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        301, this->tschchartinfodefault3dscale(), target);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfocolumn3dscale = 302;
  if (has_tschchartinfocolumn3dscale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        302, this->tschchartinfocolumn3dscale(), target);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfobar3dscale = 303;
  if (has_tschchartinfobar3dscale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        303, this->tschchartinfobar3dscale(), target);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfoline3dscale = 304;
  if (has_tschchartinfoline3dscale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        304, this->tschchartinfoline3dscale(), target);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfoarea3dscale = 305;
  if (has_tschchartinfoarea3dscale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        305, this->tschchartinfoarea3dscale(), target);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfopie3dscale = 306;
  if (has_tschchartinfopie3dscale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        306, this->tschchartinfopie3dscale(), target);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dviewport = 313;
  if (has_tschchartinfodefault3dviewport()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        313, this->tschchartinfodefault3dviewport(), target);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfodefaultdeprecated3dlightingpackage = 320;
  if (has_tschchartinfodefaultdeprecated3dlightingpackage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        320, this->tschchartinfodefaultdeprecated3dlightingpackage(), target);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfocolumndeprecated3dlightingpackage = 321;
  if (has_tschchartinfocolumndeprecated3dlightingpackage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        321, this->tschchartinfocolumndeprecated3dlightingpackage(), target);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfobardeprecated3dlightingpackage = 322;
  if (has_tschchartinfobardeprecated3dlightingpackage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        322, this->tschchartinfobardeprecated3dlightingpackage(), target);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfolinedeprecated3dlightingpackage = 323;
  if (has_tschchartinfolinedeprecated3dlightingpackage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        323, this->tschchartinfolinedeprecated3dlightingpackage(), target);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoareadeprecated3dlightingpackage = 324;
  if (has_tschchartinfoareadeprecated3dlightingpackage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        324, this->tschchartinfoareadeprecated3dlightingpackage(), target);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfopiedeprecated3dlightingpackage = 325;
  if (has_tschchartinfopiedeprecated3dlightingpackage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        325, this->tschchartinfopiedeprecated3dlightingpackage(), target);
  }

  // optional bool tschchartinfodefaultskiphiddendata = 326;
  if (has_tschchartinfodefaultskiphiddendata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(326, this->tschchartinfodefaultskiphiddendata(), target);
  }

  // optional bool tschchartinfodefault3dbeveledges = 327;
  if (has_tschchartinfodefault3dbeveledges()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(327, this->tschchartinfodefault3dbeveledges(), target);
  }

  // optional float tschchartinfodefault3dintersetdepthgap = 331;
  if (has_tschchartinfodefault3dintersetdepthgap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(331, this->tschchartinfodefault3dintersetdepthgap(), target);
  }

  // optional int32 tschchartinfodefault3dbarshape = 336;
  if (has_tschchartinfodefault3dbarshape()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(336, this->tschchartinfodefault3dbarshape(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartNonStyleArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSS.StyleArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional string tschchartinfodefaulttitle = 10;
    if (has_tschchartinfodefaulttitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tschchartinfodefaulttitle());
    }

    // optional bool tschchartinfodefaultshowlegend = 11;
    if (has_tschchartinfodefaultshowlegend()) {
      total_size += 1 + 1;
    }

    // optional float tschchartinfodefaultpiestartangle = 12;
    if (has_tschchartinfodefaultpiestartangle()) {
      total_size += 1 + 4;
    }

    // optional bool tschchartinfodefaultshowtitle = 13;
    if (has_tschchartinfodefaultshowtitle()) {
      total_size += 1 + 1;
    }

    // optional int32 tschchartinfodefaultdeprecatedagainmasterfontnamedsize = 25;
    if (has_tschchartinfodefaultdeprecatedagainmasterfontnamedsize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartinfodefaultdeprecatedagainmasterfontnamedsize());
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3drotation = 300;
    if (has_tschchartinfodefault3drotation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfodefault3drotation());
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dscale = 301;
    if (has_tschchartinfodefault3dscale()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfodefault3dscale());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .TSCH.Chart3DVectorArchive tschchartinfocolumn3dscale = 302;
    if (has_tschchartinfocolumn3dscale()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfocolumn3dscale());
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfobar3dscale = 303;
    if (has_tschchartinfobar3dscale()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfobar3dscale());
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfoline3dscale = 304;
    if (has_tschchartinfoline3dscale()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfoline3dscale());
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfoarea3dscale = 305;
    if (has_tschchartinfoarea3dscale()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfoarea3dscale());
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfopie3dscale = 306;
    if (has_tschchartinfopie3dscale()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfopie3dscale());
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dviewport = 313;
    if (has_tschchartinfodefault3dviewport()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfodefault3dviewport());
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfodefaultdeprecated3dlightingpackage = 320;
    if (has_tschchartinfodefaultdeprecated3dlightingpackage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfodefaultdeprecated3dlightingpackage());
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfocolumndeprecated3dlightingpackage = 321;
    if (has_tschchartinfocolumndeprecated3dlightingpackage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfocolumndeprecated3dlightingpackage());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfobardeprecated3dlightingpackage = 322;
    if (has_tschchartinfobardeprecated3dlightingpackage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfobardeprecated3dlightingpackage());
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfolinedeprecated3dlightingpackage = 323;
    if (has_tschchartinfolinedeprecated3dlightingpackage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfolinedeprecated3dlightingpackage());
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoareadeprecated3dlightingpackage = 324;
    if (has_tschchartinfoareadeprecated3dlightingpackage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfoareadeprecated3dlightingpackage());
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfopiedeprecated3dlightingpackage = 325;
    if (has_tschchartinfopiedeprecated3dlightingpackage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfopiedeprecated3dlightingpackage());
    }

    // optional bool tschchartinfodefaultskiphiddendata = 326;
    if (has_tschchartinfodefaultskiphiddendata()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartinfodefault3dbeveledges = 327;
    if (has_tschchartinfodefault3dbeveledges()) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartinfodefault3dbarshape = 336;
    if (has_tschchartinfodefault3dbarshape()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartinfodefault3dbarshape());
    }

    // optional float tschchartinfodefault3dintersetdepthgap = 331;
    if (has_tschchartinfodefault3dintersetdepthgap()) {
      total_size += 2 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartNonStyleArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartNonStyleArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartNonStyleArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartNonStyleArchive::MergeFrom(const ChartNonStyleArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSS::StyleArchive::MergeFrom(from.super());
    }
    if (from.has_tschchartinfodefaulttitle()) {
      set_tschchartinfodefaulttitle(from.tschchartinfodefaulttitle());
    }
    if (from.has_tschchartinfodefaultshowlegend()) {
      set_tschchartinfodefaultshowlegend(from.tschchartinfodefaultshowlegend());
    }
    if (from.has_tschchartinfodefaultpiestartangle()) {
      set_tschchartinfodefaultpiestartangle(from.tschchartinfodefaultpiestartangle());
    }
    if (from.has_tschchartinfodefaultshowtitle()) {
      set_tschchartinfodefaultshowtitle(from.tschchartinfodefaultshowtitle());
    }
    if (from.has_tschchartinfodefaultdeprecatedagainmasterfontnamedsize()) {
      set_tschchartinfodefaultdeprecatedagainmasterfontnamedsize(from.tschchartinfodefaultdeprecatedagainmasterfontnamedsize());
    }
    if (from.has_tschchartinfodefault3drotation()) {
      mutable_tschchartinfodefault3drotation()->::TSCH::Chart3DVectorArchive::MergeFrom(from.tschchartinfodefault3drotation());
    }
    if (from.has_tschchartinfodefault3dscale()) {
      mutable_tschchartinfodefault3dscale()->::TSCH::Chart3DVectorArchive::MergeFrom(from.tschchartinfodefault3dscale());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tschchartinfocolumn3dscale()) {
      mutable_tschchartinfocolumn3dscale()->::TSCH::Chart3DVectorArchive::MergeFrom(from.tschchartinfocolumn3dscale());
    }
    if (from.has_tschchartinfobar3dscale()) {
      mutable_tschchartinfobar3dscale()->::TSCH::Chart3DVectorArchive::MergeFrom(from.tschchartinfobar3dscale());
    }
    if (from.has_tschchartinfoline3dscale()) {
      mutable_tschchartinfoline3dscale()->::TSCH::Chart3DVectorArchive::MergeFrom(from.tschchartinfoline3dscale());
    }
    if (from.has_tschchartinfoarea3dscale()) {
      mutable_tschchartinfoarea3dscale()->::TSCH::Chart3DVectorArchive::MergeFrom(from.tschchartinfoarea3dscale());
    }
    if (from.has_tschchartinfopie3dscale()) {
      mutable_tschchartinfopie3dscale()->::TSCH::Chart3DVectorArchive::MergeFrom(from.tschchartinfopie3dscale());
    }
    if (from.has_tschchartinfodefault3dviewport()) {
      mutable_tschchartinfodefault3dviewport()->::TSCH::Chart3DVectorArchive::MergeFrom(from.tschchartinfodefault3dviewport());
    }
    if (from.has_tschchartinfodefaultdeprecated3dlightingpackage()) {
      mutable_tschchartinfodefaultdeprecated3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(from.tschchartinfodefaultdeprecated3dlightingpackage());
    }
    if (from.has_tschchartinfocolumndeprecated3dlightingpackage()) {
      mutable_tschchartinfocolumndeprecated3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(from.tschchartinfocolumndeprecated3dlightingpackage());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_tschchartinfobardeprecated3dlightingpackage()) {
      mutable_tschchartinfobardeprecated3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(from.tschchartinfobardeprecated3dlightingpackage());
    }
    if (from.has_tschchartinfolinedeprecated3dlightingpackage()) {
      mutable_tschchartinfolinedeprecated3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(from.tschchartinfolinedeprecated3dlightingpackage());
    }
    if (from.has_tschchartinfoareadeprecated3dlightingpackage()) {
      mutable_tschchartinfoareadeprecated3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(from.tschchartinfoareadeprecated3dlightingpackage());
    }
    if (from.has_tschchartinfopiedeprecated3dlightingpackage()) {
      mutable_tschchartinfopiedeprecated3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(from.tschchartinfopiedeprecated3dlightingpackage());
    }
    if (from.has_tschchartinfodefaultskiphiddendata()) {
      set_tschchartinfodefaultskiphiddendata(from.tschchartinfodefaultskiphiddendata());
    }
    if (from.has_tschchartinfodefault3dbeveledges()) {
      set_tschchartinfodefault3dbeveledges(from.tschchartinfodefault3dbeveledges());
    }
    if (from.has_tschchartinfodefault3dbarshape()) {
      set_tschchartinfodefault3dbarshape(from.tschchartinfodefault3dbarshape());
    }
    if (from.has_tschchartinfodefault3dintersetdepthgap()) {
      set_tschchartinfodefault3dintersetdepthgap(from.tschchartinfodefault3dintersetdepthgap());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartNonStyleArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartNonStyleArchive::CopyFrom(const ChartNonStyleArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartNonStyleArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_tschchartinfodefault3drotation()) {
    if (!this->tschchartinfodefault3drotation().IsInitialized()) return false;
  }
  if (has_tschchartinfodefault3dscale()) {
    if (!this->tschchartinfodefault3dscale().IsInitialized()) return false;
  }
  if (has_tschchartinfocolumn3dscale()) {
    if (!this->tschchartinfocolumn3dscale().IsInitialized()) return false;
  }
  if (has_tschchartinfobar3dscale()) {
    if (!this->tschchartinfobar3dscale().IsInitialized()) return false;
  }
  if (has_tschchartinfoline3dscale()) {
    if (!this->tschchartinfoline3dscale().IsInitialized()) return false;
  }
  if (has_tschchartinfoarea3dscale()) {
    if (!this->tschchartinfoarea3dscale().IsInitialized()) return false;
  }
  if (has_tschchartinfopie3dscale()) {
    if (!this->tschchartinfopie3dscale().IsInitialized()) return false;
  }
  if (has_tschchartinfodefault3dviewport()) {
    if (!this->tschchartinfodefault3dviewport().IsInitialized()) return false;
  }
  if (has_tschchartinfodefaultdeprecated3dlightingpackage()) {
    if (!this->tschchartinfodefaultdeprecated3dlightingpackage().IsInitialized()) return false;
  }
  if (has_tschchartinfocolumndeprecated3dlightingpackage()) {
    if (!this->tschchartinfocolumndeprecated3dlightingpackage().IsInitialized()) return false;
  }
  if (has_tschchartinfobardeprecated3dlightingpackage()) {
    if (!this->tschchartinfobardeprecated3dlightingpackage().IsInitialized()) return false;
  }
  if (has_tschchartinfolinedeprecated3dlightingpackage()) {
    if (!this->tschchartinfolinedeprecated3dlightingpackage().IsInitialized()) return false;
  }
  if (has_tschchartinfoareadeprecated3dlightingpackage()) {
    if (!this->tschchartinfoareadeprecated3dlightingpackage().IsInitialized()) return false;
  }
  if (has_tschchartinfopiedeprecated3dlightingpackage()) {
    if (!this->tschchartinfopiedeprecated3dlightingpackage().IsInitialized()) return false;
  }
  return true;
}

void ChartNonStyleArchive::Swap(ChartNonStyleArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(tschchartinfodefaulttitle_, other->tschchartinfodefaulttitle_);
    std::swap(tschchartinfodefaultshowlegend_, other->tschchartinfodefaultshowlegend_);
    std::swap(tschchartinfodefaultpiestartangle_, other->tschchartinfodefaultpiestartangle_);
    std::swap(tschchartinfodefaultshowtitle_, other->tschchartinfodefaultshowtitle_);
    std::swap(tschchartinfodefaultdeprecatedagainmasterfontnamedsize_, other->tschchartinfodefaultdeprecatedagainmasterfontnamedsize_);
    std::swap(tschchartinfodefault3drotation_, other->tschchartinfodefault3drotation_);
    std::swap(tschchartinfodefault3dscale_, other->tschchartinfodefault3dscale_);
    std::swap(tschchartinfocolumn3dscale_, other->tschchartinfocolumn3dscale_);
    std::swap(tschchartinfobar3dscale_, other->tschchartinfobar3dscale_);
    std::swap(tschchartinfoline3dscale_, other->tschchartinfoline3dscale_);
    std::swap(tschchartinfoarea3dscale_, other->tschchartinfoarea3dscale_);
    std::swap(tschchartinfopie3dscale_, other->tschchartinfopie3dscale_);
    std::swap(tschchartinfodefault3dviewport_, other->tschchartinfodefault3dviewport_);
    std::swap(tschchartinfodefaultdeprecated3dlightingpackage_, other->tschchartinfodefaultdeprecated3dlightingpackage_);
    std::swap(tschchartinfocolumndeprecated3dlightingpackage_, other->tschchartinfocolumndeprecated3dlightingpackage_);
    std::swap(tschchartinfobardeprecated3dlightingpackage_, other->tschchartinfobardeprecated3dlightingpackage_);
    std::swap(tschchartinfolinedeprecated3dlightingpackage_, other->tschchartinfolinedeprecated3dlightingpackage_);
    std::swap(tschchartinfoareadeprecated3dlightingpackage_, other->tschchartinfoareadeprecated3dlightingpackage_);
    std::swap(tschchartinfopiedeprecated3dlightingpackage_, other->tschchartinfopiedeprecated3dlightingpackage_);
    std::swap(tschchartinfodefaultskiphiddendata_, other->tschchartinfodefaultskiphiddendata_);
    std::swap(tschchartinfodefault3dbeveledges_, other->tschchartinfodefault3dbeveledges_);
    std::swap(tschchartinfodefault3dbarshape_, other->tschchartinfodefault3dbarshape_);
    std::swap(tschchartinfodefault3dintersetdepthgap_, other->tschchartinfodefault3dintersetdepthgap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChartNonStyleArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartNonStyleArchive_descriptor_;
  metadata.reflection = ChartNonStyleArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LegendStyleArchive::kSuperFieldNumber;
const int LegendStyleArchive::kTschlegendmodeldefaultfillFieldNumber;
const int LegendStyleArchive::kTschlegendmodeldefaultstrokeFieldNumber;
const int LegendStyleArchive::kTschlegendmodeldefaultshadowFieldNumber;
const int LegendStyleArchive::kTschlegendmodeldefaultopacityFieldNumber;
const int LegendStyleArchive::kTschlegendmodeldefaultlabelparagraphstyleindexFieldNumber;
#endif  // !_MSC_VER

LegendStyleArchive::LegendStyleArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LegendStyleArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSS::StyleArchive*>(&::TSS::StyleArchive::default_instance());
  tschlegendmodeldefaultfill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  tschlegendmodeldefaultstroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschlegendmodeldefaultshadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
}

LegendStyleArchive::LegendStyleArchive(const LegendStyleArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LegendStyleArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  tschlegendmodeldefaultfill_ = NULL;
  tschlegendmodeldefaultstroke_ = NULL;
  tschlegendmodeldefaultshadow_ = NULL;
  tschlegendmodeldefaultopacity_ = 0;
  tschlegendmodeldefaultlabelparagraphstyleindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LegendStyleArchive::~LegendStyleArchive() {
  SharedDtor();
}

void LegendStyleArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete tschlegendmodeldefaultfill_;
    delete tschlegendmodeldefaultstroke_;
    delete tschlegendmodeldefaultshadow_;
  }
}

void LegendStyleArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LegendStyleArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LegendStyleArchive_descriptor_;
}

const LegendStyleArchive& LegendStyleArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHPreUFFArchives_2eproto();
  return *default_instance_;
}

LegendStyleArchive* LegendStyleArchive::default_instance_ = NULL;

LegendStyleArchive* LegendStyleArchive::New() const {
  return new LegendStyleArchive;
}

void LegendStyleArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSS::StyleArchive::Clear();
    }
    if (has_tschlegendmodeldefaultfill()) {
      if (tschlegendmodeldefaultfill_ != NULL) tschlegendmodeldefaultfill_->::TSD::FillArchive::Clear();
    }
    if (has_tschlegendmodeldefaultstroke()) {
      if (tschlegendmodeldefaultstroke_ != NULL) tschlegendmodeldefaultstroke_->::TSD::StrokeArchive::Clear();
    }
    if (has_tschlegendmodeldefaultshadow()) {
      if (tschlegendmodeldefaultshadow_ != NULL) tschlegendmodeldefaultshadow_->::TSD::ShadowArchive::Clear();
    }
    tschlegendmodeldefaultopacity_ = 0;
    tschlegendmodeldefaultlabelparagraphstyleindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LegendStyleArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSS.StyleArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_tschlegendmodeldefaultfill;
        break;
      }

      // optional .TSD.FillArchive tschlegendmodeldefaultfill = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschlegendmodeldefaultfill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschlegendmodeldefaultfill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_tschlegendmodeldefaultstroke;
        break;
      }

      // optional .TSD.StrokeArchive tschlegendmodeldefaultstroke = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschlegendmodeldefaultstroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschlegendmodeldefaultstroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_tschlegendmodeldefaultshadow;
        break;
      }

      // optional .TSD.ShadowArchive tschlegendmodeldefaultshadow = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschlegendmodeldefaultshadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschlegendmodeldefaultshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_tschlegendmodeldefaultopacity;
        break;
      }

      // optional float tschlegendmodeldefaultopacity = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschlegendmodeldefaultopacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschlegendmodeldefaultopacity_)));
          set_has_tschlegendmodeldefaultopacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_tschlegendmodeldefaultlabelparagraphstyleindex;
        break;
      }

      // optional int32 tschlegendmodeldefaultlabelparagraphstyleindex = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschlegendmodeldefaultlabelparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschlegendmodeldefaultlabelparagraphstyleindex_)));
          set_has_tschlegendmodeldefaultlabelparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LegendStyleArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSS.StyleArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSD.FillArchive tschlegendmodeldefaultfill = 10;
  if (has_tschlegendmodeldefaultfill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->tschlegendmodeldefaultfill(), output);
  }

  // optional .TSD.StrokeArchive tschlegendmodeldefaultstroke = 11;
  if (has_tschlegendmodeldefaultstroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->tschlegendmodeldefaultstroke(), output);
  }

  // optional .TSD.ShadowArchive tschlegendmodeldefaultshadow = 14;
  if (has_tschlegendmodeldefaultshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->tschlegendmodeldefaultshadow(), output);
  }

  // optional float tschlegendmodeldefaultopacity = 15;
  if (has_tschlegendmodeldefaultopacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->tschlegendmodeldefaultopacity(), output);
  }

  // optional int32 tschlegendmodeldefaultlabelparagraphstyleindex = 16;
  if (has_tschlegendmodeldefaultlabelparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->tschlegendmodeldefaultlabelparagraphstyleindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LegendStyleArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSS.StyleArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSD.FillArchive tschlegendmodeldefaultfill = 10;
  if (has_tschlegendmodeldefaultfill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->tschlegendmodeldefaultfill(), target);
  }

  // optional .TSD.StrokeArchive tschlegendmodeldefaultstroke = 11;
  if (has_tschlegendmodeldefaultstroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->tschlegendmodeldefaultstroke(), target);
  }

  // optional .TSD.ShadowArchive tschlegendmodeldefaultshadow = 14;
  if (has_tschlegendmodeldefaultshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->tschlegendmodeldefaultshadow(), target);
  }

  // optional float tschlegendmodeldefaultopacity = 15;
  if (has_tschlegendmodeldefaultopacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->tschlegendmodeldefaultopacity(), target);
  }

  // optional int32 tschlegendmodeldefaultlabelparagraphstyleindex = 16;
  if (has_tschlegendmodeldefaultlabelparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->tschlegendmodeldefaultlabelparagraphstyleindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LegendStyleArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSS.StyleArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSD.FillArchive tschlegendmodeldefaultfill = 10;
    if (has_tschlegendmodeldefaultfill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschlegendmodeldefaultfill());
    }

    // optional .TSD.StrokeArchive tschlegendmodeldefaultstroke = 11;
    if (has_tschlegendmodeldefaultstroke()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschlegendmodeldefaultstroke());
    }

    // optional .TSD.ShadowArchive tschlegendmodeldefaultshadow = 14;
    if (has_tschlegendmodeldefaultshadow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschlegendmodeldefaultshadow());
    }

    // optional float tschlegendmodeldefaultopacity = 15;
    if (has_tschlegendmodeldefaultopacity()) {
      total_size += 1 + 4;
    }

    // optional int32 tschlegendmodeldefaultlabelparagraphstyleindex = 16;
    if (has_tschlegendmodeldefaultlabelparagraphstyleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschlegendmodeldefaultlabelparagraphstyleindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LegendStyleArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LegendStyleArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LegendStyleArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LegendStyleArchive::MergeFrom(const LegendStyleArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSS::StyleArchive::MergeFrom(from.super());
    }
    if (from.has_tschlegendmodeldefaultfill()) {
      mutable_tschlegendmodeldefaultfill()->::TSD::FillArchive::MergeFrom(from.tschlegendmodeldefaultfill());
    }
    if (from.has_tschlegendmodeldefaultstroke()) {
      mutable_tschlegendmodeldefaultstroke()->::TSD::StrokeArchive::MergeFrom(from.tschlegendmodeldefaultstroke());
    }
    if (from.has_tschlegendmodeldefaultshadow()) {
      mutable_tschlegendmodeldefaultshadow()->::TSD::ShadowArchive::MergeFrom(from.tschlegendmodeldefaultshadow());
    }
    if (from.has_tschlegendmodeldefaultopacity()) {
      set_tschlegendmodeldefaultopacity(from.tschlegendmodeldefaultopacity());
    }
    if (from.has_tschlegendmodeldefaultlabelparagraphstyleindex()) {
      set_tschlegendmodeldefaultlabelparagraphstyleindex(from.tschlegendmodeldefaultlabelparagraphstyleindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LegendStyleArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LegendStyleArchive::CopyFrom(const LegendStyleArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LegendStyleArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_tschlegendmodeldefaultfill()) {
    if (!this->tschlegendmodeldefaultfill().IsInitialized()) return false;
  }
  if (has_tschlegendmodeldefaultstroke()) {
    if (!this->tschlegendmodeldefaultstroke().IsInitialized()) return false;
  }
  if (has_tschlegendmodeldefaultshadow()) {
    if (!this->tschlegendmodeldefaultshadow().IsInitialized()) return false;
  }
  return true;
}

void LegendStyleArchive::Swap(LegendStyleArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(tschlegendmodeldefaultfill_, other->tschlegendmodeldefaultfill_);
    std::swap(tschlegendmodeldefaultstroke_, other->tschlegendmodeldefaultstroke_);
    std::swap(tschlegendmodeldefaultshadow_, other->tschlegendmodeldefaultshadow_);
    std::swap(tschlegendmodeldefaultopacity_, other->tschlegendmodeldefaultopacity_);
    std::swap(tschlegendmodeldefaultlabelparagraphstyleindex_, other->tschlegendmodeldefaultlabelparagraphstyleindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LegendStyleArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LegendStyleArchive_descriptor_;
  metadata.reflection = LegendStyleArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LegendNonStyleArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

LegendNonStyleArchive::LegendNonStyleArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LegendNonStyleArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSS::StyleArchive*>(&::TSS::StyleArchive::default_instance());
}

LegendNonStyleArchive::LegendNonStyleArchive(const LegendNonStyleArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LegendNonStyleArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LegendNonStyleArchive::~LegendNonStyleArchive() {
  SharedDtor();
}

void LegendNonStyleArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void LegendNonStyleArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LegendNonStyleArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LegendNonStyleArchive_descriptor_;
}

const LegendNonStyleArchive& LegendNonStyleArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHPreUFFArchives_2eproto();
  return *default_instance_;
}

LegendNonStyleArchive* LegendNonStyleArchive::default_instance_ = NULL;

LegendNonStyleArchive* LegendNonStyleArchive::New() const {
  return new LegendNonStyleArchive;
}

void LegendNonStyleArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSS::StyleArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LegendNonStyleArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSS.StyleArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LegendNonStyleArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSS.StyleArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LegendNonStyleArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSS.StyleArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LegendNonStyleArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSS.StyleArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LegendNonStyleArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LegendNonStyleArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LegendNonStyleArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LegendNonStyleArchive::MergeFrom(const LegendNonStyleArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSS::StyleArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LegendNonStyleArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LegendNonStyleArchive::CopyFrom(const LegendNonStyleArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LegendNonStyleArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void LegendNonStyleArchive::Swap(LegendNonStyleArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LegendNonStyleArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LegendNonStyleArchive_descriptor_;
  metadata.reflection = LegendNonStyleArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChartAxisStyleArchive::kSuperFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxisvalueshowmajorgridlinesFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxisvalueshowminorgridlinesFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxisvaluemajorgridlinestrokeFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxisvalueminorgridlinestrokeFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxisvaluetickmarklocationFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxisvalueshowmajortickmarksFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxisvalueshowminortickmarksFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxisvaluelabelsorientationFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxisvalueshowminimumlabelFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxisvaluemajorgridlineshadowFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxisvalueminorgridlineshadowFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxisvaluemajorgridlineopacityFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxisvalueminorgridlineopacityFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxisvalueshowaxisFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxiscategoryshowmajorgridlinesFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxiscategoryshowminorgridlinesFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxiscategorymajorgridlinestrokeFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxiscategoryminorgridlinestrokeFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxiscategorytickmarklocationFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxiscategoryshowmajortickmarksFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxiscategoryshowminortickmarksFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxiscategorylabelsorientationFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxiscategoryhorizontalspacingFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxiscategoryverticalspacingFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxiscategoryshowlastlabelFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxiscategorymajorgridlineshadowFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxiscategoryminorgridlineshadowFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxiscategorymajorgridlineopacityFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxiscategoryminorgridlineopacityFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxiscategoryshowaxisFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxisdefaultlabelsorientationFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxisdefaulttitleparagraphstyleindexFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxisdefaultlabelparagraphstyleindexFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxisvaluetitleparagraphstyleindexFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxisvaluelabelparagraphstyleindexFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxiscategorytitleparagraphstyleindexFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxiscategorylabelparagraphstyleindexFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxisvalue3DgridlinestrokeFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxiscategory3DgridlinestrokeFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxisvalue3DgridlineopacityFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxiscategory3DgridlineopacityFieldNumber;
#endif  // !_MSC_VER

ChartAxisStyleArchive::ChartAxisStyleArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartAxisStyleArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSS::StyleArchive*>(&::TSS::StyleArchive::default_instance());
  tschchartaxisvaluemajorgridlinestroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartaxisvalueminorgridlinestroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartaxisvaluemajorgridlineshadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartaxisvalueminorgridlineshadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartaxiscategorymajorgridlinestroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartaxiscategoryminorgridlinestroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartaxiscategorymajorgridlineshadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartaxiscategoryminorgridlineshadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartaxisvalue3dgridlinestroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartaxiscategory3dgridlinestroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
}

ChartAxisStyleArchive::ChartAxisStyleArchive(const ChartAxisStyleArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartAxisStyleArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  tschchartaxisvalueshowmajorgridlines_ = false;
  tschchartaxisvalueshowminorgridlines_ = false;
  tschchartaxisvaluemajorgridlinestroke_ = NULL;
  tschchartaxisvalueminorgridlinestroke_ = NULL;
  tschchartaxisvaluetickmarklocation_ = 0;
  tschchartaxisvalueshowmajortickmarks_ = false;
  tschchartaxisvalueshowminortickmarks_ = false;
  tschchartaxisvaluelabelsorientation_ = 0;
  tschchartaxisvalueshowminimumlabel_ = false;
  tschchartaxisvaluemajorgridlineshadow_ = NULL;
  tschchartaxisvalueminorgridlineshadow_ = NULL;
  tschchartaxisvaluemajorgridlineopacity_ = 0;
  tschchartaxisvalueminorgridlineopacity_ = 0;
  tschchartaxisvalueshowaxis_ = false;
  tschchartaxiscategoryshowmajorgridlines_ = false;
  tschchartaxiscategoryshowminorgridlines_ = false;
  tschchartaxiscategorymajorgridlinestroke_ = NULL;
  tschchartaxiscategoryminorgridlinestroke_ = NULL;
  tschchartaxiscategorytickmarklocation_ = 0;
  tschchartaxiscategoryshowmajortickmarks_ = false;
  tschchartaxiscategoryshowminortickmarks_ = false;
  tschchartaxiscategorylabelsorientation_ = 0;
  tschchartaxiscategoryhorizontalspacing_ = 0;
  tschchartaxiscategoryverticalspacing_ = 0;
  tschchartaxiscategoryshowlastlabel_ = false;
  tschchartaxiscategorymajorgridlineshadow_ = NULL;
  tschchartaxiscategoryminorgridlineshadow_ = NULL;
  tschchartaxiscategorymajorgridlineopacity_ = 0;
  tschchartaxiscategoryminorgridlineopacity_ = 0;
  tschchartaxiscategoryshowaxis_ = false;
  tschchartaxisdefaultlabelsorientation_ = 0;
  tschchartaxisdefaulttitleparagraphstyleindex_ = 0;
  tschchartaxisdefaultlabelparagraphstyleindex_ = 0;
  tschchartaxisvaluetitleparagraphstyleindex_ = 0;
  tschchartaxisvaluelabelparagraphstyleindex_ = 0;
  tschchartaxiscategorytitleparagraphstyleindex_ = 0;
  tschchartaxiscategorylabelparagraphstyleindex_ = 0;
  tschchartaxisvalue3dgridlinestroke_ = NULL;
  tschchartaxiscategory3dgridlinestroke_ = NULL;
  tschchartaxisvalue3dgridlineopacity_ = 0;
  tschchartaxiscategory3dgridlineopacity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartAxisStyleArchive::~ChartAxisStyleArchive() {
  SharedDtor();
}

void ChartAxisStyleArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete tschchartaxisvaluemajorgridlinestroke_;
    delete tschchartaxisvalueminorgridlinestroke_;
    delete tschchartaxisvaluemajorgridlineshadow_;
    delete tschchartaxisvalueminorgridlineshadow_;
    delete tschchartaxiscategorymajorgridlinestroke_;
    delete tschchartaxiscategoryminorgridlinestroke_;
    delete tschchartaxiscategorymajorgridlineshadow_;
    delete tschchartaxiscategoryminorgridlineshadow_;
    delete tschchartaxisvalue3dgridlinestroke_;
    delete tschchartaxiscategory3dgridlinestroke_;
  }
}

void ChartAxisStyleArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartAxisStyleArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartAxisStyleArchive_descriptor_;
}

const ChartAxisStyleArchive& ChartAxisStyleArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHPreUFFArchives_2eproto();
  return *default_instance_;
}

ChartAxisStyleArchive* ChartAxisStyleArchive::default_instance_ = NULL;

ChartAxisStyleArchive* ChartAxisStyleArchive::New() const {
  return new ChartAxisStyleArchive;
}

void ChartAxisStyleArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSS::StyleArchive::Clear();
    }
    tschchartaxisvalueshowmajorgridlines_ = false;
    tschchartaxisvalueshowminorgridlines_ = false;
    if (has_tschchartaxisvaluemajorgridlinestroke()) {
      if (tschchartaxisvaluemajorgridlinestroke_ != NULL) tschchartaxisvaluemajorgridlinestroke_->::TSD::StrokeArchive::Clear();
    }
    if (has_tschchartaxisvalueminorgridlinestroke()) {
      if (tschchartaxisvalueminorgridlinestroke_ != NULL) tschchartaxisvalueminorgridlinestroke_->::TSD::StrokeArchive::Clear();
    }
    tschchartaxisvaluetickmarklocation_ = 0;
    tschchartaxisvalueshowmajortickmarks_ = false;
    tschchartaxisvalueshowminortickmarks_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    tschchartaxisvaluelabelsorientation_ = 0;
    tschchartaxisvalueshowminimumlabel_ = false;
    if (has_tschchartaxisvaluemajorgridlineshadow()) {
      if (tschchartaxisvaluemajorgridlineshadow_ != NULL) tschchartaxisvaluemajorgridlineshadow_->::TSD::ShadowArchive::Clear();
    }
    if (has_tschchartaxisvalueminorgridlineshadow()) {
      if (tschchartaxisvalueminorgridlineshadow_ != NULL) tschchartaxisvalueminorgridlineshadow_->::TSD::ShadowArchive::Clear();
    }
    tschchartaxisvaluemajorgridlineopacity_ = 0;
    tschchartaxisvalueminorgridlineopacity_ = 0;
    tschchartaxisvalueshowaxis_ = false;
    tschchartaxiscategoryshowmajorgridlines_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    tschchartaxiscategoryshowminorgridlines_ = false;
    if (has_tschchartaxiscategorymajorgridlinestroke()) {
      if (tschchartaxiscategorymajorgridlinestroke_ != NULL) tschchartaxiscategorymajorgridlinestroke_->::TSD::StrokeArchive::Clear();
    }
    if (has_tschchartaxiscategoryminorgridlinestroke()) {
      if (tschchartaxiscategoryminorgridlinestroke_ != NULL) tschchartaxiscategoryminorgridlinestroke_->::TSD::StrokeArchive::Clear();
    }
    tschchartaxiscategorytickmarklocation_ = 0;
    tschchartaxiscategoryshowmajortickmarks_ = false;
    tschchartaxiscategoryshowminortickmarks_ = false;
    tschchartaxiscategorylabelsorientation_ = 0;
    tschchartaxiscategoryhorizontalspacing_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    tschchartaxiscategoryverticalspacing_ = 0;
    tschchartaxiscategoryshowlastlabel_ = false;
    if (has_tschchartaxiscategorymajorgridlineshadow()) {
      if (tschchartaxiscategorymajorgridlineshadow_ != NULL) tschchartaxiscategorymajorgridlineshadow_->::TSD::ShadowArchive::Clear();
    }
    if (has_tschchartaxiscategoryminorgridlineshadow()) {
      if (tschchartaxiscategoryminorgridlineshadow_ != NULL) tschchartaxiscategoryminorgridlineshadow_->::TSD::ShadowArchive::Clear();
    }
    tschchartaxiscategorymajorgridlineopacity_ = 0;
    tschchartaxiscategoryminorgridlineopacity_ = 0;
    tschchartaxiscategoryshowaxis_ = false;
    tschchartaxisdefaultlabelsorientation_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    tschchartaxisdefaulttitleparagraphstyleindex_ = 0;
    tschchartaxisdefaultlabelparagraphstyleindex_ = 0;
    tschchartaxisvaluetitleparagraphstyleindex_ = 0;
    tschchartaxisvaluelabelparagraphstyleindex_ = 0;
    tschchartaxiscategorytitleparagraphstyleindex_ = 0;
    tschchartaxiscategorylabelparagraphstyleindex_ = 0;
    if (has_tschchartaxisvalue3dgridlinestroke()) {
      if (tschchartaxisvalue3dgridlinestroke_ != NULL) tschchartaxisvalue3dgridlinestroke_->::TSD::StrokeArchive::Clear();
    }
    if (has_tschchartaxiscategory3dgridlinestroke()) {
      if (tschchartaxiscategory3dgridlinestroke_ != NULL) tschchartaxiscategory3dgridlinestroke_->::TSD::StrokeArchive::Clear();
    }
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    tschchartaxisvalue3dgridlineopacity_ = 0;
    tschchartaxiscategory3dgridlineopacity_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartAxisStyleArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSS.StyleArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_tschchartaxisvalueshowmajorgridlines;
        break;
      }

      // optional bool tschchartaxisvalueshowmajorgridlines = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisvalueshowmajorgridlines:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartaxisvalueshowmajorgridlines_)));
          set_has_tschchartaxisvalueshowmajorgridlines();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_tschchartaxisvalueshowminorgridlines;
        break;
      }

      // optional bool tschchartaxisvalueshowminorgridlines = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisvalueshowminorgridlines:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartaxisvalueshowminorgridlines_)));
          set_has_tschchartaxisvalueshowminorgridlines();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_tschchartaxisvaluemajorgridlinestroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartaxisvaluemajorgridlinestroke = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartaxisvaluemajorgridlinestroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartaxisvaluemajorgridlinestroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_tschchartaxisvalueminorgridlinestroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartaxisvalueminorgridlinestroke = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartaxisvalueminorgridlinestroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartaxisvalueminorgridlinestroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_tschchartaxisvaluetickmarklocation;
        break;
      }

      // optional int32 tschchartaxisvaluetickmarklocation = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisvaluetickmarklocation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartaxisvaluetickmarklocation_)));
          set_has_tschchartaxisvaluetickmarklocation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_tschchartaxisvalueshowmajortickmarks;
        break;
      }

      // optional bool tschchartaxisvalueshowmajortickmarks = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisvalueshowmajortickmarks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartaxisvalueshowmajortickmarks_)));
          set_has_tschchartaxisvalueshowmajortickmarks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_tschchartaxisvalueshowminortickmarks;
        break;
      }

      // optional bool tschchartaxisvalueshowminortickmarks = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisvalueshowminortickmarks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartaxisvalueshowminortickmarks_)));
          set_has_tschchartaxisvalueshowminortickmarks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_tschchartaxisvaluelabelsorientation;
        break;
      }

      // optional float tschchartaxisvaluelabelsorientation = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartaxisvaluelabelsorientation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartaxisvaluelabelsorientation_)));
          set_has_tschchartaxisvaluelabelsorientation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_tschchartaxisvalueshowminimumlabel;
        break;
      }

      // optional bool tschchartaxisvalueshowminimumlabel = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisvalueshowminimumlabel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartaxisvalueshowminimumlabel_)));
          set_has_tschchartaxisvalueshowminimumlabel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_tschchartaxisvaluemajorgridlineshadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartaxisvaluemajorgridlineshadow = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartaxisvaluemajorgridlineshadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartaxisvaluemajorgridlineshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_tschchartaxisvalueminorgridlineshadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartaxisvalueminorgridlineshadow = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartaxisvalueminorgridlineshadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartaxisvalueminorgridlineshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(189)) goto parse_tschchartaxisvaluemajorgridlineopacity;
        break;
      }

      // optional float tschchartaxisvaluemajorgridlineopacity = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartaxisvaluemajorgridlineopacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartaxisvaluemajorgridlineopacity_)));
          set_has_tschchartaxisvaluemajorgridlineopacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(197)) goto parse_tschchartaxisvalueminorgridlineopacity;
        break;
      }

      // optional float tschchartaxisvalueminorgridlineopacity = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartaxisvalueminorgridlineopacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartaxisvalueminorgridlineopacity_)));
          set_has_tschchartaxisvalueminorgridlineopacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_tschchartaxisvalueshowaxis;
        break;
      }

      // optional bool tschchartaxisvalueshowaxis = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisvalueshowaxis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartaxisvalueshowaxis_)));
          set_has_tschchartaxisvalueshowaxis();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_tschchartaxiscategoryshowmajorgridlines;
        break;
      }

      // optional bool tschchartaxiscategoryshowmajorgridlines = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxiscategoryshowmajorgridlines:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartaxiscategoryshowmajorgridlines_)));
          set_has_tschchartaxiscategoryshowmajorgridlines();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_tschchartaxiscategoryshowminorgridlines;
        break;
      }

      // optional bool tschchartaxiscategoryshowminorgridlines = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxiscategoryshowminorgridlines:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartaxiscategoryshowminorgridlines_)));
          set_has_tschchartaxiscategoryshowminorgridlines();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(418)) goto parse_tschchartaxiscategorymajorgridlinestroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartaxiscategorymajorgridlinestroke = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartaxiscategorymajorgridlinestroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartaxiscategorymajorgridlinestroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(426)) goto parse_tschchartaxiscategoryminorgridlinestroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartaxiscategoryminorgridlinestroke = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartaxiscategoryminorgridlinestroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartaxiscategoryminorgridlinestroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(432)) goto parse_tschchartaxiscategorytickmarklocation;
        break;
      }

      // optional int32 tschchartaxiscategorytickmarklocation = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxiscategorytickmarklocation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartaxiscategorytickmarklocation_)));
          set_has_tschchartaxiscategorytickmarklocation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(440)) goto parse_tschchartaxiscategoryshowmajortickmarks;
        break;
      }

      // optional bool tschchartaxiscategoryshowmajortickmarks = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxiscategoryshowmajortickmarks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartaxiscategoryshowmajortickmarks_)));
          set_has_tschchartaxiscategoryshowmajortickmarks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(448)) goto parse_tschchartaxiscategoryshowminortickmarks;
        break;
      }

      // optional bool tschchartaxiscategoryshowminortickmarks = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxiscategoryshowminortickmarks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartaxiscategoryshowminortickmarks_)));
          set_has_tschchartaxiscategoryshowminortickmarks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(461)) goto parse_tschchartaxiscategorylabelsorientation;
        break;
      }

      // optional float tschchartaxiscategorylabelsorientation = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartaxiscategorylabelsorientation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartaxiscategorylabelsorientation_)));
          set_has_tschchartaxiscategorylabelsorientation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(464)) goto parse_tschchartaxiscategoryhorizontalspacing;
        break;
      }

      // optional int32 tschchartaxiscategoryhorizontalspacing = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxiscategoryhorizontalspacing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartaxiscategoryhorizontalspacing_)));
          set_has_tschchartaxiscategoryhorizontalspacing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(472)) goto parse_tschchartaxiscategoryverticalspacing;
        break;
      }

      // optional int32 tschchartaxiscategoryverticalspacing = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxiscategoryverticalspacing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartaxiscategoryverticalspacing_)));
          set_has_tschchartaxiscategoryverticalspacing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_tschchartaxiscategoryshowlastlabel;
        break;
      }

      // optional bool tschchartaxiscategoryshowlastlabel = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxiscategoryshowlastlabel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartaxiscategoryshowlastlabel_)));
          set_has_tschchartaxiscategoryshowlastlabel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(506)) goto parse_tschchartaxiscategorymajorgridlineshadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartaxiscategorymajorgridlineshadow = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartaxiscategorymajorgridlineshadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartaxiscategorymajorgridlineshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(514)) goto parse_tschchartaxiscategoryminorgridlineshadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartaxiscategoryminorgridlineshadow = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartaxiscategoryminorgridlineshadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartaxiscategoryminorgridlineshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(525)) goto parse_tschchartaxiscategorymajorgridlineopacity;
        break;
      }

      // optional float tschchartaxiscategorymajorgridlineopacity = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartaxiscategorymajorgridlineopacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartaxiscategorymajorgridlineopacity_)));
          set_has_tschchartaxiscategorymajorgridlineopacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(533)) goto parse_tschchartaxiscategoryminorgridlineopacity;
        break;
      }

      // optional float tschchartaxiscategoryminorgridlineopacity = 66;
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartaxiscategoryminorgridlineopacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartaxiscategoryminorgridlineopacity_)));
          set_has_tschchartaxiscategoryminorgridlineopacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(536)) goto parse_tschchartaxiscategoryshowaxis;
        break;
      }

      // optional bool tschchartaxiscategoryshowaxis = 67;
      case 67: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxiscategoryshowaxis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartaxiscategoryshowaxis_)));
          set_has_tschchartaxiscategoryshowaxis();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(821)) goto parse_tschchartaxisdefaultlabelsorientation;
        break;
      }

      // optional float tschchartaxisdefaultlabelsorientation = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartaxisdefaultlabelsorientation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartaxisdefaultlabelsorientation_)));
          set_has_tschchartaxisdefaultlabelsorientation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(880)) goto parse_tschchartaxisdefaulttitleparagraphstyleindex;
        break;
      }

      // optional int32 tschchartaxisdefaulttitleparagraphstyleindex = 110;
      case 110: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisdefaulttitleparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartaxisdefaulttitleparagraphstyleindex_)));
          set_has_tschchartaxisdefaulttitleparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(888)) goto parse_tschchartaxisdefaultlabelparagraphstyleindex;
        break;
      }

      // optional int32 tschchartaxisdefaultlabelparagraphstyleindex = 111;
      case 111: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisdefaultlabelparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartaxisdefaultlabelparagraphstyleindex_)));
          set_has_tschchartaxisdefaultlabelparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(896)) goto parse_tschchartaxisvaluetitleparagraphstyleindex;
        break;
      }

      // optional int32 tschchartaxisvaluetitleparagraphstyleindex = 112;
      case 112: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisvaluetitleparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartaxisvaluetitleparagraphstyleindex_)));
          set_has_tschchartaxisvaluetitleparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(904)) goto parse_tschchartaxisvaluelabelparagraphstyleindex;
        break;
      }

      // optional int32 tschchartaxisvaluelabelparagraphstyleindex = 113;
      case 113: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisvaluelabelparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartaxisvaluelabelparagraphstyleindex_)));
          set_has_tschchartaxisvaluelabelparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(912)) goto parse_tschchartaxiscategorytitleparagraphstyleindex;
        break;
      }

      // optional int32 tschchartaxiscategorytitleparagraphstyleindex = 114;
      case 114: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxiscategorytitleparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartaxiscategorytitleparagraphstyleindex_)));
          set_has_tschchartaxiscategorytitleparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(920)) goto parse_tschchartaxiscategorylabelparagraphstyleindex;
        break;
      }

      // optional int32 tschchartaxiscategorylabelparagraphstyleindex = 115;
      case 115: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxiscategorylabelparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartaxiscategorylabelparagraphstyleindex_)));
          set_has_tschchartaxiscategorylabelparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2650)) goto parse_tschchartaxisvalue3dgridlinestroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartaxisvalue3dgridlinestroke = 331;
      case 331: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartaxisvalue3dgridlinestroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartaxisvalue3dgridlinestroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2658)) goto parse_tschchartaxiscategory3dgridlinestroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartaxiscategory3dgridlinestroke = 332;
      case 332: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartaxiscategory3dgridlinestroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartaxiscategory3dgridlinestroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2669)) goto parse_tschchartaxisvalue3dgridlineopacity;
        break;
      }

      // optional float tschchartaxisvalue3dgridlineopacity = 333;
      case 333: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartaxisvalue3dgridlineopacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartaxisvalue3dgridlineopacity_)));
          set_has_tschchartaxisvalue3dgridlineopacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2677)) goto parse_tschchartaxiscategory3dgridlineopacity;
        break;
      }

      // optional float tschchartaxiscategory3dgridlineopacity = 334;
      case 334: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartaxiscategory3dgridlineopacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartaxiscategory3dgridlineopacity_)));
          set_has_tschchartaxiscategory3dgridlineopacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChartAxisStyleArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSS.StyleArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional bool tschchartaxisvalueshowmajorgridlines = 10;
  if (has_tschchartaxisvalueshowmajorgridlines()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->tschchartaxisvalueshowmajorgridlines(), output);
  }

  // optional bool tschchartaxisvalueshowminorgridlines = 11;
  if (has_tschchartaxisvalueshowminorgridlines()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->tschchartaxisvalueshowminorgridlines(), output);
  }

  // optional .TSD.StrokeArchive tschchartaxisvaluemajorgridlinestroke = 12;
  if (has_tschchartaxisvaluemajorgridlinestroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->tschchartaxisvaluemajorgridlinestroke(), output);
  }

  // optional .TSD.StrokeArchive tschchartaxisvalueminorgridlinestroke = 13;
  if (has_tschchartaxisvalueminorgridlinestroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->tschchartaxisvalueminorgridlinestroke(), output);
  }

  // optional int32 tschchartaxisvaluetickmarklocation = 14;
  if (has_tschchartaxisvaluetickmarklocation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->tschchartaxisvaluetickmarklocation(), output);
  }

  // optional bool tschchartaxisvalueshowmajortickmarks = 15;
  if (has_tschchartaxisvalueshowmajortickmarks()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->tschchartaxisvalueshowmajortickmarks(), output);
  }

  // optional bool tschchartaxisvalueshowminortickmarks = 16;
  if (has_tschchartaxisvalueshowminortickmarks()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->tschchartaxisvalueshowminortickmarks(), output);
  }

  // optional float tschchartaxisvaluelabelsorientation = 17;
  if (has_tschchartaxisvaluelabelsorientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->tschchartaxisvaluelabelsorientation(), output);
  }

  // optional bool tschchartaxisvalueshowminimumlabel = 18;
  if (has_tschchartaxisvalueshowminimumlabel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->tschchartaxisvalueshowminimumlabel(), output);
  }

  // optional .TSD.ShadowArchive tschchartaxisvaluemajorgridlineshadow = 21;
  if (has_tschchartaxisvaluemajorgridlineshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->tschchartaxisvaluemajorgridlineshadow(), output);
  }

  // optional .TSD.ShadowArchive tschchartaxisvalueminorgridlineshadow = 22;
  if (has_tschchartaxisvalueminorgridlineshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->tschchartaxisvalueminorgridlineshadow(), output);
  }

  // optional float tschchartaxisvaluemajorgridlineopacity = 23;
  if (has_tschchartaxisvaluemajorgridlineopacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->tschchartaxisvaluemajorgridlineopacity(), output);
  }

  // optional float tschchartaxisvalueminorgridlineopacity = 24;
  if (has_tschchartaxisvalueminorgridlineopacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->tschchartaxisvalueminorgridlineopacity(), output);
  }

  // optional bool tschchartaxisvalueshowaxis = 25;
  if (has_tschchartaxisvalueshowaxis()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->tschchartaxisvalueshowaxis(), output);
  }

  // optional bool tschchartaxiscategoryshowmajorgridlines = 50;
  if (has_tschchartaxiscategoryshowmajorgridlines()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(50, this->tschchartaxiscategoryshowmajorgridlines(), output);
  }

  // optional bool tschchartaxiscategoryshowminorgridlines = 51;
  if (has_tschchartaxiscategoryshowminorgridlines()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(51, this->tschchartaxiscategoryshowminorgridlines(), output);
  }

  // optional .TSD.StrokeArchive tschchartaxiscategorymajorgridlinestroke = 52;
  if (has_tschchartaxiscategorymajorgridlinestroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      52, this->tschchartaxiscategorymajorgridlinestroke(), output);
  }

  // optional .TSD.StrokeArchive tschchartaxiscategoryminorgridlinestroke = 53;
  if (has_tschchartaxiscategoryminorgridlinestroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      53, this->tschchartaxiscategoryminorgridlinestroke(), output);
  }

  // optional int32 tschchartaxiscategorytickmarklocation = 54;
  if (has_tschchartaxiscategorytickmarklocation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(54, this->tschchartaxiscategorytickmarklocation(), output);
  }

  // optional bool tschchartaxiscategoryshowmajortickmarks = 55;
  if (has_tschchartaxiscategoryshowmajortickmarks()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(55, this->tschchartaxiscategoryshowmajortickmarks(), output);
  }

  // optional bool tschchartaxiscategoryshowminortickmarks = 56;
  if (has_tschchartaxiscategoryshowminortickmarks()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(56, this->tschchartaxiscategoryshowminortickmarks(), output);
  }

  // optional float tschchartaxiscategorylabelsorientation = 57;
  if (has_tschchartaxiscategorylabelsorientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(57, this->tschchartaxiscategorylabelsorientation(), output);
  }

  // optional int32 tschchartaxiscategoryhorizontalspacing = 58;
  if (has_tschchartaxiscategoryhorizontalspacing()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(58, this->tschchartaxiscategoryhorizontalspacing(), output);
  }

  // optional int32 tschchartaxiscategoryverticalspacing = 59;
  if (has_tschchartaxiscategoryverticalspacing()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(59, this->tschchartaxiscategoryverticalspacing(), output);
  }

  // optional bool tschchartaxiscategoryshowlastlabel = 60;
  if (has_tschchartaxiscategoryshowlastlabel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(60, this->tschchartaxiscategoryshowlastlabel(), output);
  }

  // optional .TSD.ShadowArchive tschchartaxiscategorymajorgridlineshadow = 63;
  if (has_tschchartaxiscategorymajorgridlineshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      63, this->tschchartaxiscategorymajorgridlineshadow(), output);
  }

  // optional .TSD.ShadowArchive tschchartaxiscategoryminorgridlineshadow = 64;
  if (has_tschchartaxiscategoryminorgridlineshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      64, this->tschchartaxiscategoryminorgridlineshadow(), output);
  }

  // optional float tschchartaxiscategorymajorgridlineopacity = 65;
  if (has_tschchartaxiscategorymajorgridlineopacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(65, this->tschchartaxiscategorymajorgridlineopacity(), output);
  }

  // optional float tschchartaxiscategoryminorgridlineopacity = 66;
  if (has_tschchartaxiscategoryminorgridlineopacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(66, this->tschchartaxiscategoryminorgridlineopacity(), output);
  }

  // optional bool tschchartaxiscategoryshowaxis = 67;
  if (has_tschchartaxiscategoryshowaxis()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(67, this->tschchartaxiscategoryshowaxis(), output);
  }

  // optional float tschchartaxisdefaultlabelsorientation = 102;
  if (has_tschchartaxisdefaultlabelsorientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(102, this->tschchartaxisdefaultlabelsorientation(), output);
  }

  // optional int32 tschchartaxisdefaulttitleparagraphstyleindex = 110;
  if (has_tschchartaxisdefaulttitleparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(110, this->tschchartaxisdefaulttitleparagraphstyleindex(), output);
  }

  // optional int32 tschchartaxisdefaultlabelparagraphstyleindex = 111;
  if (has_tschchartaxisdefaultlabelparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(111, this->tschchartaxisdefaultlabelparagraphstyleindex(), output);
  }

  // optional int32 tschchartaxisvaluetitleparagraphstyleindex = 112;
  if (has_tschchartaxisvaluetitleparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(112, this->tschchartaxisvaluetitleparagraphstyleindex(), output);
  }

  // optional int32 tschchartaxisvaluelabelparagraphstyleindex = 113;
  if (has_tschchartaxisvaluelabelparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(113, this->tschchartaxisvaluelabelparagraphstyleindex(), output);
  }

  // optional int32 tschchartaxiscategorytitleparagraphstyleindex = 114;
  if (has_tschchartaxiscategorytitleparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(114, this->tschchartaxiscategorytitleparagraphstyleindex(), output);
  }

  // optional int32 tschchartaxiscategorylabelparagraphstyleindex = 115;
  if (has_tschchartaxiscategorylabelparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(115, this->tschchartaxiscategorylabelparagraphstyleindex(), output);
  }

  // optional .TSD.StrokeArchive tschchartaxisvalue3dgridlinestroke = 331;
  if (has_tschchartaxisvalue3dgridlinestroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      331, this->tschchartaxisvalue3dgridlinestroke(), output);
  }

  // optional .TSD.StrokeArchive tschchartaxiscategory3dgridlinestroke = 332;
  if (has_tschchartaxiscategory3dgridlinestroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      332, this->tschchartaxiscategory3dgridlinestroke(), output);
  }

  // optional float tschchartaxisvalue3dgridlineopacity = 333;
  if (has_tschchartaxisvalue3dgridlineopacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(333, this->tschchartaxisvalue3dgridlineopacity(), output);
  }

  // optional float tschchartaxiscategory3dgridlineopacity = 334;
  if (has_tschchartaxiscategory3dgridlineopacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(334, this->tschchartaxiscategory3dgridlineopacity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartAxisStyleArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSS.StyleArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional bool tschchartaxisvalueshowmajorgridlines = 10;
  if (has_tschchartaxisvalueshowmajorgridlines()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->tschchartaxisvalueshowmajorgridlines(), target);
  }

  // optional bool tschchartaxisvalueshowminorgridlines = 11;
  if (has_tschchartaxisvalueshowminorgridlines()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->tschchartaxisvalueshowminorgridlines(), target);
  }

  // optional .TSD.StrokeArchive tschchartaxisvaluemajorgridlinestroke = 12;
  if (has_tschchartaxisvaluemajorgridlinestroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->tschchartaxisvaluemajorgridlinestroke(), target);
  }

  // optional .TSD.StrokeArchive tschchartaxisvalueminorgridlinestroke = 13;
  if (has_tschchartaxisvalueminorgridlinestroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->tschchartaxisvalueminorgridlinestroke(), target);
  }

  // optional int32 tschchartaxisvaluetickmarklocation = 14;
  if (has_tschchartaxisvaluetickmarklocation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->tschchartaxisvaluetickmarklocation(), target);
  }

  // optional bool tschchartaxisvalueshowmajortickmarks = 15;
  if (has_tschchartaxisvalueshowmajortickmarks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->tschchartaxisvalueshowmajortickmarks(), target);
  }

  // optional bool tschchartaxisvalueshowminortickmarks = 16;
  if (has_tschchartaxisvalueshowminortickmarks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->tschchartaxisvalueshowminortickmarks(), target);
  }

  // optional float tschchartaxisvaluelabelsorientation = 17;
  if (has_tschchartaxisvaluelabelsorientation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->tschchartaxisvaluelabelsorientation(), target);
  }

  // optional bool tschchartaxisvalueshowminimumlabel = 18;
  if (has_tschchartaxisvalueshowminimumlabel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->tschchartaxisvalueshowminimumlabel(), target);
  }

  // optional .TSD.ShadowArchive tschchartaxisvaluemajorgridlineshadow = 21;
  if (has_tschchartaxisvaluemajorgridlineshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->tschchartaxisvaluemajorgridlineshadow(), target);
  }

  // optional .TSD.ShadowArchive tschchartaxisvalueminorgridlineshadow = 22;
  if (has_tschchartaxisvalueminorgridlineshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->tschchartaxisvalueminorgridlineshadow(), target);
  }

  // optional float tschchartaxisvaluemajorgridlineopacity = 23;
  if (has_tschchartaxisvaluemajorgridlineopacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->tschchartaxisvaluemajorgridlineopacity(), target);
  }

  // optional float tschchartaxisvalueminorgridlineopacity = 24;
  if (has_tschchartaxisvalueminorgridlineopacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->tschchartaxisvalueminorgridlineopacity(), target);
  }

  // optional bool tschchartaxisvalueshowaxis = 25;
  if (has_tschchartaxisvalueshowaxis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->tschchartaxisvalueshowaxis(), target);
  }

  // optional bool tschchartaxiscategoryshowmajorgridlines = 50;
  if (has_tschchartaxiscategoryshowmajorgridlines()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(50, this->tschchartaxiscategoryshowmajorgridlines(), target);
  }

  // optional bool tschchartaxiscategoryshowminorgridlines = 51;
  if (has_tschchartaxiscategoryshowminorgridlines()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(51, this->tschchartaxiscategoryshowminorgridlines(), target);
  }

  // optional .TSD.StrokeArchive tschchartaxiscategorymajorgridlinestroke = 52;
  if (has_tschchartaxiscategorymajorgridlinestroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        52, this->tschchartaxiscategorymajorgridlinestroke(), target);
  }

  // optional .TSD.StrokeArchive tschchartaxiscategoryminorgridlinestroke = 53;
  if (has_tschchartaxiscategoryminorgridlinestroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        53, this->tschchartaxiscategoryminorgridlinestroke(), target);
  }

  // optional int32 tschchartaxiscategorytickmarklocation = 54;
  if (has_tschchartaxiscategorytickmarklocation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(54, this->tschchartaxiscategorytickmarklocation(), target);
  }

  // optional bool tschchartaxiscategoryshowmajortickmarks = 55;
  if (has_tschchartaxiscategoryshowmajortickmarks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(55, this->tschchartaxiscategoryshowmajortickmarks(), target);
  }

  // optional bool tschchartaxiscategoryshowminortickmarks = 56;
  if (has_tschchartaxiscategoryshowminortickmarks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(56, this->tschchartaxiscategoryshowminortickmarks(), target);
  }

  // optional float tschchartaxiscategorylabelsorientation = 57;
  if (has_tschchartaxiscategorylabelsorientation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(57, this->tschchartaxiscategorylabelsorientation(), target);
  }

  // optional int32 tschchartaxiscategoryhorizontalspacing = 58;
  if (has_tschchartaxiscategoryhorizontalspacing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(58, this->tschchartaxiscategoryhorizontalspacing(), target);
  }

  // optional int32 tschchartaxiscategoryverticalspacing = 59;
  if (has_tschchartaxiscategoryverticalspacing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(59, this->tschchartaxiscategoryverticalspacing(), target);
  }

  // optional bool tschchartaxiscategoryshowlastlabel = 60;
  if (has_tschchartaxiscategoryshowlastlabel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(60, this->tschchartaxiscategoryshowlastlabel(), target);
  }

  // optional .TSD.ShadowArchive tschchartaxiscategorymajorgridlineshadow = 63;
  if (has_tschchartaxiscategorymajorgridlineshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        63, this->tschchartaxiscategorymajorgridlineshadow(), target);
  }

  // optional .TSD.ShadowArchive tschchartaxiscategoryminorgridlineshadow = 64;
  if (has_tschchartaxiscategoryminorgridlineshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        64, this->tschchartaxiscategoryminorgridlineshadow(), target);
  }

  // optional float tschchartaxiscategorymajorgridlineopacity = 65;
  if (has_tschchartaxiscategorymajorgridlineopacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(65, this->tschchartaxiscategorymajorgridlineopacity(), target);
  }

  // optional float tschchartaxiscategoryminorgridlineopacity = 66;
  if (has_tschchartaxiscategoryminorgridlineopacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(66, this->tschchartaxiscategoryminorgridlineopacity(), target);
  }

  // optional bool tschchartaxiscategoryshowaxis = 67;
  if (has_tschchartaxiscategoryshowaxis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(67, this->tschchartaxiscategoryshowaxis(), target);
  }

  // optional float tschchartaxisdefaultlabelsorientation = 102;
  if (has_tschchartaxisdefaultlabelsorientation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(102, this->tschchartaxisdefaultlabelsorientation(), target);
  }

  // optional int32 tschchartaxisdefaulttitleparagraphstyleindex = 110;
  if (has_tschchartaxisdefaulttitleparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(110, this->tschchartaxisdefaulttitleparagraphstyleindex(), target);
  }

  // optional int32 tschchartaxisdefaultlabelparagraphstyleindex = 111;
  if (has_tschchartaxisdefaultlabelparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(111, this->tschchartaxisdefaultlabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartaxisvaluetitleparagraphstyleindex = 112;
  if (has_tschchartaxisvaluetitleparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(112, this->tschchartaxisvaluetitleparagraphstyleindex(), target);
  }

  // optional int32 tschchartaxisvaluelabelparagraphstyleindex = 113;
  if (has_tschchartaxisvaluelabelparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(113, this->tschchartaxisvaluelabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartaxiscategorytitleparagraphstyleindex = 114;
  if (has_tschchartaxiscategorytitleparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(114, this->tschchartaxiscategorytitleparagraphstyleindex(), target);
  }

  // optional int32 tschchartaxiscategorylabelparagraphstyleindex = 115;
  if (has_tschchartaxiscategorylabelparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(115, this->tschchartaxiscategorylabelparagraphstyleindex(), target);
  }

  // optional .TSD.StrokeArchive tschchartaxisvalue3dgridlinestroke = 331;
  if (has_tschchartaxisvalue3dgridlinestroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        331, this->tschchartaxisvalue3dgridlinestroke(), target);
  }

  // optional .TSD.StrokeArchive tschchartaxiscategory3dgridlinestroke = 332;
  if (has_tschchartaxiscategory3dgridlinestroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        332, this->tschchartaxiscategory3dgridlinestroke(), target);
  }

  // optional float tschchartaxisvalue3dgridlineopacity = 333;
  if (has_tschchartaxisvalue3dgridlineopacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(333, this->tschchartaxisvalue3dgridlineopacity(), target);
  }

  // optional float tschchartaxiscategory3dgridlineopacity = 334;
  if (has_tschchartaxiscategory3dgridlineopacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(334, this->tschchartaxiscategory3dgridlineopacity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartAxisStyleArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSS.StyleArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional bool tschchartaxisvalueshowmajorgridlines = 10;
    if (has_tschchartaxisvalueshowmajorgridlines()) {
      total_size += 1 + 1;
    }

    // optional bool tschchartaxisvalueshowminorgridlines = 11;
    if (has_tschchartaxisvalueshowminorgridlines()) {
      total_size += 1 + 1;
    }

    // optional .TSD.StrokeArchive tschchartaxisvaluemajorgridlinestroke = 12;
    if (has_tschchartaxisvaluemajorgridlinestroke()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartaxisvaluemajorgridlinestroke());
    }

    // optional .TSD.StrokeArchive tschchartaxisvalueminorgridlinestroke = 13;
    if (has_tschchartaxisvalueminorgridlinestroke()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartaxisvalueminorgridlinestroke());
    }

    // optional int32 tschchartaxisvaluetickmarklocation = 14;
    if (has_tschchartaxisvaluetickmarklocation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartaxisvaluetickmarklocation());
    }

    // optional bool tschchartaxisvalueshowmajortickmarks = 15;
    if (has_tschchartaxisvalueshowmajortickmarks()) {
      total_size += 1 + 1;
    }

    // optional bool tschchartaxisvalueshowminortickmarks = 16;
    if (has_tschchartaxisvalueshowminortickmarks()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float tschchartaxisvaluelabelsorientation = 17;
    if (has_tschchartaxisvaluelabelsorientation()) {
      total_size += 2 + 4;
    }

    // optional bool tschchartaxisvalueshowminimumlabel = 18;
    if (has_tschchartaxisvalueshowminimumlabel()) {
      total_size += 2 + 1;
    }

    // optional .TSD.ShadowArchive tschchartaxisvaluemajorgridlineshadow = 21;
    if (has_tschchartaxisvaluemajorgridlineshadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartaxisvaluemajorgridlineshadow());
    }

    // optional .TSD.ShadowArchive tschchartaxisvalueminorgridlineshadow = 22;
    if (has_tschchartaxisvalueminorgridlineshadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartaxisvalueminorgridlineshadow());
    }

    // optional float tschchartaxisvaluemajorgridlineopacity = 23;
    if (has_tschchartaxisvaluemajorgridlineopacity()) {
      total_size += 2 + 4;
    }

    // optional float tschchartaxisvalueminorgridlineopacity = 24;
    if (has_tschchartaxisvalueminorgridlineopacity()) {
      total_size += 2 + 4;
    }

    // optional bool tschchartaxisvalueshowaxis = 25;
    if (has_tschchartaxisvalueshowaxis()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxiscategoryshowmajorgridlines = 50;
    if (has_tschchartaxiscategoryshowmajorgridlines()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool tschchartaxiscategoryshowminorgridlines = 51;
    if (has_tschchartaxiscategoryshowminorgridlines()) {
      total_size += 2 + 1;
    }

    // optional .TSD.StrokeArchive tschchartaxiscategorymajorgridlinestroke = 52;
    if (has_tschchartaxiscategorymajorgridlinestroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartaxiscategorymajorgridlinestroke());
    }

    // optional .TSD.StrokeArchive tschchartaxiscategoryminorgridlinestroke = 53;
    if (has_tschchartaxiscategoryminorgridlinestroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartaxiscategoryminorgridlinestroke());
    }

    // optional int32 tschchartaxiscategorytickmarklocation = 54;
    if (has_tschchartaxiscategorytickmarklocation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartaxiscategorytickmarklocation());
    }

    // optional bool tschchartaxiscategoryshowmajortickmarks = 55;
    if (has_tschchartaxiscategoryshowmajortickmarks()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxiscategoryshowminortickmarks = 56;
    if (has_tschchartaxiscategoryshowminortickmarks()) {
      total_size += 2 + 1;
    }

    // optional float tschchartaxiscategorylabelsorientation = 57;
    if (has_tschchartaxiscategorylabelsorientation()) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartaxiscategoryhorizontalspacing = 58;
    if (has_tschchartaxiscategoryhorizontalspacing()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartaxiscategoryhorizontalspacing());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 tschchartaxiscategoryverticalspacing = 59;
    if (has_tschchartaxiscategoryverticalspacing()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartaxiscategoryverticalspacing());
    }

    // optional bool tschchartaxiscategoryshowlastlabel = 60;
    if (has_tschchartaxiscategoryshowlastlabel()) {
      total_size += 2 + 1;
    }

    // optional .TSD.ShadowArchive tschchartaxiscategorymajorgridlineshadow = 63;
    if (has_tschchartaxiscategorymajorgridlineshadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartaxiscategorymajorgridlineshadow());
    }

    // optional .TSD.ShadowArchive tschchartaxiscategoryminorgridlineshadow = 64;
    if (has_tschchartaxiscategoryminorgridlineshadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartaxiscategoryminorgridlineshadow());
    }

    // optional float tschchartaxiscategorymajorgridlineopacity = 65;
    if (has_tschchartaxiscategorymajorgridlineopacity()) {
      total_size += 2 + 4;
    }

    // optional float tschchartaxiscategoryminorgridlineopacity = 66;
    if (has_tschchartaxiscategoryminorgridlineopacity()) {
      total_size += 2 + 4;
    }

    // optional bool tschchartaxiscategoryshowaxis = 67;
    if (has_tschchartaxiscategoryshowaxis()) {
      total_size += 2 + 1;
    }

    // optional float tschchartaxisdefaultlabelsorientation = 102;
    if (has_tschchartaxisdefaultlabelsorientation()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 tschchartaxisdefaulttitleparagraphstyleindex = 110;
    if (has_tschchartaxisdefaulttitleparagraphstyleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartaxisdefaulttitleparagraphstyleindex());
    }

    // optional int32 tschchartaxisdefaultlabelparagraphstyleindex = 111;
    if (has_tschchartaxisdefaultlabelparagraphstyleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartaxisdefaultlabelparagraphstyleindex());
    }

    // optional int32 tschchartaxisvaluetitleparagraphstyleindex = 112;
    if (has_tschchartaxisvaluetitleparagraphstyleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartaxisvaluetitleparagraphstyleindex());
    }

    // optional int32 tschchartaxisvaluelabelparagraphstyleindex = 113;
    if (has_tschchartaxisvaluelabelparagraphstyleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartaxisvaluelabelparagraphstyleindex());
    }

    // optional int32 tschchartaxiscategorytitleparagraphstyleindex = 114;
    if (has_tschchartaxiscategorytitleparagraphstyleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartaxiscategorytitleparagraphstyleindex());
    }

    // optional int32 tschchartaxiscategorylabelparagraphstyleindex = 115;
    if (has_tschchartaxiscategorylabelparagraphstyleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartaxiscategorylabelparagraphstyleindex());
    }

    // optional .TSD.StrokeArchive tschchartaxisvalue3dgridlinestroke = 331;
    if (has_tschchartaxisvalue3dgridlinestroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartaxisvalue3dgridlinestroke());
    }

    // optional .TSD.StrokeArchive tschchartaxiscategory3dgridlinestroke = 332;
    if (has_tschchartaxiscategory3dgridlinestroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartaxiscategory3dgridlinestroke());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional float tschchartaxisvalue3dgridlineopacity = 333;
    if (has_tschchartaxisvalue3dgridlineopacity()) {
      total_size += 2 + 4;
    }

    // optional float tschchartaxiscategory3dgridlineopacity = 334;
    if (has_tschchartaxiscategory3dgridlineopacity()) {
      total_size += 2 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartAxisStyleArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartAxisStyleArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartAxisStyleArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartAxisStyleArchive::MergeFrom(const ChartAxisStyleArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSS::StyleArchive::MergeFrom(from.super());
    }
    if (from.has_tschchartaxisvalueshowmajorgridlines()) {
      set_tschchartaxisvalueshowmajorgridlines(from.tschchartaxisvalueshowmajorgridlines());
    }
    if (from.has_tschchartaxisvalueshowminorgridlines()) {
      set_tschchartaxisvalueshowminorgridlines(from.tschchartaxisvalueshowminorgridlines());
    }
    if (from.has_tschchartaxisvaluemajorgridlinestroke()) {
      mutable_tschchartaxisvaluemajorgridlinestroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartaxisvaluemajorgridlinestroke());
    }
    if (from.has_tschchartaxisvalueminorgridlinestroke()) {
      mutable_tschchartaxisvalueminorgridlinestroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartaxisvalueminorgridlinestroke());
    }
    if (from.has_tschchartaxisvaluetickmarklocation()) {
      set_tschchartaxisvaluetickmarklocation(from.tschchartaxisvaluetickmarklocation());
    }
    if (from.has_tschchartaxisvalueshowmajortickmarks()) {
      set_tschchartaxisvalueshowmajortickmarks(from.tschchartaxisvalueshowmajortickmarks());
    }
    if (from.has_tschchartaxisvalueshowminortickmarks()) {
      set_tschchartaxisvalueshowminortickmarks(from.tschchartaxisvalueshowminortickmarks());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tschchartaxisvaluelabelsorientation()) {
      set_tschchartaxisvaluelabelsorientation(from.tschchartaxisvaluelabelsorientation());
    }
    if (from.has_tschchartaxisvalueshowminimumlabel()) {
      set_tschchartaxisvalueshowminimumlabel(from.tschchartaxisvalueshowminimumlabel());
    }
    if (from.has_tschchartaxisvaluemajorgridlineshadow()) {
      mutable_tschchartaxisvaluemajorgridlineshadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartaxisvaluemajorgridlineshadow());
    }
    if (from.has_tschchartaxisvalueminorgridlineshadow()) {
      mutable_tschchartaxisvalueminorgridlineshadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartaxisvalueminorgridlineshadow());
    }
    if (from.has_tschchartaxisvaluemajorgridlineopacity()) {
      set_tschchartaxisvaluemajorgridlineopacity(from.tschchartaxisvaluemajorgridlineopacity());
    }
    if (from.has_tschchartaxisvalueminorgridlineopacity()) {
      set_tschchartaxisvalueminorgridlineopacity(from.tschchartaxisvalueminorgridlineopacity());
    }
    if (from.has_tschchartaxisvalueshowaxis()) {
      set_tschchartaxisvalueshowaxis(from.tschchartaxisvalueshowaxis());
    }
    if (from.has_tschchartaxiscategoryshowmajorgridlines()) {
      set_tschchartaxiscategoryshowmajorgridlines(from.tschchartaxiscategoryshowmajorgridlines());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_tschchartaxiscategoryshowminorgridlines()) {
      set_tschchartaxiscategoryshowminorgridlines(from.tschchartaxiscategoryshowminorgridlines());
    }
    if (from.has_tschchartaxiscategorymajorgridlinestroke()) {
      mutable_tschchartaxiscategorymajorgridlinestroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartaxiscategorymajorgridlinestroke());
    }
    if (from.has_tschchartaxiscategoryminorgridlinestroke()) {
      mutable_tschchartaxiscategoryminorgridlinestroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartaxiscategoryminorgridlinestroke());
    }
    if (from.has_tschchartaxiscategorytickmarklocation()) {
      set_tschchartaxiscategorytickmarklocation(from.tschchartaxiscategorytickmarklocation());
    }
    if (from.has_tschchartaxiscategoryshowmajortickmarks()) {
      set_tschchartaxiscategoryshowmajortickmarks(from.tschchartaxiscategoryshowmajortickmarks());
    }
    if (from.has_tschchartaxiscategoryshowminortickmarks()) {
      set_tschchartaxiscategoryshowminortickmarks(from.tschchartaxiscategoryshowminortickmarks());
    }
    if (from.has_tschchartaxiscategorylabelsorientation()) {
      set_tschchartaxiscategorylabelsorientation(from.tschchartaxiscategorylabelsorientation());
    }
    if (from.has_tschchartaxiscategoryhorizontalspacing()) {
      set_tschchartaxiscategoryhorizontalspacing(from.tschchartaxiscategoryhorizontalspacing());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_tschchartaxiscategoryverticalspacing()) {
      set_tschchartaxiscategoryverticalspacing(from.tschchartaxiscategoryverticalspacing());
    }
    if (from.has_tschchartaxiscategoryshowlastlabel()) {
      set_tschchartaxiscategoryshowlastlabel(from.tschchartaxiscategoryshowlastlabel());
    }
    if (from.has_tschchartaxiscategorymajorgridlineshadow()) {
      mutable_tschchartaxiscategorymajorgridlineshadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartaxiscategorymajorgridlineshadow());
    }
    if (from.has_tschchartaxiscategoryminorgridlineshadow()) {
      mutable_tschchartaxiscategoryminorgridlineshadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartaxiscategoryminorgridlineshadow());
    }
    if (from.has_tschchartaxiscategorymajorgridlineopacity()) {
      set_tschchartaxiscategorymajorgridlineopacity(from.tschchartaxiscategorymajorgridlineopacity());
    }
    if (from.has_tschchartaxiscategoryminorgridlineopacity()) {
      set_tschchartaxiscategoryminorgridlineopacity(from.tschchartaxiscategoryminorgridlineopacity());
    }
    if (from.has_tschchartaxiscategoryshowaxis()) {
      set_tschchartaxiscategoryshowaxis(from.tschchartaxiscategoryshowaxis());
    }
    if (from.has_tschchartaxisdefaultlabelsorientation()) {
      set_tschchartaxisdefaultlabelsorientation(from.tschchartaxisdefaultlabelsorientation());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_tschchartaxisdefaulttitleparagraphstyleindex()) {
      set_tschchartaxisdefaulttitleparagraphstyleindex(from.tschchartaxisdefaulttitleparagraphstyleindex());
    }
    if (from.has_tschchartaxisdefaultlabelparagraphstyleindex()) {
      set_tschchartaxisdefaultlabelparagraphstyleindex(from.tschchartaxisdefaultlabelparagraphstyleindex());
    }
    if (from.has_tschchartaxisvaluetitleparagraphstyleindex()) {
      set_tschchartaxisvaluetitleparagraphstyleindex(from.tschchartaxisvaluetitleparagraphstyleindex());
    }
    if (from.has_tschchartaxisvaluelabelparagraphstyleindex()) {
      set_tschchartaxisvaluelabelparagraphstyleindex(from.tschchartaxisvaluelabelparagraphstyleindex());
    }
    if (from.has_tschchartaxiscategorytitleparagraphstyleindex()) {
      set_tschchartaxiscategorytitleparagraphstyleindex(from.tschchartaxiscategorytitleparagraphstyleindex());
    }
    if (from.has_tschchartaxiscategorylabelparagraphstyleindex()) {
      set_tschchartaxiscategorylabelparagraphstyleindex(from.tschchartaxiscategorylabelparagraphstyleindex());
    }
    if (from.has_tschchartaxisvalue3dgridlinestroke()) {
      mutable_tschchartaxisvalue3dgridlinestroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartaxisvalue3dgridlinestroke());
    }
    if (from.has_tschchartaxiscategory3dgridlinestroke()) {
      mutable_tschchartaxiscategory3dgridlinestroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartaxiscategory3dgridlinestroke());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_tschchartaxisvalue3dgridlineopacity()) {
      set_tschchartaxisvalue3dgridlineopacity(from.tschchartaxisvalue3dgridlineopacity());
    }
    if (from.has_tschchartaxiscategory3dgridlineopacity()) {
      set_tschchartaxiscategory3dgridlineopacity(from.tschchartaxiscategory3dgridlineopacity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartAxisStyleArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartAxisStyleArchive::CopyFrom(const ChartAxisStyleArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartAxisStyleArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_tschchartaxisvaluemajorgridlinestroke()) {
    if (!this->tschchartaxisvaluemajorgridlinestroke().IsInitialized()) return false;
  }
  if (has_tschchartaxisvalueminorgridlinestroke()) {
    if (!this->tschchartaxisvalueminorgridlinestroke().IsInitialized()) return false;
  }
  if (has_tschchartaxisvaluemajorgridlineshadow()) {
    if (!this->tschchartaxisvaluemajorgridlineshadow().IsInitialized()) return false;
  }
  if (has_tschchartaxisvalueminorgridlineshadow()) {
    if (!this->tschchartaxisvalueminorgridlineshadow().IsInitialized()) return false;
  }
  if (has_tschchartaxiscategorymajorgridlinestroke()) {
    if (!this->tschchartaxiscategorymajorgridlinestroke().IsInitialized()) return false;
  }
  if (has_tschchartaxiscategoryminorgridlinestroke()) {
    if (!this->tschchartaxiscategoryminorgridlinestroke().IsInitialized()) return false;
  }
  if (has_tschchartaxiscategorymajorgridlineshadow()) {
    if (!this->tschchartaxiscategorymajorgridlineshadow().IsInitialized()) return false;
  }
  if (has_tschchartaxiscategoryminorgridlineshadow()) {
    if (!this->tschchartaxiscategoryminorgridlineshadow().IsInitialized()) return false;
  }
  if (has_tschchartaxisvalue3dgridlinestroke()) {
    if (!this->tschchartaxisvalue3dgridlinestroke().IsInitialized()) return false;
  }
  if (has_tschchartaxiscategory3dgridlinestroke()) {
    if (!this->tschchartaxiscategory3dgridlinestroke().IsInitialized()) return false;
  }
  return true;
}

void ChartAxisStyleArchive::Swap(ChartAxisStyleArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(tschchartaxisvalueshowmajorgridlines_, other->tschchartaxisvalueshowmajorgridlines_);
    std::swap(tschchartaxisvalueshowminorgridlines_, other->tschchartaxisvalueshowminorgridlines_);
    std::swap(tschchartaxisvaluemajorgridlinestroke_, other->tschchartaxisvaluemajorgridlinestroke_);
    std::swap(tschchartaxisvalueminorgridlinestroke_, other->tschchartaxisvalueminorgridlinestroke_);
    std::swap(tschchartaxisvaluetickmarklocation_, other->tschchartaxisvaluetickmarklocation_);
    std::swap(tschchartaxisvalueshowmajortickmarks_, other->tschchartaxisvalueshowmajortickmarks_);
    std::swap(tschchartaxisvalueshowminortickmarks_, other->tschchartaxisvalueshowminortickmarks_);
    std::swap(tschchartaxisvaluelabelsorientation_, other->tschchartaxisvaluelabelsorientation_);
    std::swap(tschchartaxisvalueshowminimumlabel_, other->tschchartaxisvalueshowminimumlabel_);
    std::swap(tschchartaxisvaluemajorgridlineshadow_, other->tschchartaxisvaluemajorgridlineshadow_);
    std::swap(tschchartaxisvalueminorgridlineshadow_, other->tschchartaxisvalueminorgridlineshadow_);
    std::swap(tschchartaxisvaluemajorgridlineopacity_, other->tschchartaxisvaluemajorgridlineopacity_);
    std::swap(tschchartaxisvalueminorgridlineopacity_, other->tschchartaxisvalueminorgridlineopacity_);
    std::swap(tschchartaxisvalueshowaxis_, other->tschchartaxisvalueshowaxis_);
    std::swap(tschchartaxiscategoryshowmajorgridlines_, other->tschchartaxiscategoryshowmajorgridlines_);
    std::swap(tschchartaxiscategoryshowminorgridlines_, other->tschchartaxiscategoryshowminorgridlines_);
    std::swap(tschchartaxiscategorymajorgridlinestroke_, other->tschchartaxiscategorymajorgridlinestroke_);
    std::swap(tschchartaxiscategoryminorgridlinestroke_, other->tschchartaxiscategoryminorgridlinestroke_);
    std::swap(tschchartaxiscategorytickmarklocation_, other->tschchartaxiscategorytickmarklocation_);
    std::swap(tschchartaxiscategoryshowmajortickmarks_, other->tschchartaxiscategoryshowmajortickmarks_);
    std::swap(tschchartaxiscategoryshowminortickmarks_, other->tschchartaxiscategoryshowminortickmarks_);
    std::swap(tschchartaxiscategorylabelsorientation_, other->tschchartaxiscategorylabelsorientation_);
    std::swap(tschchartaxiscategoryhorizontalspacing_, other->tschchartaxiscategoryhorizontalspacing_);
    std::swap(tschchartaxiscategoryverticalspacing_, other->tschchartaxiscategoryverticalspacing_);
    std::swap(tschchartaxiscategoryshowlastlabel_, other->tschchartaxiscategoryshowlastlabel_);
    std::swap(tschchartaxiscategorymajorgridlineshadow_, other->tschchartaxiscategorymajorgridlineshadow_);
    std::swap(tschchartaxiscategoryminorgridlineshadow_, other->tschchartaxiscategoryminorgridlineshadow_);
    std::swap(tschchartaxiscategorymajorgridlineopacity_, other->tschchartaxiscategorymajorgridlineopacity_);
    std::swap(tschchartaxiscategoryminorgridlineopacity_, other->tschchartaxiscategoryminorgridlineopacity_);
    std::swap(tschchartaxiscategoryshowaxis_, other->tschchartaxiscategoryshowaxis_);
    std::swap(tschchartaxisdefaultlabelsorientation_, other->tschchartaxisdefaultlabelsorientation_);
    std::swap(tschchartaxisdefaulttitleparagraphstyleindex_, other->tschchartaxisdefaulttitleparagraphstyleindex_);
    std::swap(tschchartaxisdefaultlabelparagraphstyleindex_, other->tschchartaxisdefaultlabelparagraphstyleindex_);
    std::swap(tschchartaxisvaluetitleparagraphstyleindex_, other->tschchartaxisvaluetitleparagraphstyleindex_);
    std::swap(tschchartaxisvaluelabelparagraphstyleindex_, other->tschchartaxisvaluelabelparagraphstyleindex_);
    std::swap(tschchartaxiscategorytitleparagraphstyleindex_, other->tschchartaxiscategorytitleparagraphstyleindex_);
    std::swap(tschchartaxiscategorylabelparagraphstyleindex_, other->tschchartaxiscategorylabelparagraphstyleindex_);
    std::swap(tschchartaxisvalue3dgridlinestroke_, other->tschchartaxisvalue3dgridlinestroke_);
    std::swap(tschchartaxiscategory3dgridlinestroke_, other->tschchartaxiscategory3dgridlinestroke_);
    std::swap(tschchartaxisvalue3dgridlineopacity_, other->tschchartaxisvalue3dgridlineopacity_);
    std::swap(tschchartaxiscategory3dgridlineopacity_, other->tschchartaxiscategory3dgridlineopacity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChartAxisStyleArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartAxisStyleArchive_descriptor_;
  metadata.reflection = ChartAxisStyleArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChartAxisNonStyleArchive::kSuperFieldNumber;
const int ChartAxisNonStyleArchive::kTschchartaxisdefaultuserminFieldNumber;
const int ChartAxisNonStyleArchive::kTschchartaxisdefaultusermaxFieldNumber;
const int ChartAxisNonStyleArchive::kTschchartaxisdefaultnumberformatFieldNumber;
const int ChartAxisNonStyleArchive::kTschchartaxisdefaultshowlabelsFieldNumber;
const int ChartAxisNonStyleArchive::kTschchartaxisvaluenumberofminorgridlinesFieldNumber;
const int ChartAxisNonStyleArchive::kTschchartaxisvaluescaleFieldNumber;
const int ChartAxisNonStyleArchive::kTschchartaxisvaluenumberofdecadesFieldNumber;
const int ChartAxisNonStyleArchive::kTschchartaxisvalueshowlabelsFieldNumber;
const int ChartAxisNonStyleArchive::kTschchartaxisvalueshowtitleFieldNumber;
const int ChartAxisNonStyleArchive::kTschchartaxisvaluenumberofmajorgridlinesFieldNumber;
const int ChartAxisNonStyleArchive::kTschchartaxisvaluetitleFieldNumber;
const int ChartAxisNonStyleArchive::kTschchartaxiscategoryshowlabelsFieldNumber;
const int ChartAxisNonStyleArchive::kTschchartaxiscategoryshowserieslabelsFieldNumber;
const int ChartAxisNonStyleArchive::kTschchartaxiscategoryshowtitleFieldNumber;
const int ChartAxisNonStyleArchive::kTschchartaxiscategorytitleFieldNumber;
const int ChartAxisNonStyleArchive::kTschchartaxisdefaultnumberformattypeFieldNumber;
const int ChartAxisNonStyleArchive::kTschchartaxisdefault3DlabelpositionFieldNumber;
const int ChartAxisNonStyleArchive::kTschchartaxiscategoryplottoedgesFieldNumber;
#endif  // !_MSC_VER

ChartAxisNonStyleArchive::ChartAxisNonStyleArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartAxisNonStyleArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSS::StyleArchive*>(&::TSS::StyleArchive::default_instance());
  tschchartaxisdefaultusermin_ = const_cast< ::TSCH::ChartsNSNumberDoubleArchive*>(&::TSCH::ChartsNSNumberDoubleArchive::default_instance());
  tschchartaxisdefaultusermax_ = const_cast< ::TSCH::ChartsNSNumberDoubleArchive*>(&::TSCH::ChartsNSNumberDoubleArchive::default_instance());
  tschchartaxisdefaultnumberformat_ = const_cast< ::TSCH::PreUFF::ChartsNumberFormatArchive*>(&::TSCH::PreUFF::ChartsNumberFormatArchive::default_instance());
}

ChartAxisNonStyleArchive::ChartAxisNonStyleArchive(const ChartAxisNonStyleArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartAxisNonStyleArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  tschchartaxisdefaultusermin_ = NULL;
  tschchartaxisdefaultusermax_ = NULL;
  tschchartaxisdefaultnumberformat_ = NULL;
  tschchartaxisdefaultshowlabels_ = false;
  tschchartaxisvaluenumberofminorgridlines_ = 0;
  tschchartaxisvaluescale_ = 0;
  tschchartaxisvaluenumberofdecades_ = 0;
  tschchartaxisvalueshowlabels_ = false;
  tschchartaxisvalueshowtitle_ = false;
  tschchartaxisvaluenumberofmajorgridlines_ = 0;
  tschchartaxisvaluetitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tschchartaxiscategoryshowlabels_ = false;
  tschchartaxiscategoryshowserieslabels_ = false;
  tschchartaxiscategoryshowtitle_ = false;
  tschchartaxiscategorytitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tschchartaxisdefaultnumberformattype_ = 0;
  tschchartaxisdefault3dlabelposition_ = 0;
  tschchartaxiscategoryplottoedges_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartAxisNonStyleArchive::~ChartAxisNonStyleArchive() {
  SharedDtor();
}

void ChartAxisNonStyleArchive::SharedDtor() {
  if (tschchartaxisvaluetitle_ != &::google::protobuf::internal::kEmptyString) {
    delete tschchartaxisvaluetitle_;
  }
  if (tschchartaxiscategorytitle_ != &::google::protobuf::internal::kEmptyString) {
    delete tschchartaxiscategorytitle_;
  }
  if (this != default_instance_) {
    delete super_;
    delete tschchartaxisdefaultusermin_;
    delete tschchartaxisdefaultusermax_;
    delete tschchartaxisdefaultnumberformat_;
  }
}

void ChartAxisNonStyleArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartAxisNonStyleArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartAxisNonStyleArchive_descriptor_;
}

const ChartAxisNonStyleArchive& ChartAxisNonStyleArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHPreUFFArchives_2eproto();
  return *default_instance_;
}

ChartAxisNonStyleArchive* ChartAxisNonStyleArchive::default_instance_ = NULL;

ChartAxisNonStyleArchive* ChartAxisNonStyleArchive::New() const {
  return new ChartAxisNonStyleArchive;
}

void ChartAxisNonStyleArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSS::StyleArchive::Clear();
    }
    if (has_tschchartaxisdefaultusermin()) {
      if (tschchartaxisdefaultusermin_ != NULL) tschchartaxisdefaultusermin_->::TSCH::ChartsNSNumberDoubleArchive::Clear();
    }
    if (has_tschchartaxisdefaultusermax()) {
      if (tschchartaxisdefaultusermax_ != NULL) tschchartaxisdefaultusermax_->::TSCH::ChartsNSNumberDoubleArchive::Clear();
    }
    if (has_tschchartaxisdefaultnumberformat()) {
      if (tschchartaxisdefaultnumberformat_ != NULL) tschchartaxisdefaultnumberformat_->::TSCH::PreUFF::ChartsNumberFormatArchive::Clear();
    }
    tschchartaxisdefaultshowlabels_ = false;
    tschchartaxisvaluenumberofminorgridlines_ = 0;
    tschchartaxisvaluescale_ = 0;
    tschchartaxisvaluenumberofdecades_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    tschchartaxisvalueshowlabels_ = false;
    tschchartaxisvalueshowtitle_ = false;
    tschchartaxisvaluenumberofmajorgridlines_ = 0;
    if (has_tschchartaxisvaluetitle()) {
      if (tschchartaxisvaluetitle_ != &::google::protobuf::internal::kEmptyString) {
        tschchartaxisvaluetitle_->clear();
      }
    }
    tschchartaxiscategoryshowlabels_ = false;
    tschchartaxiscategoryshowserieslabels_ = false;
    tschchartaxiscategoryshowtitle_ = false;
    if (has_tschchartaxiscategorytitle()) {
      if (tschchartaxiscategorytitle_ != &::google::protobuf::internal::kEmptyString) {
        tschchartaxiscategorytitle_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    tschchartaxisdefaultnumberformattype_ = 0;
    tschchartaxisdefault3dlabelposition_ = 0;
    tschchartaxiscategoryplottoedges_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartAxisNonStyleArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSS.StyleArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_tschchartaxisdefaultusermin;
        break;
      }

      // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermin = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartaxisdefaultusermin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartaxisdefaultusermin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_tschchartaxisdefaultusermax;
        break;
      }

      // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermax = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartaxisdefaultusermax:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartaxisdefaultusermax()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_tschchartaxisdefaultnumberformat;
        break;
      }

      // optional .TSCH.PreUFF.ChartsNumberFormatArchive tschchartaxisdefaultnumberformat = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartaxisdefaultnumberformat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartaxisdefaultnumberformat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_tschchartaxisdefaultshowlabels;
        break;
      }

      // optional bool tschchartaxisdefaultshowlabels = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisdefaultshowlabels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartaxisdefaultshowlabels_)));
          set_has_tschchartaxisdefaultshowlabels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_tschchartaxisvaluenumberofminorgridlines;
        break;
      }

      // optional int32 tschchartaxisvaluenumberofminorgridlines = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisvaluenumberofminorgridlines:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartaxisvaluenumberofminorgridlines_)));
          set_has_tschchartaxisvaluenumberofminorgridlines();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_tschchartaxisvaluescale;
        break;
      }

      // optional int32 tschchartaxisvaluescale = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisvaluescale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartaxisvaluescale_)));
          set_has_tschchartaxisvaluescale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_tschchartaxisvaluenumberofdecades;
        break;
      }

      // optional int32 tschchartaxisvaluenumberofdecades = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisvaluenumberofdecades:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartaxisvaluenumberofdecades_)));
          set_has_tschchartaxisvaluenumberofdecades();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(424)) goto parse_tschchartaxisvalueshowlabels;
        break;
      }

      // optional bool tschchartaxisvalueshowlabels = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisvalueshowlabels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartaxisvalueshowlabels_)));
          set_has_tschchartaxisvalueshowlabels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(432)) goto parse_tschchartaxisvalueshowtitle;
        break;
      }

      // optional bool tschchartaxisvalueshowtitle = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisvalueshowtitle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartaxisvalueshowtitle_)));
          set_has_tschchartaxisvalueshowtitle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(440)) goto parse_tschchartaxisvaluenumberofmajorgridlines;
        break;
      }

      // optional int32 tschchartaxisvaluenumberofmajorgridlines = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisvaluenumberofmajorgridlines:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartaxisvaluenumberofmajorgridlines_)));
          set_has_tschchartaxisvaluenumberofmajorgridlines();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(450)) goto parse_tschchartaxisvaluetitle;
        break;
      }

      // optional string tschchartaxisvaluetitle = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartaxisvaluetitle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tschchartaxisvaluetitle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tschchartaxisvaluetitle().data(), this->tschchartaxisvaluetitle().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(800)) goto parse_tschchartaxiscategoryshowlabels;
        break;
      }

      // optional bool tschchartaxiscategoryshowlabels = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxiscategoryshowlabels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartaxiscategoryshowlabels_)));
          set_has_tschchartaxiscategoryshowlabels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(808)) goto parse_tschchartaxiscategoryshowserieslabels;
        break;
      }

      // optional bool tschchartaxiscategoryshowserieslabels = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxiscategoryshowserieslabels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartaxiscategoryshowserieslabels_)));
          set_has_tschchartaxiscategoryshowserieslabels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(816)) goto parse_tschchartaxiscategoryshowtitle;
        break;
      }

      // optional bool tschchartaxiscategoryshowtitle = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxiscategoryshowtitle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartaxiscategoryshowtitle_)));
          set_has_tschchartaxiscategoryshowtitle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(826)) goto parse_tschchartaxiscategorytitle;
        break;
      }

      // optional string tschchartaxiscategorytitle = 103;
      case 103: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartaxiscategorytitle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tschchartaxiscategorytitle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tschchartaxiscategorytitle().data(), this->tschchartaxiscategorytitle().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(928)) goto parse_tschchartaxiscategoryplottoedges;
        break;
      }

      // optional bool tschchartaxiscategoryplottoedges = 116;
      case 116: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxiscategoryplottoedges:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartaxiscategoryplottoedges_)));
          set_has_tschchartaxiscategoryplottoedges();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(960)) goto parse_tschchartaxisdefaultnumberformattype;
        break;
      }

      // optional int32 tschchartaxisdefaultnumberformattype = 120;
      case 120: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisdefaultnumberformattype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartaxisdefaultnumberformattype_)));
          set_has_tschchartaxisdefaultnumberformattype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2688)) goto parse_tschchartaxisdefault3dlabelposition;
        break;
      }

      // optional int32 tschchartaxisdefault3dlabelposition = 336;
      case 336: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisdefault3dlabelposition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartaxisdefault3dlabelposition_)));
          set_has_tschchartaxisdefault3dlabelposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChartAxisNonStyleArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSS.StyleArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermin = 11;
  if (has_tschchartaxisdefaultusermin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->tschchartaxisdefaultusermin(), output);
  }

  // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermax = 12;
  if (has_tschchartaxisdefaultusermax()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->tschchartaxisdefaultusermax(), output);
  }

  // optional .TSCH.PreUFF.ChartsNumberFormatArchive tschchartaxisdefaultnumberformat = 13;
  if (has_tschchartaxisdefaultnumberformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->tschchartaxisdefaultnumberformat(), output);
  }

  // optional bool tschchartaxisdefaultshowlabels = 14;
  if (has_tschchartaxisdefaultshowlabels()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->tschchartaxisdefaultshowlabels(), output);
  }

  // optional int32 tschchartaxisvaluenumberofminorgridlines = 50;
  if (has_tschchartaxisvaluenumberofminorgridlines()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->tschchartaxisvaluenumberofminorgridlines(), output);
  }

  // optional int32 tschchartaxisvaluescale = 51;
  if (has_tschchartaxisvaluescale()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->tschchartaxisvaluescale(), output);
  }

  // optional int32 tschchartaxisvaluenumberofdecades = 52;
  if (has_tschchartaxisvaluenumberofdecades()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(52, this->tschchartaxisvaluenumberofdecades(), output);
  }

  // optional bool tschchartaxisvalueshowlabels = 53;
  if (has_tschchartaxisvalueshowlabels()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(53, this->tschchartaxisvalueshowlabels(), output);
  }

  // optional bool tschchartaxisvalueshowtitle = 54;
  if (has_tschchartaxisvalueshowtitle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(54, this->tschchartaxisvalueshowtitle(), output);
  }

  // optional int32 tschchartaxisvaluenumberofmajorgridlines = 55;
  if (has_tschchartaxisvaluenumberofmajorgridlines()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(55, this->tschchartaxisvaluenumberofmajorgridlines(), output);
  }

  // optional string tschchartaxisvaluetitle = 56;
  if (has_tschchartaxisvaluetitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tschchartaxisvaluetitle().data(), this->tschchartaxisvaluetitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      56, this->tschchartaxisvaluetitle(), output);
  }

  // optional bool tschchartaxiscategoryshowlabels = 100;
  if (has_tschchartaxiscategoryshowlabels()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(100, this->tschchartaxiscategoryshowlabels(), output);
  }

  // optional bool tschchartaxiscategoryshowserieslabels = 101;
  if (has_tschchartaxiscategoryshowserieslabels()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(101, this->tschchartaxiscategoryshowserieslabels(), output);
  }

  // optional bool tschchartaxiscategoryshowtitle = 102;
  if (has_tschchartaxiscategoryshowtitle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(102, this->tschchartaxiscategoryshowtitle(), output);
  }

  // optional string tschchartaxiscategorytitle = 103;
  if (has_tschchartaxiscategorytitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tschchartaxiscategorytitle().data(), this->tschchartaxiscategorytitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      103, this->tschchartaxiscategorytitle(), output);
  }

  // optional bool tschchartaxiscategoryplottoedges = 116;
  if (has_tschchartaxiscategoryplottoedges()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(116, this->tschchartaxiscategoryplottoedges(), output);
  }

  // optional int32 tschchartaxisdefaultnumberformattype = 120;
  if (has_tschchartaxisdefaultnumberformattype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(120, this->tschchartaxisdefaultnumberformattype(), output);
  }

  // optional int32 tschchartaxisdefault3dlabelposition = 336;
  if (has_tschchartaxisdefault3dlabelposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(336, this->tschchartaxisdefault3dlabelposition(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartAxisNonStyleArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSS.StyleArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermin = 11;
  if (has_tschchartaxisdefaultusermin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->tschchartaxisdefaultusermin(), target);
  }

  // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermax = 12;
  if (has_tschchartaxisdefaultusermax()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->tschchartaxisdefaultusermax(), target);
  }

  // optional .TSCH.PreUFF.ChartsNumberFormatArchive tschchartaxisdefaultnumberformat = 13;
  if (has_tschchartaxisdefaultnumberformat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->tschchartaxisdefaultnumberformat(), target);
  }

  // optional bool tschchartaxisdefaultshowlabels = 14;
  if (has_tschchartaxisdefaultshowlabels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->tschchartaxisdefaultshowlabels(), target);
  }

  // optional int32 tschchartaxisvaluenumberofminorgridlines = 50;
  if (has_tschchartaxisvaluenumberofminorgridlines()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->tschchartaxisvaluenumberofminorgridlines(), target);
  }

  // optional int32 tschchartaxisvaluescale = 51;
  if (has_tschchartaxisvaluescale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->tschchartaxisvaluescale(), target);
  }

  // optional int32 tschchartaxisvaluenumberofdecades = 52;
  if (has_tschchartaxisvaluenumberofdecades()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(52, this->tschchartaxisvaluenumberofdecades(), target);
  }

  // optional bool tschchartaxisvalueshowlabels = 53;
  if (has_tschchartaxisvalueshowlabels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(53, this->tschchartaxisvalueshowlabels(), target);
  }

  // optional bool tschchartaxisvalueshowtitle = 54;
  if (has_tschchartaxisvalueshowtitle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(54, this->tschchartaxisvalueshowtitle(), target);
  }

  // optional int32 tschchartaxisvaluenumberofmajorgridlines = 55;
  if (has_tschchartaxisvaluenumberofmajorgridlines()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(55, this->tschchartaxisvaluenumberofmajorgridlines(), target);
  }

  // optional string tschchartaxisvaluetitle = 56;
  if (has_tschchartaxisvaluetitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tschchartaxisvaluetitle().data(), this->tschchartaxisvaluetitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        56, this->tschchartaxisvaluetitle(), target);
  }

  // optional bool tschchartaxiscategoryshowlabels = 100;
  if (has_tschchartaxiscategoryshowlabels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(100, this->tschchartaxiscategoryshowlabels(), target);
  }

  // optional bool tschchartaxiscategoryshowserieslabels = 101;
  if (has_tschchartaxiscategoryshowserieslabels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(101, this->tschchartaxiscategoryshowserieslabels(), target);
  }

  // optional bool tschchartaxiscategoryshowtitle = 102;
  if (has_tschchartaxiscategoryshowtitle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(102, this->tschchartaxiscategoryshowtitle(), target);
  }

  // optional string tschchartaxiscategorytitle = 103;
  if (has_tschchartaxiscategorytitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tschchartaxiscategorytitle().data(), this->tschchartaxiscategorytitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        103, this->tschchartaxiscategorytitle(), target);
  }

  // optional bool tschchartaxiscategoryplottoedges = 116;
  if (has_tschchartaxiscategoryplottoedges()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(116, this->tschchartaxiscategoryplottoedges(), target);
  }

  // optional int32 tschchartaxisdefaultnumberformattype = 120;
  if (has_tschchartaxisdefaultnumberformattype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(120, this->tschchartaxisdefaultnumberformattype(), target);
  }

  // optional int32 tschchartaxisdefault3dlabelposition = 336;
  if (has_tschchartaxisdefault3dlabelposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(336, this->tschchartaxisdefault3dlabelposition(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartAxisNonStyleArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSS.StyleArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermin = 11;
    if (has_tschchartaxisdefaultusermin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartaxisdefaultusermin());
    }

    // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermax = 12;
    if (has_tschchartaxisdefaultusermax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartaxisdefaultusermax());
    }

    // optional .TSCH.PreUFF.ChartsNumberFormatArchive tschchartaxisdefaultnumberformat = 13;
    if (has_tschchartaxisdefaultnumberformat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartaxisdefaultnumberformat());
    }

    // optional bool tschchartaxisdefaultshowlabels = 14;
    if (has_tschchartaxisdefaultshowlabels()) {
      total_size += 1 + 1;
    }

    // optional int32 tschchartaxisvaluenumberofminorgridlines = 50;
    if (has_tschchartaxisvaluenumberofminorgridlines()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartaxisvaluenumberofminorgridlines());
    }

    // optional int32 tschchartaxisvaluescale = 51;
    if (has_tschchartaxisvaluescale()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartaxisvaluescale());
    }

    // optional int32 tschchartaxisvaluenumberofdecades = 52;
    if (has_tschchartaxisvaluenumberofdecades()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartaxisvaluenumberofdecades());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool tschchartaxisvalueshowlabels = 53;
    if (has_tschchartaxisvalueshowlabels()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxisvalueshowtitle = 54;
    if (has_tschchartaxisvalueshowtitle()) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartaxisvaluenumberofmajorgridlines = 55;
    if (has_tschchartaxisvaluenumberofmajorgridlines()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartaxisvaluenumberofmajorgridlines());
    }

    // optional string tschchartaxisvaluetitle = 56;
    if (has_tschchartaxisvaluetitle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tschchartaxisvaluetitle());
    }

    // optional bool tschchartaxiscategoryshowlabels = 100;
    if (has_tschchartaxiscategoryshowlabels()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxiscategoryshowserieslabels = 101;
    if (has_tschchartaxiscategoryshowserieslabels()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxiscategoryshowtitle = 102;
    if (has_tschchartaxiscategoryshowtitle()) {
      total_size += 2 + 1;
    }

    // optional string tschchartaxiscategorytitle = 103;
    if (has_tschchartaxiscategorytitle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tschchartaxiscategorytitle());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 tschchartaxisdefaultnumberformattype = 120;
    if (has_tschchartaxisdefaultnumberformattype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartaxisdefaultnumberformattype());
    }

    // optional int32 tschchartaxisdefault3dlabelposition = 336;
    if (has_tschchartaxisdefault3dlabelposition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartaxisdefault3dlabelposition());
    }

    // optional bool tschchartaxiscategoryplottoedges = 116;
    if (has_tschchartaxiscategoryplottoedges()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartAxisNonStyleArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartAxisNonStyleArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartAxisNonStyleArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartAxisNonStyleArchive::MergeFrom(const ChartAxisNonStyleArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSS::StyleArchive::MergeFrom(from.super());
    }
    if (from.has_tschchartaxisdefaultusermin()) {
      mutable_tschchartaxisdefaultusermin()->::TSCH::ChartsNSNumberDoubleArchive::MergeFrom(from.tschchartaxisdefaultusermin());
    }
    if (from.has_tschchartaxisdefaultusermax()) {
      mutable_tschchartaxisdefaultusermax()->::TSCH::ChartsNSNumberDoubleArchive::MergeFrom(from.tschchartaxisdefaultusermax());
    }
    if (from.has_tschchartaxisdefaultnumberformat()) {
      mutable_tschchartaxisdefaultnumberformat()->::TSCH::PreUFF::ChartsNumberFormatArchive::MergeFrom(from.tschchartaxisdefaultnumberformat());
    }
    if (from.has_tschchartaxisdefaultshowlabels()) {
      set_tschchartaxisdefaultshowlabels(from.tschchartaxisdefaultshowlabels());
    }
    if (from.has_tschchartaxisvaluenumberofminorgridlines()) {
      set_tschchartaxisvaluenumberofminorgridlines(from.tschchartaxisvaluenumberofminorgridlines());
    }
    if (from.has_tschchartaxisvaluescale()) {
      set_tschchartaxisvaluescale(from.tschchartaxisvaluescale());
    }
    if (from.has_tschchartaxisvaluenumberofdecades()) {
      set_tschchartaxisvaluenumberofdecades(from.tschchartaxisvaluenumberofdecades());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tschchartaxisvalueshowlabels()) {
      set_tschchartaxisvalueshowlabels(from.tschchartaxisvalueshowlabels());
    }
    if (from.has_tschchartaxisvalueshowtitle()) {
      set_tschchartaxisvalueshowtitle(from.tschchartaxisvalueshowtitle());
    }
    if (from.has_tschchartaxisvaluenumberofmajorgridlines()) {
      set_tschchartaxisvaluenumberofmajorgridlines(from.tschchartaxisvaluenumberofmajorgridlines());
    }
    if (from.has_tschchartaxisvaluetitle()) {
      set_tschchartaxisvaluetitle(from.tschchartaxisvaluetitle());
    }
    if (from.has_tschchartaxiscategoryshowlabels()) {
      set_tschchartaxiscategoryshowlabels(from.tschchartaxiscategoryshowlabels());
    }
    if (from.has_tschchartaxiscategoryshowserieslabels()) {
      set_tschchartaxiscategoryshowserieslabels(from.tschchartaxiscategoryshowserieslabels());
    }
    if (from.has_tschchartaxiscategoryshowtitle()) {
      set_tschchartaxiscategoryshowtitle(from.tschchartaxiscategoryshowtitle());
    }
    if (from.has_tschchartaxiscategorytitle()) {
      set_tschchartaxiscategorytitle(from.tschchartaxiscategorytitle());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_tschchartaxisdefaultnumberformattype()) {
      set_tschchartaxisdefaultnumberformattype(from.tschchartaxisdefaultnumberformattype());
    }
    if (from.has_tschchartaxisdefault3dlabelposition()) {
      set_tschchartaxisdefault3dlabelposition(from.tschchartaxisdefault3dlabelposition());
    }
    if (from.has_tschchartaxiscategoryplottoedges()) {
      set_tschchartaxiscategoryplottoedges(from.tschchartaxiscategoryplottoedges());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartAxisNonStyleArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartAxisNonStyleArchive::CopyFrom(const ChartAxisNonStyleArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartAxisNonStyleArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_tschchartaxisdefaultnumberformat()) {
    if (!this->tschchartaxisdefaultnumberformat().IsInitialized()) return false;
  }
  return true;
}

void ChartAxisNonStyleArchive::Swap(ChartAxisNonStyleArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(tschchartaxisdefaultusermin_, other->tschchartaxisdefaultusermin_);
    std::swap(tschchartaxisdefaultusermax_, other->tschchartaxisdefaultusermax_);
    std::swap(tschchartaxisdefaultnumberformat_, other->tschchartaxisdefaultnumberformat_);
    std::swap(tschchartaxisdefaultshowlabels_, other->tschchartaxisdefaultshowlabels_);
    std::swap(tschchartaxisvaluenumberofminorgridlines_, other->tschchartaxisvaluenumberofminorgridlines_);
    std::swap(tschchartaxisvaluescale_, other->tschchartaxisvaluescale_);
    std::swap(tschchartaxisvaluenumberofdecades_, other->tschchartaxisvaluenumberofdecades_);
    std::swap(tschchartaxisvalueshowlabels_, other->tschchartaxisvalueshowlabels_);
    std::swap(tschchartaxisvalueshowtitle_, other->tschchartaxisvalueshowtitle_);
    std::swap(tschchartaxisvaluenumberofmajorgridlines_, other->tschchartaxisvaluenumberofmajorgridlines_);
    std::swap(tschchartaxisvaluetitle_, other->tschchartaxisvaluetitle_);
    std::swap(tschchartaxiscategoryshowlabels_, other->tschchartaxiscategoryshowlabels_);
    std::swap(tschchartaxiscategoryshowserieslabels_, other->tschchartaxiscategoryshowserieslabels_);
    std::swap(tschchartaxiscategoryshowtitle_, other->tschchartaxiscategoryshowtitle_);
    std::swap(tschchartaxiscategorytitle_, other->tschchartaxiscategorytitle_);
    std::swap(tschchartaxisdefaultnumberformattype_, other->tschchartaxisdefaultnumberformattype_);
    std::swap(tschchartaxisdefault3dlabelposition_, other->tschchartaxisdefault3dlabelposition_);
    std::swap(tschchartaxiscategoryplottoedges_, other->tschchartaxiscategoryplottoedges_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChartAxisNonStyleArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartAxisNonStyleArchive_descriptor_;
  metadata.reflection = ChartAxisNonStyleArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChartSeriesStyleArchive::kSuperFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesdefaulttrendlineequationparagraphstyleindexFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesdefaulttrendlinersquaredparagraphstyleindexFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesdefaulttrendlineequationopacityFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesdefaulttrendlinersquaredopacityFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesbarfillFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesbarstrokeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesbarvaluelabelpositionFieldNumber;
const int ChartSeriesStyleArchive::kTschchartserieslinestrokeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartserieslinesymbolfillFieldNumber;
const int ChartSeriesStyleArchive::kTschchartserieslinesymbolstrokeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartserieslinesymbolsizeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartserieslinevaluelabelpositionFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesareafillFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesareastrokeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesareavaluelabelpositionFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesareasymbolfillFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesareasymbolstrokeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesareasymbolsizeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriespiefillFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriespiestrokeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesscatterstrokeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesscattersymbolfillFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesscattersymbolstrokeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesscattersymbolsizeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesscattervaluelabelpositionFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesdefaultfillFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesdefaultvaluelabelpositionFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriespiedeprecatedserieslabelsonFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriescolumnfillFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriespieshadowFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesbarshadowFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesareashadowFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesscattershadowFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesmixedlineshadowFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesmixedareashadowFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesmixedcolumnshadowFieldNumber;
const int ChartSeriesStyleArchive::kTschchartserieslineshadowFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesdefaultshadowFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesbubblesymbolfillFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesbubblestrokeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesbubblesymbolstrokeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesbubblevaluelabelpositionFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesbubbleshadowFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesbubblesymbolfilluseseriesstrokeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseries3DbarshadowFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseries3DcolumnshadowFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseries3DlineshadowFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseries3DareashadowFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseries3DpieshadowFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesdefaultlabelparagraphstyleindexFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesbarlabelparagraphstyleindexFieldNumber;
const int ChartSeriesStyleArchive::kTschchartserieslinelabelparagraphstyleindexFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesarealabelparagraphstyleindexFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriespielabelparagraphstyleindexFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesmixedlabelparagraphstyleindexFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesdefaultopacityFieldNumber;
const int ChartSeriesStyleArchive::kTschchartserieslinesymbolfilluseseriesstrokeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesareasymbolfilluseseriesstrokeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesscattersymbolfilluseseriesstrokeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesmixedlinesymbolfilluseseriesstrokeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesmixedareasymbolfilluseseriesstrokeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartserieslinesymbolfilluseseriesfillFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesareasymbolfilluseseriesfillFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesmixedlinesymbolfilluseseriesfillFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesmixedareasymbolfilluseseriesfillFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesmixedcolumnfillFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesmixedareafillFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesmixedcolumnstrokeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesmixedlinestrokeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesmixedareastrokeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesmixedlinesymbolsizeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesmixedareasymbolsizeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesmixedlinesymbolfillFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesmixedareasymbolfillFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesmixedlinesymbolstrokeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesmixedareasymbolstrokeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesmixedcolumnvaluelabelpositionFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesmixedlinevaluelabelpositionFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesmixedareavaluelabelpositionFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesdefaultoutsidelabelparagraphstyleindexFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesbaroutsidelabelparagraphstyleindexFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesareaoutsidelabelparagraphstyleindexFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriespieoutsidelabelparagraphstyleindexFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesmixedoutsidelabelparagraphstyleindexFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesstackedbarvaluelabelpositionFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesstackedareavaluelabelpositionFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesdefaulttrendlinestrokeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesdefaulttrendlineshadowFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesdefaulterrorbarshadowFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesdefaulterrorbarstrokeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesdefaulterrorbarstrokescatterxFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesdefaulterrorbarlineendFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesdefaulterrorbarlineendscatterxFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesdefaultdeprecated3DfillFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesbardeprecated3DfillFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriescolumndeprecated3DfillFieldNumber;
const int ChartSeriesStyleArchive::kTschchartserieslinedeprecated3DfillFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesareadeprecated3DfillFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriespiedeprecated3DfillFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseries3DbarfillFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseries3DcolumnfillFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseries3DlinefillFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseries3DareafillFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseries3DpiefillFieldNumber;
#endif  // !_MSC_VER

ChartSeriesStyleArchive::ChartSeriesStyleArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartSeriesStyleArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSS::StyleArchive*>(&::TSS::StyleArchive::default_instance());
  tschchartseriesbarfill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  tschchartseriesbarstroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartserieslinestroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartserieslinesymbolfill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  tschchartserieslinesymbolstroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartseriesareafill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  tschchartseriesareastroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartseriesareasymbolfill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  tschchartseriesareasymbolstroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartseriespiefill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  tschchartseriespiestroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartseriesscatterstroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartseriesscattersymbolfill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  tschchartseriesscattersymbolstroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartseriesdefaultfill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  tschchartseriescolumnfill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  tschchartseriespieshadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartseriesbarshadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartseriesareashadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartseriesscattershadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartseriesmixedlineshadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartseriesmixedareashadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartseriesmixedcolumnshadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartserieslineshadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartseriesdefaultshadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartseriesbubblesymbolfill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  tschchartseriesbubblestroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartseriesbubblesymbolstroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartseriesbubbleshadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartseries3dbarshadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartseries3dcolumnshadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartseries3dlineshadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartseries3dareashadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartseries3dpieshadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartseriesmixedcolumnfill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  tschchartseriesmixedareafill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  tschchartseriesmixedcolumnstroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartseriesmixedlinestroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartseriesmixedareastroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartseriesmixedlinesymbolfill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  tschchartseriesmixedareasymbolfill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  tschchartseriesmixedlinesymbolstroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartseriesmixedareasymbolstroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartseriesdefaulttrendlinestroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartseriesdefaulttrendlineshadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartseriesdefaulterrorbarshadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartseriesdefaulterrorbarstroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartseriesdefaulterrorbarstrokescatterx_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartseriesdefaulterrorbarlineend_ = const_cast< ::TSD::LineEndArchive*>(&::TSD::LineEndArchive::default_instance());
  tschchartseriesdefaulterrorbarlineendscatterx_ = const_cast< ::TSD::LineEndArchive*>(&::TSD::LineEndArchive::default_instance());
  tschchartseriesdefaultdeprecated3dfill_ = const_cast< ::TSCH::DEPRECATEDChart3DFillArchive*>(&::TSCH::DEPRECATEDChart3DFillArchive::default_instance());
  tschchartseriesbardeprecated3dfill_ = const_cast< ::TSCH::DEPRECATEDChart3DFillArchive*>(&::TSCH::DEPRECATEDChart3DFillArchive::default_instance());
  tschchartseriescolumndeprecated3dfill_ = const_cast< ::TSCH::DEPRECATEDChart3DFillArchive*>(&::TSCH::DEPRECATEDChart3DFillArchive::default_instance());
  tschchartserieslinedeprecated3dfill_ = const_cast< ::TSCH::DEPRECATEDChart3DFillArchive*>(&::TSCH::DEPRECATEDChart3DFillArchive::default_instance());
  tschchartseriesareadeprecated3dfill_ = const_cast< ::TSCH::DEPRECATEDChart3DFillArchive*>(&::TSCH::DEPRECATEDChart3DFillArchive::default_instance());
  tschchartseriespiedeprecated3dfill_ = const_cast< ::TSCH::DEPRECATEDChart3DFillArchive*>(&::TSCH::DEPRECATEDChart3DFillArchive::default_instance());
  tschchartseries3dbarfill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  tschchartseries3dcolumnfill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  tschchartseries3dlinefill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  tschchartseries3dareafill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  tschchartseries3dpiefill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
}

ChartSeriesStyleArchive::ChartSeriesStyleArchive(const ChartSeriesStyleArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartSeriesStyleArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  tschchartseriesdefaulttrendlineequationparagraphstyleindex_ = 0;
  tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_ = 0;
  tschchartseriesdefaulttrendlineequationopacity_ = 0;
  tschchartseriesdefaulttrendlinersquaredopacity_ = 0;
  tschchartseriesbarfill_ = NULL;
  tschchartseriesbarstroke_ = NULL;
  tschchartseriesbarvaluelabelposition_ = 0;
  tschchartserieslinestroke_ = NULL;
  tschchartserieslinesymbolfill_ = NULL;
  tschchartserieslinesymbolstroke_ = NULL;
  tschchartserieslinesymbolsize_ = 0;
  tschchartserieslinevaluelabelposition_ = 0;
  tschchartseriesareafill_ = NULL;
  tschchartseriesareastroke_ = NULL;
  tschchartseriesareavaluelabelposition_ = 0;
  tschchartseriesareasymbolfill_ = NULL;
  tschchartseriesareasymbolstroke_ = NULL;
  tschchartseriesareasymbolsize_ = 0;
  tschchartseriespiefill_ = NULL;
  tschchartseriespiestroke_ = NULL;
  tschchartseriesscatterstroke_ = NULL;
  tschchartseriesscattersymbolfill_ = NULL;
  tschchartseriesscattersymbolstroke_ = NULL;
  tschchartseriesscattersymbolsize_ = 0;
  tschchartseriesscattervaluelabelposition_ = 0;
  tschchartseriesdefaultfill_ = NULL;
  tschchartseriesdefaultvaluelabelposition_ = 0;
  tschchartseriespiedeprecatedserieslabelson_ = false;
  tschchartseriescolumnfill_ = NULL;
  tschchartseriespieshadow_ = NULL;
  tschchartseriesbarshadow_ = NULL;
  tschchartseriesareashadow_ = NULL;
  tschchartseriesscattershadow_ = NULL;
  tschchartseriesmixedlineshadow_ = NULL;
  tschchartseriesmixedareashadow_ = NULL;
  tschchartseriesmixedcolumnshadow_ = NULL;
  tschchartserieslineshadow_ = NULL;
  tschchartseriesdefaultshadow_ = NULL;
  tschchartseriesbubblesymbolfill_ = NULL;
  tschchartseriesbubblestroke_ = NULL;
  tschchartseriesbubblesymbolstroke_ = NULL;
  tschchartseriesbubblevaluelabelposition_ = 0;
  tschchartseriesbubbleshadow_ = NULL;
  tschchartseriesbubblesymbolfilluseseriesstroke_ = false;
  tschchartseries3dbarshadow_ = NULL;
  tschchartseries3dcolumnshadow_ = NULL;
  tschchartseries3dlineshadow_ = NULL;
  tschchartseries3dareashadow_ = NULL;
  tschchartseries3dpieshadow_ = NULL;
  tschchartseriesdefaultlabelparagraphstyleindex_ = 0;
  tschchartseriesbarlabelparagraphstyleindex_ = 0;
  tschchartserieslinelabelparagraphstyleindex_ = 0;
  tschchartseriesarealabelparagraphstyleindex_ = 0;
  tschchartseriespielabelparagraphstyleindex_ = 0;
  tschchartseriesmixedlabelparagraphstyleindex_ = 0;
  tschchartseriesdefaultopacity_ = 0;
  tschchartserieslinesymbolfilluseseriesstroke_ = false;
  tschchartseriesareasymbolfilluseseriesstroke_ = false;
  tschchartseriesscattersymbolfilluseseriesstroke_ = false;
  tschchartseriesmixedlinesymbolfilluseseriesstroke_ = false;
  tschchartseriesmixedareasymbolfilluseseriesstroke_ = false;
  tschchartserieslinesymbolfilluseseriesfill_ = false;
  tschchartseriesareasymbolfilluseseriesfill_ = false;
  tschchartseriesmixedlinesymbolfilluseseriesfill_ = false;
  tschchartseriesmixedareasymbolfilluseseriesfill_ = false;
  tschchartseriesmixedcolumnfill_ = NULL;
  tschchartseriesmixedareafill_ = NULL;
  tschchartseriesmixedcolumnstroke_ = NULL;
  tschchartseriesmixedlinestroke_ = NULL;
  tschchartseriesmixedareastroke_ = NULL;
  tschchartseriesmixedlinesymbolsize_ = 0;
  tschchartseriesmixedareasymbolsize_ = 0;
  tschchartseriesmixedlinesymbolfill_ = NULL;
  tschchartseriesmixedareasymbolfill_ = NULL;
  tschchartseriesmixedlinesymbolstroke_ = NULL;
  tschchartseriesmixedareasymbolstroke_ = NULL;
  tschchartseriesmixedcolumnvaluelabelposition_ = 0;
  tschchartseriesmixedlinevaluelabelposition_ = 0;
  tschchartseriesmixedareavaluelabelposition_ = 0;
  tschchartseriesdefaultoutsidelabelparagraphstyleindex_ = 0;
  tschchartseriesbaroutsidelabelparagraphstyleindex_ = 0;
  tschchartseriesareaoutsidelabelparagraphstyleindex_ = 0;
  tschchartseriespieoutsidelabelparagraphstyleindex_ = 0;
  tschchartseriesmixedoutsidelabelparagraphstyleindex_ = 0;
  tschchartseriesstackedbarvaluelabelposition_ = 0;
  tschchartseriesstackedareavaluelabelposition_ = 0;
  tschchartseriesdefaulttrendlinestroke_ = NULL;
  tschchartseriesdefaulttrendlineshadow_ = NULL;
  tschchartseriesdefaulterrorbarshadow_ = NULL;
  tschchartseriesdefaulterrorbarstroke_ = NULL;
  tschchartseriesdefaulterrorbarstrokescatterx_ = NULL;
  tschchartseriesdefaulterrorbarlineend_ = NULL;
  tschchartseriesdefaulterrorbarlineendscatterx_ = NULL;
  tschchartseriesdefaultdeprecated3dfill_ = NULL;
  tschchartseriesbardeprecated3dfill_ = NULL;
  tschchartseriescolumndeprecated3dfill_ = NULL;
  tschchartserieslinedeprecated3dfill_ = NULL;
  tschchartseriesareadeprecated3dfill_ = NULL;
  tschchartseriespiedeprecated3dfill_ = NULL;
  tschchartseries3dbarfill_ = NULL;
  tschchartseries3dcolumnfill_ = NULL;
  tschchartseries3dlinefill_ = NULL;
  tschchartseries3dareafill_ = NULL;
  tschchartseries3dpiefill_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartSeriesStyleArchive::~ChartSeriesStyleArchive() {
  SharedDtor();
}

void ChartSeriesStyleArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete tschchartseriesbarfill_;
    delete tschchartseriesbarstroke_;
    delete tschchartserieslinestroke_;
    delete tschchartserieslinesymbolfill_;
    delete tschchartserieslinesymbolstroke_;
    delete tschchartseriesareafill_;
    delete tschchartseriesareastroke_;
    delete tschchartseriesareasymbolfill_;
    delete tschchartseriesareasymbolstroke_;
    delete tschchartseriespiefill_;
    delete tschchartseriespiestroke_;
    delete tschchartseriesscatterstroke_;
    delete tschchartseriesscattersymbolfill_;
    delete tschchartseriesscattersymbolstroke_;
    delete tschchartseriesdefaultfill_;
    delete tschchartseriescolumnfill_;
    delete tschchartseriespieshadow_;
    delete tschchartseriesbarshadow_;
    delete tschchartseriesareashadow_;
    delete tschchartseriesscattershadow_;
    delete tschchartseriesmixedlineshadow_;
    delete tschchartseriesmixedareashadow_;
    delete tschchartseriesmixedcolumnshadow_;
    delete tschchartserieslineshadow_;
    delete tschchartseriesdefaultshadow_;
    delete tschchartseriesbubblesymbolfill_;
    delete tschchartseriesbubblestroke_;
    delete tschchartseriesbubblesymbolstroke_;
    delete tschchartseriesbubbleshadow_;
    delete tschchartseries3dbarshadow_;
    delete tschchartseries3dcolumnshadow_;
    delete tschchartseries3dlineshadow_;
    delete tschchartseries3dareashadow_;
    delete tschchartseries3dpieshadow_;
    delete tschchartseriesmixedcolumnfill_;
    delete tschchartseriesmixedareafill_;
    delete tschchartseriesmixedcolumnstroke_;
    delete tschchartseriesmixedlinestroke_;
    delete tschchartseriesmixedareastroke_;
    delete tschchartseriesmixedlinesymbolfill_;
    delete tschchartseriesmixedareasymbolfill_;
    delete tschchartseriesmixedlinesymbolstroke_;
    delete tschchartseriesmixedareasymbolstroke_;
    delete tschchartseriesdefaulttrendlinestroke_;
    delete tschchartseriesdefaulttrendlineshadow_;
    delete tschchartseriesdefaulterrorbarshadow_;
    delete tschchartseriesdefaulterrorbarstroke_;
    delete tschchartseriesdefaulterrorbarstrokescatterx_;
    delete tschchartseriesdefaulterrorbarlineend_;
    delete tschchartseriesdefaulterrorbarlineendscatterx_;
    delete tschchartseriesdefaultdeprecated3dfill_;
    delete tschchartseriesbardeprecated3dfill_;
    delete tschchartseriescolumndeprecated3dfill_;
    delete tschchartserieslinedeprecated3dfill_;
    delete tschchartseriesareadeprecated3dfill_;
    delete tschchartseriespiedeprecated3dfill_;
    delete tschchartseries3dbarfill_;
    delete tschchartseries3dcolumnfill_;
    delete tschchartseries3dlinefill_;
    delete tschchartseries3dareafill_;
    delete tschchartseries3dpiefill_;
  }
}

void ChartSeriesStyleArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartSeriesStyleArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartSeriesStyleArchive_descriptor_;
}

const ChartSeriesStyleArchive& ChartSeriesStyleArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHPreUFFArchives_2eproto();
  return *default_instance_;
}

ChartSeriesStyleArchive* ChartSeriesStyleArchive::default_instance_ = NULL;

ChartSeriesStyleArchive* ChartSeriesStyleArchive::New() const {
  return new ChartSeriesStyleArchive;
}

void ChartSeriesStyleArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSS::StyleArchive::Clear();
    }
    tschchartseriesdefaulttrendlineequationparagraphstyleindex_ = 0;
    tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_ = 0;
    tschchartseriesdefaulttrendlineequationopacity_ = 0;
    tschchartseriesdefaulttrendlinersquaredopacity_ = 0;
    if (has_tschchartseriesbarfill()) {
      if (tschchartseriesbarfill_ != NULL) tschchartseriesbarfill_->::TSD::FillArchive::Clear();
    }
    if (has_tschchartseriesbarstroke()) {
      if (tschchartseriesbarstroke_ != NULL) tschchartseriesbarstroke_->::TSD::StrokeArchive::Clear();
    }
    tschchartseriesbarvaluelabelposition_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_tschchartserieslinestroke()) {
      if (tschchartserieslinestroke_ != NULL) tschchartserieslinestroke_->::TSD::StrokeArchive::Clear();
    }
    if (has_tschchartserieslinesymbolfill()) {
      if (tschchartserieslinesymbolfill_ != NULL) tschchartserieslinesymbolfill_->::TSD::FillArchive::Clear();
    }
    if (has_tschchartserieslinesymbolstroke()) {
      if (tschchartserieslinesymbolstroke_ != NULL) tschchartserieslinesymbolstroke_->::TSD::StrokeArchive::Clear();
    }
    tschchartserieslinesymbolsize_ = 0;
    tschchartserieslinevaluelabelposition_ = 0;
    if (has_tschchartseriesareafill()) {
      if (tschchartseriesareafill_ != NULL) tschchartseriesareafill_->::TSD::FillArchive::Clear();
    }
    if (has_tschchartseriesareastroke()) {
      if (tschchartseriesareastroke_ != NULL) tschchartseriesareastroke_->::TSD::StrokeArchive::Clear();
    }
    tschchartseriesareavaluelabelposition_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_tschchartseriesareasymbolfill()) {
      if (tschchartseriesareasymbolfill_ != NULL) tschchartseriesareasymbolfill_->::TSD::FillArchive::Clear();
    }
    if (has_tschchartseriesareasymbolstroke()) {
      if (tschchartseriesareasymbolstroke_ != NULL) tschchartseriesareasymbolstroke_->::TSD::StrokeArchive::Clear();
    }
    tschchartseriesareasymbolsize_ = 0;
    if (has_tschchartseriespiefill()) {
      if (tschchartseriespiefill_ != NULL) tschchartseriespiefill_->::TSD::FillArchive::Clear();
    }
    if (has_tschchartseriespiestroke()) {
      if (tschchartseriespiestroke_ != NULL) tschchartseriespiestroke_->::TSD::StrokeArchive::Clear();
    }
    if (has_tschchartseriesscatterstroke()) {
      if (tschchartseriesscatterstroke_ != NULL) tschchartseriesscatterstroke_->::TSD::StrokeArchive::Clear();
    }
    if (has_tschchartseriesscattersymbolfill()) {
      if (tschchartseriesscattersymbolfill_ != NULL) tschchartseriesscattersymbolfill_->::TSD::FillArchive::Clear();
    }
    if (has_tschchartseriesscattersymbolstroke()) {
      if (tschchartseriesscattersymbolstroke_ != NULL) tschchartseriesscattersymbolstroke_->::TSD::StrokeArchive::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    tschchartseriesscattersymbolsize_ = 0;
    tschchartseriesscattervaluelabelposition_ = 0;
    if (has_tschchartseriesdefaultfill()) {
      if (tschchartseriesdefaultfill_ != NULL) tschchartseriesdefaultfill_->::TSD::FillArchive::Clear();
    }
    tschchartseriesdefaultvaluelabelposition_ = 0;
    tschchartseriespiedeprecatedserieslabelson_ = false;
    if (has_tschchartseriescolumnfill()) {
      if (tschchartseriescolumnfill_ != NULL) tschchartseriescolumnfill_->::TSD::FillArchive::Clear();
    }
    if (has_tschchartseriespieshadow()) {
      if (tschchartseriespieshadow_ != NULL) tschchartseriespieshadow_->::TSD::ShadowArchive::Clear();
    }
    if (has_tschchartseriesbarshadow()) {
      if (tschchartseriesbarshadow_ != NULL) tschchartseriesbarshadow_->::TSD::ShadowArchive::Clear();
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_tschchartseriesareashadow()) {
      if (tschchartseriesareashadow_ != NULL) tschchartseriesareashadow_->::TSD::ShadowArchive::Clear();
    }
    if (has_tschchartseriesscattershadow()) {
      if (tschchartseriesscattershadow_ != NULL) tschchartseriesscattershadow_->::TSD::ShadowArchive::Clear();
    }
    if (has_tschchartseriesmixedlineshadow()) {
      if (tschchartseriesmixedlineshadow_ != NULL) tschchartseriesmixedlineshadow_->::TSD::ShadowArchive::Clear();
    }
    if (has_tschchartseriesmixedareashadow()) {
      if (tschchartseriesmixedareashadow_ != NULL) tschchartseriesmixedareashadow_->::TSD::ShadowArchive::Clear();
    }
    if (has_tschchartseriesmixedcolumnshadow()) {
      if (tschchartseriesmixedcolumnshadow_ != NULL) tschchartseriesmixedcolumnshadow_->::TSD::ShadowArchive::Clear();
    }
    if (has_tschchartserieslineshadow()) {
      if (tschchartserieslineshadow_ != NULL) tschchartserieslineshadow_->::TSD::ShadowArchive::Clear();
    }
    if (has_tschchartseriesdefaultshadow()) {
      if (tschchartseriesdefaultshadow_ != NULL) tschchartseriesdefaultshadow_->::TSD::ShadowArchive::Clear();
    }
    if (has_tschchartseriesbubblesymbolfill()) {
      if (tschchartseriesbubblesymbolfill_ != NULL) tschchartseriesbubblesymbolfill_->::TSD::FillArchive::Clear();
    }
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (has_tschchartseriesbubblestroke()) {
      if (tschchartseriesbubblestroke_ != NULL) tschchartseriesbubblestroke_->::TSD::StrokeArchive::Clear();
    }
    if (has_tschchartseriesbubblesymbolstroke()) {
      if (tschchartseriesbubblesymbolstroke_ != NULL) tschchartseriesbubblesymbolstroke_->::TSD::StrokeArchive::Clear();
    }
    tschchartseriesbubblevaluelabelposition_ = 0;
    if (has_tschchartseriesbubbleshadow()) {
      if (tschchartseriesbubbleshadow_ != NULL) tschchartseriesbubbleshadow_->::TSD::ShadowArchive::Clear();
    }
    tschchartseriesbubblesymbolfilluseseriesstroke_ = false;
    if (has_tschchartseries3dbarshadow()) {
      if (tschchartseries3dbarshadow_ != NULL) tschchartseries3dbarshadow_->::TSD::ShadowArchive::Clear();
    }
    if (has_tschchartseries3dcolumnshadow()) {
      if (tschchartseries3dcolumnshadow_ != NULL) tschchartseries3dcolumnshadow_->::TSD::ShadowArchive::Clear();
    }
    if (has_tschchartseries3dlineshadow()) {
      if (tschchartseries3dlineshadow_ != NULL) tschchartseries3dlineshadow_->::TSD::ShadowArchive::Clear();
    }
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (has_tschchartseries3dareashadow()) {
      if (tschchartseries3dareashadow_ != NULL) tschchartseries3dareashadow_->::TSD::ShadowArchive::Clear();
    }
    if (has_tschchartseries3dpieshadow()) {
      if (tschchartseries3dpieshadow_ != NULL) tschchartseries3dpieshadow_->::TSD::ShadowArchive::Clear();
    }
    tschchartseriesdefaultlabelparagraphstyleindex_ = 0;
    tschchartseriesbarlabelparagraphstyleindex_ = 0;
    tschchartserieslinelabelparagraphstyleindex_ = 0;
    tschchartseriesarealabelparagraphstyleindex_ = 0;
    tschchartseriespielabelparagraphstyleindex_ = 0;
    tschchartseriesmixedlabelparagraphstyleindex_ = 0;
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    tschchartseriesdefaultopacity_ = 0;
    tschchartserieslinesymbolfilluseseriesstroke_ = false;
    tschchartseriesareasymbolfilluseseriesstroke_ = false;
    tschchartseriesscattersymbolfilluseseriesstroke_ = false;
    tschchartseriesmixedlinesymbolfilluseseriesstroke_ = false;
    tschchartseriesmixedareasymbolfilluseseriesstroke_ = false;
    tschchartserieslinesymbolfilluseseriesfill_ = false;
    tschchartseriesareasymbolfilluseseriesfill_ = false;
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    tschchartseriesmixedlinesymbolfilluseseriesfill_ = false;
    tschchartseriesmixedareasymbolfilluseseriesfill_ = false;
    if (has_tschchartseriesmixedcolumnfill()) {
      if (tschchartseriesmixedcolumnfill_ != NULL) tschchartseriesmixedcolumnfill_->::TSD::FillArchive::Clear();
    }
    if (has_tschchartseriesmixedareafill()) {
      if (tschchartseriesmixedareafill_ != NULL) tschchartseriesmixedareafill_->::TSD::FillArchive::Clear();
    }
    if (has_tschchartseriesmixedcolumnstroke()) {
      if (tschchartseriesmixedcolumnstroke_ != NULL) tschchartseriesmixedcolumnstroke_->::TSD::StrokeArchive::Clear();
    }
    if (has_tschchartseriesmixedlinestroke()) {
      if (tschchartseriesmixedlinestroke_ != NULL) tschchartseriesmixedlinestroke_->::TSD::StrokeArchive::Clear();
    }
    if (has_tschchartseriesmixedareastroke()) {
      if (tschchartseriesmixedareastroke_ != NULL) tschchartseriesmixedareastroke_->::TSD::StrokeArchive::Clear();
    }
    tschchartseriesmixedlinesymbolsize_ = 0;
  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    tschchartseriesmixedareasymbolsize_ = 0;
    if (has_tschchartseriesmixedlinesymbolfill()) {
      if (tschchartseriesmixedlinesymbolfill_ != NULL) tschchartseriesmixedlinesymbolfill_->::TSD::FillArchive::Clear();
    }
    if (has_tschchartseriesmixedareasymbolfill()) {
      if (tschchartseriesmixedareasymbolfill_ != NULL) tschchartseriesmixedareasymbolfill_->::TSD::FillArchive::Clear();
    }
    if (has_tschchartseriesmixedlinesymbolstroke()) {
      if (tschchartseriesmixedlinesymbolstroke_ != NULL) tschchartseriesmixedlinesymbolstroke_->::TSD::StrokeArchive::Clear();
    }
    if (has_tschchartseriesmixedareasymbolstroke()) {
      if (tschchartseriesmixedareasymbolstroke_ != NULL) tschchartseriesmixedareasymbolstroke_->::TSD::StrokeArchive::Clear();
    }
    tschchartseriesmixedcolumnvaluelabelposition_ = 0;
    tschchartseriesmixedlinevaluelabelposition_ = 0;
    tschchartseriesmixedareavaluelabelposition_ = 0;
  }
  if (_has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    tschchartseriesdefaultoutsidelabelparagraphstyleindex_ = 0;
    tschchartseriesbaroutsidelabelparagraphstyleindex_ = 0;
    tschchartseriesareaoutsidelabelparagraphstyleindex_ = 0;
    tschchartseriespieoutsidelabelparagraphstyleindex_ = 0;
    tschchartseriesmixedoutsidelabelparagraphstyleindex_ = 0;
    tschchartseriesstackedbarvaluelabelposition_ = 0;
    tschchartseriesstackedareavaluelabelposition_ = 0;
    if (has_tschchartseriesdefaulttrendlinestroke()) {
      if (tschchartseriesdefaulttrendlinestroke_ != NULL) tschchartseriesdefaulttrendlinestroke_->::TSD::StrokeArchive::Clear();
    }
  }
  if (_has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    if (has_tschchartseriesdefaulttrendlineshadow()) {
      if (tschchartseriesdefaulttrendlineshadow_ != NULL) tschchartseriesdefaulttrendlineshadow_->::TSD::ShadowArchive::Clear();
    }
    if (has_tschchartseriesdefaulterrorbarshadow()) {
      if (tschchartseriesdefaulterrorbarshadow_ != NULL) tschchartseriesdefaulterrorbarshadow_->::TSD::ShadowArchive::Clear();
    }
    if (has_tschchartseriesdefaulterrorbarstroke()) {
      if (tschchartseriesdefaulterrorbarstroke_ != NULL) tschchartseriesdefaulterrorbarstroke_->::TSD::StrokeArchive::Clear();
    }
    if (has_tschchartseriesdefaulterrorbarstrokescatterx()) {
      if (tschchartseriesdefaulterrorbarstrokescatterx_ != NULL) tschchartseriesdefaulterrorbarstrokescatterx_->::TSD::StrokeArchive::Clear();
    }
    if (has_tschchartseriesdefaulterrorbarlineend()) {
      if (tschchartseriesdefaulterrorbarlineend_ != NULL) tschchartseriesdefaulterrorbarlineend_->::TSD::LineEndArchive::Clear();
    }
    if (has_tschchartseriesdefaulterrorbarlineendscatterx()) {
      if (tschchartseriesdefaulterrorbarlineendscatterx_ != NULL) tschchartseriesdefaulterrorbarlineendscatterx_->::TSD::LineEndArchive::Clear();
    }
    if (has_tschchartseriesdefaultdeprecated3dfill()) {
      if (tschchartseriesdefaultdeprecated3dfill_ != NULL) tschchartseriesdefaultdeprecated3dfill_->::TSCH::DEPRECATEDChart3DFillArchive::Clear();
    }
    if (has_tschchartseriesbardeprecated3dfill()) {
      if (tschchartseriesbardeprecated3dfill_ != NULL) tschchartseriesbardeprecated3dfill_->::TSCH::DEPRECATEDChart3DFillArchive::Clear();
    }
  }
  if (_has_bits_[96 / 32] & (0xffu << (96 % 32))) {
    if (has_tschchartseriescolumndeprecated3dfill()) {
      if (tschchartseriescolumndeprecated3dfill_ != NULL) tschchartseriescolumndeprecated3dfill_->::TSCH::DEPRECATEDChart3DFillArchive::Clear();
    }
    if (has_tschchartserieslinedeprecated3dfill()) {
      if (tschchartserieslinedeprecated3dfill_ != NULL) tschchartserieslinedeprecated3dfill_->::TSCH::DEPRECATEDChart3DFillArchive::Clear();
    }
    if (has_tschchartseriesareadeprecated3dfill()) {
      if (tschchartseriesareadeprecated3dfill_ != NULL) tschchartseriesareadeprecated3dfill_->::TSCH::DEPRECATEDChart3DFillArchive::Clear();
    }
    if (has_tschchartseriespiedeprecated3dfill()) {
      if (tschchartseriespiedeprecated3dfill_ != NULL) tschchartseriespiedeprecated3dfill_->::TSCH::DEPRECATEDChart3DFillArchive::Clear();
    }
    if (has_tschchartseries3dbarfill()) {
      if (tschchartseries3dbarfill_ != NULL) tschchartseries3dbarfill_->::TSD::FillArchive::Clear();
    }
    if (has_tschchartseries3dcolumnfill()) {
      if (tschchartseries3dcolumnfill_ != NULL) tschchartseries3dcolumnfill_->::TSD::FillArchive::Clear();
    }
    if (has_tschchartseries3dlinefill()) {
      if (tschchartseries3dlinefill_ != NULL) tschchartseries3dlinefill_->::TSD::FillArchive::Clear();
    }
    if (has_tschchartseries3dareafill()) {
      if (tschchartseries3dareafill_ != NULL) tschchartseries3dareafill_->::TSD::FillArchive::Clear();
    }
  }
  if (_has_bits_[104 / 32] & (0xffu << (104 % 32))) {
    if (has_tschchartseries3dpiefill()) {
      if (tschchartseries3dpiefill_ != NULL) tschchartseries3dpiefill_->::TSD::FillArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartSeriesStyleArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSS.StyleArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_tschchartseriesbarfill;
        break;
      }

      // optional .TSD.FillArchive tschchartseriesbarfill = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesbarfill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesbarfill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_tschchartseriesbarstroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartseriesbarstroke = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesbarstroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesbarstroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_tschchartseriesbarvaluelabelposition;
        break;
      }

      // optional int32 tschchartseriesbarvaluelabelposition = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesbarvaluelabelposition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesbarvaluelabelposition_)));
          set_has_tschchartseriesbarvaluelabelposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_tschchartserieslinestroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartserieslinestroke = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartserieslinestroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartserieslinestroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_tschchartserieslinesymbolfill;
        break;
      }

      // optional .TSD.FillArchive tschchartserieslinesymbolfill = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartserieslinesymbolfill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartserieslinesymbolfill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_tschchartserieslinesymbolstroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartserieslinesymbolstroke = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartserieslinesymbolstroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartserieslinesymbolstroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(165)) goto parse_tschchartserieslinesymbolsize;
        break;
      }

      // optional float tschchartserieslinesymbolsize = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartserieslinesymbolsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartserieslinesymbolsize_)));
          set_has_tschchartserieslinesymbolsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_tschchartserieslinevaluelabelposition;
        break;
      }

      // optional int32 tschchartserieslinevaluelabelposition = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartserieslinevaluelabelposition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartserieslinevaluelabelposition_)));
          set_has_tschchartserieslinevaluelabelposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_tschchartseriesareafill;
        break;
      }

      // optional .TSD.FillArchive tschchartseriesareafill = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesareafill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesareafill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_tschchartseriesareastroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartseriesareastroke = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesareastroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesareastroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_tschchartseriesareavaluelabelposition;
        break;
      }

      // optional int32 tschchartseriesareavaluelabelposition = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesareavaluelabelposition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesareavaluelabelposition_)));
          set_has_tschchartseriesareavaluelabelposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_tschchartseriesareasymbolfill;
        break;
      }

      // optional .TSD.FillArchive tschchartseriesareasymbolfill = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesareasymbolfill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesareasymbolfill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_tschchartseriesareasymbolstroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartseriesareasymbolstroke = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesareasymbolstroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesareasymbolstroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(261)) goto parse_tschchartseriesareasymbolsize;
        break;
      }

      // optional float tschchartseriesareasymbolsize = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartseriesareasymbolsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartseriesareasymbolsize_)));
          set_has_tschchartseriesareasymbolsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_tschchartseriespiefill;
        break;
      }

      // optional .TSD.FillArchive tschchartseriespiefill = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriespiefill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriespiefill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_tschchartseriespiestroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartseriespiestroke = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriespiestroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriespiestroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_tschchartseriesscatterstroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartseriesscatterstroke = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesscatterstroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesscatterstroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_tschchartseriesscattersymbolfill;
        break;
      }

      // optional .TSD.FillArchive tschchartseriesscattersymbolfill = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesscattersymbolfill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesscattersymbolfill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(338)) goto parse_tschchartseriesscattersymbolstroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartseriesscattersymbolstroke = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesscattersymbolstroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesscattersymbolstroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(357)) goto parse_tschchartseriesscattersymbolsize;
        break;
      }

      // optional float tschchartseriesscattersymbolsize = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartseriesscattersymbolsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartseriesscattersymbolsize_)));
          set_has_tschchartseriesscattersymbolsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_tschchartseriesscattervaluelabelposition;
        break;
      }

      // optional int32 tschchartseriesscattervaluelabelposition = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesscattervaluelabelposition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesscattervaluelabelposition_)));
          set_has_tschchartseriesscattervaluelabelposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_tschchartseriesdefaultfill;
        break;
      }

      // optional .TSD.FillArchive tschchartseriesdefaultfill = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesdefaultfill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesdefaultfill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_tschchartseriesdefaultvaluelabelposition;
        break;
      }

      // optional int32 tschchartseriesdefaultvaluelabelposition = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesdefaultvaluelabelposition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesdefaultvaluelabelposition_)));
          set_has_tschchartseriesdefaultvaluelabelposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_tschchartseriespiedeprecatedserieslabelson;
        break;
      }

      // optional bool tschchartseriespiedeprecatedserieslabelson = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriespiedeprecatedserieslabelson:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriespiedeprecatedserieslabelson_)));
          set_has_tschchartseriespiedeprecatedserieslabelson();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(498)) goto parse_tschchartseriescolumnfill;
        break;
      }

      // optional .TSD.FillArchive tschchartseriescolumnfill = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriescolumnfill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriescolumnfill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_tschchartseriespieshadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartseriespieshadow = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriespieshadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriespieshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(810)) goto parse_tschchartseriesbarshadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartseriesbarshadow = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesbarshadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesbarshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(818)) goto parse_tschchartseriesareashadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartseriesareashadow = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesareashadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesareashadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(826)) goto parse_tschchartseriesscattershadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartseriesscattershadow = 103;
      case 103: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesscattershadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesscattershadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(834)) goto parse_tschchartseriesmixedlineshadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartseriesmixedlineshadow = 104;
      case 104: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesmixedlineshadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesmixedlineshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(842)) goto parse_tschchartseriesmixedareashadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartseriesmixedareashadow = 105;
      case 105: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesmixedareashadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesmixedareashadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(850)) goto parse_tschchartseriesmixedcolumnshadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartseriesmixedcolumnshadow = 106;
      case 106: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesmixedcolumnshadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesmixedcolumnshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(858)) goto parse_tschchartserieslineshadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartserieslineshadow = 107;
      case 107: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartserieslineshadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartserieslineshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(866)) goto parse_tschchartseriesdefaultshadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartseriesdefaultshadow = 108;
      case 108: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesdefaultshadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesdefaultshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(880)) goto parse_tschchartseriesdefaultlabelparagraphstyleindex;
        break;
      }

      // optional int32 tschchartseriesdefaultlabelparagraphstyleindex = 110;
      case 110: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesdefaultlabelparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesdefaultlabelparagraphstyleindex_)));
          set_has_tschchartseriesdefaultlabelparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(888)) goto parse_tschchartseriesbarlabelparagraphstyleindex;
        break;
      }

      // optional int32 tschchartseriesbarlabelparagraphstyleindex = 111;
      case 111: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesbarlabelparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesbarlabelparagraphstyleindex_)));
          set_has_tschchartseriesbarlabelparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(896)) goto parse_tschchartserieslinelabelparagraphstyleindex;
        break;
      }

      // optional int32 tschchartserieslinelabelparagraphstyleindex = 112;
      case 112: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartserieslinelabelparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartserieslinelabelparagraphstyleindex_)));
          set_has_tschchartserieslinelabelparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(904)) goto parse_tschchartseriesarealabelparagraphstyleindex;
        break;
      }

      // optional int32 tschchartseriesarealabelparagraphstyleindex = 113;
      case 113: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesarealabelparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesarealabelparagraphstyleindex_)));
          set_has_tschchartseriesarealabelparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(912)) goto parse_tschchartseriespielabelparagraphstyleindex;
        break;
      }

      // optional int32 tschchartseriespielabelparagraphstyleindex = 114;
      case 114: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriespielabelparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriespielabelparagraphstyleindex_)));
          set_has_tschchartseriespielabelparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(920)) goto parse_tschchartseriesmixedlabelparagraphstyleindex;
        break;
      }

      // optional int32 tschchartseriesmixedlabelparagraphstyleindex = 115;
      case 115: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesmixedlabelparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesmixedlabelparagraphstyleindex_)));
          set_has_tschchartseriesmixedlabelparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(933)) goto parse_tschchartseriesdefaultopacity;
        break;
      }

      // optional float tschchartseriesdefaultopacity = 116;
      case 116: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartseriesdefaultopacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartseriesdefaultopacity_)));
          set_has_tschchartseriesdefaultopacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(936)) goto parse_tschchartserieslinesymbolfilluseseriesstroke;
        break;
      }

      // optional bool tschchartserieslinesymbolfilluseseriesstroke = 117;
      case 117: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartserieslinesymbolfilluseseriesstroke:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartserieslinesymbolfilluseseriesstroke_)));
          set_has_tschchartserieslinesymbolfilluseseriesstroke();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(944)) goto parse_tschchartseriesareasymbolfilluseseriesstroke;
        break;
      }

      // optional bool tschchartseriesareasymbolfilluseseriesstroke = 118;
      case 118: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesareasymbolfilluseseriesstroke:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesareasymbolfilluseseriesstroke_)));
          set_has_tschchartseriesareasymbolfilluseseriesstroke();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(952)) goto parse_tschchartseriesscattersymbolfilluseseriesstroke;
        break;
      }

      // optional bool tschchartseriesscattersymbolfilluseseriesstroke = 119;
      case 119: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesscattersymbolfilluseseriesstroke:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesscattersymbolfilluseseriesstroke_)));
          set_has_tschchartseriesscattersymbolfilluseseriesstroke();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(960)) goto parse_tschchartseriesmixedlinesymbolfilluseseriesstroke;
        break;
      }

      // optional bool tschchartseriesmixedlinesymbolfilluseseriesstroke = 120;
      case 120: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesmixedlinesymbolfilluseseriesstroke:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesmixedlinesymbolfilluseseriesstroke_)));
          set_has_tschchartseriesmixedlinesymbolfilluseseriesstroke();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(968)) goto parse_tschchartseriesmixedareasymbolfilluseseriesstroke;
        break;
      }

      // optional bool tschchartseriesmixedareasymbolfilluseseriesstroke = 121;
      case 121: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesmixedareasymbolfilluseseriesstroke:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesmixedareasymbolfilluseseriesstroke_)));
          set_has_tschchartseriesmixedareasymbolfilluseseriesstroke();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(976)) goto parse_tschchartserieslinesymbolfilluseseriesfill;
        break;
      }

      // optional bool tschchartserieslinesymbolfilluseseriesfill = 122;
      case 122: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartserieslinesymbolfilluseseriesfill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartserieslinesymbolfilluseseriesfill_)));
          set_has_tschchartserieslinesymbolfilluseseriesfill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(984)) goto parse_tschchartseriesareasymbolfilluseseriesfill;
        break;
      }

      // optional bool tschchartseriesareasymbolfilluseseriesfill = 123;
      case 123: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesareasymbolfilluseseriesfill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesareasymbolfilluseseriesfill_)));
          set_has_tschchartseriesareasymbolfilluseseriesfill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(992)) goto parse_tschchartseriesmixedlinesymbolfilluseseriesfill;
        break;
      }

      // optional bool tschchartseriesmixedlinesymbolfilluseseriesfill = 124;
      case 124: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesmixedlinesymbolfilluseseriesfill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesmixedlinesymbolfilluseseriesfill_)));
          set_has_tschchartseriesmixedlinesymbolfilluseseriesfill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1000)) goto parse_tschchartseriesmixedareasymbolfilluseseriesfill;
        break;
      }

      // optional bool tschchartseriesmixedareasymbolfilluseseriesfill = 125;
      case 125: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesmixedareasymbolfilluseseriesfill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesmixedareasymbolfilluseseriesfill_)));
          set_has_tschchartseriesmixedareasymbolfilluseseriesfill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1042)) goto parse_tschchartseriesmixedcolumnfill;
        break;
      }

      // optional .TSD.FillArchive tschchartseriesmixedcolumnfill = 130;
      case 130: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesmixedcolumnfill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesmixedcolumnfill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1050)) goto parse_tschchartseriesmixedareafill;
        break;
      }

      // optional .TSD.FillArchive tschchartseriesmixedareafill = 131;
      case 131: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesmixedareafill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesmixedareafill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1058)) goto parse_tschchartseriesmixedcolumnstroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartseriesmixedcolumnstroke = 132;
      case 132: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesmixedcolumnstroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesmixedcolumnstroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1066)) goto parse_tschchartseriesmixedlinestroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartseriesmixedlinestroke = 133;
      case 133: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesmixedlinestroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesmixedlinestroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1074)) goto parse_tschchartseriesmixedareastroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartseriesmixedareastroke = 134;
      case 134: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesmixedareastroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesmixedareastroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1085)) goto parse_tschchartseriesmixedlinesymbolsize;
        break;
      }

      // optional float tschchartseriesmixedlinesymbolsize = 135;
      case 135: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartseriesmixedlinesymbolsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartseriesmixedlinesymbolsize_)));
          set_has_tschchartseriesmixedlinesymbolsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1093)) goto parse_tschchartseriesmixedareasymbolsize;
        break;
      }

      // optional float tschchartseriesmixedareasymbolsize = 136;
      case 136: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartseriesmixedareasymbolsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartseriesmixedareasymbolsize_)));
          set_has_tschchartseriesmixedareasymbolsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1098)) goto parse_tschchartseriesmixedlinesymbolfill;
        break;
      }

      // optional .TSD.FillArchive tschchartseriesmixedlinesymbolfill = 137;
      case 137: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesmixedlinesymbolfill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesmixedlinesymbolfill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1106)) goto parse_tschchartseriesmixedareasymbolfill;
        break;
      }

      // optional .TSD.FillArchive tschchartseriesmixedareasymbolfill = 138;
      case 138: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesmixedareasymbolfill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesmixedareasymbolfill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1114)) goto parse_tschchartseriesmixedlinesymbolstroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartseriesmixedlinesymbolstroke = 139;
      case 139: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesmixedlinesymbolstroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesmixedlinesymbolstroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1122)) goto parse_tschchartseriesmixedareasymbolstroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartseriesmixedareasymbolstroke = 140;
      case 140: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesmixedareasymbolstroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesmixedareasymbolstroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1128)) goto parse_tschchartseriesmixedcolumnvaluelabelposition;
        break;
      }

      // optional int32 tschchartseriesmixedcolumnvaluelabelposition = 141;
      case 141: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesmixedcolumnvaluelabelposition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesmixedcolumnvaluelabelposition_)));
          set_has_tschchartseriesmixedcolumnvaluelabelposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1136)) goto parse_tschchartseriesmixedlinevaluelabelposition;
        break;
      }

      // optional int32 tschchartseriesmixedlinevaluelabelposition = 142;
      case 142: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesmixedlinevaluelabelposition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesmixedlinevaluelabelposition_)));
          set_has_tschchartseriesmixedlinevaluelabelposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1144)) goto parse_tschchartseriesmixedareavaluelabelposition;
        break;
      }

      // optional int32 tschchartseriesmixedareavaluelabelposition = 143;
      case 143: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesmixedareavaluelabelposition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesmixedareavaluelabelposition_)));
          set_has_tschchartseriesmixedareavaluelabelposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1200)) goto parse_tschchartseriesdefaultoutsidelabelparagraphstyleindex;
        break;
      }

      // optional int32 tschchartseriesdefaultoutsidelabelparagraphstyleindex = 150;
      case 150: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesdefaultoutsidelabelparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesdefaultoutsidelabelparagraphstyleindex_)));
          set_has_tschchartseriesdefaultoutsidelabelparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1208)) goto parse_tschchartseriesbaroutsidelabelparagraphstyleindex;
        break;
      }

      // optional int32 tschchartseriesbaroutsidelabelparagraphstyleindex = 151;
      case 151: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesbaroutsidelabelparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesbaroutsidelabelparagraphstyleindex_)));
          set_has_tschchartseriesbaroutsidelabelparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1224)) goto parse_tschchartseriesareaoutsidelabelparagraphstyleindex;
        break;
      }

      // optional int32 tschchartseriesareaoutsidelabelparagraphstyleindex = 153;
      case 153: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesareaoutsidelabelparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesareaoutsidelabelparagraphstyleindex_)));
          set_has_tschchartseriesareaoutsidelabelparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1232)) goto parse_tschchartseriespieoutsidelabelparagraphstyleindex;
        break;
      }

      // optional int32 tschchartseriespieoutsidelabelparagraphstyleindex = 154;
      case 154: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriespieoutsidelabelparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriespieoutsidelabelparagraphstyleindex_)));
          set_has_tschchartseriespieoutsidelabelparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1240)) goto parse_tschchartseriesmixedoutsidelabelparagraphstyleindex;
        break;
      }

      // optional int32 tschchartseriesmixedoutsidelabelparagraphstyleindex = 155;
      case 155: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesmixedoutsidelabelparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesmixedoutsidelabelparagraphstyleindex_)));
          set_has_tschchartseriesmixedoutsidelabelparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1248)) goto parse_tschchartseriesstackedbarvaluelabelposition;
        break;
      }

      // optional int32 tschchartseriesstackedbarvaluelabelposition = 156;
      case 156: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesstackedbarvaluelabelposition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesstackedbarvaluelabelposition_)));
          set_has_tschchartseriesstackedbarvaluelabelposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1256)) goto parse_tschchartseriesstackedareavaluelabelposition;
        break;
      }

      // optional int32 tschchartseriesstackedareavaluelabelposition = 157;
      case 157: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesstackedareavaluelabelposition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesstackedareavaluelabelposition_)));
          set_has_tschchartseriesstackedareavaluelabelposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1338)) goto parse_tschchartseriesdefaulttrendlinestroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartseriesdefaulttrendlinestroke = 167;
      case 167: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesdefaulttrendlinestroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesdefaulttrendlinestroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1346)) goto parse_tschchartseriesdefaulttrendlineshadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartseriesdefaulttrendlineshadow = 168;
      case 168: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesdefaulttrendlineshadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesdefaulttrendlineshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1442)) goto parse_tschchartseriesdefaulterrorbarshadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartseriesdefaulterrorbarshadow = 180;
      case 180: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesdefaulterrorbarshadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesdefaulterrorbarshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1450)) goto parse_tschchartseriesdefaulterrorbarstroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstroke = 181;
      case 181: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesdefaulterrorbarstroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesdefaulterrorbarstroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1458)) goto parse_tschchartseriesdefaulterrorbarstrokescatterx;
        break;
      }

      // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstrokescatterx = 182;
      case 182: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesdefaulterrorbarstrokescatterx:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesdefaulterrorbarstrokescatterx()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1466)) goto parse_tschchartseriesdefaulterrorbarlineend;
        break;
      }

      // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineend = 183;
      case 183: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesdefaulterrorbarlineend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesdefaulterrorbarlineend()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1474)) goto parse_tschchartseriesdefaulterrorbarlineendscatterx;
        break;
      }

      // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineendscatterx = 184;
      case 184: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesdefaulterrorbarlineendscatterx:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesdefaulterrorbarlineendscatterx()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1608)) goto parse_tschchartseriesdefaulttrendlineequationparagraphstyleindex;
        break;
      }

      // optional int32 tschchartseriesdefaulttrendlineequationparagraphstyleindex = 201;
      case 201: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesdefaulttrendlineequationparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesdefaulttrendlineequationparagraphstyleindex_)));
          set_has_tschchartseriesdefaulttrendlineequationparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1616)) goto parse_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex;
        break;
      }

      // optional int32 tschchartseriesdefaulttrendlinersquaredparagraphstyleindex = 202;
      case 202: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_)));
          set_has_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1645)) goto parse_tschchartseriesdefaulttrendlineequationopacity;
        break;
      }

      // optional float tschchartseriesdefaulttrendlineequationopacity = 205;
      case 205: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartseriesdefaulttrendlineequationopacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartseriesdefaulttrendlineequationopacity_)));
          set_has_tschchartseriesdefaulttrendlineequationopacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1653)) goto parse_tschchartseriesdefaulttrendlinersquaredopacity;
        break;
      }

      // optional float tschchartseriesdefaulttrendlinersquaredopacity = 206;
      case 206: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartseriesdefaulttrendlinersquaredopacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartseriesdefaulttrendlinersquaredopacity_)));
          set_has_tschchartseriesdefaulttrendlinersquaredopacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1658)) goto parse_tschchartseriesbubblesymbolfill;
        break;
      }

      // optional .TSD.FillArchive tschchartseriesbubblesymbolfill = 207;
      case 207: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesbubblesymbolfill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesbubblesymbolfill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1690)) goto parse_tschchartseriesbubblestroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartseriesbubblestroke = 211;
      case 211: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesbubblestroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesbubblestroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1698)) goto parse_tschchartseriesbubblesymbolstroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartseriesbubblesymbolstroke = 212;
      case 212: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesbubblesymbolstroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesbubblesymbolstroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1704)) goto parse_tschchartseriesbubblevaluelabelposition;
        break;
      }

      // optional int32 tschchartseriesbubblevaluelabelposition = 213;
      case 213: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesbubblevaluelabelposition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesbubblevaluelabelposition_)));
          set_has_tschchartseriesbubblevaluelabelposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1714)) goto parse_tschchartseriesbubbleshadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartseriesbubbleshadow = 214;
      case 214: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesbubbleshadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesbubbleshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1720)) goto parse_tschchartseriesbubblesymbolfilluseseriesstroke;
        break;
      }

      // optional bool tschchartseriesbubblesymbolfilluseseriesstroke = 215;
      case 215: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesbubblesymbolfilluseseriesstroke:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesbubblesymbolfilluseseriesstroke_)));
          set_has_tschchartseriesbubblesymbolfilluseseriesstroke();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2402)) goto parse_tschchartseriesdefaultdeprecated3dfill;
        break;
      }

      // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriesdefaultdeprecated3dfill = 300;
      case 300: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesdefaultdeprecated3dfill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesdefaultdeprecated3dfill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2410)) goto parse_tschchartseriesbardeprecated3dfill;
        break;
      }

      // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriesbardeprecated3dfill = 301;
      case 301: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesbardeprecated3dfill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesbardeprecated3dfill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2418)) goto parse_tschchartseriescolumndeprecated3dfill;
        break;
      }

      // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriescolumndeprecated3dfill = 302;
      case 302: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriescolumndeprecated3dfill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriescolumndeprecated3dfill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2426)) goto parse_tschchartserieslinedeprecated3dfill;
        break;
      }

      // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartserieslinedeprecated3dfill = 303;
      case 303: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartserieslinedeprecated3dfill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartserieslinedeprecated3dfill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2434)) goto parse_tschchartseriesareadeprecated3dfill;
        break;
      }

      // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriesareadeprecated3dfill = 304;
      case 304: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesareadeprecated3dfill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesareadeprecated3dfill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2442)) goto parse_tschchartseriespiedeprecated3dfill;
        break;
      }

      // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriespiedeprecated3dfill = 305;
      case 305: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriespiedeprecated3dfill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriespiedeprecated3dfill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2450)) goto parse_tschchartseries3dbarshadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartseries3dbarshadow = 306;
      case 306: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseries3dbarshadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseries3dbarshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2458)) goto parse_tschchartseries3dcolumnshadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartseries3dcolumnshadow = 307;
      case 307: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseries3dcolumnshadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseries3dcolumnshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2466)) goto parse_tschchartseries3dlineshadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartseries3dlineshadow = 308;
      case 308: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseries3dlineshadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseries3dlineshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2474)) goto parse_tschchartseries3dareashadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartseries3dareashadow = 309;
      case 309: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseries3dareashadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseries3dareashadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2482)) goto parse_tschchartseries3dpieshadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartseries3dpieshadow = 310;
      case 310: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseries3dpieshadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseries3dpieshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2562)) goto parse_tschchartseries3dbarfill;
        break;
      }

      // optional .TSD.FillArchive tschchartseries3dbarfill = 320;
      case 320: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseries3dbarfill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseries3dbarfill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2570)) goto parse_tschchartseries3dcolumnfill;
        break;
      }

      // optional .TSD.FillArchive tschchartseries3dcolumnfill = 321;
      case 321: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseries3dcolumnfill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseries3dcolumnfill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2578)) goto parse_tschchartseries3dlinefill;
        break;
      }

      // optional .TSD.FillArchive tschchartseries3dlinefill = 322;
      case 322: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseries3dlinefill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseries3dlinefill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2586)) goto parse_tschchartseries3dareafill;
        break;
      }

      // optional .TSD.FillArchive tschchartseries3dareafill = 323;
      case 323: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseries3dareafill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseries3dareafill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2594)) goto parse_tschchartseries3dpiefill;
        break;
      }

      // optional .TSD.FillArchive tschchartseries3dpiefill = 324;
      case 324: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseries3dpiefill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseries3dpiefill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChartSeriesStyleArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSS.StyleArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSD.FillArchive tschchartseriesbarfill = 10;
  if (has_tschchartseriesbarfill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->tschchartseriesbarfill(), output);
  }

  // optional .TSD.StrokeArchive tschchartseriesbarstroke = 11;
  if (has_tschchartseriesbarstroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->tschchartseriesbarstroke(), output);
  }

  // optional int32 tschchartseriesbarvaluelabelposition = 13;
  if (has_tschchartseriesbarvaluelabelposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->tschchartseriesbarvaluelabelposition(), output);
  }

  // optional .TSD.StrokeArchive tschchartserieslinestroke = 16;
  if (has_tschchartserieslinestroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->tschchartserieslinestroke(), output);
  }

  // optional .TSD.FillArchive tschchartserieslinesymbolfill = 17;
  if (has_tschchartserieslinesymbolfill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->tschchartserieslinesymbolfill(), output);
  }

  // optional .TSD.StrokeArchive tschchartserieslinesymbolstroke = 18;
  if (has_tschchartserieslinesymbolstroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->tschchartserieslinesymbolstroke(), output);
  }

  // optional float tschchartserieslinesymbolsize = 20;
  if (has_tschchartserieslinesymbolsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->tschchartserieslinesymbolsize(), output);
  }

  // optional int32 tschchartserieslinevaluelabelposition = 22;
  if (has_tschchartserieslinevaluelabelposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->tschchartserieslinevaluelabelposition(), output);
  }

  // optional .TSD.FillArchive tschchartseriesareafill = 25;
  if (has_tschchartseriesareafill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->tschchartseriesareafill(), output);
  }

  // optional .TSD.StrokeArchive tschchartseriesareastroke = 26;
  if (has_tschchartseriesareastroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->tschchartseriesareastroke(), output);
  }

  // optional int32 tschchartseriesareavaluelabelposition = 28;
  if (has_tschchartseriesareavaluelabelposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->tschchartseriesareavaluelabelposition(), output);
  }

  // optional .TSD.FillArchive tschchartseriesareasymbolfill = 29;
  if (has_tschchartseriesareasymbolfill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->tschchartseriesareasymbolfill(), output);
  }

  // optional .TSD.StrokeArchive tschchartseriesareasymbolstroke = 30;
  if (has_tschchartseriesareasymbolstroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->tschchartseriesareasymbolstroke(), output);
  }

  // optional float tschchartseriesareasymbolsize = 32;
  if (has_tschchartseriesareasymbolsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(32, this->tschchartseriesareasymbolsize(), output);
  }

  // optional .TSD.FillArchive tschchartseriespiefill = 35;
  if (has_tschchartseriespiefill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->tschchartseriespiefill(), output);
  }

  // optional .TSD.StrokeArchive tschchartseriespiestroke = 36;
  if (has_tschchartseriespiestroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->tschchartseriespiestroke(), output);
  }

  // optional .TSD.StrokeArchive tschchartseriesscatterstroke = 40;
  if (has_tschchartseriesscatterstroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->tschchartseriesscatterstroke(), output);
  }

  // optional .TSD.FillArchive tschchartseriesscattersymbolfill = 41;
  if (has_tschchartseriesscattersymbolfill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, this->tschchartseriesscattersymbolfill(), output);
  }

  // optional .TSD.StrokeArchive tschchartseriesscattersymbolstroke = 42;
  if (has_tschchartseriesscattersymbolstroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, this->tschchartseriesscattersymbolstroke(), output);
  }

  // optional float tschchartseriesscattersymbolsize = 44;
  if (has_tschchartseriesscattersymbolsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(44, this->tschchartseriesscattersymbolsize(), output);
  }

  // optional int32 tschchartseriesscattervaluelabelposition = 46;
  if (has_tschchartseriesscattervaluelabelposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(46, this->tschchartseriesscattervaluelabelposition(), output);
  }

  // optional .TSD.FillArchive tschchartseriesdefaultfill = 50;
  if (has_tschchartseriesdefaultfill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->tschchartseriesdefaultfill(), output);
  }

  // optional int32 tschchartseriesdefaultvaluelabelposition = 52;
  if (has_tschchartseriesdefaultvaluelabelposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(52, this->tschchartseriesdefaultvaluelabelposition(), output);
  }

  // optional bool tschchartseriespiedeprecatedserieslabelson = 60;
  if (has_tschchartseriespiedeprecatedserieslabelson()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(60, this->tschchartseriespiedeprecatedserieslabelson(), output);
  }

  // optional .TSD.FillArchive tschchartseriescolumnfill = 62;
  if (has_tschchartseriescolumnfill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      62, this->tschchartseriescolumnfill(), output);
  }

  // optional .TSD.ShadowArchive tschchartseriespieshadow = 100;
  if (has_tschchartseriespieshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->tschchartseriespieshadow(), output);
  }

  // optional .TSD.ShadowArchive tschchartseriesbarshadow = 101;
  if (has_tschchartseriesbarshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, this->tschchartseriesbarshadow(), output);
  }

  // optional .TSD.ShadowArchive tschchartseriesareashadow = 102;
  if (has_tschchartseriesareashadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102, this->tschchartseriesareashadow(), output);
  }

  // optional .TSD.ShadowArchive tschchartseriesscattershadow = 103;
  if (has_tschchartseriesscattershadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103, this->tschchartseriesscattershadow(), output);
  }

  // optional .TSD.ShadowArchive tschchartseriesmixedlineshadow = 104;
  if (has_tschchartseriesmixedlineshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      104, this->tschchartseriesmixedlineshadow(), output);
  }

  // optional .TSD.ShadowArchive tschchartseriesmixedareashadow = 105;
  if (has_tschchartseriesmixedareashadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      105, this->tschchartseriesmixedareashadow(), output);
  }

  // optional .TSD.ShadowArchive tschchartseriesmixedcolumnshadow = 106;
  if (has_tschchartseriesmixedcolumnshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      106, this->tschchartseriesmixedcolumnshadow(), output);
  }

  // optional .TSD.ShadowArchive tschchartserieslineshadow = 107;
  if (has_tschchartserieslineshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      107, this->tschchartserieslineshadow(), output);
  }

  // optional .TSD.ShadowArchive tschchartseriesdefaultshadow = 108;
  if (has_tschchartseriesdefaultshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      108, this->tschchartseriesdefaultshadow(), output);
  }

  // optional int32 tschchartseriesdefaultlabelparagraphstyleindex = 110;
  if (has_tschchartseriesdefaultlabelparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(110, this->tschchartseriesdefaultlabelparagraphstyleindex(), output);
  }

  // optional int32 tschchartseriesbarlabelparagraphstyleindex = 111;
  if (has_tschchartseriesbarlabelparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(111, this->tschchartseriesbarlabelparagraphstyleindex(), output);
  }

  // optional int32 tschchartserieslinelabelparagraphstyleindex = 112;
  if (has_tschchartserieslinelabelparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(112, this->tschchartserieslinelabelparagraphstyleindex(), output);
  }

  // optional int32 tschchartseriesarealabelparagraphstyleindex = 113;
  if (has_tschchartseriesarealabelparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(113, this->tschchartseriesarealabelparagraphstyleindex(), output);
  }

  // optional int32 tschchartseriespielabelparagraphstyleindex = 114;
  if (has_tschchartseriespielabelparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(114, this->tschchartseriespielabelparagraphstyleindex(), output);
  }

  // optional int32 tschchartseriesmixedlabelparagraphstyleindex = 115;
  if (has_tschchartseriesmixedlabelparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(115, this->tschchartseriesmixedlabelparagraphstyleindex(), output);
  }

  // optional float tschchartseriesdefaultopacity = 116;
  if (has_tschchartseriesdefaultopacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(116, this->tschchartseriesdefaultopacity(), output);
  }

  // optional bool tschchartserieslinesymbolfilluseseriesstroke = 117;
  if (has_tschchartserieslinesymbolfilluseseriesstroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(117, this->tschchartserieslinesymbolfilluseseriesstroke(), output);
  }

  // optional bool tschchartseriesareasymbolfilluseseriesstroke = 118;
  if (has_tschchartseriesareasymbolfilluseseriesstroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(118, this->tschchartseriesareasymbolfilluseseriesstroke(), output);
  }

  // optional bool tschchartseriesscattersymbolfilluseseriesstroke = 119;
  if (has_tschchartseriesscattersymbolfilluseseriesstroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(119, this->tschchartseriesscattersymbolfilluseseriesstroke(), output);
  }

  // optional bool tschchartseriesmixedlinesymbolfilluseseriesstroke = 120;
  if (has_tschchartseriesmixedlinesymbolfilluseseriesstroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(120, this->tschchartseriesmixedlinesymbolfilluseseriesstroke(), output);
  }

  // optional bool tschchartseriesmixedareasymbolfilluseseriesstroke = 121;
  if (has_tschchartseriesmixedareasymbolfilluseseriesstroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(121, this->tschchartseriesmixedareasymbolfilluseseriesstroke(), output);
  }

  // optional bool tschchartserieslinesymbolfilluseseriesfill = 122;
  if (has_tschchartserieslinesymbolfilluseseriesfill()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(122, this->tschchartserieslinesymbolfilluseseriesfill(), output);
  }

  // optional bool tschchartseriesareasymbolfilluseseriesfill = 123;
  if (has_tschchartseriesareasymbolfilluseseriesfill()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(123, this->tschchartseriesareasymbolfilluseseriesfill(), output);
  }

  // optional bool tschchartseriesmixedlinesymbolfilluseseriesfill = 124;
  if (has_tschchartseriesmixedlinesymbolfilluseseriesfill()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(124, this->tschchartseriesmixedlinesymbolfilluseseriesfill(), output);
  }

  // optional bool tschchartseriesmixedareasymbolfilluseseriesfill = 125;
  if (has_tschchartseriesmixedareasymbolfilluseseriesfill()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(125, this->tschchartseriesmixedareasymbolfilluseseriesfill(), output);
  }

  // optional .TSD.FillArchive tschchartseriesmixedcolumnfill = 130;
  if (has_tschchartseriesmixedcolumnfill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      130, this->tschchartseriesmixedcolumnfill(), output);
  }

  // optional .TSD.FillArchive tschchartseriesmixedareafill = 131;
  if (has_tschchartseriesmixedareafill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      131, this->tschchartseriesmixedareafill(), output);
  }

  // optional .TSD.StrokeArchive tschchartseriesmixedcolumnstroke = 132;
  if (has_tschchartseriesmixedcolumnstroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      132, this->tschchartseriesmixedcolumnstroke(), output);
  }

  // optional .TSD.StrokeArchive tschchartseriesmixedlinestroke = 133;
  if (has_tschchartseriesmixedlinestroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      133, this->tschchartseriesmixedlinestroke(), output);
  }

  // optional .TSD.StrokeArchive tschchartseriesmixedareastroke = 134;
  if (has_tschchartseriesmixedareastroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      134, this->tschchartseriesmixedareastroke(), output);
  }

  // optional float tschchartseriesmixedlinesymbolsize = 135;
  if (has_tschchartseriesmixedlinesymbolsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(135, this->tschchartseriesmixedlinesymbolsize(), output);
  }

  // optional float tschchartseriesmixedareasymbolsize = 136;
  if (has_tschchartseriesmixedareasymbolsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(136, this->tschchartseriesmixedareasymbolsize(), output);
  }

  // optional .TSD.FillArchive tschchartseriesmixedlinesymbolfill = 137;
  if (has_tschchartseriesmixedlinesymbolfill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      137, this->tschchartseriesmixedlinesymbolfill(), output);
  }

  // optional .TSD.FillArchive tschchartseriesmixedareasymbolfill = 138;
  if (has_tschchartseriesmixedareasymbolfill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      138, this->tschchartseriesmixedareasymbolfill(), output);
  }

  // optional .TSD.StrokeArchive tschchartseriesmixedlinesymbolstroke = 139;
  if (has_tschchartseriesmixedlinesymbolstroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      139, this->tschchartseriesmixedlinesymbolstroke(), output);
  }

  // optional .TSD.StrokeArchive tschchartseriesmixedareasymbolstroke = 140;
  if (has_tschchartseriesmixedareasymbolstroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      140, this->tschchartseriesmixedareasymbolstroke(), output);
  }

  // optional int32 tschchartseriesmixedcolumnvaluelabelposition = 141;
  if (has_tschchartseriesmixedcolumnvaluelabelposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(141, this->tschchartseriesmixedcolumnvaluelabelposition(), output);
  }

  // optional int32 tschchartseriesmixedlinevaluelabelposition = 142;
  if (has_tschchartseriesmixedlinevaluelabelposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(142, this->tschchartseriesmixedlinevaluelabelposition(), output);
  }

  // optional int32 tschchartseriesmixedareavaluelabelposition = 143;
  if (has_tschchartseriesmixedareavaluelabelposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(143, this->tschchartseriesmixedareavaluelabelposition(), output);
  }

  // optional int32 tschchartseriesdefaultoutsidelabelparagraphstyleindex = 150;
  if (has_tschchartseriesdefaultoutsidelabelparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(150, this->tschchartseriesdefaultoutsidelabelparagraphstyleindex(), output);
  }

  // optional int32 tschchartseriesbaroutsidelabelparagraphstyleindex = 151;
  if (has_tschchartseriesbaroutsidelabelparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(151, this->tschchartseriesbaroutsidelabelparagraphstyleindex(), output);
  }

  // optional int32 tschchartseriesareaoutsidelabelparagraphstyleindex = 153;
  if (has_tschchartseriesareaoutsidelabelparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(153, this->tschchartseriesareaoutsidelabelparagraphstyleindex(), output);
  }

  // optional int32 tschchartseriespieoutsidelabelparagraphstyleindex = 154;
  if (has_tschchartseriespieoutsidelabelparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(154, this->tschchartseriespieoutsidelabelparagraphstyleindex(), output);
  }

  // optional int32 tschchartseriesmixedoutsidelabelparagraphstyleindex = 155;
  if (has_tschchartseriesmixedoutsidelabelparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(155, this->tschchartseriesmixedoutsidelabelparagraphstyleindex(), output);
  }

  // optional int32 tschchartseriesstackedbarvaluelabelposition = 156;
  if (has_tschchartseriesstackedbarvaluelabelposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(156, this->tschchartseriesstackedbarvaluelabelposition(), output);
  }

  // optional int32 tschchartseriesstackedareavaluelabelposition = 157;
  if (has_tschchartseriesstackedareavaluelabelposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(157, this->tschchartseriesstackedareavaluelabelposition(), output);
  }

  // optional .TSD.StrokeArchive tschchartseriesdefaulttrendlinestroke = 167;
  if (has_tschchartseriesdefaulttrendlinestroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      167, this->tschchartseriesdefaulttrendlinestroke(), output);
  }

  // optional .TSD.ShadowArchive tschchartseriesdefaulttrendlineshadow = 168;
  if (has_tschchartseriesdefaulttrendlineshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      168, this->tschchartseriesdefaulttrendlineshadow(), output);
  }

  // optional .TSD.ShadowArchive tschchartseriesdefaulterrorbarshadow = 180;
  if (has_tschchartseriesdefaulterrorbarshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      180, this->tschchartseriesdefaulterrorbarshadow(), output);
  }

  // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstroke = 181;
  if (has_tschchartseriesdefaulterrorbarstroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      181, this->tschchartseriesdefaulterrorbarstroke(), output);
  }

  // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstrokescatterx = 182;
  if (has_tschchartseriesdefaulterrorbarstrokescatterx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      182, this->tschchartseriesdefaulterrorbarstrokescatterx(), output);
  }

  // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineend = 183;
  if (has_tschchartseriesdefaulterrorbarlineend()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      183, this->tschchartseriesdefaulterrorbarlineend(), output);
  }

  // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineendscatterx = 184;
  if (has_tschchartseriesdefaulterrorbarlineendscatterx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      184, this->tschchartseriesdefaulterrorbarlineendscatterx(), output);
  }

  // optional int32 tschchartseriesdefaulttrendlineequationparagraphstyleindex = 201;
  if (has_tschchartseriesdefaulttrendlineequationparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(201, this->tschchartseriesdefaulttrendlineequationparagraphstyleindex(), output);
  }

  // optional int32 tschchartseriesdefaulttrendlinersquaredparagraphstyleindex = 202;
  if (has_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(202, this->tschchartseriesdefaulttrendlinersquaredparagraphstyleindex(), output);
  }

  // optional float tschchartseriesdefaulttrendlineequationopacity = 205;
  if (has_tschchartseriesdefaulttrendlineequationopacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(205, this->tschchartseriesdefaulttrendlineequationopacity(), output);
  }

  // optional float tschchartseriesdefaulttrendlinersquaredopacity = 206;
  if (has_tschchartseriesdefaulttrendlinersquaredopacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(206, this->tschchartseriesdefaulttrendlinersquaredopacity(), output);
  }

  // optional .TSD.FillArchive tschchartseriesbubblesymbolfill = 207;
  if (has_tschchartseriesbubblesymbolfill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      207, this->tschchartseriesbubblesymbolfill(), output);
  }

  // optional .TSD.StrokeArchive tschchartseriesbubblestroke = 211;
  if (has_tschchartseriesbubblestroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      211, this->tschchartseriesbubblestroke(), output);
  }

  // optional .TSD.StrokeArchive tschchartseriesbubblesymbolstroke = 212;
  if (has_tschchartseriesbubblesymbolstroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      212, this->tschchartseriesbubblesymbolstroke(), output);
  }

  // optional int32 tschchartseriesbubblevaluelabelposition = 213;
  if (has_tschchartseriesbubblevaluelabelposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(213, this->tschchartseriesbubblevaluelabelposition(), output);
  }

  // optional .TSD.ShadowArchive tschchartseriesbubbleshadow = 214;
  if (has_tschchartseriesbubbleshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      214, this->tschchartseriesbubbleshadow(), output);
  }

  // optional bool tschchartseriesbubblesymbolfilluseseriesstroke = 215;
  if (has_tschchartseriesbubblesymbolfilluseseriesstroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(215, this->tschchartseriesbubblesymbolfilluseseriesstroke(), output);
  }

  // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriesdefaultdeprecated3dfill = 300;
  if (has_tschchartseriesdefaultdeprecated3dfill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      300, this->tschchartseriesdefaultdeprecated3dfill(), output);
  }

  // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriesbardeprecated3dfill = 301;
  if (has_tschchartseriesbardeprecated3dfill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      301, this->tschchartseriesbardeprecated3dfill(), output);
  }

  // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriescolumndeprecated3dfill = 302;
  if (has_tschchartseriescolumndeprecated3dfill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      302, this->tschchartseriescolumndeprecated3dfill(), output);
  }

  // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartserieslinedeprecated3dfill = 303;
  if (has_tschchartserieslinedeprecated3dfill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      303, this->tschchartserieslinedeprecated3dfill(), output);
  }

  // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriesareadeprecated3dfill = 304;
  if (has_tschchartseriesareadeprecated3dfill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      304, this->tschchartseriesareadeprecated3dfill(), output);
  }

  // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriespiedeprecated3dfill = 305;
  if (has_tschchartseriespiedeprecated3dfill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      305, this->tschchartseriespiedeprecated3dfill(), output);
  }

  // optional .TSD.ShadowArchive tschchartseries3dbarshadow = 306;
  if (has_tschchartseries3dbarshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      306, this->tschchartseries3dbarshadow(), output);
  }

  // optional .TSD.ShadowArchive tschchartseries3dcolumnshadow = 307;
  if (has_tschchartseries3dcolumnshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      307, this->tschchartseries3dcolumnshadow(), output);
  }

  // optional .TSD.ShadowArchive tschchartseries3dlineshadow = 308;
  if (has_tschchartseries3dlineshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      308, this->tschchartseries3dlineshadow(), output);
  }

  // optional .TSD.ShadowArchive tschchartseries3dareashadow = 309;
  if (has_tschchartseries3dareashadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      309, this->tschchartseries3dareashadow(), output);
  }

  // optional .TSD.ShadowArchive tschchartseries3dpieshadow = 310;
  if (has_tschchartseries3dpieshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      310, this->tschchartseries3dpieshadow(), output);
  }

  // optional .TSD.FillArchive tschchartseries3dbarfill = 320;
  if (has_tschchartseries3dbarfill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      320, this->tschchartseries3dbarfill(), output);
  }

  // optional .TSD.FillArchive tschchartseries3dcolumnfill = 321;
  if (has_tschchartseries3dcolumnfill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      321, this->tschchartseries3dcolumnfill(), output);
  }

  // optional .TSD.FillArchive tschchartseries3dlinefill = 322;
  if (has_tschchartseries3dlinefill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      322, this->tschchartseries3dlinefill(), output);
  }

  // optional .TSD.FillArchive tschchartseries3dareafill = 323;
  if (has_tschchartseries3dareafill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      323, this->tschchartseries3dareafill(), output);
  }

  // optional .TSD.FillArchive tschchartseries3dpiefill = 324;
  if (has_tschchartseries3dpiefill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      324, this->tschchartseries3dpiefill(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartSeriesStyleArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSS.StyleArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSD.FillArchive tschchartseriesbarfill = 10;
  if (has_tschchartseriesbarfill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->tschchartseriesbarfill(), target);
  }

  // optional .TSD.StrokeArchive tschchartseriesbarstroke = 11;
  if (has_tschchartseriesbarstroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->tschchartseriesbarstroke(), target);
  }

  // optional int32 tschchartseriesbarvaluelabelposition = 13;
  if (has_tschchartseriesbarvaluelabelposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->tschchartseriesbarvaluelabelposition(), target);
  }

  // optional .TSD.StrokeArchive tschchartserieslinestroke = 16;
  if (has_tschchartserieslinestroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->tschchartserieslinestroke(), target);
  }

  // optional .TSD.FillArchive tschchartserieslinesymbolfill = 17;
  if (has_tschchartserieslinesymbolfill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->tschchartserieslinesymbolfill(), target);
  }

  // optional .TSD.StrokeArchive tschchartserieslinesymbolstroke = 18;
  if (has_tschchartserieslinesymbolstroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->tschchartserieslinesymbolstroke(), target);
  }

  // optional float tschchartserieslinesymbolsize = 20;
  if (has_tschchartserieslinesymbolsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->tschchartserieslinesymbolsize(), target);
  }

  // optional int32 tschchartserieslinevaluelabelposition = 22;
  if (has_tschchartserieslinevaluelabelposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->tschchartserieslinevaluelabelposition(), target);
  }

  // optional .TSD.FillArchive tschchartseriesareafill = 25;
  if (has_tschchartseriesareafill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->tschchartseriesareafill(), target);
  }

  // optional .TSD.StrokeArchive tschchartseriesareastroke = 26;
  if (has_tschchartseriesareastroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->tschchartseriesareastroke(), target);
  }

  // optional int32 tschchartseriesareavaluelabelposition = 28;
  if (has_tschchartseriesareavaluelabelposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->tschchartseriesareavaluelabelposition(), target);
  }

  // optional .TSD.FillArchive tschchartseriesareasymbolfill = 29;
  if (has_tschchartseriesareasymbolfill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->tschchartseriesareasymbolfill(), target);
  }

  // optional .TSD.StrokeArchive tschchartseriesareasymbolstroke = 30;
  if (has_tschchartseriesareasymbolstroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->tschchartseriesareasymbolstroke(), target);
  }

  // optional float tschchartseriesareasymbolsize = 32;
  if (has_tschchartseriesareasymbolsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(32, this->tschchartseriesareasymbolsize(), target);
  }

  // optional .TSD.FillArchive tschchartseriespiefill = 35;
  if (has_tschchartseriespiefill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->tschchartseriespiefill(), target);
  }

  // optional .TSD.StrokeArchive tschchartseriespiestroke = 36;
  if (has_tschchartseriespiestroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, this->tschchartseriespiestroke(), target);
  }

  // optional .TSD.StrokeArchive tschchartseriesscatterstroke = 40;
  if (has_tschchartseriesscatterstroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->tschchartseriesscatterstroke(), target);
  }

  // optional .TSD.FillArchive tschchartseriesscattersymbolfill = 41;
  if (has_tschchartseriesscattersymbolfill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        41, this->tschchartseriesscattersymbolfill(), target);
  }

  // optional .TSD.StrokeArchive tschchartseriesscattersymbolstroke = 42;
  if (has_tschchartseriesscattersymbolstroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        42, this->tschchartseriesscattersymbolstroke(), target);
  }

  // optional float tschchartseriesscattersymbolsize = 44;
  if (has_tschchartseriesscattersymbolsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(44, this->tschchartseriesscattersymbolsize(), target);
  }

  // optional int32 tschchartseriesscattervaluelabelposition = 46;
  if (has_tschchartseriesscattervaluelabelposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(46, this->tschchartseriesscattervaluelabelposition(), target);
  }

  // optional .TSD.FillArchive tschchartseriesdefaultfill = 50;
  if (has_tschchartseriesdefaultfill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->tschchartseriesdefaultfill(), target);
  }

  // optional int32 tschchartseriesdefaultvaluelabelposition = 52;
  if (has_tschchartseriesdefaultvaluelabelposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(52, this->tschchartseriesdefaultvaluelabelposition(), target);
  }

  // optional bool tschchartseriespiedeprecatedserieslabelson = 60;
  if (has_tschchartseriespiedeprecatedserieslabelson()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(60, this->tschchartseriespiedeprecatedserieslabelson(), target);
  }

  // optional .TSD.FillArchive tschchartseriescolumnfill = 62;
  if (has_tschchartseriescolumnfill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        62, this->tschchartseriescolumnfill(), target);
  }

  // optional .TSD.ShadowArchive tschchartseriespieshadow = 100;
  if (has_tschchartseriespieshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->tschchartseriespieshadow(), target);
  }

  // optional .TSD.ShadowArchive tschchartseriesbarshadow = 101;
  if (has_tschchartseriesbarshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        101, this->tschchartseriesbarshadow(), target);
  }

  // optional .TSD.ShadowArchive tschchartseriesareashadow = 102;
  if (has_tschchartseriesareashadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        102, this->tschchartseriesareashadow(), target);
  }

  // optional .TSD.ShadowArchive tschchartseriesscattershadow = 103;
  if (has_tschchartseriesscattershadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        103, this->tschchartseriesscattershadow(), target);
  }

  // optional .TSD.ShadowArchive tschchartseriesmixedlineshadow = 104;
  if (has_tschchartseriesmixedlineshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        104, this->tschchartseriesmixedlineshadow(), target);
  }

  // optional .TSD.ShadowArchive tschchartseriesmixedareashadow = 105;
  if (has_tschchartseriesmixedareashadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        105, this->tschchartseriesmixedareashadow(), target);
  }

  // optional .TSD.ShadowArchive tschchartseriesmixedcolumnshadow = 106;
  if (has_tschchartseriesmixedcolumnshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        106, this->tschchartseriesmixedcolumnshadow(), target);
  }

  // optional .TSD.ShadowArchive tschchartserieslineshadow = 107;
  if (has_tschchartserieslineshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        107, this->tschchartserieslineshadow(), target);
  }

  // optional .TSD.ShadowArchive tschchartseriesdefaultshadow = 108;
  if (has_tschchartseriesdefaultshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        108, this->tschchartseriesdefaultshadow(), target);
  }

  // optional int32 tschchartseriesdefaultlabelparagraphstyleindex = 110;
  if (has_tschchartseriesdefaultlabelparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(110, this->tschchartseriesdefaultlabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriesbarlabelparagraphstyleindex = 111;
  if (has_tschchartseriesbarlabelparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(111, this->tschchartseriesbarlabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartserieslinelabelparagraphstyleindex = 112;
  if (has_tschchartserieslinelabelparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(112, this->tschchartserieslinelabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriesarealabelparagraphstyleindex = 113;
  if (has_tschchartseriesarealabelparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(113, this->tschchartseriesarealabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriespielabelparagraphstyleindex = 114;
  if (has_tschchartseriespielabelparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(114, this->tschchartseriespielabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriesmixedlabelparagraphstyleindex = 115;
  if (has_tschchartseriesmixedlabelparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(115, this->tschchartseriesmixedlabelparagraphstyleindex(), target);
  }

  // optional float tschchartseriesdefaultopacity = 116;
  if (has_tschchartseriesdefaultopacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(116, this->tschchartseriesdefaultopacity(), target);
  }

  // optional bool tschchartserieslinesymbolfilluseseriesstroke = 117;
  if (has_tschchartserieslinesymbolfilluseseriesstroke()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(117, this->tschchartserieslinesymbolfilluseseriesstroke(), target);
  }

  // optional bool tschchartseriesareasymbolfilluseseriesstroke = 118;
  if (has_tschchartseriesareasymbolfilluseseriesstroke()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(118, this->tschchartseriesareasymbolfilluseseriesstroke(), target);
  }

  // optional bool tschchartseriesscattersymbolfilluseseriesstroke = 119;
  if (has_tschchartseriesscattersymbolfilluseseriesstroke()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(119, this->tschchartseriesscattersymbolfilluseseriesstroke(), target);
  }

  // optional bool tschchartseriesmixedlinesymbolfilluseseriesstroke = 120;
  if (has_tschchartseriesmixedlinesymbolfilluseseriesstroke()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(120, this->tschchartseriesmixedlinesymbolfilluseseriesstroke(), target);
  }

  // optional bool tschchartseriesmixedareasymbolfilluseseriesstroke = 121;
  if (has_tschchartseriesmixedareasymbolfilluseseriesstroke()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(121, this->tschchartseriesmixedareasymbolfilluseseriesstroke(), target);
  }

  // optional bool tschchartserieslinesymbolfilluseseriesfill = 122;
  if (has_tschchartserieslinesymbolfilluseseriesfill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(122, this->tschchartserieslinesymbolfilluseseriesfill(), target);
  }

  // optional bool tschchartseriesareasymbolfilluseseriesfill = 123;
  if (has_tschchartseriesareasymbolfilluseseriesfill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(123, this->tschchartseriesareasymbolfilluseseriesfill(), target);
  }

  // optional bool tschchartseriesmixedlinesymbolfilluseseriesfill = 124;
  if (has_tschchartseriesmixedlinesymbolfilluseseriesfill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(124, this->tschchartseriesmixedlinesymbolfilluseseriesfill(), target);
  }

  // optional bool tschchartseriesmixedareasymbolfilluseseriesfill = 125;
  if (has_tschchartseriesmixedareasymbolfilluseseriesfill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(125, this->tschchartseriesmixedareasymbolfilluseseriesfill(), target);
  }

  // optional .TSD.FillArchive tschchartseriesmixedcolumnfill = 130;
  if (has_tschchartseriesmixedcolumnfill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        130, this->tschchartseriesmixedcolumnfill(), target);
  }

  // optional .TSD.FillArchive tschchartseriesmixedareafill = 131;
  if (has_tschchartseriesmixedareafill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        131, this->tschchartseriesmixedareafill(), target);
  }

  // optional .TSD.StrokeArchive tschchartseriesmixedcolumnstroke = 132;
  if (has_tschchartseriesmixedcolumnstroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        132, this->tschchartseriesmixedcolumnstroke(), target);
  }

  // optional .TSD.StrokeArchive tschchartseriesmixedlinestroke = 133;
  if (has_tschchartseriesmixedlinestroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        133, this->tschchartseriesmixedlinestroke(), target);
  }

  // optional .TSD.StrokeArchive tschchartseriesmixedareastroke = 134;
  if (has_tschchartseriesmixedareastroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        134, this->tschchartseriesmixedareastroke(), target);
  }

  // optional float tschchartseriesmixedlinesymbolsize = 135;
  if (has_tschchartseriesmixedlinesymbolsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(135, this->tschchartseriesmixedlinesymbolsize(), target);
  }

  // optional float tschchartseriesmixedareasymbolsize = 136;
  if (has_tschchartseriesmixedareasymbolsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(136, this->tschchartseriesmixedareasymbolsize(), target);
  }

  // optional .TSD.FillArchive tschchartseriesmixedlinesymbolfill = 137;
  if (has_tschchartseriesmixedlinesymbolfill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        137, this->tschchartseriesmixedlinesymbolfill(), target);
  }

  // optional .TSD.FillArchive tschchartseriesmixedareasymbolfill = 138;
  if (has_tschchartseriesmixedareasymbolfill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        138, this->tschchartseriesmixedareasymbolfill(), target);
  }

  // optional .TSD.StrokeArchive tschchartseriesmixedlinesymbolstroke = 139;
  if (has_tschchartseriesmixedlinesymbolstroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        139, this->tschchartseriesmixedlinesymbolstroke(), target);
  }

  // optional .TSD.StrokeArchive tschchartseriesmixedareasymbolstroke = 140;
  if (has_tschchartseriesmixedareasymbolstroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        140, this->tschchartseriesmixedareasymbolstroke(), target);
  }

  // optional int32 tschchartseriesmixedcolumnvaluelabelposition = 141;
  if (has_tschchartseriesmixedcolumnvaluelabelposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(141, this->tschchartseriesmixedcolumnvaluelabelposition(), target);
  }

  // optional int32 tschchartseriesmixedlinevaluelabelposition = 142;
  if (has_tschchartseriesmixedlinevaluelabelposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(142, this->tschchartseriesmixedlinevaluelabelposition(), target);
  }

  // optional int32 tschchartseriesmixedareavaluelabelposition = 143;
  if (has_tschchartseriesmixedareavaluelabelposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(143, this->tschchartseriesmixedareavaluelabelposition(), target);
  }

  // optional int32 tschchartseriesdefaultoutsidelabelparagraphstyleindex = 150;
  if (has_tschchartseriesdefaultoutsidelabelparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(150, this->tschchartseriesdefaultoutsidelabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriesbaroutsidelabelparagraphstyleindex = 151;
  if (has_tschchartseriesbaroutsidelabelparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(151, this->tschchartseriesbaroutsidelabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriesareaoutsidelabelparagraphstyleindex = 153;
  if (has_tschchartseriesareaoutsidelabelparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(153, this->tschchartseriesareaoutsidelabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriespieoutsidelabelparagraphstyleindex = 154;
  if (has_tschchartseriespieoutsidelabelparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(154, this->tschchartseriespieoutsidelabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriesmixedoutsidelabelparagraphstyleindex = 155;
  if (has_tschchartseriesmixedoutsidelabelparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(155, this->tschchartseriesmixedoutsidelabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriesstackedbarvaluelabelposition = 156;
  if (has_tschchartseriesstackedbarvaluelabelposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(156, this->tschchartseriesstackedbarvaluelabelposition(), target);
  }

  // optional int32 tschchartseriesstackedareavaluelabelposition = 157;
  if (has_tschchartseriesstackedareavaluelabelposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(157, this->tschchartseriesstackedareavaluelabelposition(), target);
  }

  // optional .TSD.StrokeArchive tschchartseriesdefaulttrendlinestroke = 167;
  if (has_tschchartseriesdefaulttrendlinestroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        167, this->tschchartseriesdefaulttrendlinestroke(), target);
  }

  // optional .TSD.ShadowArchive tschchartseriesdefaulttrendlineshadow = 168;
  if (has_tschchartseriesdefaulttrendlineshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        168, this->tschchartseriesdefaulttrendlineshadow(), target);
  }

  // optional .TSD.ShadowArchive tschchartseriesdefaulterrorbarshadow = 180;
  if (has_tschchartseriesdefaulterrorbarshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        180, this->tschchartseriesdefaulterrorbarshadow(), target);
  }

  // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstroke = 181;
  if (has_tschchartseriesdefaulterrorbarstroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        181, this->tschchartseriesdefaulterrorbarstroke(), target);
  }

  // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstrokescatterx = 182;
  if (has_tschchartseriesdefaulterrorbarstrokescatterx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        182, this->tschchartseriesdefaulterrorbarstrokescatterx(), target);
  }

  // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineend = 183;
  if (has_tschchartseriesdefaulterrorbarlineend()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        183, this->tschchartseriesdefaulterrorbarlineend(), target);
  }

  // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineendscatterx = 184;
  if (has_tschchartseriesdefaulterrorbarlineendscatterx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        184, this->tschchartseriesdefaulterrorbarlineendscatterx(), target);
  }

  // optional int32 tschchartseriesdefaulttrendlineequationparagraphstyleindex = 201;
  if (has_tschchartseriesdefaulttrendlineequationparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(201, this->tschchartseriesdefaulttrendlineequationparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriesdefaulttrendlinersquaredparagraphstyleindex = 202;
  if (has_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(202, this->tschchartseriesdefaulttrendlinersquaredparagraphstyleindex(), target);
  }

  // optional float tschchartseriesdefaulttrendlineequationopacity = 205;
  if (has_tschchartseriesdefaulttrendlineequationopacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(205, this->tschchartseriesdefaulttrendlineequationopacity(), target);
  }

  // optional float tschchartseriesdefaulttrendlinersquaredopacity = 206;
  if (has_tschchartseriesdefaulttrendlinersquaredopacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(206, this->tschchartseriesdefaulttrendlinersquaredopacity(), target);
  }

  // optional .TSD.FillArchive tschchartseriesbubblesymbolfill = 207;
  if (has_tschchartseriesbubblesymbolfill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        207, this->tschchartseriesbubblesymbolfill(), target);
  }

  // optional .TSD.StrokeArchive tschchartseriesbubblestroke = 211;
  if (has_tschchartseriesbubblestroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        211, this->tschchartseriesbubblestroke(), target);
  }

  // optional .TSD.StrokeArchive tschchartseriesbubblesymbolstroke = 212;
  if (has_tschchartseriesbubblesymbolstroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        212, this->tschchartseriesbubblesymbolstroke(), target);
  }

  // optional int32 tschchartseriesbubblevaluelabelposition = 213;
  if (has_tschchartseriesbubblevaluelabelposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(213, this->tschchartseriesbubblevaluelabelposition(), target);
  }

  // optional .TSD.ShadowArchive tschchartseriesbubbleshadow = 214;
  if (has_tschchartseriesbubbleshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        214, this->tschchartseriesbubbleshadow(), target);
  }

  // optional bool tschchartseriesbubblesymbolfilluseseriesstroke = 215;
  if (has_tschchartseriesbubblesymbolfilluseseriesstroke()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(215, this->tschchartseriesbubblesymbolfilluseseriesstroke(), target);
  }

  // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriesdefaultdeprecated3dfill = 300;
  if (has_tschchartseriesdefaultdeprecated3dfill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        300, this->tschchartseriesdefaultdeprecated3dfill(), target);
  }

  // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriesbardeprecated3dfill = 301;
  if (has_tschchartseriesbardeprecated3dfill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        301, this->tschchartseriesbardeprecated3dfill(), target);
  }

  // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriescolumndeprecated3dfill = 302;
  if (has_tschchartseriescolumndeprecated3dfill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        302, this->tschchartseriescolumndeprecated3dfill(), target);
  }

  // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartserieslinedeprecated3dfill = 303;
  if (has_tschchartserieslinedeprecated3dfill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        303, this->tschchartserieslinedeprecated3dfill(), target);
  }

  // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriesareadeprecated3dfill = 304;
  if (has_tschchartseriesareadeprecated3dfill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        304, this->tschchartseriesareadeprecated3dfill(), target);
  }

  // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriespiedeprecated3dfill = 305;
  if (has_tschchartseriespiedeprecated3dfill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        305, this->tschchartseriespiedeprecated3dfill(), target);
  }

  // optional .TSD.ShadowArchive tschchartseries3dbarshadow = 306;
  if (has_tschchartseries3dbarshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        306, this->tschchartseries3dbarshadow(), target);
  }

  // optional .TSD.ShadowArchive tschchartseries3dcolumnshadow = 307;
  if (has_tschchartseries3dcolumnshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        307, this->tschchartseries3dcolumnshadow(), target);
  }

  // optional .TSD.ShadowArchive tschchartseries3dlineshadow = 308;
  if (has_tschchartseries3dlineshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        308, this->tschchartseries3dlineshadow(), target);
  }

  // optional .TSD.ShadowArchive tschchartseries3dareashadow = 309;
  if (has_tschchartseries3dareashadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        309, this->tschchartseries3dareashadow(), target);
  }

  // optional .TSD.ShadowArchive tschchartseries3dpieshadow = 310;
  if (has_tschchartseries3dpieshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        310, this->tschchartseries3dpieshadow(), target);
  }

  // optional .TSD.FillArchive tschchartseries3dbarfill = 320;
  if (has_tschchartseries3dbarfill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        320, this->tschchartseries3dbarfill(), target);
  }

  // optional .TSD.FillArchive tschchartseries3dcolumnfill = 321;
  if (has_tschchartseries3dcolumnfill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        321, this->tschchartseries3dcolumnfill(), target);
  }

  // optional .TSD.FillArchive tschchartseries3dlinefill = 322;
  if (has_tschchartseries3dlinefill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        322, this->tschchartseries3dlinefill(), target);
  }

  // optional .TSD.FillArchive tschchartseries3dareafill = 323;
  if (has_tschchartseries3dareafill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        323, this->tschchartseries3dareafill(), target);
  }

  // optional .TSD.FillArchive tschchartseries3dpiefill = 324;
  if (has_tschchartseries3dpiefill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        324, this->tschchartseries3dpiefill(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartSeriesStyleArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSS.StyleArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional int32 tschchartseriesdefaulttrendlineequationparagraphstyleindex = 201;
    if (has_tschchartseriesdefaulttrendlineequationparagraphstyleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesdefaulttrendlineequationparagraphstyleindex());
    }

    // optional int32 tschchartseriesdefaulttrendlinersquaredparagraphstyleindex = 202;
    if (has_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesdefaulttrendlinersquaredparagraphstyleindex());
    }

    // optional float tschchartseriesdefaulttrendlineequationopacity = 205;
    if (has_tschchartseriesdefaulttrendlineequationopacity()) {
      total_size += 2 + 4;
    }

    // optional float tschchartseriesdefaulttrendlinersquaredopacity = 206;
    if (has_tschchartseriesdefaulttrendlinersquaredopacity()) {
      total_size += 2 + 4;
    }

    // optional .TSD.FillArchive tschchartseriesbarfill = 10;
    if (has_tschchartseriesbarfill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesbarfill());
    }

    // optional .TSD.StrokeArchive tschchartseriesbarstroke = 11;
    if (has_tschchartseriesbarstroke()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesbarstroke());
    }

    // optional int32 tschchartseriesbarvaluelabelposition = 13;
    if (has_tschchartseriesbarvaluelabelposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesbarvaluelabelposition());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .TSD.StrokeArchive tschchartserieslinestroke = 16;
    if (has_tschchartserieslinestroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartserieslinestroke());
    }

    // optional .TSD.FillArchive tschchartserieslinesymbolfill = 17;
    if (has_tschchartserieslinesymbolfill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartserieslinesymbolfill());
    }

    // optional .TSD.StrokeArchive tschchartserieslinesymbolstroke = 18;
    if (has_tschchartserieslinesymbolstroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartserieslinesymbolstroke());
    }

    // optional float tschchartserieslinesymbolsize = 20;
    if (has_tschchartserieslinesymbolsize()) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartserieslinevaluelabelposition = 22;
    if (has_tschchartserieslinevaluelabelposition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartserieslinevaluelabelposition());
    }

    // optional .TSD.FillArchive tschchartseriesareafill = 25;
    if (has_tschchartseriesareafill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesareafill());
    }

    // optional .TSD.StrokeArchive tschchartseriesareastroke = 26;
    if (has_tschchartseriesareastroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesareastroke());
    }

    // optional int32 tschchartseriesareavaluelabelposition = 28;
    if (has_tschchartseriesareavaluelabelposition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesareavaluelabelposition());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .TSD.FillArchive tschchartseriesareasymbolfill = 29;
    if (has_tschchartseriesareasymbolfill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesareasymbolfill());
    }

    // optional .TSD.StrokeArchive tschchartseriesareasymbolstroke = 30;
    if (has_tschchartseriesareasymbolstroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesareasymbolstroke());
    }

    // optional float tschchartseriesareasymbolsize = 32;
    if (has_tschchartseriesareasymbolsize()) {
      total_size += 2 + 4;
    }

    // optional .TSD.FillArchive tschchartseriespiefill = 35;
    if (has_tschchartseriespiefill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriespiefill());
    }

    // optional .TSD.StrokeArchive tschchartseriespiestroke = 36;
    if (has_tschchartseriespiestroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriespiestroke());
    }

    // optional .TSD.StrokeArchive tschchartseriesscatterstroke = 40;
    if (has_tschchartseriesscatterstroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesscatterstroke());
    }

    // optional .TSD.FillArchive tschchartseriesscattersymbolfill = 41;
    if (has_tschchartseriesscattersymbolfill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesscattersymbolfill());
    }

    // optional .TSD.StrokeArchive tschchartseriesscattersymbolstroke = 42;
    if (has_tschchartseriesscattersymbolstroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesscattersymbolstroke());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional float tschchartseriesscattersymbolsize = 44;
    if (has_tschchartseriesscattersymbolsize()) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartseriesscattervaluelabelposition = 46;
    if (has_tschchartseriesscattervaluelabelposition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesscattervaluelabelposition());
    }

    // optional .TSD.FillArchive tschchartseriesdefaultfill = 50;
    if (has_tschchartseriesdefaultfill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesdefaultfill());
    }

    // optional int32 tschchartseriesdefaultvaluelabelposition = 52;
    if (has_tschchartseriesdefaultvaluelabelposition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesdefaultvaluelabelposition());
    }

    // optional bool tschchartseriespiedeprecatedserieslabelson = 60;
    if (has_tschchartseriespiedeprecatedserieslabelson()) {
      total_size += 2 + 1;
    }

    // optional .TSD.FillArchive tschchartseriescolumnfill = 62;
    if (has_tschchartseriescolumnfill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriescolumnfill());
    }

    // optional .TSD.ShadowArchive tschchartseriespieshadow = 100;
    if (has_tschchartseriespieshadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriespieshadow());
    }

    // optional .TSD.ShadowArchive tschchartseriesbarshadow = 101;
    if (has_tschchartseriesbarshadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesbarshadow());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional .TSD.ShadowArchive tschchartseriesareashadow = 102;
    if (has_tschchartseriesareashadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesareashadow());
    }

    // optional .TSD.ShadowArchive tschchartseriesscattershadow = 103;
    if (has_tschchartseriesscattershadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesscattershadow());
    }

    // optional .TSD.ShadowArchive tschchartseriesmixedlineshadow = 104;
    if (has_tschchartseriesmixedlineshadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesmixedlineshadow());
    }

    // optional .TSD.ShadowArchive tschchartseriesmixedareashadow = 105;
    if (has_tschchartseriesmixedareashadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesmixedareashadow());
    }

    // optional .TSD.ShadowArchive tschchartseriesmixedcolumnshadow = 106;
    if (has_tschchartseriesmixedcolumnshadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesmixedcolumnshadow());
    }

    // optional .TSD.ShadowArchive tschchartserieslineshadow = 107;
    if (has_tschchartserieslineshadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartserieslineshadow());
    }

    // optional .TSD.ShadowArchive tschchartseriesdefaultshadow = 108;
    if (has_tschchartseriesdefaultshadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesdefaultshadow());
    }

    // optional .TSD.FillArchive tschchartseriesbubblesymbolfill = 207;
    if (has_tschchartseriesbubblesymbolfill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesbubblesymbolfill());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional .TSD.StrokeArchive tschchartseriesbubblestroke = 211;
    if (has_tschchartseriesbubblestroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesbubblestroke());
    }

    // optional .TSD.StrokeArchive tschchartseriesbubblesymbolstroke = 212;
    if (has_tschchartseriesbubblesymbolstroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesbubblesymbolstroke());
    }

    // optional int32 tschchartseriesbubblevaluelabelposition = 213;
    if (has_tschchartseriesbubblevaluelabelposition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesbubblevaluelabelposition());
    }

    // optional .TSD.ShadowArchive tschchartseriesbubbleshadow = 214;
    if (has_tschchartseriesbubbleshadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesbubbleshadow());
    }

    // optional bool tschchartseriesbubblesymbolfilluseseriesstroke = 215;
    if (has_tschchartseriesbubblesymbolfilluseseriesstroke()) {
      total_size += 2 + 1;
    }

    // optional .TSD.ShadowArchive tschchartseries3dbarshadow = 306;
    if (has_tschchartseries3dbarshadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseries3dbarshadow());
    }

    // optional .TSD.ShadowArchive tschchartseries3dcolumnshadow = 307;
    if (has_tschchartseries3dcolumnshadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseries3dcolumnshadow());
    }

    // optional .TSD.ShadowArchive tschchartseries3dlineshadow = 308;
    if (has_tschchartseries3dlineshadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseries3dlineshadow());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional .TSD.ShadowArchive tschchartseries3dareashadow = 309;
    if (has_tschchartseries3dareashadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseries3dareashadow());
    }

    // optional .TSD.ShadowArchive tschchartseries3dpieshadow = 310;
    if (has_tschchartseries3dpieshadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseries3dpieshadow());
    }

    // optional int32 tschchartseriesdefaultlabelparagraphstyleindex = 110;
    if (has_tschchartseriesdefaultlabelparagraphstyleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesdefaultlabelparagraphstyleindex());
    }

    // optional int32 tschchartseriesbarlabelparagraphstyleindex = 111;
    if (has_tschchartseriesbarlabelparagraphstyleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesbarlabelparagraphstyleindex());
    }

    // optional int32 tschchartserieslinelabelparagraphstyleindex = 112;
    if (has_tschchartserieslinelabelparagraphstyleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartserieslinelabelparagraphstyleindex());
    }

    // optional int32 tschchartseriesarealabelparagraphstyleindex = 113;
    if (has_tschchartseriesarealabelparagraphstyleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesarealabelparagraphstyleindex());
    }

    // optional int32 tschchartseriespielabelparagraphstyleindex = 114;
    if (has_tschchartseriespielabelparagraphstyleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriespielabelparagraphstyleindex());
    }

    // optional int32 tschchartseriesmixedlabelparagraphstyleindex = 115;
    if (has_tschchartseriesmixedlabelparagraphstyleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesmixedlabelparagraphstyleindex());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional float tschchartseriesdefaultopacity = 116;
    if (has_tschchartseriesdefaultopacity()) {
      total_size += 2 + 4;
    }

    // optional bool tschchartserieslinesymbolfilluseseriesstroke = 117;
    if (has_tschchartserieslinesymbolfilluseseriesstroke()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesareasymbolfilluseseriesstroke = 118;
    if (has_tschchartseriesareasymbolfilluseseriesstroke()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesscattersymbolfilluseseriesstroke = 119;
    if (has_tschchartseriesscattersymbolfilluseseriesstroke()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesmixedlinesymbolfilluseseriesstroke = 120;
    if (has_tschchartseriesmixedlinesymbolfilluseseriesstroke()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesmixedareasymbolfilluseseriesstroke = 121;
    if (has_tschchartseriesmixedareasymbolfilluseseriesstroke()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartserieslinesymbolfilluseseriesfill = 122;
    if (has_tschchartserieslinesymbolfilluseseriesfill()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesareasymbolfilluseseriesfill = 123;
    if (has_tschchartseriesareasymbolfilluseseriesfill()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional bool tschchartseriesmixedlinesymbolfilluseseriesfill = 124;
    if (has_tschchartseriesmixedlinesymbolfilluseseriesfill()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesmixedareasymbolfilluseseriesfill = 125;
    if (has_tschchartseriesmixedareasymbolfilluseseriesfill()) {
      total_size += 2 + 1;
    }

    // optional .TSD.FillArchive tschchartseriesmixedcolumnfill = 130;
    if (has_tschchartseriesmixedcolumnfill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesmixedcolumnfill());
    }

    // optional .TSD.FillArchive tschchartseriesmixedareafill = 131;
    if (has_tschchartseriesmixedareafill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesmixedareafill());
    }

    // optional .TSD.StrokeArchive tschchartseriesmixedcolumnstroke = 132;
    if (has_tschchartseriesmixedcolumnstroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesmixedcolumnstroke());
    }

    // optional .TSD.StrokeArchive tschchartseriesmixedlinestroke = 133;
    if (has_tschchartseriesmixedlinestroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesmixedlinestroke());
    }

    // optional .TSD.StrokeArchive tschchartseriesmixedareastroke = 134;
    if (has_tschchartseriesmixedareastroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesmixedareastroke());
    }

    // optional float tschchartseriesmixedlinesymbolsize = 135;
    if (has_tschchartseriesmixedlinesymbolsize()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    // optional float tschchartseriesmixedareasymbolsize = 136;
    if (has_tschchartseriesmixedareasymbolsize()) {
      total_size += 2 + 4;
    }

    // optional .TSD.FillArchive tschchartseriesmixedlinesymbolfill = 137;
    if (has_tschchartseriesmixedlinesymbolfill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesmixedlinesymbolfill());
    }

    // optional .TSD.FillArchive tschchartseriesmixedareasymbolfill = 138;
    if (has_tschchartseriesmixedareasymbolfill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesmixedareasymbolfill());
    }

    // optional .TSD.StrokeArchive tschchartseriesmixedlinesymbolstroke = 139;
    if (has_tschchartseriesmixedlinesymbolstroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesmixedlinesymbolstroke());
    }

    // optional .TSD.StrokeArchive tschchartseriesmixedareasymbolstroke = 140;
    if (has_tschchartseriesmixedareasymbolstroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesmixedareasymbolstroke());
    }

    // optional int32 tschchartseriesmixedcolumnvaluelabelposition = 141;
    if (has_tschchartseriesmixedcolumnvaluelabelposition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesmixedcolumnvaluelabelposition());
    }

    // optional int32 tschchartseriesmixedlinevaluelabelposition = 142;
    if (has_tschchartseriesmixedlinevaluelabelposition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesmixedlinevaluelabelposition());
    }

    // optional int32 tschchartseriesmixedareavaluelabelposition = 143;
    if (has_tschchartseriesmixedareavaluelabelposition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesmixedareavaluelabelposition());
    }

  }
  if (_has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    // optional int32 tschchartseriesdefaultoutsidelabelparagraphstyleindex = 150;
    if (has_tschchartseriesdefaultoutsidelabelparagraphstyleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesdefaultoutsidelabelparagraphstyleindex());
    }

    // optional int32 tschchartseriesbaroutsidelabelparagraphstyleindex = 151;
    if (has_tschchartseriesbaroutsidelabelparagraphstyleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesbaroutsidelabelparagraphstyleindex());
    }

    // optional int32 tschchartseriesareaoutsidelabelparagraphstyleindex = 153;
    if (has_tschchartseriesareaoutsidelabelparagraphstyleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesareaoutsidelabelparagraphstyleindex());
    }

    // optional int32 tschchartseriespieoutsidelabelparagraphstyleindex = 154;
    if (has_tschchartseriespieoutsidelabelparagraphstyleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriespieoutsidelabelparagraphstyleindex());
    }

    // optional int32 tschchartseriesmixedoutsidelabelparagraphstyleindex = 155;
    if (has_tschchartseriesmixedoutsidelabelparagraphstyleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesmixedoutsidelabelparagraphstyleindex());
    }

    // optional int32 tschchartseriesstackedbarvaluelabelposition = 156;
    if (has_tschchartseriesstackedbarvaluelabelposition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesstackedbarvaluelabelposition());
    }

    // optional int32 tschchartseriesstackedareavaluelabelposition = 157;
    if (has_tschchartseriesstackedareavaluelabelposition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesstackedareavaluelabelposition());
    }

    // optional .TSD.StrokeArchive tschchartseriesdefaulttrendlinestroke = 167;
    if (has_tschchartseriesdefaulttrendlinestroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesdefaulttrendlinestroke());
    }

  }
  if (_has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    // optional .TSD.ShadowArchive tschchartseriesdefaulttrendlineshadow = 168;
    if (has_tschchartseriesdefaulttrendlineshadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesdefaulttrendlineshadow());
    }

    // optional .TSD.ShadowArchive tschchartseriesdefaulterrorbarshadow = 180;
    if (has_tschchartseriesdefaulterrorbarshadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesdefaulterrorbarshadow());
    }

    // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstroke = 181;
    if (has_tschchartseriesdefaulterrorbarstroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesdefaulterrorbarstroke());
    }

    // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstrokescatterx = 182;
    if (has_tschchartseriesdefaulterrorbarstrokescatterx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesdefaulterrorbarstrokescatterx());
    }

    // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineend = 183;
    if (has_tschchartseriesdefaulterrorbarlineend()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesdefaulterrorbarlineend());
    }

    // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineendscatterx = 184;
    if (has_tschchartseriesdefaulterrorbarlineendscatterx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesdefaulterrorbarlineendscatterx());
    }

    // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriesdefaultdeprecated3dfill = 300;
    if (has_tschchartseriesdefaultdeprecated3dfill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesdefaultdeprecated3dfill());
    }

    // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriesbardeprecated3dfill = 301;
    if (has_tschchartseriesbardeprecated3dfill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesbardeprecated3dfill());
    }

  }
  if (_has_bits_[96 / 32] & (0xffu << (96 % 32))) {
    // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriescolumndeprecated3dfill = 302;
    if (has_tschchartseriescolumndeprecated3dfill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriescolumndeprecated3dfill());
    }

    // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartserieslinedeprecated3dfill = 303;
    if (has_tschchartserieslinedeprecated3dfill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartserieslinedeprecated3dfill());
    }

    // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriesareadeprecated3dfill = 304;
    if (has_tschchartseriesareadeprecated3dfill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesareadeprecated3dfill());
    }

    // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriespiedeprecated3dfill = 305;
    if (has_tschchartseriespiedeprecated3dfill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriespiedeprecated3dfill());
    }

    // optional .TSD.FillArchive tschchartseries3dbarfill = 320;
    if (has_tschchartseries3dbarfill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseries3dbarfill());
    }

    // optional .TSD.FillArchive tschchartseries3dcolumnfill = 321;
    if (has_tschchartseries3dcolumnfill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseries3dcolumnfill());
    }

    // optional .TSD.FillArchive tschchartseries3dlinefill = 322;
    if (has_tschchartseries3dlinefill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseries3dlinefill());
    }

    // optional .TSD.FillArchive tschchartseries3dareafill = 323;
    if (has_tschchartseries3dareafill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseries3dareafill());
    }

  }
  if (_has_bits_[104 / 32] & (0xffu << (104 % 32))) {
    // optional .TSD.FillArchive tschchartseries3dpiefill = 324;
    if (has_tschchartseries3dpiefill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseries3dpiefill());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartSeriesStyleArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartSeriesStyleArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartSeriesStyleArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartSeriesStyleArchive::MergeFrom(const ChartSeriesStyleArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSS::StyleArchive::MergeFrom(from.super());
    }
    if (from.has_tschchartseriesdefaulttrendlineequationparagraphstyleindex()) {
      set_tschchartseriesdefaulttrendlineequationparagraphstyleindex(from.tschchartseriesdefaulttrendlineequationparagraphstyleindex());
    }
    if (from.has_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex()) {
      set_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex(from.tschchartseriesdefaulttrendlinersquaredparagraphstyleindex());
    }
    if (from.has_tschchartseriesdefaulttrendlineequationopacity()) {
      set_tschchartseriesdefaulttrendlineequationopacity(from.tschchartseriesdefaulttrendlineequationopacity());
    }
    if (from.has_tschchartseriesdefaulttrendlinersquaredopacity()) {
      set_tschchartseriesdefaulttrendlinersquaredopacity(from.tschchartseriesdefaulttrendlinersquaredopacity());
    }
    if (from.has_tschchartseriesbarfill()) {
      mutable_tschchartseriesbarfill()->::TSD::FillArchive::MergeFrom(from.tschchartseriesbarfill());
    }
    if (from.has_tschchartseriesbarstroke()) {
      mutable_tschchartseriesbarstroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartseriesbarstroke());
    }
    if (from.has_tschchartseriesbarvaluelabelposition()) {
      set_tschchartseriesbarvaluelabelposition(from.tschchartseriesbarvaluelabelposition());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tschchartserieslinestroke()) {
      mutable_tschchartserieslinestroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartserieslinestroke());
    }
    if (from.has_tschchartserieslinesymbolfill()) {
      mutable_tschchartserieslinesymbolfill()->::TSD::FillArchive::MergeFrom(from.tschchartserieslinesymbolfill());
    }
    if (from.has_tschchartserieslinesymbolstroke()) {
      mutable_tschchartserieslinesymbolstroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartserieslinesymbolstroke());
    }
    if (from.has_tschchartserieslinesymbolsize()) {
      set_tschchartserieslinesymbolsize(from.tschchartserieslinesymbolsize());
    }
    if (from.has_tschchartserieslinevaluelabelposition()) {
      set_tschchartserieslinevaluelabelposition(from.tschchartserieslinevaluelabelposition());
    }
    if (from.has_tschchartseriesareafill()) {
      mutable_tschchartseriesareafill()->::TSD::FillArchive::MergeFrom(from.tschchartseriesareafill());
    }
    if (from.has_tschchartseriesareastroke()) {
      mutable_tschchartseriesareastroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartseriesareastroke());
    }
    if (from.has_tschchartseriesareavaluelabelposition()) {
      set_tschchartseriesareavaluelabelposition(from.tschchartseriesareavaluelabelposition());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_tschchartseriesareasymbolfill()) {
      mutable_tschchartseriesareasymbolfill()->::TSD::FillArchive::MergeFrom(from.tschchartseriesareasymbolfill());
    }
    if (from.has_tschchartseriesareasymbolstroke()) {
      mutable_tschchartseriesareasymbolstroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartseriesareasymbolstroke());
    }
    if (from.has_tschchartseriesareasymbolsize()) {
      set_tschchartseriesareasymbolsize(from.tschchartseriesareasymbolsize());
    }
    if (from.has_tschchartseriespiefill()) {
      mutable_tschchartseriespiefill()->::TSD::FillArchive::MergeFrom(from.tschchartseriespiefill());
    }
    if (from.has_tschchartseriespiestroke()) {
      mutable_tschchartseriespiestroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartseriespiestroke());
    }
    if (from.has_tschchartseriesscatterstroke()) {
      mutable_tschchartseriesscatterstroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartseriesscatterstroke());
    }
    if (from.has_tschchartseriesscattersymbolfill()) {
      mutable_tschchartseriesscattersymbolfill()->::TSD::FillArchive::MergeFrom(from.tschchartseriesscattersymbolfill());
    }
    if (from.has_tschchartseriesscattersymbolstroke()) {
      mutable_tschchartseriesscattersymbolstroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartseriesscattersymbolstroke());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_tschchartseriesscattersymbolsize()) {
      set_tschchartseriesscattersymbolsize(from.tschchartseriesscattersymbolsize());
    }
    if (from.has_tschchartseriesscattervaluelabelposition()) {
      set_tschchartseriesscattervaluelabelposition(from.tschchartseriesscattervaluelabelposition());
    }
    if (from.has_tschchartseriesdefaultfill()) {
      mutable_tschchartseriesdefaultfill()->::TSD::FillArchive::MergeFrom(from.tschchartseriesdefaultfill());
    }
    if (from.has_tschchartseriesdefaultvaluelabelposition()) {
      set_tschchartseriesdefaultvaluelabelposition(from.tschchartseriesdefaultvaluelabelposition());
    }
    if (from.has_tschchartseriespiedeprecatedserieslabelson()) {
      set_tschchartseriespiedeprecatedserieslabelson(from.tschchartseriespiedeprecatedserieslabelson());
    }
    if (from.has_tschchartseriescolumnfill()) {
      mutable_tschchartseriescolumnfill()->::TSD::FillArchive::MergeFrom(from.tschchartseriescolumnfill());
    }
    if (from.has_tschchartseriespieshadow()) {
      mutable_tschchartseriespieshadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartseriespieshadow());
    }
    if (from.has_tschchartseriesbarshadow()) {
      mutable_tschchartseriesbarshadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartseriesbarshadow());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_tschchartseriesareashadow()) {
      mutable_tschchartseriesareashadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartseriesareashadow());
    }
    if (from.has_tschchartseriesscattershadow()) {
      mutable_tschchartseriesscattershadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartseriesscattershadow());
    }
    if (from.has_tschchartseriesmixedlineshadow()) {
      mutable_tschchartseriesmixedlineshadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartseriesmixedlineshadow());
    }
    if (from.has_tschchartseriesmixedareashadow()) {
      mutable_tschchartseriesmixedareashadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartseriesmixedareashadow());
    }
    if (from.has_tschchartseriesmixedcolumnshadow()) {
      mutable_tschchartseriesmixedcolumnshadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartseriesmixedcolumnshadow());
    }
    if (from.has_tschchartserieslineshadow()) {
      mutable_tschchartserieslineshadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartserieslineshadow());
    }
    if (from.has_tschchartseriesdefaultshadow()) {
      mutable_tschchartseriesdefaultshadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartseriesdefaultshadow());
    }
    if (from.has_tschchartseriesbubblesymbolfill()) {
      mutable_tschchartseriesbubblesymbolfill()->::TSD::FillArchive::MergeFrom(from.tschchartseriesbubblesymbolfill());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_tschchartseriesbubblestroke()) {
      mutable_tschchartseriesbubblestroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartseriesbubblestroke());
    }
    if (from.has_tschchartseriesbubblesymbolstroke()) {
      mutable_tschchartseriesbubblesymbolstroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartseriesbubblesymbolstroke());
    }
    if (from.has_tschchartseriesbubblevaluelabelposition()) {
      set_tschchartseriesbubblevaluelabelposition(from.tschchartseriesbubblevaluelabelposition());
    }
    if (from.has_tschchartseriesbubbleshadow()) {
      mutable_tschchartseriesbubbleshadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartseriesbubbleshadow());
    }
    if (from.has_tschchartseriesbubblesymbolfilluseseriesstroke()) {
      set_tschchartseriesbubblesymbolfilluseseriesstroke(from.tschchartseriesbubblesymbolfilluseseriesstroke());
    }
    if (from.has_tschchartseries3dbarshadow()) {
      mutable_tschchartseries3dbarshadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartseries3dbarshadow());
    }
    if (from.has_tschchartseries3dcolumnshadow()) {
      mutable_tschchartseries3dcolumnshadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartseries3dcolumnshadow());
    }
    if (from.has_tschchartseries3dlineshadow()) {
      mutable_tschchartseries3dlineshadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartseries3dlineshadow());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_tschchartseries3dareashadow()) {
      mutable_tschchartseries3dareashadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartseries3dareashadow());
    }
    if (from.has_tschchartseries3dpieshadow()) {
      mutable_tschchartseries3dpieshadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartseries3dpieshadow());
    }
    if (from.has_tschchartseriesdefaultlabelparagraphstyleindex()) {
      set_tschchartseriesdefaultlabelparagraphstyleindex(from.tschchartseriesdefaultlabelparagraphstyleindex());
    }
    if (from.has_tschchartseriesbarlabelparagraphstyleindex()) {
      set_tschchartseriesbarlabelparagraphstyleindex(from.tschchartseriesbarlabelparagraphstyleindex());
    }
    if (from.has_tschchartserieslinelabelparagraphstyleindex()) {
      set_tschchartserieslinelabelparagraphstyleindex(from.tschchartserieslinelabelparagraphstyleindex());
    }
    if (from.has_tschchartseriesarealabelparagraphstyleindex()) {
      set_tschchartseriesarealabelparagraphstyleindex(from.tschchartseriesarealabelparagraphstyleindex());
    }
    if (from.has_tschchartseriespielabelparagraphstyleindex()) {
      set_tschchartseriespielabelparagraphstyleindex(from.tschchartseriespielabelparagraphstyleindex());
    }
    if (from.has_tschchartseriesmixedlabelparagraphstyleindex()) {
      set_tschchartseriesmixedlabelparagraphstyleindex(from.tschchartseriesmixedlabelparagraphstyleindex());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_tschchartseriesdefaultopacity()) {
      set_tschchartseriesdefaultopacity(from.tschchartseriesdefaultopacity());
    }
    if (from.has_tschchartserieslinesymbolfilluseseriesstroke()) {
      set_tschchartserieslinesymbolfilluseseriesstroke(from.tschchartserieslinesymbolfilluseseriesstroke());
    }
    if (from.has_tschchartseriesareasymbolfilluseseriesstroke()) {
      set_tschchartseriesareasymbolfilluseseriesstroke(from.tschchartseriesareasymbolfilluseseriesstroke());
    }
    if (from.has_tschchartseriesscattersymbolfilluseseriesstroke()) {
      set_tschchartseriesscattersymbolfilluseseriesstroke(from.tschchartseriesscattersymbolfilluseseriesstroke());
    }
    if (from.has_tschchartseriesmixedlinesymbolfilluseseriesstroke()) {
      set_tschchartseriesmixedlinesymbolfilluseseriesstroke(from.tschchartseriesmixedlinesymbolfilluseseriesstroke());
    }
    if (from.has_tschchartseriesmixedareasymbolfilluseseriesstroke()) {
      set_tschchartseriesmixedareasymbolfilluseseriesstroke(from.tschchartseriesmixedareasymbolfilluseseriesstroke());
    }
    if (from.has_tschchartserieslinesymbolfilluseseriesfill()) {
      set_tschchartserieslinesymbolfilluseseriesfill(from.tschchartserieslinesymbolfilluseseriesfill());
    }
    if (from.has_tschchartseriesareasymbolfilluseseriesfill()) {
      set_tschchartseriesareasymbolfilluseseriesfill(from.tschchartseriesareasymbolfilluseseriesfill());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_tschchartseriesmixedlinesymbolfilluseseriesfill()) {
      set_tschchartseriesmixedlinesymbolfilluseseriesfill(from.tschchartseriesmixedlinesymbolfilluseseriesfill());
    }
    if (from.has_tschchartseriesmixedareasymbolfilluseseriesfill()) {
      set_tschchartseriesmixedareasymbolfilluseseriesfill(from.tschchartseriesmixedareasymbolfilluseseriesfill());
    }
    if (from.has_tschchartseriesmixedcolumnfill()) {
      mutable_tschchartseriesmixedcolumnfill()->::TSD::FillArchive::MergeFrom(from.tschchartseriesmixedcolumnfill());
    }
    if (from.has_tschchartseriesmixedareafill()) {
      mutable_tschchartseriesmixedareafill()->::TSD::FillArchive::MergeFrom(from.tschchartseriesmixedareafill());
    }
    if (from.has_tschchartseriesmixedcolumnstroke()) {
      mutable_tschchartseriesmixedcolumnstroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartseriesmixedcolumnstroke());
    }
    if (from.has_tschchartseriesmixedlinestroke()) {
      mutable_tschchartseriesmixedlinestroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartseriesmixedlinestroke());
    }
    if (from.has_tschchartseriesmixedareastroke()) {
      mutable_tschchartseriesmixedareastroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartseriesmixedareastroke());
    }
    if (from.has_tschchartseriesmixedlinesymbolsize()) {
      set_tschchartseriesmixedlinesymbolsize(from.tschchartseriesmixedlinesymbolsize());
    }
  }
  if (from._has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (from.has_tschchartseriesmixedareasymbolsize()) {
      set_tschchartseriesmixedareasymbolsize(from.tschchartseriesmixedareasymbolsize());
    }
    if (from.has_tschchartseriesmixedlinesymbolfill()) {
      mutable_tschchartseriesmixedlinesymbolfill()->::TSD::FillArchive::MergeFrom(from.tschchartseriesmixedlinesymbolfill());
    }
    if (from.has_tschchartseriesmixedareasymbolfill()) {
      mutable_tschchartseriesmixedareasymbolfill()->::TSD::FillArchive::MergeFrom(from.tschchartseriesmixedareasymbolfill());
    }
    if (from.has_tschchartseriesmixedlinesymbolstroke()) {
      mutable_tschchartseriesmixedlinesymbolstroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartseriesmixedlinesymbolstroke());
    }
    if (from.has_tschchartseriesmixedareasymbolstroke()) {
      mutable_tschchartseriesmixedareasymbolstroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartseriesmixedareasymbolstroke());
    }
    if (from.has_tschchartseriesmixedcolumnvaluelabelposition()) {
      set_tschchartseriesmixedcolumnvaluelabelposition(from.tschchartseriesmixedcolumnvaluelabelposition());
    }
    if (from.has_tschchartseriesmixedlinevaluelabelposition()) {
      set_tschchartseriesmixedlinevaluelabelposition(from.tschchartseriesmixedlinevaluelabelposition());
    }
    if (from.has_tschchartseriesmixedareavaluelabelposition()) {
      set_tschchartseriesmixedareavaluelabelposition(from.tschchartseriesmixedareavaluelabelposition());
    }
  }
  if (from._has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    if (from.has_tschchartseriesdefaultoutsidelabelparagraphstyleindex()) {
      set_tschchartseriesdefaultoutsidelabelparagraphstyleindex(from.tschchartseriesdefaultoutsidelabelparagraphstyleindex());
    }
    if (from.has_tschchartseriesbaroutsidelabelparagraphstyleindex()) {
      set_tschchartseriesbaroutsidelabelparagraphstyleindex(from.tschchartseriesbaroutsidelabelparagraphstyleindex());
    }
    if (from.has_tschchartseriesareaoutsidelabelparagraphstyleindex()) {
      set_tschchartseriesareaoutsidelabelparagraphstyleindex(from.tschchartseriesareaoutsidelabelparagraphstyleindex());
    }
    if (from.has_tschchartseriespieoutsidelabelparagraphstyleindex()) {
      set_tschchartseriespieoutsidelabelparagraphstyleindex(from.tschchartseriespieoutsidelabelparagraphstyleindex());
    }
    if (from.has_tschchartseriesmixedoutsidelabelparagraphstyleindex()) {
      set_tschchartseriesmixedoutsidelabelparagraphstyleindex(from.tschchartseriesmixedoutsidelabelparagraphstyleindex());
    }
    if (from.has_tschchartseriesstackedbarvaluelabelposition()) {
      set_tschchartseriesstackedbarvaluelabelposition(from.tschchartseriesstackedbarvaluelabelposition());
    }
    if (from.has_tschchartseriesstackedareavaluelabelposition()) {
      set_tschchartseriesstackedareavaluelabelposition(from.tschchartseriesstackedareavaluelabelposition());
    }
    if (from.has_tschchartseriesdefaulttrendlinestroke()) {
      mutable_tschchartseriesdefaulttrendlinestroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartseriesdefaulttrendlinestroke());
    }
  }
  if (from._has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    if (from.has_tschchartseriesdefaulttrendlineshadow()) {
      mutable_tschchartseriesdefaulttrendlineshadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartseriesdefaulttrendlineshadow());
    }
    if (from.has_tschchartseriesdefaulterrorbarshadow()) {
      mutable_tschchartseriesdefaulterrorbarshadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartseriesdefaulterrorbarshadow());
    }
    if (from.has_tschchartseriesdefaulterrorbarstroke()) {
      mutable_tschchartseriesdefaulterrorbarstroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartseriesdefaulterrorbarstroke());
    }
    if (from.has_tschchartseriesdefaulterrorbarstrokescatterx()) {
      mutable_tschchartseriesdefaulterrorbarstrokescatterx()->::TSD::StrokeArchive::MergeFrom(from.tschchartseriesdefaulterrorbarstrokescatterx());
    }
    if (from.has_tschchartseriesdefaulterrorbarlineend()) {
      mutable_tschchartseriesdefaulterrorbarlineend()->::TSD::LineEndArchive::MergeFrom(from.tschchartseriesdefaulterrorbarlineend());
    }
    if (from.has_tschchartseriesdefaulterrorbarlineendscatterx()) {
      mutable_tschchartseriesdefaulterrorbarlineendscatterx()->::TSD::LineEndArchive::MergeFrom(from.tschchartseriesdefaulterrorbarlineendscatterx());
    }
    if (from.has_tschchartseriesdefaultdeprecated3dfill()) {
      mutable_tschchartseriesdefaultdeprecated3dfill()->::TSCH::DEPRECATEDChart3DFillArchive::MergeFrom(from.tschchartseriesdefaultdeprecated3dfill());
    }
    if (from.has_tschchartseriesbardeprecated3dfill()) {
      mutable_tschchartseriesbardeprecated3dfill()->::TSCH::DEPRECATEDChart3DFillArchive::MergeFrom(from.tschchartseriesbardeprecated3dfill());
    }
  }
  if (from._has_bits_[96 / 32] & (0xffu << (96 % 32))) {
    if (from.has_tschchartseriescolumndeprecated3dfill()) {
      mutable_tschchartseriescolumndeprecated3dfill()->::TSCH::DEPRECATEDChart3DFillArchive::MergeFrom(from.tschchartseriescolumndeprecated3dfill());
    }
    if (from.has_tschchartserieslinedeprecated3dfill()) {
      mutable_tschchartserieslinedeprecated3dfill()->::TSCH::DEPRECATEDChart3DFillArchive::MergeFrom(from.tschchartserieslinedeprecated3dfill());
    }
    if (from.has_tschchartseriesareadeprecated3dfill()) {
      mutable_tschchartseriesareadeprecated3dfill()->::TSCH::DEPRECATEDChart3DFillArchive::MergeFrom(from.tschchartseriesareadeprecated3dfill());
    }
    if (from.has_tschchartseriespiedeprecated3dfill()) {
      mutable_tschchartseriespiedeprecated3dfill()->::TSCH::DEPRECATEDChart3DFillArchive::MergeFrom(from.tschchartseriespiedeprecated3dfill());
    }
    if (from.has_tschchartseries3dbarfill()) {
      mutable_tschchartseries3dbarfill()->::TSD::FillArchive::MergeFrom(from.tschchartseries3dbarfill());
    }
    if (from.has_tschchartseries3dcolumnfill()) {
      mutable_tschchartseries3dcolumnfill()->::TSD::FillArchive::MergeFrom(from.tschchartseries3dcolumnfill());
    }
    if (from.has_tschchartseries3dlinefill()) {
      mutable_tschchartseries3dlinefill()->::TSD::FillArchive::MergeFrom(from.tschchartseries3dlinefill());
    }
    if (from.has_tschchartseries3dareafill()) {
      mutable_tschchartseries3dareafill()->::TSD::FillArchive::MergeFrom(from.tschchartseries3dareafill());
    }
  }
  if (from._has_bits_[104 / 32] & (0xffu << (104 % 32))) {
    if (from.has_tschchartseries3dpiefill()) {
      mutable_tschchartseries3dpiefill()->::TSD::FillArchive::MergeFrom(from.tschchartseries3dpiefill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartSeriesStyleArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartSeriesStyleArchive::CopyFrom(const ChartSeriesStyleArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartSeriesStyleArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_tschchartseriesbarfill()) {
    if (!this->tschchartseriesbarfill().IsInitialized()) return false;
  }
  if (has_tschchartseriesbarstroke()) {
    if (!this->tschchartseriesbarstroke().IsInitialized()) return false;
  }
  if (has_tschchartserieslinestroke()) {
    if (!this->tschchartserieslinestroke().IsInitialized()) return false;
  }
  if (has_tschchartserieslinesymbolfill()) {
    if (!this->tschchartserieslinesymbolfill().IsInitialized()) return false;
  }
  if (has_tschchartserieslinesymbolstroke()) {
    if (!this->tschchartserieslinesymbolstroke().IsInitialized()) return false;
  }
  if (has_tschchartseriesareafill()) {
    if (!this->tschchartseriesareafill().IsInitialized()) return false;
  }
  if (has_tschchartseriesareastroke()) {
    if (!this->tschchartseriesareastroke().IsInitialized()) return false;
  }
  if (has_tschchartseriesareasymbolfill()) {
    if (!this->tschchartseriesareasymbolfill().IsInitialized()) return false;
  }
  if (has_tschchartseriesareasymbolstroke()) {
    if (!this->tschchartseriesareasymbolstroke().IsInitialized()) return false;
  }
  if (has_tschchartseriespiefill()) {
    if (!this->tschchartseriespiefill().IsInitialized()) return false;
  }
  if (has_tschchartseriespiestroke()) {
    if (!this->tschchartseriespiestroke().IsInitialized()) return false;
  }
  if (has_tschchartseriesscatterstroke()) {
    if (!this->tschchartseriesscatterstroke().IsInitialized()) return false;
  }
  if (has_tschchartseriesscattersymbolfill()) {
    if (!this->tschchartseriesscattersymbolfill().IsInitialized()) return false;
  }
  if (has_tschchartseriesscattersymbolstroke()) {
    if (!this->tschchartseriesscattersymbolstroke().IsInitialized()) return false;
  }
  if (has_tschchartseriesdefaultfill()) {
    if (!this->tschchartseriesdefaultfill().IsInitialized()) return false;
  }
  if (has_tschchartseriescolumnfill()) {
    if (!this->tschchartseriescolumnfill().IsInitialized()) return false;
  }
  if (has_tschchartseriespieshadow()) {
    if (!this->tschchartseriespieshadow().IsInitialized()) return false;
  }
  if (has_tschchartseriesbarshadow()) {
    if (!this->tschchartseriesbarshadow().IsInitialized()) return false;
  }
  if (has_tschchartseriesareashadow()) {
    if (!this->tschchartseriesareashadow().IsInitialized()) return false;
  }
  if (has_tschchartseriesscattershadow()) {
    if (!this->tschchartseriesscattershadow().IsInitialized()) return false;
  }
  if (has_tschchartseriesmixedlineshadow()) {
    if (!this->tschchartseriesmixedlineshadow().IsInitialized()) return false;
  }
  if (has_tschchartseriesmixedareashadow()) {
    if (!this->tschchartseriesmixedareashadow().IsInitialized()) return false;
  }
  if (has_tschchartseriesmixedcolumnshadow()) {
    if (!this->tschchartseriesmixedcolumnshadow().IsInitialized()) return false;
  }
  if (has_tschchartserieslineshadow()) {
    if (!this->tschchartserieslineshadow().IsInitialized()) return false;
  }
  if (has_tschchartseriesdefaultshadow()) {
    if (!this->tschchartseriesdefaultshadow().IsInitialized()) return false;
  }
  if (has_tschchartseriesbubblesymbolfill()) {
    if (!this->tschchartseriesbubblesymbolfill().IsInitialized()) return false;
  }
  if (has_tschchartseriesbubblestroke()) {
    if (!this->tschchartseriesbubblestroke().IsInitialized()) return false;
  }
  if (has_tschchartseriesbubblesymbolstroke()) {
    if (!this->tschchartseriesbubblesymbolstroke().IsInitialized()) return false;
  }
  if (has_tschchartseriesbubbleshadow()) {
    if (!this->tschchartseriesbubbleshadow().IsInitialized()) return false;
  }
  if (has_tschchartseries3dbarshadow()) {
    if (!this->tschchartseries3dbarshadow().IsInitialized()) return false;
  }
  if (has_tschchartseries3dcolumnshadow()) {
    if (!this->tschchartseries3dcolumnshadow().IsInitialized()) return false;
  }
  if (has_tschchartseries3dlineshadow()) {
    if (!this->tschchartseries3dlineshadow().IsInitialized()) return false;
  }
  if (has_tschchartseries3dareashadow()) {
    if (!this->tschchartseries3dareashadow().IsInitialized()) return false;
  }
  if (has_tschchartseries3dpieshadow()) {
    if (!this->tschchartseries3dpieshadow().IsInitialized()) return false;
  }
  if (has_tschchartseriesmixedcolumnfill()) {
    if (!this->tschchartseriesmixedcolumnfill().IsInitialized()) return false;
  }
  if (has_tschchartseriesmixedareafill()) {
    if (!this->tschchartseriesmixedareafill().IsInitialized()) return false;
  }
  if (has_tschchartseriesmixedcolumnstroke()) {
    if (!this->tschchartseriesmixedcolumnstroke().IsInitialized()) return false;
  }
  if (has_tschchartseriesmixedlinestroke()) {
    if (!this->tschchartseriesmixedlinestroke().IsInitialized()) return false;
  }
  if (has_tschchartseriesmixedareastroke()) {
    if (!this->tschchartseriesmixedareastroke().IsInitialized()) return false;
  }
  if (has_tschchartseriesmixedlinesymbolfill()) {
    if (!this->tschchartseriesmixedlinesymbolfill().IsInitialized()) return false;
  }
  if (has_tschchartseriesmixedareasymbolfill()) {
    if (!this->tschchartseriesmixedareasymbolfill().IsInitialized()) return false;
  }
  if (has_tschchartseriesmixedlinesymbolstroke()) {
    if (!this->tschchartseriesmixedlinesymbolstroke().IsInitialized()) return false;
  }
  if (has_tschchartseriesmixedareasymbolstroke()) {
    if (!this->tschchartseriesmixedareasymbolstroke().IsInitialized()) return false;
  }
  if (has_tschchartseriesdefaulttrendlinestroke()) {
    if (!this->tschchartseriesdefaulttrendlinestroke().IsInitialized()) return false;
  }
  if (has_tschchartseriesdefaulttrendlineshadow()) {
    if (!this->tschchartseriesdefaulttrendlineshadow().IsInitialized()) return false;
  }
  if (has_tschchartseriesdefaulterrorbarshadow()) {
    if (!this->tschchartseriesdefaulterrorbarshadow().IsInitialized()) return false;
  }
  if (has_tschchartseriesdefaulterrorbarstroke()) {
    if (!this->tschchartseriesdefaulterrorbarstroke().IsInitialized()) return false;
  }
  if (has_tschchartseriesdefaulterrorbarstrokescatterx()) {
    if (!this->tschchartseriesdefaulterrorbarstrokescatterx().IsInitialized()) return false;
  }
  if (has_tschchartseriesdefaulterrorbarlineend()) {
    if (!this->tschchartseriesdefaulterrorbarlineend().IsInitialized()) return false;
  }
  if (has_tschchartseriesdefaulterrorbarlineendscatterx()) {
    if (!this->tschchartseriesdefaulterrorbarlineendscatterx().IsInitialized()) return false;
  }
  if (has_tschchartseriesdefaultdeprecated3dfill()) {
    if (!this->tschchartseriesdefaultdeprecated3dfill().IsInitialized()) return false;
  }
  if (has_tschchartseriesbardeprecated3dfill()) {
    if (!this->tschchartseriesbardeprecated3dfill().IsInitialized()) return false;
  }
  if (has_tschchartseriescolumndeprecated3dfill()) {
    if (!this->tschchartseriescolumndeprecated3dfill().IsInitialized()) return false;
  }
  if (has_tschchartserieslinedeprecated3dfill()) {
    if (!this->tschchartserieslinedeprecated3dfill().IsInitialized()) return false;
  }
  if (has_tschchartseriesareadeprecated3dfill()) {
    if (!this->tschchartseriesareadeprecated3dfill().IsInitialized()) return false;
  }
  if (has_tschchartseriespiedeprecated3dfill()) {
    if (!this->tschchartseriespiedeprecated3dfill().IsInitialized()) return false;
  }
  if (has_tschchartseries3dbarfill()) {
    if (!this->tschchartseries3dbarfill().IsInitialized()) return false;
  }
  if (has_tschchartseries3dcolumnfill()) {
    if (!this->tschchartseries3dcolumnfill().IsInitialized()) return false;
  }
  if (has_tschchartseries3dlinefill()) {
    if (!this->tschchartseries3dlinefill().IsInitialized()) return false;
  }
  if (has_tschchartseries3dareafill()) {
    if (!this->tschchartseries3dareafill().IsInitialized()) return false;
  }
  if (has_tschchartseries3dpiefill()) {
    if (!this->tschchartseries3dpiefill().IsInitialized()) return false;
  }
  return true;
}

void ChartSeriesStyleArchive::Swap(ChartSeriesStyleArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(tschchartseriesdefaulttrendlineequationparagraphstyleindex_, other->tschchartseriesdefaulttrendlineequationparagraphstyleindex_);
    std::swap(tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_, other->tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_);
    std::swap(tschchartseriesdefaulttrendlineequationopacity_, other->tschchartseriesdefaulttrendlineequationopacity_);
    std::swap(tschchartseriesdefaulttrendlinersquaredopacity_, other->tschchartseriesdefaulttrendlinersquaredopacity_);
    std::swap(tschchartseriesbarfill_, other->tschchartseriesbarfill_);
    std::swap(tschchartseriesbarstroke_, other->tschchartseriesbarstroke_);
    std::swap(tschchartseriesbarvaluelabelposition_, other->tschchartseriesbarvaluelabelposition_);
    std::swap(tschchartserieslinestroke_, other->tschchartserieslinestroke_);
    std::swap(tschchartserieslinesymbolfill_, other->tschchartserieslinesymbolfill_);
    std::swap(tschchartserieslinesymbolstroke_, other->tschchartserieslinesymbolstroke_);
    std::swap(tschchartserieslinesymbolsize_, other->tschchartserieslinesymbolsize_);
    std::swap(tschchartserieslinevaluelabelposition_, other->tschchartserieslinevaluelabelposition_);
    std::swap(tschchartseriesareafill_, other->tschchartseriesareafill_);
    std::swap(tschchartseriesareastroke_, other->tschchartseriesareastroke_);
    std::swap(tschchartseriesareavaluelabelposition_, other->tschchartseriesareavaluelabelposition_);
    std::swap(tschchartseriesareasymbolfill_, other->tschchartseriesareasymbolfill_);
    std::swap(tschchartseriesareasymbolstroke_, other->tschchartseriesareasymbolstroke_);
    std::swap(tschchartseriesareasymbolsize_, other->tschchartseriesareasymbolsize_);
    std::swap(tschchartseriespiefill_, other->tschchartseriespiefill_);
    std::swap(tschchartseriespiestroke_, other->tschchartseriespiestroke_);
    std::swap(tschchartseriesscatterstroke_, other->tschchartseriesscatterstroke_);
    std::swap(tschchartseriesscattersymbolfill_, other->tschchartseriesscattersymbolfill_);
    std::swap(tschchartseriesscattersymbolstroke_, other->tschchartseriesscattersymbolstroke_);
    std::swap(tschchartseriesscattersymbolsize_, other->tschchartseriesscattersymbolsize_);
    std::swap(tschchartseriesscattervaluelabelposition_, other->tschchartseriesscattervaluelabelposition_);
    std::swap(tschchartseriesdefaultfill_, other->tschchartseriesdefaultfill_);
    std::swap(tschchartseriesdefaultvaluelabelposition_, other->tschchartseriesdefaultvaluelabelposition_);
    std::swap(tschchartseriespiedeprecatedserieslabelson_, other->tschchartseriespiedeprecatedserieslabelson_);
    std::swap(tschchartseriescolumnfill_, other->tschchartseriescolumnfill_);
    std::swap(tschchartseriespieshadow_, other->tschchartseriespieshadow_);
    std::swap(tschchartseriesbarshadow_, other->tschchartseriesbarshadow_);
    std::swap(tschchartseriesareashadow_, other->tschchartseriesareashadow_);
    std::swap(tschchartseriesscattershadow_, other->tschchartseriesscattershadow_);
    std::swap(tschchartseriesmixedlineshadow_, other->tschchartseriesmixedlineshadow_);
    std::swap(tschchartseriesmixedareashadow_, other->tschchartseriesmixedareashadow_);
    std::swap(tschchartseriesmixedcolumnshadow_, other->tschchartseriesmixedcolumnshadow_);
    std::swap(tschchartserieslineshadow_, other->tschchartserieslineshadow_);
    std::swap(tschchartseriesdefaultshadow_, other->tschchartseriesdefaultshadow_);
    std::swap(tschchartseriesbubblesymbolfill_, other->tschchartseriesbubblesymbolfill_);
    std::swap(tschchartseriesbubblestroke_, other->tschchartseriesbubblestroke_);
    std::swap(tschchartseriesbubblesymbolstroke_, other->tschchartseriesbubblesymbolstroke_);
    std::swap(tschchartseriesbubblevaluelabelposition_, other->tschchartseriesbubblevaluelabelposition_);
    std::swap(tschchartseriesbubbleshadow_, other->tschchartseriesbubbleshadow_);
    std::swap(tschchartseriesbubblesymbolfilluseseriesstroke_, other->tschchartseriesbubblesymbolfilluseseriesstroke_);
    std::swap(tschchartseries3dbarshadow_, other->tschchartseries3dbarshadow_);
    std::swap(tschchartseries3dcolumnshadow_, other->tschchartseries3dcolumnshadow_);
    std::swap(tschchartseries3dlineshadow_, other->tschchartseries3dlineshadow_);
    std::swap(tschchartseries3dareashadow_, other->tschchartseries3dareashadow_);
    std::swap(tschchartseries3dpieshadow_, other->tschchartseries3dpieshadow_);
    std::swap(tschchartseriesdefaultlabelparagraphstyleindex_, other->tschchartseriesdefaultlabelparagraphstyleindex_);
    std::swap(tschchartseriesbarlabelparagraphstyleindex_, other->tschchartseriesbarlabelparagraphstyleindex_);
    std::swap(tschchartserieslinelabelparagraphstyleindex_, other->tschchartserieslinelabelparagraphstyleindex_);
    std::swap(tschchartseriesarealabelparagraphstyleindex_, other->tschchartseriesarealabelparagraphstyleindex_);
    std::swap(tschchartseriespielabelparagraphstyleindex_, other->tschchartseriespielabelparagraphstyleindex_);
    std::swap(tschchartseriesmixedlabelparagraphstyleindex_, other->tschchartseriesmixedlabelparagraphstyleindex_);
    std::swap(tschchartseriesdefaultopacity_, other->tschchartseriesdefaultopacity_);
    std::swap(tschchartserieslinesymbolfilluseseriesstroke_, other->tschchartserieslinesymbolfilluseseriesstroke_);
    std::swap(tschchartseriesareasymbolfilluseseriesstroke_, other->tschchartseriesareasymbolfilluseseriesstroke_);
    std::swap(tschchartseriesscattersymbolfilluseseriesstroke_, other->tschchartseriesscattersymbolfilluseseriesstroke_);
    std::swap(tschchartseriesmixedlinesymbolfilluseseriesstroke_, other->tschchartseriesmixedlinesymbolfilluseseriesstroke_);
    std::swap(tschchartseriesmixedareasymbolfilluseseriesstroke_, other->tschchartseriesmixedareasymbolfilluseseriesstroke_);
    std::swap(tschchartserieslinesymbolfilluseseriesfill_, other->tschchartserieslinesymbolfilluseseriesfill_);
    std::swap(tschchartseriesareasymbolfilluseseriesfill_, other->tschchartseriesareasymbolfilluseseriesfill_);
    std::swap(tschchartseriesmixedlinesymbolfilluseseriesfill_, other->tschchartseriesmixedlinesymbolfilluseseriesfill_);
    std::swap(tschchartseriesmixedareasymbolfilluseseriesfill_, other->tschchartseriesmixedareasymbolfilluseseriesfill_);
    std::swap(tschchartseriesmixedcolumnfill_, other->tschchartseriesmixedcolumnfill_);
    std::swap(tschchartseriesmixedareafill_, other->tschchartseriesmixedareafill_);
    std::swap(tschchartseriesmixedcolumnstroke_, other->tschchartseriesmixedcolumnstroke_);
    std::swap(tschchartseriesmixedlinestroke_, other->tschchartseriesmixedlinestroke_);
    std::swap(tschchartseriesmixedareastroke_, other->tschchartseriesmixedareastroke_);
    std::swap(tschchartseriesmixedlinesymbolsize_, other->tschchartseriesmixedlinesymbolsize_);
    std::swap(tschchartseriesmixedareasymbolsize_, other->tschchartseriesmixedareasymbolsize_);
    std::swap(tschchartseriesmixedlinesymbolfill_, other->tschchartseriesmixedlinesymbolfill_);
    std::swap(tschchartseriesmixedareasymbolfill_, other->tschchartseriesmixedareasymbolfill_);
    std::swap(tschchartseriesmixedlinesymbolstroke_, other->tschchartseriesmixedlinesymbolstroke_);
    std::swap(tschchartseriesmixedareasymbolstroke_, other->tschchartseriesmixedareasymbolstroke_);
    std::swap(tschchartseriesmixedcolumnvaluelabelposition_, other->tschchartseriesmixedcolumnvaluelabelposition_);
    std::swap(tschchartseriesmixedlinevaluelabelposition_, other->tschchartseriesmixedlinevaluelabelposition_);
    std::swap(tschchartseriesmixedareavaluelabelposition_, other->tschchartseriesmixedareavaluelabelposition_);
    std::swap(tschchartseriesdefaultoutsidelabelparagraphstyleindex_, other->tschchartseriesdefaultoutsidelabelparagraphstyleindex_);
    std::swap(tschchartseriesbaroutsidelabelparagraphstyleindex_, other->tschchartseriesbaroutsidelabelparagraphstyleindex_);
    std::swap(tschchartseriesareaoutsidelabelparagraphstyleindex_, other->tschchartseriesareaoutsidelabelparagraphstyleindex_);
    std::swap(tschchartseriespieoutsidelabelparagraphstyleindex_, other->tschchartseriespieoutsidelabelparagraphstyleindex_);
    std::swap(tschchartseriesmixedoutsidelabelparagraphstyleindex_, other->tschchartseriesmixedoutsidelabelparagraphstyleindex_);
    std::swap(tschchartseriesstackedbarvaluelabelposition_, other->tschchartseriesstackedbarvaluelabelposition_);
    std::swap(tschchartseriesstackedareavaluelabelposition_, other->tschchartseriesstackedareavaluelabelposition_);
    std::swap(tschchartseriesdefaulttrendlinestroke_, other->tschchartseriesdefaulttrendlinestroke_);
    std::swap(tschchartseriesdefaulttrendlineshadow_, other->tschchartseriesdefaulttrendlineshadow_);
    std::swap(tschchartseriesdefaulterrorbarshadow_, other->tschchartseriesdefaulterrorbarshadow_);
    std::swap(tschchartseriesdefaulterrorbarstroke_, other->tschchartseriesdefaulterrorbarstroke_);
    std::swap(tschchartseriesdefaulterrorbarstrokescatterx_, other->tschchartseriesdefaulterrorbarstrokescatterx_);
    std::swap(tschchartseriesdefaulterrorbarlineend_, other->tschchartseriesdefaulterrorbarlineend_);
    std::swap(tschchartseriesdefaulterrorbarlineendscatterx_, other->tschchartseriesdefaulterrorbarlineendscatterx_);
    std::swap(tschchartseriesdefaultdeprecated3dfill_, other->tschchartseriesdefaultdeprecated3dfill_);
    std::swap(tschchartseriesbardeprecated3dfill_, other->tschchartseriesbardeprecated3dfill_);
    std::swap(tschchartseriescolumndeprecated3dfill_, other->tschchartseriescolumndeprecated3dfill_);
    std::swap(tschchartserieslinedeprecated3dfill_, other->tschchartserieslinedeprecated3dfill_);
    std::swap(tschchartseriesareadeprecated3dfill_, other->tschchartseriesareadeprecated3dfill_);
    std::swap(tschchartseriespiedeprecated3dfill_, other->tschchartseriespiedeprecated3dfill_);
    std::swap(tschchartseries3dbarfill_, other->tschchartseries3dbarfill_);
    std::swap(tschchartseries3dcolumnfill_, other->tschchartseries3dcolumnfill_);
    std::swap(tschchartseries3dlinefill_, other->tschchartseries3dlinefill_);
    std::swap(tschchartseries3dareafill_, other->tschchartseries3dareafill_);
    std::swap(tschchartseries3dpiefill_, other->tschchartseries3dpiefill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    std::swap(_has_bits_[3], other->_has_bits_[3]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChartSeriesStyleArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartSeriesStyleArchive_descriptor_;
  metadata.reflection = ChartSeriesStyleArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChartSeriesNonStyleArchive::kSuperFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaultnumberformatFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaultnumberformattypeFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesbarshowvaluelabelsFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartserieslinesymboltypeFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartserieslineshowsymbolFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartserieslineshowvaluelabelsFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesareashowvaluelabelsFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartserieslinelinetypeFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesareasymboltypeFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesareashowsymbolFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriespieshowvaluelabelsFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesscattershowvaluelabelsFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriespiewedgeexplosionFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaultshowvaluelabelsFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriespienumberformatFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriespienumberformattypeFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriespielabelexplosionFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesmixedlineshowsymbolFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesmixedareashowsymbolFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesmixedlinesymboltypeFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesmixedareasymboltypeFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesmixedshowvaluelabelsFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesmixedlinelinetypeFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaultyaxisordinalFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriespieshowserieslabelsFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesscattershowsymbolFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesscattersymboltypeFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesscatterlinetypeFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesscattershowlineFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesstackedpercentnumberformatFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaultseriestypeFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaulttrendlinetypeFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaulttrendlineorderFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaulttrendlineperiodFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaulttrendlineshowlabelFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaulttrendlinelabelstringFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaulttrendlineshowequationFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaulttrendlineshowr2ValueFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaulterrorbarsettingFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaulterrorbarsettingscatterxFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaulterrorbartypeFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaulterrorbartypescatterxFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaulterrorbarfixedvalueFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaulterrorbarfixedvaluescatterxFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaulterrorbarpercentvalueFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaulterrorbarpercentvaluescatterxFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaulterrorbarstddevvalueFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaulterrorbarstddevvaluescatterxFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaulterrorbarcustompositivedataFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaulterrorbarcustompositivedatascatterxFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaulterrorbarcustomnegativedataFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaulterrorbarcustomnegativedatascatterxFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaulttrendlineequationoffsetxFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaulttrendlineequationoffsetyFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaulttrendlinersquaredoffsetxFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaulttrendlinersquaredoffsetyFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaultshowtrendlineFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaultshowerrorbarFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaultshowerrorbarscatterxFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesbubblesizedimensionFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesbubbleshowvaluelabelsFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesbubblelinetypeFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesbubbleshownegativedataFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesbubbleadjustmentscaleFieldNumber;
#endif  // !_MSC_VER

ChartSeriesNonStyleArchive::ChartSeriesNonStyleArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartSeriesNonStyleArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSS::StyleArchive*>(&::TSS::StyleArchive::default_instance());
  tschchartseriesdefaultnumberformat_ = const_cast< ::TSCH::PreUFF::ChartsNumberFormatArchive*>(&::TSCH::PreUFF::ChartsNumberFormatArchive::default_instance());
  tschchartseriespienumberformat_ = const_cast< ::TSCH::PreUFF::ChartsNumberFormatArchive*>(&::TSCH::PreUFF::ChartsNumberFormatArchive::default_instance());
  tschchartseriesstackedpercentnumberformat_ = const_cast< ::TSCH::PreUFF::ChartsNumberFormatArchive*>(&::TSCH::PreUFF::ChartsNumberFormatArchive::default_instance());
  tschchartseriesdefaulterrorbarcustompositivedata_ = const_cast< ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive*>(&::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::default_instance());
  tschchartseriesdefaulterrorbarcustompositivedatascatterx_ = const_cast< ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive*>(&::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::default_instance());
  tschchartseriesdefaulterrorbarcustomnegativedata_ = const_cast< ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive*>(&::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::default_instance());
  tschchartseriesdefaulterrorbarcustomnegativedatascatterx_ = const_cast< ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive*>(&::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::default_instance());
}

ChartSeriesNonStyleArchive::ChartSeriesNonStyleArchive(const ChartSeriesNonStyleArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartSeriesNonStyleArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  tschchartseriesdefaultnumberformat_ = NULL;
  tschchartseriesdefaultnumberformattype_ = 0;
  tschchartseriesbarshowvaluelabels_ = false;
  tschchartserieslinesymboltype_ = 0;
  tschchartserieslineshowsymbol_ = false;
  tschchartserieslineshowvaluelabels_ = false;
  tschchartseriesareashowvaluelabels_ = false;
  tschchartserieslinelinetype_ = 0;
  tschchartseriesareasymboltype_ = 0;
  tschchartseriesareashowsymbol_ = false;
  tschchartseriespieshowvaluelabels_ = false;
  tschchartseriesscattershowvaluelabels_ = false;
  tschchartseriespiewedgeexplosion_ = 0;
  tschchartseriesdefaultshowvaluelabels_ = false;
  tschchartseriespienumberformat_ = NULL;
  tschchartseriespienumberformattype_ = 0;
  tschchartseriespielabelexplosion_ = 0;
  tschchartseriesmixedlineshowsymbol_ = false;
  tschchartseriesmixedareashowsymbol_ = false;
  tschchartseriesmixedlinesymboltype_ = 0;
  tschchartseriesmixedareasymboltype_ = 0;
  tschchartseriesmixedshowvaluelabels_ = false;
  tschchartseriesmixedlinelinetype_ = 0;
  tschchartseriesdefaultyaxisordinal_ = 0;
  tschchartseriespieshowserieslabels_ = false;
  tschchartseriesscattershowsymbol_ = false;
  tschchartseriesscattersymboltype_ = 0;
  tschchartseriesscatterlinetype_ = 0;
  tschchartseriesscattershowline_ = false;
  tschchartseriesstackedpercentnumberformat_ = NULL;
  tschchartseriesdefaultseriestype_ = 0;
  tschchartseriesdefaulttrendlinetype_ = 0;
  tschchartseriesdefaulttrendlineorder_ = 0;
  tschchartseriesdefaulttrendlineperiod_ = 0;
  tschchartseriesdefaulttrendlineshowlabel_ = false;
  tschchartseriesdefaulttrendlinelabelstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tschchartseriesdefaulttrendlineshowequation_ = false;
  tschchartseriesdefaulttrendlineshowr2value_ = false;
  tschchartseriesdefaulterrorbarsetting_ = 0;
  tschchartseriesdefaulterrorbarsettingscatterx_ = 0;
  tschchartseriesdefaulterrorbartype_ = 0;
  tschchartseriesdefaulterrorbartypescatterx_ = 0;
  tschchartseriesdefaulterrorbarfixedvalue_ = 0;
  tschchartseriesdefaulterrorbarfixedvaluescatterx_ = 0;
  tschchartseriesdefaulterrorbarpercentvalue_ = 0;
  tschchartseriesdefaulterrorbarpercentvaluescatterx_ = 0;
  tschchartseriesdefaulterrorbarstddevvalue_ = 0;
  tschchartseriesdefaulterrorbarstddevvaluescatterx_ = 0;
  tschchartseriesdefaulterrorbarcustompositivedata_ = NULL;
  tschchartseriesdefaulterrorbarcustompositivedatascatterx_ = NULL;
  tschchartseriesdefaulterrorbarcustomnegativedata_ = NULL;
  tschchartseriesdefaulterrorbarcustomnegativedatascatterx_ = NULL;
  tschchartseriesdefaulttrendlineequationoffsetx_ = 0;
  tschchartseriesdefaulttrendlineequationoffsety_ = 0;
  tschchartseriesdefaulttrendlinersquaredoffsetx_ = 0;
  tschchartseriesdefaulttrendlinersquaredoffsety_ = 0;
  tschchartseriesdefaultshowtrendline_ = false;
  tschchartseriesdefaultshowerrorbar_ = false;
  tschchartseriesdefaultshowerrorbarscatterx_ = false;
  tschchartseriesbubblesizedimension_ = 0;
  tschchartseriesbubbleshowvaluelabels_ = false;
  tschchartseriesbubblelinetype_ = 0;
  tschchartseriesbubbleshownegativedata_ = false;
  tschchartseriesbubbleadjustmentscale_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartSeriesNonStyleArchive::~ChartSeriesNonStyleArchive() {
  SharedDtor();
}

void ChartSeriesNonStyleArchive::SharedDtor() {
  if (tschchartseriesdefaulttrendlinelabelstring_ != &::google::protobuf::internal::kEmptyString) {
    delete tschchartseriesdefaulttrendlinelabelstring_;
  }
  if (this != default_instance_) {
    delete super_;
    delete tschchartseriesdefaultnumberformat_;
    delete tschchartseriespienumberformat_;
    delete tschchartseriesstackedpercentnumberformat_;
    delete tschchartseriesdefaulterrorbarcustompositivedata_;
    delete tschchartseriesdefaulterrorbarcustompositivedatascatterx_;
    delete tschchartseriesdefaulterrorbarcustomnegativedata_;
    delete tschchartseriesdefaulterrorbarcustomnegativedatascatterx_;
  }
}

void ChartSeriesNonStyleArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartSeriesNonStyleArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartSeriesNonStyleArchive_descriptor_;
}

const ChartSeriesNonStyleArchive& ChartSeriesNonStyleArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHPreUFFArchives_2eproto();
  return *default_instance_;
}

ChartSeriesNonStyleArchive* ChartSeriesNonStyleArchive::default_instance_ = NULL;

ChartSeriesNonStyleArchive* ChartSeriesNonStyleArchive::New() const {
  return new ChartSeriesNonStyleArchive;
}

void ChartSeriesNonStyleArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSS::StyleArchive::Clear();
    }
    if (has_tschchartseriesdefaultnumberformat()) {
      if (tschchartseriesdefaultnumberformat_ != NULL) tschchartseriesdefaultnumberformat_->::TSCH::PreUFF::ChartsNumberFormatArchive::Clear();
    }
    tschchartseriesdefaultnumberformattype_ = 0;
    tschchartseriesbarshowvaluelabels_ = false;
    tschchartserieslinesymboltype_ = 0;
    tschchartserieslineshowsymbol_ = false;
    tschchartserieslineshowvaluelabels_ = false;
    tschchartseriesareashowvaluelabels_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    tschchartserieslinelinetype_ = 0;
    tschchartseriesareasymboltype_ = 0;
    tschchartseriesareashowsymbol_ = false;
    tschchartseriespieshowvaluelabels_ = false;
    tschchartseriesscattershowvaluelabels_ = false;
    tschchartseriespiewedgeexplosion_ = 0;
    tschchartseriesdefaultshowvaluelabels_ = false;
    if (has_tschchartseriespienumberformat()) {
      if (tschchartseriespienumberformat_ != NULL) tschchartseriespienumberformat_->::TSCH::PreUFF::ChartsNumberFormatArchive::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    tschchartseriespienumberformattype_ = 0;
    tschchartseriespielabelexplosion_ = 0;
    tschchartseriesmixedlineshowsymbol_ = false;
    tschchartseriesmixedareashowsymbol_ = false;
    tschchartseriesmixedlinesymboltype_ = 0;
    tschchartseriesmixedareasymboltype_ = 0;
    tschchartseriesmixedshowvaluelabels_ = false;
    tschchartseriesmixedlinelinetype_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    tschchartseriesdefaultyaxisordinal_ = 0;
    tschchartseriespieshowserieslabels_ = false;
    tschchartseriesscattershowsymbol_ = false;
    tschchartseriesscattersymboltype_ = 0;
    tschchartseriesscatterlinetype_ = 0;
    tschchartseriesscattershowline_ = false;
    if (has_tschchartseriesstackedpercentnumberformat()) {
      if (tschchartseriesstackedpercentnumberformat_ != NULL) tschchartseriesstackedpercentnumberformat_->::TSCH::PreUFF::ChartsNumberFormatArchive::Clear();
    }
    tschchartseriesdefaultseriestype_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    tschchartseriesdefaulttrendlinetype_ = 0;
    tschchartseriesdefaulttrendlineorder_ = 0;
    tschchartseriesdefaulttrendlineperiod_ = 0;
    tschchartseriesdefaulttrendlineshowlabel_ = false;
    if (has_tschchartseriesdefaulttrendlinelabelstring()) {
      if (tschchartseriesdefaulttrendlinelabelstring_ != &::google::protobuf::internal::kEmptyString) {
        tschchartseriesdefaulttrendlinelabelstring_->clear();
      }
    }
    tschchartseriesdefaulttrendlineshowequation_ = false;
    tschchartseriesdefaulttrendlineshowr2value_ = false;
    tschchartseriesdefaulterrorbarsetting_ = 0;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    tschchartseriesdefaulterrorbarsettingscatterx_ = 0;
    tschchartseriesdefaulterrorbartype_ = 0;
    tschchartseriesdefaulterrorbartypescatterx_ = 0;
    tschchartseriesdefaulterrorbarfixedvalue_ = 0;
    tschchartseriesdefaulterrorbarfixedvaluescatterx_ = 0;
    tschchartseriesdefaulterrorbarpercentvalue_ = 0;
    tschchartseriesdefaulterrorbarpercentvaluescatterx_ = 0;
    tschchartseriesdefaulterrorbarstddevvalue_ = 0;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    tschchartseriesdefaulterrorbarstddevvaluescatterx_ = 0;
    if (has_tschchartseriesdefaulterrorbarcustompositivedata()) {
      if (tschchartseriesdefaulterrorbarcustompositivedata_ != NULL) tschchartseriesdefaulterrorbarcustompositivedata_->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::Clear();
    }
    if (has_tschchartseriesdefaulterrorbarcustompositivedatascatterx()) {
      if (tschchartseriesdefaulterrorbarcustompositivedatascatterx_ != NULL) tschchartseriesdefaulterrorbarcustompositivedatascatterx_->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::Clear();
    }
    if (has_tschchartseriesdefaulterrorbarcustomnegativedata()) {
      if (tschchartseriesdefaulterrorbarcustomnegativedata_ != NULL) tschchartseriesdefaulterrorbarcustomnegativedata_->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::Clear();
    }
    if (has_tschchartseriesdefaulterrorbarcustomnegativedatascatterx()) {
      if (tschchartseriesdefaulterrorbarcustomnegativedatascatterx_ != NULL) tschchartseriesdefaulterrorbarcustomnegativedatascatterx_->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::Clear();
    }
    tschchartseriesdefaulttrendlineequationoffsetx_ = 0;
    tschchartseriesdefaulttrendlineequationoffsety_ = 0;
    tschchartseriesdefaulttrendlinersquaredoffsetx_ = 0;
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    tschchartseriesdefaulttrendlinersquaredoffsety_ = 0;
    tschchartseriesdefaultshowtrendline_ = false;
    tschchartseriesdefaultshowerrorbar_ = false;
    tschchartseriesdefaultshowerrorbarscatterx_ = false;
    tschchartseriesbubblesizedimension_ = 0;
    tschchartseriesbubbleshowvaluelabels_ = false;
    tschchartseriesbubblelinetype_ = 0;
    tschchartseriesbubbleshownegativedata_ = false;
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    tschchartseriesbubbleadjustmentscale_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartSeriesNonStyleArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSS.StyleArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_tschchartseriesdefaultnumberformat;
        break;
      }

      // optional .TSCH.PreUFF.ChartsNumberFormatArchive tschchartseriesdefaultnumberformat = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesdefaultnumberformat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesdefaultnumberformat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_tschchartseriesdefaultnumberformattype;
        break;
      }

      // optional int32 tschchartseriesdefaultnumberformattype = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesdefaultnumberformattype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesdefaultnumberformattype_)));
          set_has_tschchartseriesdefaultnumberformattype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_tschchartseriesbarshowvaluelabels;
        break;
      }

      // optional bool tschchartseriesbarshowvaluelabels = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesbarshowvaluelabels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesbarshowvaluelabels_)));
          set_has_tschchartseriesbarshowvaluelabels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_tschchartserieslinesymboltype;
        break;
      }

      // optional int32 tschchartserieslinesymboltype = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartserieslinesymboltype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartserieslinesymboltype_)));
          set_has_tschchartserieslinesymboltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_tschchartserieslineshowsymbol;
        break;
      }

      // optional bool tschchartserieslineshowsymbol = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartserieslineshowsymbol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartserieslineshowsymbol_)));
          set_has_tschchartserieslineshowsymbol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_tschchartserieslineshowvaluelabels;
        break;
      }

      // optional bool tschchartserieslineshowvaluelabels = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartserieslineshowvaluelabels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartserieslineshowvaluelabels_)));
          set_has_tschchartserieslineshowvaluelabels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_tschchartseriesareashowvaluelabels;
        break;
      }

      // optional bool tschchartseriesareashowvaluelabels = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesareashowvaluelabels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesareashowvaluelabels_)));
          set_has_tschchartseriesareashowvaluelabels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_tschchartserieslinelinetype;
        break;
      }

      // optional int32 tschchartserieslinelinetype = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartserieslinelinetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartserieslinelinetype_)));
          set_has_tschchartserieslinelinetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_tschchartseriesareasymboltype;
        break;
      }

      // optional int32 tschchartseriesareasymboltype = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesareasymboltype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesareasymboltype_)));
          set_has_tschchartseriesareasymboltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_tschchartseriesareashowsymbol;
        break;
      }

      // optional bool tschchartseriesareashowsymbol = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesareashowsymbol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesareashowsymbol_)));
          set_has_tschchartseriesareashowsymbol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_tschchartseriespieshowvaluelabels;
        break;
      }

      // optional bool tschchartseriespieshowvaluelabels = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriespieshowvaluelabels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriespieshowvaluelabels_)));
          set_has_tschchartseriespieshowvaluelabels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_tschchartseriesscattershowvaluelabels;
        break;
      }

      // optional bool tschchartseriesscattershowvaluelabels = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesscattershowvaluelabels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesscattershowvaluelabels_)));
          set_has_tschchartseriesscattershowvaluelabels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(405)) goto parse_tschchartseriespiewedgeexplosion;
        break;
      }

      // optional float tschchartseriespiewedgeexplosion = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartseriespiewedgeexplosion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartseriespiewedgeexplosion_)));
          set_has_tschchartseriespiewedgeexplosion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_tschchartseriesdefaultshowvaluelabels;
        break;
      }

      // optional bool tschchartseriesdefaultshowvaluelabels = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesdefaultshowvaluelabels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesdefaultshowvaluelabels_)));
          set_has_tschchartseriesdefaultshowvaluelabels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(418)) goto parse_tschchartseriespienumberformat;
        break;
      }

      // optional .TSCH.PreUFF.ChartsNumberFormatArchive tschchartseriespienumberformat = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriespienumberformat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriespienumberformat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(424)) goto parse_tschchartseriespienumberformattype;
        break;
      }

      // optional int32 tschchartseriespienumberformattype = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriespienumberformattype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriespienumberformattype_)));
          set_has_tschchartseriespienumberformattype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(437)) goto parse_tschchartseriespielabelexplosion;
        break;
      }

      // optional float tschchartseriespielabelexplosion = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartseriespielabelexplosion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartseriespielabelexplosion_)));
          set_has_tschchartseriespielabelexplosion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(464)) goto parse_tschchartseriesmixedlineshowsymbol;
        break;
      }

      // optional bool tschchartseriesmixedlineshowsymbol = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesmixedlineshowsymbol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesmixedlineshowsymbol_)));
          set_has_tschchartseriesmixedlineshowsymbol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(472)) goto parse_tschchartseriesmixedareashowsymbol;
        break;
      }

      // optional bool tschchartseriesmixedareashowsymbol = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesmixedareashowsymbol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesmixedareashowsymbol_)));
          set_has_tschchartseriesmixedareashowsymbol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_tschchartseriesmixedlinesymboltype;
        break;
      }

      // optional int32 tschchartseriesmixedlinesymboltype = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesmixedlinesymboltype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesmixedlinesymboltype_)));
          set_has_tschchartseriesmixedlinesymboltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(488)) goto parse_tschchartseriesmixedareasymboltype;
        break;
      }

      // optional int32 tschchartseriesmixedareasymboltype = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesmixedareasymboltype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesmixedareasymboltype_)));
          set_has_tschchartseriesmixedareasymboltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(496)) goto parse_tschchartseriesmixedshowvaluelabels;
        break;
      }

      // optional bool tschchartseriesmixedshowvaluelabels = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesmixedshowvaluelabels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesmixedshowvaluelabels_)));
          set_has_tschchartseriesmixedshowvaluelabels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(504)) goto parse_tschchartseriesmixedlinelinetype;
        break;
      }

      // optional int32 tschchartseriesmixedlinelinetype = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesmixedlinelinetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesmixedlinelinetype_)));
          set_has_tschchartseriesmixedlinelinetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(520)) goto parse_tschchartseriesdefaultyaxisordinal;
        break;
      }

      // optional int32 tschchartseriesdefaultyaxisordinal = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesdefaultyaxisordinal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesdefaultyaxisordinal_)));
          set_has_tschchartseriesdefaultyaxisordinal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(528)) goto parse_tschchartseriespieshowserieslabels;
        break;
      }

      // optional bool tschchartseriespieshowserieslabels = 66;
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriespieshowserieslabels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriespieshowserieslabels_)));
          set_has_tschchartseriespieshowserieslabels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(552)) goto parse_tschchartseriesscattershowsymbol;
        break;
      }

      // optional bool tschchartseriesscattershowsymbol = 69;
      case 69: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesscattershowsymbol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesscattershowsymbol_)));
          set_has_tschchartseriesscattershowsymbol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(560)) goto parse_tschchartseriesscattersymboltype;
        break;
      }

      // optional int32 tschchartseriesscattersymboltype = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesscattersymboltype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesscattersymboltype_)));
          set_has_tschchartseriesscattersymboltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(568)) goto parse_tschchartseriesscatterlinetype;
        break;
      }

      // optional int32 tschchartseriesscatterlinetype = 71;
      case 71: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesscatterlinetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesscatterlinetype_)));
          set_has_tschchartseriesscatterlinetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(576)) goto parse_tschchartseriesscattershowline;
        break;
      }

      // optional bool tschchartseriesscattershowline = 72;
      case 72: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesscattershowline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesscattershowline_)));
          set_has_tschchartseriesscattershowline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(722)) goto parse_tschchartseriesstackedpercentnumberformat;
        break;
      }

      // optional .TSCH.PreUFF.ChartsNumberFormatArchive tschchartseriesstackedpercentnumberformat = 90;
      case 90: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesstackedpercentnumberformat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesstackedpercentnumberformat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1008)) goto parse_tschchartseriesdefaultseriestype;
        break;
      }

      // optional int32 tschchartseriesdefaultseriestype = 126;
      case 126: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesdefaultseriestype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesdefaultseriestype_)));
          set_has_tschchartseriesdefaultseriestype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1280)) goto parse_tschchartseriesdefaulttrendlinetype;
        break;
      }

      // optional int32 tschchartseriesdefaulttrendlinetype = 160;
      case 160: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesdefaulttrendlinetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesdefaulttrendlinetype_)));
          set_has_tschchartseriesdefaulttrendlinetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1288)) goto parse_tschchartseriesdefaulttrendlineorder;
        break;
      }

      // optional int32 tschchartseriesdefaulttrendlineorder = 161;
      case 161: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesdefaulttrendlineorder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesdefaulttrendlineorder_)));
          set_has_tschchartseriesdefaulttrendlineorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1296)) goto parse_tschchartseriesdefaulttrendlineperiod;
        break;
      }

      // optional int32 tschchartseriesdefaulttrendlineperiod = 162;
      case 162: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesdefaulttrendlineperiod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesdefaulttrendlineperiod_)));
          set_has_tschchartseriesdefaulttrendlineperiod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1304)) goto parse_tschchartseriesdefaulttrendlineshowlabel;
        break;
      }

      // optional bool tschchartseriesdefaulttrendlineshowlabel = 163;
      case 163: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesdefaulttrendlineshowlabel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesdefaulttrendlineshowlabel_)));
          set_has_tschchartseriesdefaulttrendlineshowlabel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1314)) goto parse_tschchartseriesdefaulttrendlinelabelstring;
        break;
      }

      // optional string tschchartseriesdefaulttrendlinelabelstring = 164;
      case 164: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesdefaulttrendlinelabelstring:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tschchartseriesdefaulttrendlinelabelstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tschchartseriesdefaulttrendlinelabelstring().data(), this->tschchartseriesdefaulttrendlinelabelstring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1320)) goto parse_tschchartseriesdefaulttrendlineshowequation;
        break;
      }

      // optional bool tschchartseriesdefaulttrendlineshowequation = 165;
      case 165: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesdefaulttrendlineshowequation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesdefaulttrendlineshowequation_)));
          set_has_tschchartseriesdefaulttrendlineshowequation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1328)) goto parse_tschchartseriesdefaulttrendlineshowr2value;
        break;
      }

      // optional bool tschchartseriesdefaulttrendlineshowr2value = 166;
      case 166: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesdefaulttrendlineshowr2value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesdefaulttrendlineshowr2value_)));
          set_has_tschchartseriesdefaulttrendlineshowr2value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1360)) goto parse_tschchartseriesdefaulterrorbarsetting;
        break;
      }

      // optional int32 tschchartseriesdefaulterrorbarsetting = 170;
      case 170: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesdefaulterrorbarsetting:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesdefaulterrorbarsetting_)));
          set_has_tschchartseriesdefaulterrorbarsetting();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1368)) goto parse_tschchartseriesdefaulterrorbarsettingscatterx;
        break;
      }

      // optional int32 tschchartseriesdefaulterrorbarsettingscatterx = 171;
      case 171: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesdefaulterrorbarsettingscatterx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesdefaulterrorbarsettingscatterx_)));
          set_has_tschchartseriesdefaulterrorbarsettingscatterx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1376)) goto parse_tschchartseriesdefaulterrorbartype;
        break;
      }

      // optional int32 tschchartseriesdefaulterrorbartype = 172;
      case 172: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesdefaulterrorbartype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesdefaulterrorbartype_)));
          set_has_tschchartseriesdefaulterrorbartype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1384)) goto parse_tschchartseriesdefaulterrorbartypescatterx;
        break;
      }

      // optional int32 tschchartseriesdefaulterrorbartypescatterx = 173;
      case 173: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesdefaulterrorbartypescatterx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesdefaulterrorbartypescatterx_)));
          set_has_tschchartseriesdefaulterrorbartypescatterx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1397)) goto parse_tschchartseriesdefaulterrorbarfixedvalue;
        break;
      }

      // optional float tschchartseriesdefaulterrorbarfixedvalue = 174;
      case 174: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartseriesdefaulterrorbarfixedvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartseriesdefaulterrorbarfixedvalue_)));
          set_has_tschchartseriesdefaulterrorbarfixedvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1405)) goto parse_tschchartseriesdefaulterrorbarfixedvaluescatterx;
        break;
      }

      // optional float tschchartseriesdefaulterrorbarfixedvaluescatterx = 175;
      case 175: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartseriesdefaulterrorbarfixedvaluescatterx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartseriesdefaulterrorbarfixedvaluescatterx_)));
          set_has_tschchartseriesdefaulterrorbarfixedvaluescatterx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1413)) goto parse_tschchartseriesdefaulterrorbarpercentvalue;
        break;
      }

      // optional float tschchartseriesdefaulterrorbarpercentvalue = 176;
      case 176: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartseriesdefaulterrorbarpercentvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartseriesdefaulterrorbarpercentvalue_)));
          set_has_tschchartseriesdefaulterrorbarpercentvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1421)) goto parse_tschchartseriesdefaulterrorbarpercentvaluescatterx;
        break;
      }

      // optional float tschchartseriesdefaulterrorbarpercentvaluescatterx = 177;
      case 177: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartseriesdefaulterrorbarpercentvaluescatterx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartseriesdefaulterrorbarpercentvaluescatterx_)));
          set_has_tschchartseriesdefaulterrorbarpercentvaluescatterx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1429)) goto parse_tschchartseriesdefaulterrorbarstddevvalue;
        break;
      }

      // optional float tschchartseriesdefaulterrorbarstddevvalue = 178;
      case 178: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartseriesdefaulterrorbarstddevvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartseriesdefaulterrorbarstddevvalue_)));
          set_has_tschchartseriesdefaulterrorbarstddevvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1437)) goto parse_tschchartseriesdefaulterrorbarstddevvaluescatterx;
        break;
      }

      // optional float tschchartseriesdefaulterrorbarstddevvaluescatterx = 179;
      case 179: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartseriesdefaulterrorbarstddevvaluescatterx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartseriesdefaulterrorbarstddevvaluescatterx_)));
          set_has_tschchartseriesdefaulterrorbarstddevvaluescatterx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1522)) goto parse_tschchartseriesdefaulterrorbarcustompositivedata;
        break;
      }

      // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedata = 190;
      case 190: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesdefaulterrorbarcustompositivedata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesdefaulterrorbarcustompositivedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1530)) goto parse_tschchartseriesdefaulterrorbarcustompositivedatascatterx;
        break;
      }

      // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedatascatterx = 191;
      case 191: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesdefaulterrorbarcustompositivedatascatterx:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesdefaulterrorbarcustompositivedatascatterx()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1538)) goto parse_tschchartseriesdefaulterrorbarcustomnegativedata;
        break;
      }

      // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedata = 192;
      case 192: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesdefaulterrorbarcustomnegativedata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesdefaulterrorbarcustomnegativedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1546)) goto parse_tschchartseriesdefaulterrorbarcustomnegativedatascatterx;
        break;
      }

      // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedatascatterx = 193;
      case 193: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesdefaulterrorbarcustomnegativedatascatterx:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesdefaulterrorbarcustomnegativedatascatterx()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1557)) goto parse_tschchartseriesdefaulttrendlineequationoffsetx;
        break;
      }

      // optional float tschchartseriesdefaulttrendlineequationoffsetx = 194;
      case 194: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartseriesdefaulttrendlineequationoffsetx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartseriesdefaulttrendlineequationoffsetx_)));
          set_has_tschchartseriesdefaulttrendlineequationoffsetx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1565)) goto parse_tschchartseriesdefaulttrendlineequationoffsety;
        break;
      }

      // optional float tschchartseriesdefaulttrendlineequationoffsety = 195;
      case 195: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartseriesdefaulttrendlineequationoffsety:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartseriesdefaulttrendlineequationoffsety_)));
          set_has_tschchartseriesdefaulttrendlineequationoffsety();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1573)) goto parse_tschchartseriesdefaulttrendlinersquaredoffsetx;
        break;
      }

      // optional float tschchartseriesdefaulttrendlinersquaredoffsetx = 196;
      case 196: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartseriesdefaulttrendlinersquaredoffsetx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartseriesdefaulttrendlinersquaredoffsetx_)));
          set_has_tschchartseriesdefaulttrendlinersquaredoffsetx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1581)) goto parse_tschchartseriesdefaulttrendlinersquaredoffsety;
        break;
      }

      // optional float tschchartseriesdefaulttrendlinersquaredoffsety = 197;
      case 197: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartseriesdefaulttrendlinersquaredoffsety:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartseriesdefaulttrendlinersquaredoffsety_)));
          set_has_tschchartseriesdefaulttrendlinersquaredoffsety();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1584)) goto parse_tschchartseriesdefaultshowtrendline;
        break;
      }

      // optional bool tschchartseriesdefaultshowtrendline = 198;
      case 198: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesdefaultshowtrendline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesdefaultshowtrendline_)));
          set_has_tschchartseriesdefaultshowtrendline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1592)) goto parse_tschchartseriesdefaultshowerrorbar;
        break;
      }

      // optional bool tschchartseriesdefaultshowerrorbar = 199;
      case 199: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesdefaultshowerrorbar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesdefaultshowerrorbar_)));
          set_has_tschchartseriesdefaultshowerrorbar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1600)) goto parse_tschchartseriesdefaultshowerrorbarscatterx;
        break;
      }

      // optional bool tschchartseriesdefaultshowerrorbarscatterx = 200;
      case 200: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesdefaultshowerrorbarscatterx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesdefaultshowerrorbarscatterx_)));
          set_has_tschchartseriesdefaultshowerrorbarscatterx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1664)) goto parse_tschchartseriesbubblesizedimension;
        break;
      }

      // optional int32 tschchartseriesbubblesizedimension = 208;
      case 208: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesbubblesizedimension:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesbubblesizedimension_)));
          set_has_tschchartseriesbubblesizedimension();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1672)) goto parse_tschchartseriesbubbleshowvaluelabels;
        break;
      }

      // optional bool tschchartseriesbubbleshowvaluelabels = 209;
      case 209: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesbubbleshowvaluelabels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesbubbleshowvaluelabels_)));
          set_has_tschchartseriesbubbleshowvaluelabels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1680)) goto parse_tschchartseriesbubblelinetype;
        break;
      }

      // optional int32 tschchartseriesbubblelinetype = 210;
      case 210: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesbubblelinetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesbubblelinetype_)));
          set_has_tschchartseriesbubblelinetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1728)) goto parse_tschchartseriesbubbleshownegativedata;
        break;
      }

      // optional bool tschchartseriesbubbleshownegativedata = 216;
      case 216: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesbubbleshownegativedata:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesbubbleshownegativedata_)));
          set_has_tschchartseriesbubbleshownegativedata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1741)) goto parse_tschchartseriesbubbleadjustmentscale;
        break;
      }

      // optional float tschchartseriesbubbleadjustmentscale = 217;
      case 217: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartseriesbubbleadjustmentscale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartseriesbubbleadjustmentscale_)));
          set_has_tschchartseriesbubbleadjustmentscale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChartSeriesNonStyleArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSS.StyleArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSCH.PreUFF.ChartsNumberFormatArchive tschchartseriesdefaultnumberformat = 10;
  if (has_tschchartseriesdefaultnumberformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->tschchartseriesdefaultnumberformat(), output);
  }

  // optional int32 tschchartseriesdefaultnumberformattype = 11;
  if (has_tschchartseriesdefaultnumberformattype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->tschchartseriesdefaultnumberformattype(), output);
  }

  // optional bool tschchartseriesbarshowvaluelabels = 12;
  if (has_tschchartseriesbarshowvaluelabels()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->tschchartseriesbarshowvaluelabels(), output);
  }

  // optional int32 tschchartserieslinesymboltype = 19;
  if (has_tschchartserieslinesymboltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->tschchartserieslinesymboltype(), output);
  }

  // optional bool tschchartserieslineshowsymbol = 20;
  if (has_tschchartserieslineshowsymbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->tschchartserieslineshowsymbol(), output);
  }

  // optional bool tschchartserieslineshowvaluelabels = 21;
  if (has_tschchartserieslineshowvaluelabels()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->tschchartserieslineshowvaluelabels(), output);
  }

  // optional bool tschchartseriesareashowvaluelabels = 27;
  if (has_tschchartseriesareashowvaluelabels()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->tschchartseriesareashowvaluelabels(), output);
  }

  // optional int32 tschchartserieslinelinetype = 30;
  if (has_tschchartserieslinelinetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->tschchartserieslinelinetype(), output);
  }

  // optional int32 tschchartseriesareasymboltype = 31;
  if (has_tschchartseriesareasymboltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->tschchartseriesareasymboltype(), output);
  }

  // optional bool tschchartseriesareashowsymbol = 32;
  if (has_tschchartseriesareashowsymbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->tschchartseriesareashowsymbol(), output);
  }

  // optional bool tschchartseriespieshowvaluelabels = 37;
  if (has_tschchartseriespieshowvaluelabels()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(37, this->tschchartseriespieshowvaluelabels(), output);
  }

  // optional bool tschchartseriesscattershowvaluelabels = 45;
  if (has_tschchartseriesscattershowvaluelabels()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(45, this->tschchartseriesscattershowvaluelabels(), output);
  }

  // optional float tschchartseriespiewedgeexplosion = 50;
  if (has_tschchartseriespiewedgeexplosion()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(50, this->tschchartseriespiewedgeexplosion(), output);
  }

  // optional bool tschchartseriesdefaultshowvaluelabels = 51;
  if (has_tschchartseriesdefaultshowvaluelabels()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(51, this->tschchartseriesdefaultshowvaluelabels(), output);
  }

  // optional .TSCH.PreUFF.ChartsNumberFormatArchive tschchartseriespienumberformat = 52;
  if (has_tschchartseriespienumberformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      52, this->tschchartseriespienumberformat(), output);
  }

  // optional int32 tschchartseriespienumberformattype = 53;
  if (has_tschchartseriespienumberformattype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(53, this->tschchartseriespienumberformattype(), output);
  }

  // optional float tschchartseriespielabelexplosion = 54;
  if (has_tschchartseriespielabelexplosion()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(54, this->tschchartseriespielabelexplosion(), output);
  }

  // optional bool tschchartseriesmixedlineshowsymbol = 58;
  if (has_tschchartseriesmixedlineshowsymbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(58, this->tschchartseriesmixedlineshowsymbol(), output);
  }

  // optional bool tschchartseriesmixedareashowsymbol = 59;
  if (has_tschchartseriesmixedareashowsymbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(59, this->tschchartseriesmixedareashowsymbol(), output);
  }

  // optional int32 tschchartseriesmixedlinesymboltype = 60;
  if (has_tschchartseriesmixedlinesymboltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->tschchartseriesmixedlinesymboltype(), output);
  }

  // optional int32 tschchartseriesmixedareasymboltype = 61;
  if (has_tschchartseriesmixedareasymboltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(61, this->tschchartseriesmixedareasymboltype(), output);
  }

  // optional bool tschchartseriesmixedshowvaluelabels = 62;
  if (has_tschchartseriesmixedshowvaluelabels()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(62, this->tschchartseriesmixedshowvaluelabels(), output);
  }

  // optional int32 tschchartseriesmixedlinelinetype = 63;
  if (has_tschchartseriesmixedlinelinetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(63, this->tschchartseriesmixedlinelinetype(), output);
  }

  // optional int32 tschchartseriesdefaultyaxisordinal = 65;
  if (has_tschchartseriesdefaultyaxisordinal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(65, this->tschchartseriesdefaultyaxisordinal(), output);
  }

  // optional bool tschchartseriespieshowserieslabels = 66;
  if (has_tschchartseriespieshowserieslabels()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(66, this->tschchartseriespieshowserieslabels(), output);
  }

  // optional bool tschchartseriesscattershowsymbol = 69;
  if (has_tschchartseriesscattershowsymbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(69, this->tschchartseriesscattershowsymbol(), output);
  }

  // optional int32 tschchartseriesscattersymboltype = 70;
  if (has_tschchartseriesscattersymboltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(70, this->tschchartseriesscattersymboltype(), output);
  }

  // optional int32 tschchartseriesscatterlinetype = 71;
  if (has_tschchartseriesscatterlinetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(71, this->tschchartseriesscatterlinetype(), output);
  }

  // optional bool tschchartseriesscattershowline = 72;
  if (has_tschchartseriesscattershowline()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(72, this->tschchartseriesscattershowline(), output);
  }

  // optional .TSCH.PreUFF.ChartsNumberFormatArchive tschchartseriesstackedpercentnumberformat = 90;
  if (has_tschchartseriesstackedpercentnumberformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      90, this->tschchartseriesstackedpercentnumberformat(), output);
  }

  // optional int32 tschchartseriesdefaultseriestype = 126;
  if (has_tschchartseriesdefaultseriestype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(126, this->tschchartseriesdefaultseriestype(), output);
  }

  // optional int32 tschchartseriesdefaulttrendlinetype = 160;
  if (has_tschchartseriesdefaulttrendlinetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(160, this->tschchartseriesdefaulttrendlinetype(), output);
  }

  // optional int32 tschchartseriesdefaulttrendlineorder = 161;
  if (has_tschchartseriesdefaulttrendlineorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(161, this->tschchartseriesdefaulttrendlineorder(), output);
  }

  // optional int32 tschchartseriesdefaulttrendlineperiod = 162;
  if (has_tschchartseriesdefaulttrendlineperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(162, this->tschchartseriesdefaulttrendlineperiod(), output);
  }

  // optional bool tschchartseriesdefaulttrendlineshowlabel = 163;
  if (has_tschchartseriesdefaulttrendlineshowlabel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(163, this->tschchartseriesdefaulttrendlineshowlabel(), output);
  }

  // optional string tschchartseriesdefaulttrendlinelabelstring = 164;
  if (has_tschchartseriesdefaulttrendlinelabelstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tschchartseriesdefaulttrendlinelabelstring().data(), this->tschchartseriesdefaulttrendlinelabelstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      164, this->tschchartseriesdefaulttrendlinelabelstring(), output);
  }

  // optional bool tschchartseriesdefaulttrendlineshowequation = 165;
  if (has_tschchartseriesdefaulttrendlineshowequation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(165, this->tschchartseriesdefaulttrendlineshowequation(), output);
  }

  // optional bool tschchartseriesdefaulttrendlineshowr2value = 166;
  if (has_tschchartseriesdefaulttrendlineshowr2value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(166, this->tschchartseriesdefaulttrendlineshowr2value(), output);
  }

  // optional int32 tschchartseriesdefaulterrorbarsetting = 170;
  if (has_tschchartseriesdefaulterrorbarsetting()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(170, this->tschchartseriesdefaulterrorbarsetting(), output);
  }

  // optional int32 tschchartseriesdefaulterrorbarsettingscatterx = 171;
  if (has_tschchartseriesdefaulterrorbarsettingscatterx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(171, this->tschchartseriesdefaulterrorbarsettingscatterx(), output);
  }

  // optional int32 tschchartseriesdefaulterrorbartype = 172;
  if (has_tschchartseriesdefaulterrorbartype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(172, this->tschchartseriesdefaulterrorbartype(), output);
  }

  // optional int32 tschchartseriesdefaulterrorbartypescatterx = 173;
  if (has_tschchartseriesdefaulterrorbartypescatterx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(173, this->tschchartseriesdefaulterrorbartypescatterx(), output);
  }

  // optional float tschchartseriesdefaulterrorbarfixedvalue = 174;
  if (has_tschchartseriesdefaulterrorbarfixedvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(174, this->tschchartseriesdefaulterrorbarfixedvalue(), output);
  }

  // optional float tschchartseriesdefaulterrorbarfixedvaluescatterx = 175;
  if (has_tschchartseriesdefaulterrorbarfixedvaluescatterx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(175, this->tschchartseriesdefaulterrorbarfixedvaluescatterx(), output);
  }

  // optional float tschchartseriesdefaulterrorbarpercentvalue = 176;
  if (has_tschchartseriesdefaulterrorbarpercentvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(176, this->tschchartseriesdefaulterrorbarpercentvalue(), output);
  }

  // optional float tschchartseriesdefaulterrorbarpercentvaluescatterx = 177;
  if (has_tschchartseriesdefaulterrorbarpercentvaluescatterx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(177, this->tschchartseriesdefaulterrorbarpercentvaluescatterx(), output);
  }

  // optional float tschchartseriesdefaulterrorbarstddevvalue = 178;
  if (has_tschchartseriesdefaulterrorbarstddevvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(178, this->tschchartseriesdefaulterrorbarstddevvalue(), output);
  }

  // optional float tschchartseriesdefaulterrorbarstddevvaluescatterx = 179;
  if (has_tschchartseriesdefaulterrorbarstddevvaluescatterx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(179, this->tschchartseriesdefaulterrorbarstddevvaluescatterx(), output);
  }

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedata = 190;
  if (has_tschchartseriesdefaulterrorbarcustompositivedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      190, this->tschchartseriesdefaulterrorbarcustompositivedata(), output);
  }

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedatascatterx = 191;
  if (has_tschchartseriesdefaulterrorbarcustompositivedatascatterx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      191, this->tschchartseriesdefaulterrorbarcustompositivedatascatterx(), output);
  }

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedata = 192;
  if (has_tschchartseriesdefaulterrorbarcustomnegativedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      192, this->tschchartseriesdefaulterrorbarcustomnegativedata(), output);
  }

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedatascatterx = 193;
  if (has_tschchartseriesdefaulterrorbarcustomnegativedatascatterx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      193, this->tschchartseriesdefaulterrorbarcustomnegativedatascatterx(), output);
  }

  // optional float tschchartseriesdefaulttrendlineequationoffsetx = 194;
  if (has_tschchartseriesdefaulttrendlineequationoffsetx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(194, this->tschchartseriesdefaulttrendlineequationoffsetx(), output);
  }

  // optional float tschchartseriesdefaulttrendlineequationoffsety = 195;
  if (has_tschchartseriesdefaulttrendlineequationoffsety()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(195, this->tschchartseriesdefaulttrendlineequationoffsety(), output);
  }

  // optional float tschchartseriesdefaulttrendlinersquaredoffsetx = 196;
  if (has_tschchartseriesdefaulttrendlinersquaredoffsetx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(196, this->tschchartseriesdefaulttrendlinersquaredoffsetx(), output);
  }

  // optional float tschchartseriesdefaulttrendlinersquaredoffsety = 197;
  if (has_tschchartseriesdefaulttrendlinersquaredoffsety()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(197, this->tschchartseriesdefaulttrendlinersquaredoffsety(), output);
  }

  // optional bool tschchartseriesdefaultshowtrendline = 198;
  if (has_tschchartseriesdefaultshowtrendline()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(198, this->tschchartseriesdefaultshowtrendline(), output);
  }

  // optional bool tschchartseriesdefaultshowerrorbar = 199;
  if (has_tschchartseriesdefaultshowerrorbar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(199, this->tschchartseriesdefaultshowerrorbar(), output);
  }

  // optional bool tschchartseriesdefaultshowerrorbarscatterx = 200;
  if (has_tschchartseriesdefaultshowerrorbarscatterx()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(200, this->tschchartseriesdefaultshowerrorbarscatterx(), output);
  }

  // optional int32 tschchartseriesbubblesizedimension = 208;
  if (has_tschchartseriesbubblesizedimension()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(208, this->tschchartseriesbubblesizedimension(), output);
  }

  // optional bool tschchartseriesbubbleshowvaluelabels = 209;
  if (has_tschchartseriesbubbleshowvaluelabels()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(209, this->tschchartseriesbubbleshowvaluelabels(), output);
  }

  // optional int32 tschchartseriesbubblelinetype = 210;
  if (has_tschchartseriesbubblelinetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(210, this->tschchartseriesbubblelinetype(), output);
  }

  // optional bool tschchartseriesbubbleshownegativedata = 216;
  if (has_tschchartseriesbubbleshownegativedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(216, this->tschchartseriesbubbleshownegativedata(), output);
  }

  // optional float tschchartseriesbubbleadjustmentscale = 217;
  if (has_tschchartseriesbubbleadjustmentscale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(217, this->tschchartseriesbubbleadjustmentscale(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartSeriesNonStyleArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSS.StyleArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSCH.PreUFF.ChartsNumberFormatArchive tschchartseriesdefaultnumberformat = 10;
  if (has_tschchartseriesdefaultnumberformat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->tschchartseriesdefaultnumberformat(), target);
  }

  // optional int32 tschchartseriesdefaultnumberformattype = 11;
  if (has_tschchartseriesdefaultnumberformattype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->tschchartseriesdefaultnumberformattype(), target);
  }

  // optional bool tschchartseriesbarshowvaluelabels = 12;
  if (has_tschchartseriesbarshowvaluelabels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->tschchartseriesbarshowvaluelabels(), target);
  }

  // optional int32 tschchartserieslinesymboltype = 19;
  if (has_tschchartserieslinesymboltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->tschchartserieslinesymboltype(), target);
  }

  // optional bool tschchartserieslineshowsymbol = 20;
  if (has_tschchartserieslineshowsymbol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->tschchartserieslineshowsymbol(), target);
  }

  // optional bool tschchartserieslineshowvaluelabels = 21;
  if (has_tschchartserieslineshowvaluelabels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->tschchartserieslineshowvaluelabels(), target);
  }

  // optional bool tschchartseriesareashowvaluelabels = 27;
  if (has_tschchartseriesareashowvaluelabels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->tschchartseriesareashowvaluelabels(), target);
  }

  // optional int32 tschchartserieslinelinetype = 30;
  if (has_tschchartserieslinelinetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->tschchartserieslinelinetype(), target);
  }

  // optional int32 tschchartseriesareasymboltype = 31;
  if (has_tschchartseriesareasymboltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->tschchartseriesareasymboltype(), target);
  }

  // optional bool tschchartseriesareashowsymbol = 32;
  if (has_tschchartseriesareashowsymbol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->tschchartseriesareashowsymbol(), target);
  }

  // optional bool tschchartseriespieshowvaluelabels = 37;
  if (has_tschchartseriespieshowvaluelabels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(37, this->tschchartseriespieshowvaluelabels(), target);
  }

  // optional bool tschchartseriesscattershowvaluelabels = 45;
  if (has_tschchartseriesscattershowvaluelabels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(45, this->tschchartseriesscattershowvaluelabels(), target);
  }

  // optional float tschchartseriespiewedgeexplosion = 50;
  if (has_tschchartseriespiewedgeexplosion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(50, this->tschchartseriespiewedgeexplosion(), target);
  }

  // optional bool tschchartseriesdefaultshowvaluelabels = 51;
  if (has_tschchartseriesdefaultshowvaluelabels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(51, this->tschchartseriesdefaultshowvaluelabels(), target);
  }

  // optional .TSCH.PreUFF.ChartsNumberFormatArchive tschchartseriespienumberformat = 52;
  if (has_tschchartseriespienumberformat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        52, this->tschchartseriespienumberformat(), target);
  }

  // optional int32 tschchartseriespienumberformattype = 53;
  if (has_tschchartseriespienumberformattype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(53, this->tschchartseriespienumberformattype(), target);
  }

  // optional float tschchartseriespielabelexplosion = 54;
  if (has_tschchartseriespielabelexplosion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(54, this->tschchartseriespielabelexplosion(), target);
  }

  // optional bool tschchartseriesmixedlineshowsymbol = 58;
  if (has_tschchartseriesmixedlineshowsymbol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(58, this->tschchartseriesmixedlineshowsymbol(), target);
  }

  // optional bool tschchartseriesmixedareashowsymbol = 59;
  if (has_tschchartseriesmixedareashowsymbol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(59, this->tschchartseriesmixedareashowsymbol(), target);
  }

  // optional int32 tschchartseriesmixedlinesymboltype = 60;
  if (has_tschchartseriesmixedlinesymboltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->tschchartseriesmixedlinesymboltype(), target);
  }

  // optional int32 tschchartseriesmixedareasymboltype = 61;
  if (has_tschchartseriesmixedareasymboltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(61, this->tschchartseriesmixedareasymboltype(), target);
  }

  // optional bool tschchartseriesmixedshowvaluelabels = 62;
  if (has_tschchartseriesmixedshowvaluelabels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(62, this->tschchartseriesmixedshowvaluelabels(), target);
  }

  // optional int32 tschchartseriesmixedlinelinetype = 63;
  if (has_tschchartseriesmixedlinelinetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(63, this->tschchartseriesmixedlinelinetype(), target);
  }

  // optional int32 tschchartseriesdefaultyaxisordinal = 65;
  if (has_tschchartseriesdefaultyaxisordinal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(65, this->tschchartseriesdefaultyaxisordinal(), target);
  }

  // optional bool tschchartseriespieshowserieslabels = 66;
  if (has_tschchartseriespieshowserieslabels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(66, this->tschchartseriespieshowserieslabels(), target);
  }

  // optional bool tschchartseriesscattershowsymbol = 69;
  if (has_tschchartseriesscattershowsymbol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(69, this->tschchartseriesscattershowsymbol(), target);
  }

  // optional int32 tschchartseriesscattersymboltype = 70;
  if (has_tschchartseriesscattersymboltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(70, this->tschchartseriesscattersymboltype(), target);
  }

  // optional int32 tschchartseriesscatterlinetype = 71;
  if (has_tschchartseriesscatterlinetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(71, this->tschchartseriesscatterlinetype(), target);
  }

  // optional bool tschchartseriesscattershowline = 72;
  if (has_tschchartseriesscattershowline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(72, this->tschchartseriesscattershowline(), target);
  }

  // optional .TSCH.PreUFF.ChartsNumberFormatArchive tschchartseriesstackedpercentnumberformat = 90;
  if (has_tschchartseriesstackedpercentnumberformat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        90, this->tschchartseriesstackedpercentnumberformat(), target);
  }

  // optional int32 tschchartseriesdefaultseriestype = 126;
  if (has_tschchartseriesdefaultseriestype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(126, this->tschchartseriesdefaultseriestype(), target);
  }

  // optional int32 tschchartseriesdefaulttrendlinetype = 160;
  if (has_tschchartseriesdefaulttrendlinetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(160, this->tschchartseriesdefaulttrendlinetype(), target);
  }

  // optional int32 tschchartseriesdefaulttrendlineorder = 161;
  if (has_tschchartseriesdefaulttrendlineorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(161, this->tschchartseriesdefaulttrendlineorder(), target);
  }

  // optional int32 tschchartseriesdefaulttrendlineperiod = 162;
  if (has_tschchartseriesdefaulttrendlineperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(162, this->tschchartseriesdefaulttrendlineperiod(), target);
  }

  // optional bool tschchartseriesdefaulttrendlineshowlabel = 163;
  if (has_tschchartseriesdefaulttrendlineshowlabel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(163, this->tschchartseriesdefaulttrendlineshowlabel(), target);
  }

  // optional string tschchartseriesdefaulttrendlinelabelstring = 164;
  if (has_tschchartseriesdefaulttrendlinelabelstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tschchartseriesdefaulttrendlinelabelstring().data(), this->tschchartseriesdefaulttrendlinelabelstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        164, this->tschchartseriesdefaulttrendlinelabelstring(), target);
  }

  // optional bool tschchartseriesdefaulttrendlineshowequation = 165;
  if (has_tschchartseriesdefaulttrendlineshowequation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(165, this->tschchartseriesdefaulttrendlineshowequation(), target);
  }

  // optional bool tschchartseriesdefaulttrendlineshowr2value = 166;
  if (has_tschchartseriesdefaulttrendlineshowr2value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(166, this->tschchartseriesdefaulttrendlineshowr2value(), target);
  }

  // optional int32 tschchartseriesdefaulterrorbarsetting = 170;
  if (has_tschchartseriesdefaulterrorbarsetting()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(170, this->tschchartseriesdefaulterrorbarsetting(), target);
  }

  // optional int32 tschchartseriesdefaulterrorbarsettingscatterx = 171;
  if (has_tschchartseriesdefaulterrorbarsettingscatterx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(171, this->tschchartseriesdefaulterrorbarsettingscatterx(), target);
  }

  // optional int32 tschchartseriesdefaulterrorbartype = 172;
  if (has_tschchartseriesdefaulterrorbartype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(172, this->tschchartseriesdefaulterrorbartype(), target);
  }

  // optional int32 tschchartseriesdefaulterrorbartypescatterx = 173;
  if (has_tschchartseriesdefaulterrorbartypescatterx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(173, this->tschchartseriesdefaulterrorbartypescatterx(), target);
  }

  // optional float tschchartseriesdefaulterrorbarfixedvalue = 174;
  if (has_tschchartseriesdefaulterrorbarfixedvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(174, this->tschchartseriesdefaulterrorbarfixedvalue(), target);
  }

  // optional float tschchartseriesdefaulterrorbarfixedvaluescatterx = 175;
  if (has_tschchartseriesdefaulterrorbarfixedvaluescatterx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(175, this->tschchartseriesdefaulterrorbarfixedvaluescatterx(), target);
  }

  // optional float tschchartseriesdefaulterrorbarpercentvalue = 176;
  if (has_tschchartseriesdefaulterrorbarpercentvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(176, this->tschchartseriesdefaulterrorbarpercentvalue(), target);
  }

  // optional float tschchartseriesdefaulterrorbarpercentvaluescatterx = 177;
  if (has_tschchartseriesdefaulterrorbarpercentvaluescatterx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(177, this->tschchartseriesdefaulterrorbarpercentvaluescatterx(), target);
  }

  // optional float tschchartseriesdefaulterrorbarstddevvalue = 178;
  if (has_tschchartseriesdefaulterrorbarstddevvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(178, this->tschchartseriesdefaulterrorbarstddevvalue(), target);
  }

  // optional float tschchartseriesdefaulterrorbarstddevvaluescatterx = 179;
  if (has_tschchartseriesdefaulterrorbarstddevvaluescatterx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(179, this->tschchartseriesdefaulterrorbarstddevvaluescatterx(), target);
  }

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedata = 190;
  if (has_tschchartseriesdefaulterrorbarcustompositivedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        190, this->tschchartseriesdefaulterrorbarcustompositivedata(), target);
  }

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedatascatterx = 191;
  if (has_tschchartseriesdefaulterrorbarcustompositivedatascatterx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        191, this->tschchartseriesdefaulterrorbarcustompositivedatascatterx(), target);
  }

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedata = 192;
  if (has_tschchartseriesdefaulterrorbarcustomnegativedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        192, this->tschchartseriesdefaulterrorbarcustomnegativedata(), target);
  }

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedatascatterx = 193;
  if (has_tschchartseriesdefaulterrorbarcustomnegativedatascatterx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        193, this->tschchartseriesdefaulterrorbarcustomnegativedatascatterx(), target);
  }

  // optional float tschchartseriesdefaulttrendlineequationoffsetx = 194;
  if (has_tschchartseriesdefaulttrendlineequationoffsetx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(194, this->tschchartseriesdefaulttrendlineequationoffsetx(), target);
  }

  // optional float tschchartseriesdefaulttrendlineequationoffsety = 195;
  if (has_tschchartseriesdefaulttrendlineequationoffsety()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(195, this->tschchartseriesdefaulttrendlineequationoffsety(), target);
  }

  // optional float tschchartseriesdefaulttrendlinersquaredoffsetx = 196;
  if (has_tschchartseriesdefaulttrendlinersquaredoffsetx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(196, this->tschchartseriesdefaulttrendlinersquaredoffsetx(), target);
  }

  // optional float tschchartseriesdefaulttrendlinersquaredoffsety = 197;
  if (has_tschchartseriesdefaulttrendlinersquaredoffsety()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(197, this->tschchartseriesdefaulttrendlinersquaredoffsety(), target);
  }

  // optional bool tschchartseriesdefaultshowtrendline = 198;
  if (has_tschchartseriesdefaultshowtrendline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(198, this->tschchartseriesdefaultshowtrendline(), target);
  }

  // optional bool tschchartseriesdefaultshowerrorbar = 199;
  if (has_tschchartseriesdefaultshowerrorbar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(199, this->tschchartseriesdefaultshowerrorbar(), target);
  }

  // optional bool tschchartseriesdefaultshowerrorbarscatterx = 200;
  if (has_tschchartseriesdefaultshowerrorbarscatterx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(200, this->tschchartseriesdefaultshowerrorbarscatterx(), target);
  }

  // optional int32 tschchartseriesbubblesizedimension = 208;
  if (has_tschchartseriesbubblesizedimension()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(208, this->tschchartseriesbubblesizedimension(), target);
  }

  // optional bool tschchartseriesbubbleshowvaluelabels = 209;
  if (has_tschchartseriesbubbleshowvaluelabels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(209, this->tschchartseriesbubbleshowvaluelabels(), target);
  }

  // optional int32 tschchartseriesbubblelinetype = 210;
  if (has_tschchartseriesbubblelinetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(210, this->tschchartseriesbubblelinetype(), target);
  }

  // optional bool tschchartseriesbubbleshownegativedata = 216;
  if (has_tschchartseriesbubbleshownegativedata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(216, this->tschchartseriesbubbleshownegativedata(), target);
  }

  // optional float tschchartseriesbubbleadjustmentscale = 217;
  if (has_tschchartseriesbubbleadjustmentscale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(217, this->tschchartseriesbubbleadjustmentscale(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartSeriesNonStyleArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSS.StyleArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSCH.PreUFF.ChartsNumberFormatArchive tschchartseriesdefaultnumberformat = 10;
    if (has_tschchartseriesdefaultnumberformat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesdefaultnumberformat());
    }

    // optional int32 tschchartseriesdefaultnumberformattype = 11;
    if (has_tschchartseriesdefaultnumberformattype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesdefaultnumberformattype());
    }

    // optional bool tschchartseriesbarshowvaluelabels = 12;
    if (has_tschchartseriesbarshowvaluelabels()) {
      total_size += 1 + 1;
    }

    // optional int32 tschchartserieslinesymboltype = 19;
    if (has_tschchartserieslinesymboltype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartserieslinesymboltype());
    }

    // optional bool tschchartserieslineshowsymbol = 20;
    if (has_tschchartserieslineshowsymbol()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartserieslineshowvaluelabels = 21;
    if (has_tschchartserieslineshowvaluelabels()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesareashowvaluelabels = 27;
    if (has_tschchartseriesareashowvaluelabels()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 tschchartserieslinelinetype = 30;
    if (has_tschchartserieslinelinetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartserieslinelinetype());
    }

    // optional int32 tschchartseriesareasymboltype = 31;
    if (has_tschchartseriesareasymboltype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesareasymboltype());
    }

    // optional bool tschchartseriesareashowsymbol = 32;
    if (has_tschchartseriesareashowsymbol()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriespieshowvaluelabels = 37;
    if (has_tschchartseriespieshowvaluelabels()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesscattershowvaluelabels = 45;
    if (has_tschchartseriesscattershowvaluelabels()) {
      total_size += 2 + 1;
    }

    // optional float tschchartseriespiewedgeexplosion = 50;
    if (has_tschchartseriespiewedgeexplosion()) {
      total_size += 2 + 4;
    }

    // optional bool tschchartseriesdefaultshowvaluelabels = 51;
    if (has_tschchartseriesdefaultshowvaluelabels()) {
      total_size += 2 + 1;
    }

    // optional .TSCH.PreUFF.ChartsNumberFormatArchive tschchartseriespienumberformat = 52;
    if (has_tschchartseriespienumberformat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriespienumberformat());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 tschchartseriespienumberformattype = 53;
    if (has_tschchartseriespienumberformattype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriespienumberformattype());
    }

    // optional float tschchartseriespielabelexplosion = 54;
    if (has_tschchartseriespielabelexplosion()) {
      total_size += 2 + 4;
    }

    // optional bool tschchartseriesmixedlineshowsymbol = 58;
    if (has_tschchartseriesmixedlineshowsymbol()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesmixedareashowsymbol = 59;
    if (has_tschchartseriesmixedareashowsymbol()) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartseriesmixedlinesymboltype = 60;
    if (has_tschchartseriesmixedlinesymboltype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesmixedlinesymboltype());
    }

    // optional int32 tschchartseriesmixedareasymboltype = 61;
    if (has_tschchartseriesmixedareasymboltype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesmixedareasymboltype());
    }

    // optional bool tschchartseriesmixedshowvaluelabels = 62;
    if (has_tschchartseriesmixedshowvaluelabels()) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartseriesmixedlinelinetype = 63;
    if (has_tschchartseriesmixedlinelinetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesmixedlinelinetype());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 tschchartseriesdefaultyaxisordinal = 65;
    if (has_tschchartseriesdefaultyaxisordinal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesdefaultyaxisordinal());
    }

    // optional bool tschchartseriespieshowserieslabels = 66;
    if (has_tschchartseriespieshowserieslabels()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesscattershowsymbol = 69;
    if (has_tschchartseriesscattershowsymbol()) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartseriesscattersymboltype = 70;
    if (has_tschchartseriesscattersymboltype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesscattersymboltype());
    }

    // optional int32 tschchartseriesscatterlinetype = 71;
    if (has_tschchartseriesscatterlinetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesscatterlinetype());
    }

    // optional bool tschchartseriesscattershowline = 72;
    if (has_tschchartseriesscattershowline()) {
      total_size += 2 + 1;
    }

    // optional .TSCH.PreUFF.ChartsNumberFormatArchive tschchartseriesstackedpercentnumberformat = 90;
    if (has_tschchartseriesstackedpercentnumberformat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesstackedpercentnumberformat());
    }

    // optional int32 tschchartseriesdefaultseriestype = 126;
    if (has_tschchartseriesdefaultseriestype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesdefaultseriestype());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 tschchartseriesdefaulttrendlinetype = 160;
    if (has_tschchartseriesdefaulttrendlinetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesdefaulttrendlinetype());
    }

    // optional int32 tschchartseriesdefaulttrendlineorder = 161;
    if (has_tschchartseriesdefaulttrendlineorder()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesdefaulttrendlineorder());
    }

    // optional int32 tschchartseriesdefaulttrendlineperiod = 162;
    if (has_tschchartseriesdefaulttrendlineperiod()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesdefaulttrendlineperiod());
    }

    // optional bool tschchartseriesdefaulttrendlineshowlabel = 163;
    if (has_tschchartseriesdefaulttrendlineshowlabel()) {
      total_size += 2 + 1;
    }

    // optional string tschchartseriesdefaulttrendlinelabelstring = 164;
    if (has_tschchartseriesdefaulttrendlinelabelstring()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tschchartseriesdefaulttrendlinelabelstring());
    }

    // optional bool tschchartseriesdefaulttrendlineshowequation = 165;
    if (has_tschchartseriesdefaulttrendlineshowequation()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesdefaulttrendlineshowr2value = 166;
    if (has_tschchartseriesdefaulttrendlineshowr2value()) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartseriesdefaulterrorbarsetting = 170;
    if (has_tschchartseriesdefaulterrorbarsetting()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesdefaulterrorbarsetting());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional int32 tschchartseriesdefaulterrorbarsettingscatterx = 171;
    if (has_tschchartseriesdefaulterrorbarsettingscatterx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesdefaulterrorbarsettingscatterx());
    }

    // optional int32 tschchartseriesdefaulterrorbartype = 172;
    if (has_tschchartseriesdefaulterrorbartype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesdefaulterrorbartype());
    }

    // optional int32 tschchartseriesdefaulterrorbartypescatterx = 173;
    if (has_tschchartseriesdefaulterrorbartypescatterx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesdefaulterrorbartypescatterx());
    }

    // optional float tschchartseriesdefaulterrorbarfixedvalue = 174;
    if (has_tschchartseriesdefaulterrorbarfixedvalue()) {
      total_size += 2 + 4;
    }

    // optional float tschchartseriesdefaulterrorbarfixedvaluescatterx = 175;
    if (has_tschchartseriesdefaulterrorbarfixedvaluescatterx()) {
      total_size += 2 + 4;
    }

    // optional float tschchartseriesdefaulterrorbarpercentvalue = 176;
    if (has_tschchartseriesdefaulterrorbarpercentvalue()) {
      total_size += 2 + 4;
    }

    // optional float tschchartseriesdefaulterrorbarpercentvaluescatterx = 177;
    if (has_tschchartseriesdefaulterrorbarpercentvaluescatterx()) {
      total_size += 2 + 4;
    }

    // optional float tschchartseriesdefaulterrorbarstddevvalue = 178;
    if (has_tschchartseriesdefaulterrorbarstddevvalue()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional float tschchartseriesdefaulterrorbarstddevvaluescatterx = 179;
    if (has_tschchartseriesdefaulterrorbarstddevvaluescatterx()) {
      total_size += 2 + 4;
    }

    // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedata = 190;
    if (has_tschchartseriesdefaulterrorbarcustompositivedata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesdefaulterrorbarcustompositivedata());
    }

    // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedatascatterx = 191;
    if (has_tschchartseriesdefaulterrorbarcustompositivedatascatterx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesdefaulterrorbarcustompositivedatascatterx());
    }

    // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedata = 192;
    if (has_tschchartseriesdefaulterrorbarcustomnegativedata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesdefaulterrorbarcustomnegativedata());
    }

    // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedatascatterx = 193;
    if (has_tschchartseriesdefaulterrorbarcustomnegativedatascatterx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesdefaulterrorbarcustomnegativedatascatterx());
    }

    // optional float tschchartseriesdefaulttrendlineequationoffsetx = 194;
    if (has_tschchartseriesdefaulttrendlineequationoffsetx()) {
      total_size += 2 + 4;
    }

    // optional float tschchartseriesdefaulttrendlineequationoffsety = 195;
    if (has_tschchartseriesdefaulttrendlineequationoffsety()) {
      total_size += 2 + 4;
    }

    // optional float tschchartseriesdefaulttrendlinersquaredoffsetx = 196;
    if (has_tschchartseriesdefaulttrendlinersquaredoffsetx()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional float tschchartseriesdefaulttrendlinersquaredoffsety = 197;
    if (has_tschchartseriesdefaulttrendlinersquaredoffsety()) {
      total_size += 2 + 4;
    }

    // optional bool tschchartseriesdefaultshowtrendline = 198;
    if (has_tschchartseriesdefaultshowtrendline()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesdefaultshowerrorbar = 199;
    if (has_tschchartseriesdefaultshowerrorbar()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesdefaultshowerrorbarscatterx = 200;
    if (has_tschchartseriesdefaultshowerrorbarscatterx()) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartseriesbubblesizedimension = 208;
    if (has_tschchartseriesbubblesizedimension()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesbubblesizedimension());
    }

    // optional bool tschchartseriesbubbleshowvaluelabels = 209;
    if (has_tschchartseriesbubbleshowvaluelabels()) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartseriesbubblelinetype = 210;
    if (has_tschchartseriesbubblelinetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesbubblelinetype());
    }

    // optional bool tschchartseriesbubbleshownegativedata = 216;
    if (has_tschchartseriesbubbleshownegativedata()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional float tschchartseriesbubbleadjustmentscale = 217;
    if (has_tschchartseriesbubbleadjustmentscale()) {
      total_size += 2 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartSeriesNonStyleArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartSeriesNonStyleArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartSeriesNonStyleArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartSeriesNonStyleArchive::MergeFrom(const ChartSeriesNonStyleArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSS::StyleArchive::MergeFrom(from.super());
    }
    if (from.has_tschchartseriesdefaultnumberformat()) {
      mutable_tschchartseriesdefaultnumberformat()->::TSCH::PreUFF::ChartsNumberFormatArchive::MergeFrom(from.tschchartseriesdefaultnumberformat());
    }
    if (from.has_tschchartseriesdefaultnumberformattype()) {
      set_tschchartseriesdefaultnumberformattype(from.tschchartseriesdefaultnumberformattype());
    }
    if (from.has_tschchartseriesbarshowvaluelabels()) {
      set_tschchartseriesbarshowvaluelabels(from.tschchartseriesbarshowvaluelabels());
    }
    if (from.has_tschchartserieslinesymboltype()) {
      set_tschchartserieslinesymboltype(from.tschchartserieslinesymboltype());
    }
    if (from.has_tschchartserieslineshowsymbol()) {
      set_tschchartserieslineshowsymbol(from.tschchartserieslineshowsymbol());
    }
    if (from.has_tschchartserieslineshowvaluelabels()) {
      set_tschchartserieslineshowvaluelabels(from.tschchartserieslineshowvaluelabels());
    }
    if (from.has_tschchartseriesareashowvaluelabels()) {
      set_tschchartseriesareashowvaluelabels(from.tschchartseriesareashowvaluelabels());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tschchartserieslinelinetype()) {
      set_tschchartserieslinelinetype(from.tschchartserieslinelinetype());
    }
    if (from.has_tschchartseriesareasymboltype()) {
      set_tschchartseriesareasymboltype(from.tschchartseriesareasymboltype());
    }
    if (from.has_tschchartseriesareashowsymbol()) {
      set_tschchartseriesareashowsymbol(from.tschchartseriesareashowsymbol());
    }
    if (from.has_tschchartseriespieshowvaluelabels()) {
      set_tschchartseriespieshowvaluelabels(from.tschchartseriespieshowvaluelabels());
    }
    if (from.has_tschchartseriesscattershowvaluelabels()) {
      set_tschchartseriesscattershowvaluelabels(from.tschchartseriesscattershowvaluelabels());
    }
    if (from.has_tschchartseriespiewedgeexplosion()) {
      set_tschchartseriespiewedgeexplosion(from.tschchartseriespiewedgeexplosion());
    }
    if (from.has_tschchartseriesdefaultshowvaluelabels()) {
      set_tschchartseriesdefaultshowvaluelabels(from.tschchartseriesdefaultshowvaluelabels());
    }
    if (from.has_tschchartseriespienumberformat()) {
      mutable_tschchartseriespienumberformat()->::TSCH::PreUFF::ChartsNumberFormatArchive::MergeFrom(from.tschchartseriespienumberformat());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_tschchartseriespienumberformattype()) {
      set_tschchartseriespienumberformattype(from.tschchartseriespienumberformattype());
    }
    if (from.has_tschchartseriespielabelexplosion()) {
      set_tschchartseriespielabelexplosion(from.tschchartseriespielabelexplosion());
    }
    if (from.has_tschchartseriesmixedlineshowsymbol()) {
      set_tschchartseriesmixedlineshowsymbol(from.tschchartseriesmixedlineshowsymbol());
    }
    if (from.has_tschchartseriesmixedareashowsymbol()) {
      set_tschchartseriesmixedareashowsymbol(from.tschchartseriesmixedareashowsymbol());
    }
    if (from.has_tschchartseriesmixedlinesymboltype()) {
      set_tschchartseriesmixedlinesymboltype(from.tschchartseriesmixedlinesymboltype());
    }
    if (from.has_tschchartseriesmixedareasymboltype()) {
      set_tschchartseriesmixedareasymboltype(from.tschchartseriesmixedareasymboltype());
    }
    if (from.has_tschchartseriesmixedshowvaluelabels()) {
      set_tschchartseriesmixedshowvaluelabels(from.tschchartseriesmixedshowvaluelabels());
    }
    if (from.has_tschchartseriesmixedlinelinetype()) {
      set_tschchartseriesmixedlinelinetype(from.tschchartseriesmixedlinelinetype());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_tschchartseriesdefaultyaxisordinal()) {
      set_tschchartseriesdefaultyaxisordinal(from.tschchartseriesdefaultyaxisordinal());
    }
    if (from.has_tschchartseriespieshowserieslabels()) {
      set_tschchartseriespieshowserieslabels(from.tschchartseriespieshowserieslabels());
    }
    if (from.has_tschchartseriesscattershowsymbol()) {
      set_tschchartseriesscattershowsymbol(from.tschchartseriesscattershowsymbol());
    }
    if (from.has_tschchartseriesscattersymboltype()) {
      set_tschchartseriesscattersymboltype(from.tschchartseriesscattersymboltype());
    }
    if (from.has_tschchartseriesscatterlinetype()) {
      set_tschchartseriesscatterlinetype(from.tschchartseriesscatterlinetype());
    }
    if (from.has_tschchartseriesscattershowline()) {
      set_tschchartseriesscattershowline(from.tschchartseriesscattershowline());
    }
    if (from.has_tschchartseriesstackedpercentnumberformat()) {
      mutable_tschchartseriesstackedpercentnumberformat()->::TSCH::PreUFF::ChartsNumberFormatArchive::MergeFrom(from.tschchartseriesstackedpercentnumberformat());
    }
    if (from.has_tschchartseriesdefaultseriestype()) {
      set_tschchartseriesdefaultseriestype(from.tschchartseriesdefaultseriestype());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_tschchartseriesdefaulttrendlinetype()) {
      set_tschchartseriesdefaulttrendlinetype(from.tschchartseriesdefaulttrendlinetype());
    }
    if (from.has_tschchartseriesdefaulttrendlineorder()) {
      set_tschchartseriesdefaulttrendlineorder(from.tschchartseriesdefaulttrendlineorder());
    }
    if (from.has_tschchartseriesdefaulttrendlineperiod()) {
      set_tschchartseriesdefaulttrendlineperiod(from.tschchartseriesdefaulttrendlineperiod());
    }
    if (from.has_tschchartseriesdefaulttrendlineshowlabel()) {
      set_tschchartseriesdefaulttrendlineshowlabel(from.tschchartseriesdefaulttrendlineshowlabel());
    }
    if (from.has_tschchartseriesdefaulttrendlinelabelstring()) {
      set_tschchartseriesdefaulttrendlinelabelstring(from.tschchartseriesdefaulttrendlinelabelstring());
    }
    if (from.has_tschchartseriesdefaulttrendlineshowequation()) {
      set_tschchartseriesdefaulttrendlineshowequation(from.tschchartseriesdefaulttrendlineshowequation());
    }
    if (from.has_tschchartseriesdefaulttrendlineshowr2value()) {
      set_tschchartseriesdefaulttrendlineshowr2value(from.tschchartseriesdefaulttrendlineshowr2value());
    }
    if (from.has_tschchartseriesdefaulterrorbarsetting()) {
      set_tschchartseriesdefaulterrorbarsetting(from.tschchartseriesdefaulterrorbarsetting());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_tschchartseriesdefaulterrorbarsettingscatterx()) {
      set_tschchartseriesdefaulterrorbarsettingscatterx(from.tschchartseriesdefaulterrorbarsettingscatterx());
    }
    if (from.has_tschchartseriesdefaulterrorbartype()) {
      set_tschchartseriesdefaulterrorbartype(from.tschchartseriesdefaulterrorbartype());
    }
    if (from.has_tschchartseriesdefaulterrorbartypescatterx()) {
      set_tschchartseriesdefaulterrorbartypescatterx(from.tschchartseriesdefaulterrorbartypescatterx());
    }
    if (from.has_tschchartseriesdefaulterrorbarfixedvalue()) {
      set_tschchartseriesdefaulterrorbarfixedvalue(from.tschchartseriesdefaulterrorbarfixedvalue());
    }
    if (from.has_tschchartseriesdefaulterrorbarfixedvaluescatterx()) {
      set_tschchartseriesdefaulterrorbarfixedvaluescatterx(from.tschchartseriesdefaulterrorbarfixedvaluescatterx());
    }
    if (from.has_tschchartseriesdefaulterrorbarpercentvalue()) {
      set_tschchartseriesdefaulterrorbarpercentvalue(from.tschchartseriesdefaulterrorbarpercentvalue());
    }
    if (from.has_tschchartseriesdefaulterrorbarpercentvaluescatterx()) {
      set_tschchartseriesdefaulterrorbarpercentvaluescatterx(from.tschchartseriesdefaulterrorbarpercentvaluescatterx());
    }
    if (from.has_tschchartseriesdefaulterrorbarstddevvalue()) {
      set_tschchartseriesdefaulterrorbarstddevvalue(from.tschchartseriesdefaulterrorbarstddevvalue());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_tschchartseriesdefaulterrorbarstddevvaluescatterx()) {
      set_tschchartseriesdefaulterrorbarstddevvaluescatterx(from.tschchartseriesdefaulterrorbarstddevvaluescatterx());
    }
    if (from.has_tschchartseriesdefaulterrorbarcustompositivedata()) {
      mutable_tschchartseriesdefaulterrorbarcustompositivedata()->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::MergeFrom(from.tschchartseriesdefaulterrorbarcustompositivedata());
    }
    if (from.has_tschchartseriesdefaulterrorbarcustompositivedatascatterx()) {
      mutable_tschchartseriesdefaulterrorbarcustompositivedatascatterx()->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::MergeFrom(from.tschchartseriesdefaulterrorbarcustompositivedatascatterx());
    }
    if (from.has_tschchartseriesdefaulterrorbarcustomnegativedata()) {
      mutable_tschchartseriesdefaulterrorbarcustomnegativedata()->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::MergeFrom(from.tschchartseriesdefaulterrorbarcustomnegativedata());
    }
    if (from.has_tschchartseriesdefaulterrorbarcustomnegativedatascatterx()) {
      mutable_tschchartseriesdefaulterrorbarcustomnegativedatascatterx()->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::MergeFrom(from.tschchartseriesdefaulterrorbarcustomnegativedatascatterx());
    }
    if (from.has_tschchartseriesdefaulttrendlineequationoffsetx()) {
      set_tschchartseriesdefaulttrendlineequationoffsetx(from.tschchartseriesdefaulttrendlineequationoffsetx());
    }
    if (from.has_tschchartseriesdefaulttrendlineequationoffsety()) {
      set_tschchartseriesdefaulttrendlineequationoffsety(from.tschchartseriesdefaulttrendlineequationoffsety());
    }
    if (from.has_tschchartseriesdefaulttrendlinersquaredoffsetx()) {
      set_tschchartseriesdefaulttrendlinersquaredoffsetx(from.tschchartseriesdefaulttrendlinersquaredoffsetx());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_tschchartseriesdefaulttrendlinersquaredoffsety()) {
      set_tschchartseriesdefaulttrendlinersquaredoffsety(from.tschchartseriesdefaulttrendlinersquaredoffsety());
    }
    if (from.has_tschchartseriesdefaultshowtrendline()) {
      set_tschchartseriesdefaultshowtrendline(from.tschchartseriesdefaultshowtrendline());
    }
    if (from.has_tschchartseriesdefaultshowerrorbar()) {
      set_tschchartseriesdefaultshowerrorbar(from.tschchartseriesdefaultshowerrorbar());
    }
    if (from.has_tschchartseriesdefaultshowerrorbarscatterx()) {
      set_tschchartseriesdefaultshowerrorbarscatterx(from.tschchartseriesdefaultshowerrorbarscatterx());
    }
    if (from.has_tschchartseriesbubblesizedimension()) {
      set_tschchartseriesbubblesizedimension(from.tschchartseriesbubblesizedimension());
    }
    if (from.has_tschchartseriesbubbleshowvaluelabels()) {
      set_tschchartseriesbubbleshowvaluelabels(from.tschchartseriesbubbleshowvaluelabels());
    }
    if (from.has_tschchartseriesbubblelinetype()) {
      set_tschchartseriesbubblelinetype(from.tschchartseriesbubblelinetype());
    }
    if (from.has_tschchartseriesbubbleshownegativedata()) {
      set_tschchartseriesbubbleshownegativedata(from.tschchartseriesbubbleshownegativedata());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_tschchartseriesbubbleadjustmentscale()) {
      set_tschchartseriesbubbleadjustmentscale(from.tschchartseriesbubbleadjustmentscale());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartSeriesNonStyleArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartSeriesNonStyleArchive::CopyFrom(const ChartSeriesNonStyleArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartSeriesNonStyleArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_tschchartseriesdefaultnumberformat()) {
    if (!this->tschchartseriesdefaultnumberformat().IsInitialized()) return false;
  }
  if (has_tschchartseriespienumberformat()) {
    if (!this->tschchartseriespienumberformat().IsInitialized()) return false;
  }
  if (has_tschchartseriesstackedpercentnumberformat()) {
    if (!this->tschchartseriesstackedpercentnumberformat().IsInitialized()) return false;
  }
  return true;
}

void ChartSeriesNonStyleArchive::Swap(ChartSeriesNonStyleArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(tschchartseriesdefaultnumberformat_, other->tschchartseriesdefaultnumberformat_);
    std::swap(tschchartseriesdefaultnumberformattype_, other->tschchartseriesdefaultnumberformattype_);
    std::swap(tschchartseriesbarshowvaluelabels_, other->tschchartseriesbarshowvaluelabels_);
    std::swap(tschchartserieslinesymboltype_, other->tschchartserieslinesymboltype_);
    std::swap(tschchartserieslineshowsymbol_, other->tschchartserieslineshowsymbol_);
    std::swap(tschchartserieslineshowvaluelabels_, other->tschchartserieslineshowvaluelabels_);
    std::swap(tschchartseriesareashowvaluelabels_, other->tschchartseriesareashowvaluelabels_);
    std::swap(tschchartserieslinelinetype_, other->tschchartserieslinelinetype_);
    std::swap(tschchartseriesareasymboltype_, other->tschchartseriesareasymboltype_);
    std::swap(tschchartseriesareashowsymbol_, other->tschchartseriesareashowsymbol_);
    std::swap(tschchartseriespieshowvaluelabels_, other->tschchartseriespieshowvaluelabels_);
    std::swap(tschchartseriesscattershowvaluelabels_, other->tschchartseriesscattershowvaluelabels_);
    std::swap(tschchartseriespiewedgeexplosion_, other->tschchartseriespiewedgeexplosion_);
    std::swap(tschchartseriesdefaultshowvaluelabels_, other->tschchartseriesdefaultshowvaluelabels_);
    std::swap(tschchartseriespienumberformat_, other->tschchartseriespienumberformat_);
    std::swap(tschchartseriespienumberformattype_, other->tschchartseriespienumberformattype_);
    std::swap(tschchartseriespielabelexplosion_, other->tschchartseriespielabelexplosion_);
    std::swap(tschchartseriesmixedlineshowsymbol_, other->tschchartseriesmixedlineshowsymbol_);
    std::swap(tschchartseriesmixedareashowsymbol_, other->tschchartseriesmixedareashowsymbol_);
    std::swap(tschchartseriesmixedlinesymboltype_, other->tschchartseriesmixedlinesymboltype_);
    std::swap(tschchartseriesmixedareasymboltype_, other->tschchartseriesmixedareasymboltype_);
    std::swap(tschchartseriesmixedshowvaluelabels_, other->tschchartseriesmixedshowvaluelabels_);
    std::swap(tschchartseriesmixedlinelinetype_, other->tschchartseriesmixedlinelinetype_);
    std::swap(tschchartseriesdefaultyaxisordinal_, other->tschchartseriesdefaultyaxisordinal_);
    std::swap(tschchartseriespieshowserieslabels_, other->tschchartseriespieshowserieslabels_);
    std::swap(tschchartseriesscattershowsymbol_, other->tschchartseriesscattershowsymbol_);
    std::swap(tschchartseriesscattersymboltype_, other->tschchartseriesscattersymboltype_);
    std::swap(tschchartseriesscatterlinetype_, other->tschchartseriesscatterlinetype_);
    std::swap(tschchartseriesscattershowline_, other->tschchartseriesscattershowline_);
    std::swap(tschchartseriesstackedpercentnumberformat_, other->tschchartseriesstackedpercentnumberformat_);
    std::swap(tschchartseriesdefaultseriestype_, other->tschchartseriesdefaultseriestype_);
    std::swap(tschchartseriesdefaulttrendlinetype_, other->tschchartseriesdefaulttrendlinetype_);
    std::swap(tschchartseriesdefaulttrendlineorder_, other->tschchartseriesdefaulttrendlineorder_);
    std::swap(tschchartseriesdefaulttrendlineperiod_, other->tschchartseriesdefaulttrendlineperiod_);
    std::swap(tschchartseriesdefaulttrendlineshowlabel_, other->tschchartseriesdefaulttrendlineshowlabel_);
    std::swap(tschchartseriesdefaulttrendlinelabelstring_, other->tschchartseriesdefaulttrendlinelabelstring_);
    std::swap(tschchartseriesdefaulttrendlineshowequation_, other->tschchartseriesdefaulttrendlineshowequation_);
    std::swap(tschchartseriesdefaulttrendlineshowr2value_, other->tschchartseriesdefaulttrendlineshowr2value_);
    std::swap(tschchartseriesdefaulterrorbarsetting_, other->tschchartseriesdefaulterrorbarsetting_);
    std::swap(tschchartseriesdefaulterrorbarsettingscatterx_, other->tschchartseriesdefaulterrorbarsettingscatterx_);
    std::swap(tschchartseriesdefaulterrorbartype_, other->tschchartseriesdefaulterrorbartype_);
    std::swap(tschchartseriesdefaulterrorbartypescatterx_, other->tschchartseriesdefaulterrorbartypescatterx_);
    std::swap(tschchartseriesdefaulterrorbarfixedvalue_, other->tschchartseriesdefaulterrorbarfixedvalue_);
    std::swap(tschchartseriesdefaulterrorbarfixedvaluescatterx_, other->tschchartseriesdefaulterrorbarfixedvaluescatterx_);
    std::swap(tschchartseriesdefaulterrorbarpercentvalue_, other->tschchartseriesdefaulterrorbarpercentvalue_);
    std::swap(tschchartseriesdefaulterrorbarpercentvaluescatterx_, other->tschchartseriesdefaulterrorbarpercentvaluescatterx_);
    std::swap(tschchartseriesdefaulterrorbarstddevvalue_, other->tschchartseriesdefaulterrorbarstddevvalue_);
    std::swap(tschchartseriesdefaulterrorbarstddevvaluescatterx_, other->tschchartseriesdefaulterrorbarstddevvaluescatterx_);
    std::swap(tschchartseriesdefaulterrorbarcustompositivedata_, other->tschchartseriesdefaulterrorbarcustompositivedata_);
    std::swap(tschchartseriesdefaulterrorbarcustompositivedatascatterx_, other->tschchartseriesdefaulterrorbarcustompositivedatascatterx_);
    std::swap(tschchartseriesdefaulterrorbarcustomnegativedata_, other->tschchartseriesdefaulterrorbarcustomnegativedata_);
    std::swap(tschchartseriesdefaulterrorbarcustomnegativedatascatterx_, other->tschchartseriesdefaulterrorbarcustomnegativedatascatterx_);
    std::swap(tschchartseriesdefaulttrendlineequationoffsetx_, other->tschchartseriesdefaulttrendlineequationoffsetx_);
    std::swap(tschchartseriesdefaulttrendlineequationoffsety_, other->tschchartseriesdefaulttrendlineequationoffsety_);
    std::swap(tschchartseriesdefaulttrendlinersquaredoffsetx_, other->tschchartseriesdefaulttrendlinersquaredoffsetx_);
    std::swap(tschchartseriesdefaulttrendlinersquaredoffsety_, other->tschchartseriesdefaulttrendlinersquaredoffsety_);
    std::swap(tschchartseriesdefaultshowtrendline_, other->tschchartseriesdefaultshowtrendline_);
    std::swap(tschchartseriesdefaultshowerrorbar_, other->tschchartseriesdefaultshowerrorbar_);
    std::swap(tschchartseriesdefaultshowerrorbarscatterx_, other->tschchartseriesdefaultshowerrorbarscatterx_);
    std::swap(tschchartseriesbubblesizedimension_, other->tschchartseriesbubblesizedimension_);
    std::swap(tschchartseriesbubbleshowvaluelabels_, other->tschchartseriesbubbleshowvaluelabels_);
    std::swap(tschchartseriesbubblelinetype_, other->tschchartseriesbubblelinetype_);
    std::swap(tschchartseriesbubbleshownegativedata_, other->tschchartseriesbubbleshownegativedata_);
    std::swap(tschchartseriesbubbleadjustmentscale_, other->tschchartseriesbubbleadjustmentscale_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChartSeriesNonStyleArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartSeriesNonStyleArchive_descriptor_;
  metadata.reflection = ChartSeriesNonStyleArchive_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PreUFF
}  // namespace TSCH

// @@protoc_insertion_point(global_scope)
